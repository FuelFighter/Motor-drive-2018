
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001a60  00001af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000248  0080012e  0080012e  00001b22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005647  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019b8  00000000  00000000  00007673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027cc  00000000  00000000  0000902b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e70  00000000  00000000  0000b7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015db  00000000  00000000  0000c668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ccf  00000000  00000000  0000dc43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00011912  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c6       	rjmp	.+3334   	; 0xd20 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1d c6       	rjmp	.+3130   	; 0xc6c <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c5       	rjmp	.+2810   	; 0xb3c <__vector_16>
      42:	00 00       	nop
      44:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_17>
      48:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	cc c4       	rjmp	.+2456   	; 0x9ee <__vector_21>
      56:	00 00       	nop
      58:	ac c4       	rjmp	.+2392   	; 0x9b2 <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ef c4       	rjmp	.+2526   	; 0xa60 <__vector_32>
      82:	00 00       	nop
      84:	cf c4       	rjmp	.+2462   	; 0xa24 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	51 08       	sbc	r5, r1
      96:	56 08       	sbc	r5, r6
      98:	5c 08       	sbc	r5, r12
      9a:	62 08       	sbc	r6, r2
      9c:	68 08       	sbc	r6, r8
      9e:	6d 08       	sbc	r6, r13
      a0:	73 08       	sbc	r7, r3
      a2:	79 08       	sbc	r7, r9

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e6       	ldi	r30, 0x60	; 96
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	ae 32       	cpi	r26, 0x2E	; 46
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	ae e2       	ldi	r26, 0x2E	; 46
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a6 37       	cpi	r26, 0x76	; 118
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	04 d5       	rcall	.+2568   	; 0xae4 <main>
      dc:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <f32_Integrator>
      e6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <f32_Integrator+0x1>
      ea:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <f32_Integrator+0x2>
      ee:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty, ControlType_t ctrlType){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (ctrlType == CURRENT)
     11c:	e1 10       	cpse	r14, r1
     11e:	7f c0       	rjmp	.+254    	; 0x21e <controller+0x12a>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     120:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     124:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     128:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     12c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	4e eb       	ldi	r20, 0xBE	; 190
     136:	52 e4       	ldi	r21, 0x42	; 66
     138:	c7 01       	movw	r24, r14
     13a:	b6 01       	movw	r22, r12
     13c:	0e 94 be 0c 	call	0x197c	; 0x197c <__gesf2>
     140:	88 23       	and	r24, r24
     142:	54 f4       	brge	.+20     	; 0x158 <controller+0x64>
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	48 e4       	ldi	r20, 0x48	; 72
     14a:	52 e4       	ldi	r21, 0x42	; 66
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 6f 0b 	call	0x16de	; 0x16de <__cmpsf2>
     154:	18 16       	cp	r1, r24
     156:	24 f0       	brlt	.+8      	; 0x160 <controller+0x6c>
		{
			b_saturation = true ;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
     15e:	02 c0       	rjmp	.+4      	; 0x164 <controller+0x70>
			} else {
			b_saturation = false;
     160:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
		}
		
		f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     164:	a3 01       	movw	r20, r6
     166:	92 01       	movw	r18, r4
     168:	c5 01       	movw	r24, r10
     16a:	b4 01       	movw	r22, r8
     16c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__subsf3>
     170:	6b 01       	movw	r12, r22
     172:	7c 01       	movw	r14, r24
     174:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <f32_CurrentDelta>
     178:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <f32_CurrentDelta+0x1>
     17c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <f32_CurrentDelta+0x2>
     180:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <f32_CurrentDelta+0x3>
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     184:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     188:	81 11       	cpse	r24, r1
     18a:	1c c0       	rjmp	.+56     	; 0x1c4 <controller+0xd0>
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     18c:	2a e0       	ldi	r18, 0x0A	; 10
     18e:	37 ed       	ldi	r19, 0xD7	; 215
     190:	43 e2       	ldi	r20, 0x23	; 35
     192:	5c e3       	ldi	r21, 0x3C	; 60
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     19c:	9b 01       	movw	r18, r22
     19e:	ac 01       	movw	r20, r24
     1a0:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <f32_Integrator>
     1a4:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <f32_Integrator+0x1>
     1a8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <f32_Integrator+0x2>
     1ac:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <f32_Integrator+0x3>
     1b0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__addsf3>
     1b4:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <f32_Integrator>
     1b8:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <f32_Integrator+0x1>
     1bc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <f32_Integrator+0x2>
     1c0:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c4:	23 e3       	ldi	r18, 0x33	; 51
     1c6:	33 e3       	ldi	r19, 0x33	; 51
     1c8:	43 e7       	ldi	r20, 0x73	; 115
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <f32_Integrator>
     1d0:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <f32_Integrator+0x1>
     1d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <f32_Integrator+0x2>
     1d8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <f32_Integrator+0x3>
     1dc:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     1e0:	4b 01       	movw	r8, r22
     1e2:	5c 01       	movw	r10, r24
     1e4:	29 ef       	ldi	r18, 0xF9	; 249
     1e6:	3f e0       	ldi	r19, 0x0F	; 15
     1e8:	49 e7       	ldi	r20, 0x79	; 121
     1ea:	5f e3       	ldi	r21, 0x3F	; 63
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     1f4:	9b 01       	movw	r18, r22
     1f6:	ac 01       	movw	r20, r24
     1f8:	c5 01       	movw	r24, r10
     1fa:	b4 01       	movw	r22, r8
     1fc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__addsf3>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	48 e4       	ldi	r20, 0x48	; 72
     206:	52 e4       	ldi	r21, 0x42	; 66
     208:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__addsf3>
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     21c:	12 c0       	rjmp	.+36     	; 0x242 <controller+0x14e>
	
	}else if (ctrlType == PWM)
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	e8 12       	cpse	r14, r24
     222:	0f c0       	rjmp	.+30     	; 0x242 <controller+0x14e>
	{
		f32_DutyCycleCmd = (float)*u8_duty;
     224:	f8 01       	movw	r30, r16
     226:	60 81       	ld	r22, Z
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     232:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     236:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     242:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     246:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     24a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     24e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4e eb       	ldi	r20, 0xBE	; 190
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 be 0c 	call	0x197c	; 0x197c <__gesf2>
     262:	18 16       	cp	r1, r24
     264:	6c f4       	brge	.+26     	; 0x280 <controller+0x18c>
	{
		f32_DutyCycleCmd = 95;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	ae eb       	ldi	r26, 0xBE	; 190
     26c:	b2 e4       	ldi	r27, 0x42	; 66
     26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     272:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     276:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     27a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     27e:	16 c0       	rjmp	.+44     	; 0x2ac <controller+0x1b8>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	48 e4       	ldi	r20, 0x48	; 72
     286:	52 e4       	ldi	r21, 0x42	; 66
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 6f 0b 	call	0x16de	; 0x16de <__cmpsf2>
     290:	88 23       	and	r24, r24
     292:	64 f4       	brge	.+24     	; 0x2ac <controller+0x1b8>
	{
		f32_DutyCycleCmd = 50;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a8 e4       	ldi	r26, 0x48	; 72
     29a:	b2 e4       	ldi	r27, 0x42	; 66
     29c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     2ac:	c6 e9       	ldi	r28, 0x96	; 150
     2ae:	d0 e0       	ldi	r29, 0x00	; 0
     2b0:	e8 80       	ld	r14, Y
     2b2:	f9 80       	ldd	r15, Y+1	; 0x01
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	48 ec       	ldi	r20, 0xC8	; 200
     2ba:	52 e4       	ldi	r21, 0x42	; 66
     2bc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2c0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2cc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divsf3>
     2d0:	4b 01       	movw	r8, r22
     2d2:	5c 01       	movw	r10, r24
     2d4:	b7 01       	movw	r22, r14
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c5 01       	movw	r24, r10
     2e4:	b4 01       	movw	r22, r8
     2e6:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     2ea:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fixsfsi>
     2ee:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     2f2:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     2f6:	68 81       	ld	r22, Y
     2f8:	79 81       	ldd	r23, Y+1	; 0x01
     2fa:	09 90       	ld	r0, Y+
     2fc:	d8 81       	ld	r29, Y
     2fe:	c0 2d       	mov	r28, r0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	48 ec       	ldi	r20, 0xC8	; 200
     312:	52 e4       	ldi	r21, 0x42	; 66
     314:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     318:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     31c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     320:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     324:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divsf3>
     328:	4b 01       	movw	r8, r22
     32a:	5c 01       	movw	r10, r24
     32c:	be 01       	movw	r22, r28
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     342:	9b 01       	movw	r18, r22
     344:	ac 01       	movw	r20, r24
     346:	c7 01       	movw	r24, r14
     348:	b6 01       	movw	r22, r12
     34a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__subsf3>
     34e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fixsfsi>
     352:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     356:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     35a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     35e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     362:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     366:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     36a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fixunssfsi>
     36e:	f8 01       	movw	r30, r16
     370:	60 83       	st	Z, r22
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	8f 90       	pop	r8
     38a:	7f 90       	pop	r7
     38c:	6f 90       	pop	r6
     38e:	5f 90       	pop	r5
     390:	4f 90       	pop	r4
     392:	08 95       	ret

00000394 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     394:	24 9a       	sbi	0x04, 4	; 4
     396:	08 95       	ret

00000398 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state)
     398:	88 23       	and	r24, r24
     39a:	11 f0       	breq	.+4      	; 0x3a0 <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     39c:	2c 9a       	sbi	0x05, 4	; 5
     39e:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     3a0:	2c 98       	cbi	0x05, 4	; 5
     3a2:	08 95       	ret

000003a4 <manage_motor>:
	}
}

void manage_motor(ModuleValues_t * vals)
{
     3a4:	8f 92       	push	r8
     3a6:	9f 92       	push	r9
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	ef 92       	push	r14
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
	switch(vals->motor_status)
     3b8:	8e 89       	ldd	r24, Y+22	; 0x16
     3ba:	82 30       	cpi	r24, 0x02	; 2
     3bc:	69 f0       	breq	.+26     	; 0x3d8 <manage_motor+0x34>
     3be:	30 f4       	brcc	.+12     	; 0x3cc <manage_motor+0x28>
     3c0:	88 23       	and	r24, r24
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <manage_motor+0x22>
     3c4:	50 c0       	rjmp	.+160    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	11 f1       	breq	.+68     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3ca:	5c c0       	rjmp	.+184    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	a9 f1       	breq	.+106    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3d0:	84 30       	cpi	r24, 0x04	; 4
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <manage_motor+0x32>
     3d4:	50 c0       	rjmp	.+160    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3d6:	56 c0       	rjmp	.+172    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	{
		case BRAKE :
			drivers(1); //drivers turn on
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	de df       	rcall	.-68     	; 0x398 <drivers>
			vals->b_driver_status = 1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	8a 8f       	std	Y+26, r24	; 0x1a
			controller(-vals->u8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle,vals->ctrl_type); //negative throttle cmd
     3e0:	8e 01       	movw	r16, r28
     3e2:	0d 5e       	subi	r16, 0xED	; 237
     3e4:	1f 4f       	sbci	r17, 0xFF	; 255
     3e6:	88 80       	ld	r8, Y
     3e8:	99 80       	ldd	r9, Y+1	; 0x01
     3ea:	aa 80       	ldd	r10, Y+2	; 0x02
     3ec:	bb 80       	ldd	r11, Y+3	; 0x03
     3ee:	6a 89       	ldd	r22, Y+18	; 0x12
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	71 95       	neg	r23
     3f4:	61 95       	neg	r22
     3f6:	71 09       	sbc	r23, r1
     3f8:	07 2e       	mov	r0, r23
     3fa:	00 0c       	add	r0, r0
     3fc:	88 0b       	sbc	r24, r24
     3fe:	99 0b       	sbc	r25, r25
     400:	0e 94 0e 0c 	call	0x181c	; 0x181c <__floatsisf>
     404:	eb 8c       	ldd	r14, Y+27	; 0x1b
     406:	a5 01       	movw	r20, r10
     408:	94 01       	movw	r18, r8
		break;
		
		case ACCEL :
			drivers(1); //drivers turn on
     40a:	74 de       	rcall	.-792    	; 0xf4 <controller>
     40c:	3b c0       	rjmp	.+118    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     40e:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     410:	c3 df       	rcall	.-122    	; 0x398 <drivers>
     412:	81 e0       	ldi	r24, 0x01	; 1
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type);
     414:	8a 8f       	std	Y+26, r24	; 0x1a
     416:	8e 01       	movw	r16, r28
     418:	0d 5e       	subi	r16, 0xED	; 237
     41a:	1f 4f       	sbci	r17, 0xFF	; 255
     41c:	88 80       	ld	r8, Y
     41e:	99 80       	ldd	r9, Y+1	; 0x01
     420:	aa 80       	ldd	r10, Y+2	; 0x02
     422:	bb 80       	ldd	r11, Y+3	; 0x03
     424:	6a 89       	ldd	r22, Y+18	; 0x12
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     430:	eb 8c       	ldd	r14, Y+27	; 0x1b
     432:	a5 01       	movw	r20, r10
		break;
     434:	94 01       	movw	r18, r8
		
		case IDLE :
			drivers(1); //drivers turn on
     436:	5e de       	rcall	.-836    	; 0xf4 <controller>
     438:	25 c0       	rjmp	.+74     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     43a:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     43c:	ad df       	rcall	.-166    	; 0x398 <drivers>
     43e:	81 e0       	ldi	r24, 0x01	; 1
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type); //current law running with 0 torque 
     440:	8a 8f       	std	Y+26, r24	; 0x1a
     442:	8e 01       	movw	r16, r28
     444:	0d 5e       	subi	r16, 0xED	; 237
     446:	1f 4f       	sbci	r17, 0xFF	; 255
     448:	88 80       	ld	r8, Y
     44a:	99 80       	ldd	r9, Y+1	; 0x01
     44c:	aa 80       	ldd	r10, Y+2	; 0x02
     44e:	bb 80       	ldd	r11, Y+3	; 0x03
     450:	6a 89       	ldd	r22, Y+18	; 0x12
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     45c:	eb 8c       	ldd	r14, Y+27	; 0x1b
			//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
		break;
     45e:	a5 01       	movw	r20, r10
		
		case OFF : // drivers disabled
			drivers(0);//drivers shutdown
     460:	94 01       	movw	r18, r8
     462:	48 de       	rcall	.-880    	; 0xf4 <controller>
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     464:	0f c0       	rjmp	.+30     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			vals->u8_throttle_cmd = 0;
     466:	80 e0       	ldi	r24, 0x00	; 0
			vals->u8_duty_cycle = 50;
     468:	97 df       	rcall	.-210    	; 0x398 <drivers>
     46a:	1a 8e       	std	Y+26, r1	; 0x1a
		break;
     46c:	3a de       	rcall	.-908    	; 0xe2 <reset_I>
		
		case ERR :
			drivers(0);//drivers shutdown
     46e:	1a 8a       	std	Y+18, r1	; 0x12
     470:	82 e3       	ldi	r24, 0x32	; 50
     472:	8b 8b       	std	Y+19, r24	; 0x13
			vals->b_driver_status = 0;
     474:	07 c0       	rjmp	.+14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			reset_I(); //reset integrator
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	8f df       	rcall	.-226    	; 0x398 <drivers>
			vals->u8_throttle_cmd = 0;
     47a:	1a 8e       	std	Y+26, r1	; 0x1a
			vals->u8_duty_cycle = 50 ;
     47c:	32 de       	rcall	.-924    	; 0xe2 <reset_I>
     47e:	1a 8a       	std	Y+18, r1	; 0x12
		break;
	}
     480:	82 e3       	ldi	r24, 0x32	; 50
     482:	8b 8b       	std	Y+19, r24	; 0x13
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ef 90       	pop	r14
     48e:	bf 90       	pop	r11
     490:	af 90       	pop	r10
     492:	9f 90       	pop	r9
     494:	8f 90       	pop	r8
     496:	08 95       	ret

00000498 <SPI_handler_0>:
 		printf("%i",vals.u8_throttle_cmd*1000);
 	}
	printf(",");
	*/
	printf("\n");
}
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	6a e3       	ldi	r22, 0x3A	; 58
     4a0:	71 e0       	ldi	r23, 0x01	; 1
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	f6 d5       	rcall	.+3052   	; 0x1092 <Set_ADC_Channel_ext>
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	43 e0       	ldi	r20, 0x03	; 3
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	67 e3       	ldi	r22, 0x37	; 55
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	8a e3       	ldi	r24, 0x3A	; 58
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <spi_trancieve>
     4b8:	e7 e3       	ldi	r30, 0x37	; 55
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	61 81       	ldd	r22, Z+1	; 0x01
     4be:	6f 71       	andi	r22, 0x1F	; 31
     4c0:	61 83       	std	Z+1, r22	; 0x01
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	76 2f       	mov	r23, r22
     4c6:	66 27       	eor	r22, r22
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	68 2b       	or	r22, r24
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	ce 01       	movw	r24, r28
     4d0:	3e d4       	rcall	.+2172   	; 0xd4e <handle_current_sensor>
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <SPI_handler_1>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	ec 01       	movw	r28, r24
     4de:	6a e3       	ldi	r22, 0x3A	; 58
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	d6 d5       	rcall	.+2988   	; 0x1092 <Set_ADC_Channel_ext>
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	43 e0       	ldi	r20, 0x03	; 3
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	67 e3       	ldi	r22, 0x37	; 55
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	8a e3       	ldi	r24, 0x3A	; 58
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <spi_trancieve>
     4f8:	e7 e3       	ldi	r30, 0x37	; 55
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	61 81       	ldd	r22, Z+1	; 0x01
     4fe:	6f 71       	andi	r22, 0x1F	; 31
     500:	61 83       	std	Z+1, r22	; 0x01
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	76 2f       	mov	r23, r22
     506:	66 27       	eor	r22, r22
     508:	82 81       	ldd	r24, Z+2	; 0x02
     50a:	68 2b       	or	r22, r24
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	ce 01       	movw	r24, r28
     510:	1e d4       	rcall	.+2108   	; 0xd4e <handle_current_sensor>
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <SPI_handler_2>:
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	6a e3       	ldi	r22, 0x3A	; 58
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	b6 d5       	rcall	.+2924   	; 0x1092 <Set_ADC_Channel_ext>
     526:	21 e0       	ldi	r18, 0x01	; 1
     528:	43 e0       	ldi	r20, 0x03	; 3
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	67 e3       	ldi	r22, 0x37	; 55
     52e:	71 e0       	ldi	r23, 0x01	; 1
     530:	8a e3       	ldi	r24, 0x3A	; 58
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 aa 0a 	call	0x1554	; 0x1554 <spi_trancieve>
     538:	e7 e3       	ldi	r30, 0x37	; 55
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	61 81       	ldd	r22, Z+1	; 0x01
     53e:	6f 71       	andi	r22, 0x1F	; 31
     540:	61 83       	std	Z+1, r22	; 0x01
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	76 2f       	mov	r23, r22
     546:	66 27       	eor	r22, r22
     548:	82 81       	ldd	r24, Z+2	; 0x02
     54a:	68 2b       	or	r22, r24
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     554:	23 e3       	ldi	r18, 0x33	; 51
     556:	33 e3       	ldi	r19, 0x33	; 51
     558:	44 e8       	ldi	r20, 0x84	; 132
     55a:	52 e4       	ldi	r21, 0x42	; 66
     55c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divsf3>
     560:	24 ea       	ldi	r18, 0xA4	; 164
     562:	30 e7       	ldi	r19, 0x70	; 112
     564:	4d eb       	ldi	r20, 0xBD	; 189
     566:	5e e3       	ldi	r21, 0x3E	; 62
     568:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__subsf3>
     56c:	68 83       	st	Y, r22
     56e:	79 83       	std	Y+1, r23	; 0x01
     570:	8a 83       	std	Y+2, r24	; 0x02
     572:	9b 83       	std	Y+3, r25	; 0x03
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <SPI_handler_4>:
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
     580:	6a e3       	ldi	r22, 0x3A	; 58
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	84 e0       	ldi	r24, 0x04	; 4
     586:	85 d5       	rcall	.+2826   	; 0x1092 <Set_ADC_Channel_ext>
     588:	21 e0       	ldi	r18, 0x01	; 1
     58a:	43 e0       	ldi	r20, 0x03	; 3
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	67 e3       	ldi	r22, 0x37	; 55
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	8a e3       	ldi	r24, 0x3A	; 58
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	de d7       	rcall	.+4028   	; 0x1554 <spi_trancieve>
     598:	e7 e3       	ldi	r30, 0x37	; 55
     59a:	f1 e0       	ldi	r31, 0x01	; 1
     59c:	61 81       	ldd	r22, Z+1	; 0x01
     59e:	6f 71       	andi	r22, 0x1F	; 31
     5a0:	61 83       	std	Z+1, r22	; 0x01
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	76 2f       	mov	r23, r22
     5a6:	66 27       	eor	r22, r22
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	68 2b       	or	r22, r24
     5ac:	ce 01       	movw	r24, r28
     5ae:	4b d4       	rcall	.+2198   	; 0xe46 <handle_temp_sensor>
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <handle_can>:
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	8c 01       	movw	r16, r24
     5c0:	eb 01       	movw	r28, r22
     5c2:	cb 01       	movw	r24, r22
     5c4:	e2 d6       	rcall	.+3524   	; 0x138a <can_read_message_if_new>
     5c6:	88 23       	and	r24, r24
     5c8:	09 f4       	brne	.+2      	; 0x5cc <handle_can+0x16>
     5ca:	47 c0       	rjmp	.+142    	; 0x65a <handle_can+0xa4>
     5cc:	f8 01       	movw	r30, r16
     5ce:	86 89       	ldd	r24, Z+22	; 0x16
     5d0:	84 30       	cpi	r24, 0x04	; 4
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <handle_can+0x20>
     5d4:	42 c0       	rjmp	.+132    	; 0x65a <handle_can+0xa4>
     5d6:	88 81       	ld	r24, Y
     5d8:	99 81       	ldd	r25, Y+1	; 0x01
     5da:	80 33       	cpi	r24, 0x30	; 48
     5dc:	92 40       	sbci	r25, 0x02	; 2
     5de:	e9 f5       	brne	.+122    	; 0x65a <handle_can+0xa4>
     5e0:	84 e1       	ldi	r24, 0x14	; 20
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	f8 01       	movw	r30, r16
     5e6:	95 8b       	std	Z+21, r25	; 0x15
     5e8:	84 8b       	std	Z+20, r24	; 0x14
     5ea:	8e 81       	ldd	r24, Y+6	; 0x06
     5ec:	8b 30       	cpi	r24, 0x0B	; 11
     5ee:	e0 f0       	brcs	.+56     	; 0x628 <handle_can+0x72>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	86 8b       	std	Z+22, r24	; 0x16
     5f4:	83 8d       	ldd	r24, Z+27	; 0x1b
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	21 f4       	brne	.+8      	; 0x602 <handle_can+0x4c>
     5fa:	8e 81       	ldd	r24, Y+6	; 0x06
     5fc:	88 5d       	subi	r24, 0xD8	; 216
     5fe:	83 8b       	std	Z+19, r24	; 0x13
     600:	2c c0       	rjmp	.+88     	; 0x65a <handle_can+0xa4>
     602:	81 11       	cpse	r24, r1
     604:	2a c0       	rjmp	.+84     	; 0x65a <handle_can+0xa4>
     606:	6e 81       	ldd	r22, Y+6	; 0x06
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 0e 0c 	call	0x181c	; 0x181c <__floatsisf>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e2       	ldi	r20, 0x20	; 32
     618:	51 e4       	ldi	r21, 0x41	; 65
     61a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divsf3>
     61e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fixunssfsi>
     622:	f8 01       	movw	r30, r16
     624:	62 8b       	std	Z+18, r22	; 0x12
     626:	19 c0       	rjmp	.+50     	; 0x65a <handle_can+0xa4>
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	f8 01       	movw	r30, r16
     62c:	86 8b       	std	Z+22, r24	; 0x16
     62e:	12 8a       	std	Z+18, r1	; 0x12
     630:	8d 81       	ldd	r24, Y+5	; 0x05
     632:	8a 31       	cpi	r24, 0x1A	; 26
     634:	90 f0       	brcs	.+36     	; 0x65a <handle_can+0xa4>
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	86 8b       	std	Z+22, r24	; 0x16
     63a:	6d 81       	ldd	r22, Y+5	; 0x05
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 0e 0c 	call	0x181c	; 0x181c <__floatsisf>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e2       	ldi	r20, 0x20	; 32
     64c:	51 e4       	ldi	r21, 0x41	; 65
     64e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divsf3>
     652:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fixunssfsi>
     656:	f8 01       	movw	r30, r16
     658:	62 8b       	std	Z+18, r22	; 0x12
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <handle_motor_status_can_msg>:
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	ed ed       	ldi	r30, 0xDD	; 221
     672:	f2 e0       	ldi	r31, 0x02	; 2
     674:	20 e5       	ldi	r18, 0x50	; 80
     676:	34 e0       	ldi	r19, 0x04	; 4
     678:	31 83       	std	Z+1, r19	; 0x01
     67a:	20 83       	st	Z, r18
     67c:	28 e0       	ldi	r18, 0x08	; 8
     67e:	22 83       	std	Z+2, r18	; 0x02
     680:	fc 01       	movw	r30, r24
     682:	20 81       	ld	r18, Z
     684:	22 23       	and	r18, r18
     686:	61 f1       	breq	.+88     	; 0x6e0 <handle_motor_status_can_msg+0x7c>
     688:	eb 01       	movw	r28, r22
     68a:	8c 01       	movw	r16, r24
     68c:	0f 2e       	mov	r0, r31
     68e:	fd ed       	ldi	r31, 0xDD	; 221
     690:	ef 2e       	mov	r14, r31
     692:	f2 e0       	ldi	r31, 0x02	; 2
     694:	ff 2e       	mov	r15, r31
     696:	f0 2d       	mov	r31, r0
     698:	8e 89       	ldd	r24, Y+22	; 0x16
     69a:	f7 01       	movw	r30, r14
     69c:	83 83       	std	Z+3, r24	; 0x03
     69e:	14 82       	std	Z+4, r1	; 0x04
     6a0:	68 81       	ld	r22, Y
     6a2:	79 81       	ldd	r23, Y+1	; 0x01
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	9b 81       	ldd	r25, Y+3	; 0x03
     6a8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fixunssfsi>
     6ac:	f7 01       	movw	r30, r14
     6ae:	76 83       	std	Z+6, r23	; 0x06
     6b0:	65 83       	std	Z+5, r22	; 0x05
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4a e7       	ldi	r20, 0x7A	; 122
     6b8:	54 e4       	ldi	r21, 0x44	; 68
     6ba:	6c 85       	ldd	r22, Y+12	; 0x0c
     6bc:	7d 85       	ldd	r23, Y+13	; 0x0d
     6be:	8e 85       	ldd	r24, Y+14	; 0x0e
     6c0:	9f 85       	ldd	r25, Y+15	; 0x0f
     6c2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     6c6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fixunssfsi>
     6ca:	f7 01       	movw	r30, r14
     6cc:	70 87       	std	Z+8, r23	; 0x08
     6ce:	67 83       	std	Z+7, r22	; 0x07
     6d0:	89 89       	ldd	r24, Y+17	; 0x11
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	92 87       	std	Z+10, r25	; 0x0a
     6d6:	81 87       	std	Z+9, r24	; 0x09
     6d8:	c7 01       	movw	r24, r14
     6da:	9a d6       	rcall	.+3380   	; 0x1410 <can_send_message>
     6dc:	f8 01       	movw	r30, r16
     6de:	10 82       	st	Z, r1
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(ModuleValues_t vals)
{	
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     6f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	c9 f0       	breq	.+50     	; 0x72e <manage_LEDs+0x40>
     6fc:	28 f4       	brcc	.+10     	; 0x708 <manage_LEDs+0x1a>
     6fe:	88 23       	and	r24, r24
     700:	41 f0       	breq	.+16     	; 0x712 <manage_LEDs+0x24>
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	69 f0       	breq	.+26     	; 0x720 <manage_LEDs+0x32>
     706:	27 c0       	rjmp	.+78     	; 0x756 <manage_LEDs+0x68>
     708:	83 30       	cpi	r24, 0x03	; 3
     70a:	c1 f0       	breq	.+48     	; 0x73c <manage_LEDs+0x4e>
     70c:	84 30       	cpi	r24, 0x04	; 4
     70e:	e9 f0       	breq	.+58     	; 0x74a <manage_LEDs+0x5c>
     710:	22 c0       	rjmp	.+68     	; 0x756 <manage_LEDs+0x68>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     712:	80 e4       	ldi	r24, 0x40	; 64
			rgbled_turn_off(LED_RED);
     714:	fb d6       	rcall	.+3574   	; 0x150c <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     716:	80 e2       	ldi	r24, 0x20	; 32
     718:	f9 d6       	rcall	.+3570   	; 0x150c <rgbled_turn_off>
		break ;
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     71a:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     71c:	01 d7       	rcall	.+3586   	; 0x1520 <rgbled_turn_on>
     71e:	1b c0       	rjmp	.+54     	; 0x756 <manage_LEDs+0x68>
			rgbled_toggle(LED_GREEN);
     720:	80 e2       	ldi	r24, 0x20	; 32
		break;
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     722:	f4 d6       	rcall	.+3560   	; 0x150c <rgbled_turn_off>
     724:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     726:	f2 d6       	rcall	.+3556   	; 0x150c <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     728:	80 e4       	ldi	r24, 0x40	; 64
		break;
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     72a:	ff d6       	rcall	.+3582   	; 0x152a <rgbled_toggle>
			rgbled_turn_off(LED_BLUE);
     72c:	14 c0       	rjmp	.+40     	; 0x756 <manage_LEDs+0x68>
     72e:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_on(LED_GREEN);
     730:	ed d6       	rcall	.+3546   	; 0x150c <rgbled_turn_off>
     732:	80 e8       	ldi	r24, 0x80	; 128
     734:	eb d6       	rcall	.+3542   	; 0x150c <rgbled_turn_off>
		break;
     736:	80 e4       	ldi	r24, 0x40	; 64
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     738:	f8 d6       	rcall	.+3568   	; 0x152a <rgbled_toggle>
     73a:	0d c0       	rjmp	.+26     	; 0x756 <manage_LEDs+0x68>
     73c:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_off(LED_BLUE);
     73e:	e6 d6       	rcall	.+3532   	; 0x150c <rgbled_turn_off>
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	e4 d6       	rcall	.+3528   	; 0x150c <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     744:	80 e4       	ldi	r24, 0x40	; 64
     746:	ec d6       	rcall	.+3544   	; 0x1520 <rgbled_turn_on>
     748:	06 c0       	rjmp	.+12     	; 0x756 <manage_LEDs+0x68>
		break;
	}
     74a:	80 e4       	ldi	r24, 0x40	; 64
     74c:	df d6       	rcall	.+3518   	; 0x150c <rgbled_turn_off>
     74e:	80 e8       	ldi	r24, 0x80	; 128
     750:	dd d6       	rcall	.+3514   	; 0x150c <rgbled_turn_off>
     752:	80 e2       	ldi	r24, 0x20	; 32
     754:	e5 d6       	rcall	.+3530   	; 0x1520 <rgbled_turn_on>
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     75c:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     75e:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     760:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     762:	ea e6       	ldi	r30, 0x6A	; 106
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	8c 60       	ori	r24, 0x0C	; 12
     76a:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     76c:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     76e:	ed 9a       	sbi	0x1d, 5	; 29
     770:	08 95       	ret

00000772 <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint16_t u16_period) // period in ms
{
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	1f 92       	push	r1
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	6c 01       	movw	r12, r24
     792:	7b 01       	movw	r14, r22
     794:	8a 01       	movw	r16, r20
	volatile uint8_t u8_new_speed = (uint8_t)(((float)*u16_counter)*D_WHEEL*PI/N_MAG/u16_period); // speed calculated in mm/ms
     796:	fb 01       	movw	r30, r22
     798:	60 81       	ld	r22, Z
     79a:	71 81       	ldd	r23, Z+1	; 0x01
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	4a ef       	ldi	r20, 0xFA	; 250
     7aa:	53 e4       	ldi	r21, 0x43	; 67
     7ac:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     7b0:	23 ec       	ldi	r18, 0xC3	; 195
     7b2:	35 ef       	ldi	r19, 0xF5	; 245
     7b4:	48 e4       	ldi	r20, 0x48	; 72
     7b6:	50 e4       	ldi	r21, 0x40	; 64
     7b8:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     7bc:	4b 01       	movw	r8, r22
     7be:	5c 01       	movw	r10, r24
     7c0:	b8 01       	movw	r22, r16
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__floatunsisf>
     7ca:	9b 01       	movw	r18, r22
     7cc:	ac 01       	movw	r20, r24
     7ce:	c5 01       	movw	r24, r10
     7d0:	b4 01       	movw	r22, r8
     7d2:	89 d7       	rcall	.+3858   	; 0x16e6 <__divsf3>
     7d4:	f5 d7       	rcall	.+4074   	; 0x17c0 <__fixunssfsi>
     7d6:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	f6 01       	movw	r30, r12
     7dc:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     7de:	f7 01       	movw	r30, r14
     7e0:	11 82       	std	Z+1, r1	; 0x01
     7e2:	10 82       	st	Z, r1
}
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	bf 90       	pop	r11
     7f8:	af 90       	pop	r10
     7fa:	9f 90       	pop	r9
     7fc:	8f 90       	pop	r8
     7fe:	08 95       	ret

00000800 <pwm_init>:

#include "pwm.h"
#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     804:	8e b1       	in	r24, 0x0e	; 14
     806:	87 7e       	andi	r24, 0xE7	; 231
     808:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     80a:	8d b1       	in	r24, 0x0d	; 13
     80c:	88 61       	ori	r24, 0x18	; 24
     80e:	8d b9       	out	0x0d, r24	; 13
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
		
	}else{//UNIPOLAR
		
		//Timer 3 phase correct pwm, TOP at ICR (mode 10)
		TCCR3B |= (1<<WGM33);
     810:	a1 e9       	ldi	r26, 0x91	; 145
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	8c 91       	ld	r24, X
     816:	80 61       	ori	r24, 0x10	; 16
     818:	8c 93       	st	X, r24
		TCCR3B &= ~(1<<WGM32);
     81a:	8c 91       	ld	r24, X
     81c:	87 7f       	andi	r24, 0xF7	; 247
     81e:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     820:	e0 e9       	ldi	r30, 0x90	; 144
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	82 60       	ori	r24, 0x02	; 2
     828:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     82a:	80 81       	ld	r24, Z
     82c:	8e 7f       	andi	r24, 0xFE	; 254
     82e:	80 83       	st	Z, r24
		
		// Set OC3A on Compare Match when up-counting. clear OC3A on Compare Match when downcounting.
		TCCR3A |= (1<<COM3A1);
     830:	80 81       	ld	r24, Z
     832:	80 68       	ori	r24, 0x80	; 128
     834:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     836:	80 81       	ld	r24, Z
     838:	8f 7b       	andi	r24, 0xBF	; 191
     83a:	80 83       	st	Z, r24
		
		// Set OC3B on Compare Match when up-counting. Clear OC3B on Compare Match when downcounting.
		TCCR3A |= (1<<COM3B1);
     83c:	80 81       	ld	r24, Z
     83e:	80 62       	ori	r24, 0x20	; 32
     840:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3B0);
     842:	80 81       	ld	r24, Z
     844:	8f 7e       	andi	r24, 0xEF	; 239
     846:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		TCCR3B |= (1<<CS30);
     848:	8c 91       	ld	r24, X
     84a:	81 60       	ori	r24, 0x01	; 1
     84c:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     84e:	8c 91       	ld	r24, X
     850:	89 7f       	andi	r24, 0xF9	; 249
     852:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x85; //30kHz = 85
     854:	c6 e9       	ldi	r28, 0x96	; 150
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	85 e8       	ldi	r24, 0x85	; 133
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	99 83       	std	Y+1, r25	; 0x01
     85e:	88 83       	st	Y, r24
		
		//initialising compare registers at Duty cycle 50%
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3
     860:	68 81       	ld	r22, Y
     862:	79 81       	ldd	r23, Y+1	; 0x01
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	d7 d7       	rcall	.+4014   	; 0x1818 <__floatunsisf>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	5f e3       	ldi	r21, 0x3F	; 63
     872:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3>
     876:	9f d7       	rcall	.+3902   	; 0x17b6 <__fixsfsi>
     878:	e8 e9       	ldi	r30, 0x98	; 152
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	71 83       	std	Z+1, r23	; 0x01
     87e:	60 83       	st	Z, r22
		OCR3B = ICR3-OCR3A ; //PWM_PE4
     880:	88 81       	ld	r24, Y
     882:	99 81       	ldd	r25, Y+1	; 0x01
     884:	20 81       	ld	r18, Z
     886:	31 81       	ldd	r19, Z+1	; 0x01
     888:	82 1b       	sub	r24, r18
     88a:	93 0b       	sbc	r25, r19
     88c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     890:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     89a:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tx0_Head>
     89e:	9f 5f       	subi	r25, 0xFF	; 255
     8a0:	9f 71       	andi	r25, 0x1F	; 31
     8a2:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <tx0_Tail>
     8a6:	92 17       	cp	r25, r18
     8a8:	e1 f3       	breq	.-8      	; 0x8a2 <uart0_putc+0x8>
     8aa:	e9 2f       	mov	r30, r25
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	e0 5b       	subi	r30, 0xB0	; 176
     8b0:	fc 4f       	sbci	r31, 0xFC	; 252
     8b2:	80 83       	st	Z, r24
     8b4:	2f b7       	in	r18, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <tx0_Head>
     8bc:	e1 ec       	ldi	r30, 0xC1	; 193
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	80 62       	ori	r24, 0x20	; 32
     8c4:	80 83       	st	Z, r24
     8c6:	2f bf       	out	0x3f, r18	; 63
     8c8:	08 95       	ret

000008ca <uart1_putc>:
     8ca:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <tx1_Head>
     8ce:	9f 5f       	subi	r25, 0xFF	; 255
     8d0:	9f 71       	andi	r25, 0x1F	; 31
     8d2:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <tx1_Tail>
     8d6:	92 17       	cp	r25, r18
     8d8:	e1 f3       	breq	.-8      	; 0x8d2 <uart1_putc+0x8>
     8da:	e9 2f       	mov	r30, r25
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	e5 5f       	subi	r30, 0xF5	; 245
     8e0:	fc 4f       	sbci	r31, 0xFC	; 252
     8e2:	80 83       	st	Z, r24
     8e4:	2f b7       	in	r18, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <tx1_Head>
     8ec:	e9 ec       	ldi	r30, 0xC9	; 201
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	80 62       	ori	r24, 0x20	; 32
     8f4:	80 83       	st	Z, r24
     8f6:	2f bf       	out	0x3f, r18	; 63
     8f8:	08 95       	ret

000008fa <uart_putchar>:
     8fa:	cf 93       	push	r28
     8fc:	c8 2f       	mov	r28, r24
     8fe:	fb 01       	movw	r30, r22
     900:	84 85       	ldd	r24, Z+12	; 0x0c
     902:	95 85       	ldd	r25, Z+13	; 0x0d
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	39 f0       	breq	.+14     	; 0x916 <uart_putchar+0x1c>
     908:	ca 30       	cpi	r28, 0x0A	; 10
     90a:	11 f4       	brne	.+4      	; 0x910 <uart_putchar+0x16>
     90c:	8d e0       	ldi	r24, 0x0D	; 13
     90e:	c5 df       	rcall	.-118    	; 0x89a <uart0_putc>
     910:	8c 2f       	mov	r24, r28
     912:	c3 df       	rcall	.-122    	; 0x89a <uart0_putc>
     914:	06 c0       	rjmp	.+12     	; 0x922 <uart_putchar+0x28>
     916:	ca 30       	cpi	r28, 0x0A	; 10
     918:	11 f4       	brne	.+4      	; 0x91e <uart_putchar+0x24>
     91a:	8d e0       	ldi	r24, 0x0D	; 13
     91c:	d6 df       	rcall	.-84     	; 0x8ca <uart1_putc>
     91e:	8c 2f       	mov	r24, r28
     920:	d4 df       	rcall	.-88     	; 0x8ca <uart1_putc>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <uart0_getData>:
     92a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rx0_Tail>
     92e:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <rx0_Head>
     932:	89 17       	cp	r24, r25
     934:	61 f0       	breq	.+24     	; 0x94e <uart0_getData+0x24>
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	8f 71       	andi	r24, 0x1F	; 31
     93a:	e8 2f       	mov	r30, r24
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	e8 51       	subi	r30, 0x18	; 24
     940:	fd 4f       	sbci	r31, 0xFD	; 253
     942:	90 81       	ld	r25, Z
     944:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <rx0_Tail>
     948:	89 2f       	mov	r24, r25
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	08 95       	ret
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	9f ef       	ldi	r25, 0xFF	; 255
     952:	08 95       	ret

00000954 <uart1_getData>:
     954:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <rx1_Tail>
     958:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <rx1_Head>
     95c:	89 17       	cp	r24, r25
     95e:	61 f0       	breq	.+24     	; 0x978 <uart1_getData+0x24>
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	8f 71       	andi	r24, 0x1F	; 31
     964:	e8 2f       	mov	r30, r24
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	e4 5d       	subi	r30, 0xD4	; 212
     96a:	fc 4f       	sbci	r31, 0xFC	; 252
     96c:	90 81       	ld	r25, Z
     96e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <rx1_Tail>
     972:	89 2f       	mov	r24, r25
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	08 95       	ret
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	9f ef       	ldi	r25, 0xFF	; 255
     97c:	08 95       	ret

0000097e <uart_getchar>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	fc 01       	movw	r30, r24
     984:	84 85       	ldd	r24, Z+12	; 0x0c
     986:	95 85       	ldd	r25, Z+13	; 0x0d
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	41 f0       	breq	.+16     	; 0x99c <uart_getchar+0x1e>
     98c:	ce df       	rcall	.-100    	; 0x92a <uart0_getData>
     98e:	ec 01       	movw	r28, r24
     990:	99 23       	and	r25, r25
     992:	e4 f3       	brlt	.-8      	; 0x98c <uart_getchar+0xe>
     994:	82 df       	rcall	.-252    	; 0x89a <uart0_putc>
     996:	ce 01       	movw	r24, r28
     998:	99 27       	eor	r25, r25
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <uart_getchar+0x2c>
     99c:	db df       	rcall	.-74     	; 0x954 <uart1_getData>
     99e:	ec 01       	movw	r28, r24
     9a0:	99 23       	and	r25, r25
     9a2:	e4 f3       	brlt	.-8      	; 0x99c <uart_getchar+0x1e>
     9a4:	92 df       	rcall	.-220    	; 0x8ca <uart1_putc>
     9a6:	ce 01       	movw	r24, r28
     9a8:	99 27       	eor	r25, r25
     9aa:	99 27       	eor	r25, r25
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     9b2:	0f 93       	push	r16
     9b4:	0f b7       	in	r16, 0x3f	; 63
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
     9ba:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <tx0_Tail>
     9be:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <tx0_Head>
     9c2:	e3 95       	inc	r30
     9c4:	ef 71       	andi	r30, 0x1F	; 31
     9c6:	ef 13       	cpse	r30, r31
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <USART0_TX_CONTINUE>
     9ca:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     9ce:	ff 7d       	andi	r31, 0xDF	; 223
     9d0:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

000009d4 <USART0_TX_CONTINUE>:
     9d4:	e0 93 09 03 	sts	0x0309, r30	; 0x800309 <tx0_Tail>
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	e0 5b       	subi	r30, 0xB0	; 176
     9dc:	fc 4f       	sbci	r31, 0xFC	; 252
     9de:	e0 81       	ld	r30, Z
     9e0:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

000009e4 <USART0_TX_EXIT>:
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	0f bf       	out	0x3f, r16	; 63
     9ea:	0f 91       	pop	r16
     9ec:	18 95       	reti

000009ee <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     9ee:	0f 93       	push	r16
     9f0:	0f b7       	in	r16, 0x3f	; 63
     9f2:	9f 93       	push	r25
     9f4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
     9fc:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <rx0_Head>
     a00:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <rx0_Tail>
     a04:	e3 95       	inc	r30
     a06:	ef 71       	andi	r30, 0x1F	; 31
     a08:	fe 17       	cp	r31, r30
     a0a:	31 f0       	breq	.+12     	; 0xa18 <USART0_RX_EXIT>
     a0c:	e0 93 4c 03 	sts	0x034C, r30	; 0x80034c <rx0_Head>
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	e8 51       	subi	r30, 0x18	; 24
     a14:	fd 4f       	sbci	r31, 0xFD	; 253
     a16:	90 83       	st	Z, r25

00000a18 <USART0_RX_EXIT>:
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	9f 91       	pop	r25
     a1e:	0f bf       	out	0x3f, r16	; 63
     a20:	0f 91       	pop	r16
     a22:	18 95       	reti

00000a24 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     a24:	0f 93       	push	r16
     a26:	0f b7       	in	r16, 0x3f	; 63
     a28:	ef 93       	push	r30
     a2a:	ff 93       	push	r31
     a2c:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <tx1_Tail>
     a30:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <tx1_Head>
     a34:	e3 95       	inc	r30
     a36:	ef 71       	andi	r30, 0x1F	; 31
     a38:	ef 13       	cpse	r30, r31
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <USART1_TX_CONTINUE>
     a3c:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     a40:	ff 7d       	andi	r31, 0xDF	; 223
     a42:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000a46 <USART1_TX_CONTINUE>:
     a46:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <tx1_Tail>
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	e5 5f       	subi	r30, 0xF5	; 245
     a4e:	fc 4f       	sbci	r31, 0xFC	; 252
     a50:	e0 81       	ld	r30, Z
     a52:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000a56 <USART1_TX_EXIT>:
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	0f bf       	out	0x3f, r16	; 63
     a5c:	0f 91       	pop	r16
     a5e:	18 95       	reti

00000a60 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     a60:	0f 93       	push	r16
     a62:	0f b7       	in	r16, 0x3f	; 63
     a64:	9f 93       	push	r25
     a66:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
     a6e:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <rx1_Head>
     a72:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <rx1_Tail>
     a76:	e3 95       	inc	r30
     a78:	ef 71       	andi	r30, 0x1F	; 31
     a7a:	fe 17       	cp	r31, r30
     a7c:	31 f0       	breq	.+12     	; 0xa8a <USART1_RX_EXIT>
     a7e:	e0 93 4e 03 	sts	0x034E, r30	; 0x80034e <rx1_Head>
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	e4 5d       	subi	r30, 0xD4	; 212
     a86:	fc 4f       	sbci	r31, 0xFC	; 252
     a88:	90 83       	st	Z, r25

00000a8a <USART1_RX_EXIT>:
     a8a:	ff 91       	pop	r31
     a8c:	ef 91       	pop	r30
     a8e:	9f 91       	pop	r25
     a90:	0f bf       	out	0x3f, r16	; 63
     a92:	0f 91       	pop	r16
     a94:	18 95       	reti

00000a96 <timer1_init_ts>:
//for speed
static uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     a96:	e1 e8       	ldi	r30, 0x81	; 129
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	83 60       	ori	r24, 0x03	; 3
     a9e:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     aa0:	80 81       	ld	r24, Z
     aa2:	88 60       	ori	r24, 0x08	; 8
     aa4:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     aa6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     aaa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     aae:	ef e6       	ldi	r30, 0x6F	; 111
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	82 60       	ori	r24, 0x02	; 2
     ab6:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     ab8:	8d e7       	ldi	r24, 0x7D	; 125
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ac0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ac4:	08 95       	ret

00000ac6 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     ac6:	84 b5       	in	r24, 0x24	; 36
     ac8:	85 60       	ori	r24, 0x05	; 5
     aca:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     acc:	84 b5       	in	r24, 0x24	; 36
     ace:	88 60       	ori	r24, 0x08	; 8
     ad0:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     ad2:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     ad4:	ee e6       	ldi	r30, 0x6E	; 110
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
     ade:	87 e2       	ldi	r24, 0x27	; 39
     ae0:	87 bd       	out	0x27, r24	; 39
     ae2:	08 95       	ret

00000ae4 <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
     ae4:	f8 94       	cli
     ae6:	16 d5       	rcall	.+2604   	; 0x1514 <rgbled_init>
	can_init(0,0);
     ae8:	8b de       	rcall	.-746    	; 0x800 <pwm_init>
     aea:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     aec:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
     af2:	f6 d3       	rcall	.+2028   	; 0x12e0 <can_init>
     af4:	d0 df       	rcall	.-96     	; 0xa96 <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     af6:	e7 df       	rcall	.-50     	; 0xac6 <timer0_init_ts>
     af8:	31 de       	rcall	.-926    	; 0x75c <speed_init>
     afa:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     afc:	1a d5       	rcall	.+2612   	; 0x1532 <spi_init>
     afe:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     b02:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     b06:	88 e9       	ldi	r24, 0x98	; 152
     b08:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     b0c:	e0 e7       	ldi	r30, 0x70	; 112
     b0e:	f3 e0       	ldi	r31, 0x03	; 3
     b10:	84 e0       	ldi	r24, 0x04	; 4
     b12:	91 e0       	ldi	r25, 0x01	; 1
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     b14:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
     b16:	82 83       	std	Z+2, r24	; 0x02
     b18:	91 83       	std	Z+1, r25	; 0x01
	
	sei();
     b1a:	80 83       	st	Z, r24
	
    while (1){
		
		if (CTRL_MODE)
		{//CAN bus ctrl mode
			handle_motor_status_can_msg(&send_can, &ComValues); //send CAN
     b1c:	3b dc       	rcall	.-1930   	; 0x394 <drivers_init>
     b1e:	78 94       	sei
     b20:	62 e1       	ldi	r22, 0x12	; 18
     b22:	71 e0       	ldi	r23, 0x01	; 1
			handle_can(&ComValues, &rxFrame); //receive CAN
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	9d dd       	rcall	.-1222   	; 0x664 <handle_motor_status_can_msg>
     b2a:	62 ed       	ldi	r22, 0xD2	; 210
     b2c:	72 e0       	ldi	r23, 0x02	; 2
     b2e:	82 e1       	ldi	r24, 0x12	; 18
				send_uart(ComValues);
				b_send_uart = 0;
			}
			receive_uart(&ComValues);
		}		
		err_check(&ComValues); //verifying current, temperature and voltage
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	41 dd       	rcall	.-1406   	; 0x5b6 <handle_can>
     b34:	82 e1       	ldi	r24, 0x12	; 18
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	3f d2       	rcall	.+1150   	; 0xfb8 <err_check>
     b3a:	f2 cf       	rjmp	.-28     	; 0xb20 <main+0x3c>

00000b3c <__vector_16>:
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	0b b6       	in	r0, 0x3b	; 59
     b48:	0f 92       	push	r0
     b4a:	ef 92       	push	r14
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
	
	if (systic_counter_fast == 1) // every 10ms
     b68:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <systic_counter_fast>
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	61 f5       	brne	.+88     	; 0xbc8 <__vector_16+0x8c>
	{
		b_send_uart = 1;
     b70:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <b_send_uart>
		if (ComValues.u16_watchdog == 0 && CTRL_MODE) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
     b74:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ComValues+0x14>
     b78:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ComValues+0x15>
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	39 f4       	brne	.+14     	; 0xb8e <__vector_16+0x52>
		{
			if (ComValues.motor_status != ERR)
     b80:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ComValues+0x16>
     b84:	84 30       	cpi	r24, 0x04	; 4
     b86:	61 f0       	breq	.+24     	; 0xba0 <__vector_16+0x64>
			{
				ComValues.motor_status = OFF ;
     b88:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ComValues+0x16>
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <__vector_16+0x64>
			}
			}else{
				
			if (ComValues.ctrl_type == CURRENT)
     b8e:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <ComValues+0x1b>
     b92:	21 11       	cpse	r18, r1
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <__vector_16+0x64>
			{
				ComValues.u16_watchdog -- ;
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ComValues+0x15>
     b9c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ComValues+0x14>
			}
			
		}
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;		
     ba0:	e2 e1       	ldi	r30, 0x12	; 18
     ba2:	f1 e0       	ldi	r31, 0x01	; 1
     ba4:	00 85       	ldd	r16, Z+8	; 0x08
     ba6:	11 85       	ldd	r17, Z+9	; 0x09
     ba8:	22 85       	ldd	r18, Z+10	; 0x0a
     baa:	33 85       	ldd	r19, Z+11	; 0x0b
     bac:	44 81       	ldd	r20, Z+4	; 0x04
     bae:	55 81       	ldd	r21, Z+5	; 0x05
     bb0:	66 81       	ldd	r22, Z+6	; 0x06
     bb2:	77 81       	ldd	r23, Z+7	; 0x07
     bb4:	0f 2e       	mov	r0, r31
     bb6:	fa e0       	ldi	r31, 0x0A	; 10
     bb8:	ef 2e       	mov	r14, r31
     bba:	f0 2d       	mov	r31, r0
     bbc:	8e e1       	ldi	r24, 0x1E	; 30
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	c4 d1       	rcall	.+904    	; 0xf4a <handle_joulemeter>
		systic_counter_fast = 0;
     bc2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <systic_counter_fast>
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <__vector_16+0x92>
	} else {
		systic_counter_fast ++;
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
     bce:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <systic_counter_slow>
     bd2:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <systic_counter_slow+0x1>
     bd6:	84 36       	cpi	r24, 0x64	; 100
     bd8:	91 05       	cpc	r25, r1
     bda:	51 f5       	brne	.+84     	; 0xc30 <__vector_16+0xf4>
	{
		send_can = 1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <send_can>
		handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 500.0);
     be2:	44 ef       	ldi	r20, 0xF4	; 244
     be4:	51 e0       	ldi	r21, 0x01	; 1
     be6:	6c e3       	ldi	r22, 0x3C	; 60
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	83 e2       	ldi	r24, 0x23	; 35
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	c1 dd       	rcall	.-1150   	; 0x772 <handle_speed_sensor>
		manage_LEDs(ComValues); //UM LED according to motor state
     bf0:	8d b7       	in	r24, 0x3d	; 61
     bf2:	9e b7       	in	r25, 0x3e	; 62
     bf4:	4c 97       	sbiw	r24, 0x1c	; 28
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	9e bf       	out	0x3e, r25	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	8d bf       	out	0x3d, r24	; 61
     c00:	ad b7       	in	r26, 0x3d	; 61
     c02:	be b7       	in	r27, 0x3e	; 62
     c04:	11 96       	adiw	r26, 0x01	; 1
     c06:	8c e1       	ldi	r24, 0x1C	; 28
     c08:	e2 e1       	ldi	r30, 0x12	; 18
     c0a:	f1 e0       	ldi	r31, 0x01	; 1
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	8a 95       	dec	r24
     c12:	e1 f7       	brne	.-8      	; 0xc0c <__vector_16+0xd0>
     c14:	6c dd       	rcall	.-1320   	; 0x6ee <manage_LEDs>
		systic_counter_slow = 0;
     c16:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <systic_counter_slow+0x1>
     c1a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <systic_counter_slow>
     c1e:	8d b7       	in	r24, 0x3d	; 61
     c20:	9e b7       	in	r25, 0x3e	; 62
     c22:	4c 96       	adiw	r24, 0x1c	; 28
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	9e bf       	out	0x3e, r25	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	8d bf       	out	0x3d, r24	; 61
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__vector_16+0xfe>
		} else {
		systic_counter_slow ++;
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <systic_counter_slow+0x1>
     c36:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <systic_counter_slow>
	}
	
	manage_motor(&ComValues);
     c3a:	82 e1       	ldi	r24, 0x12	; 18
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	b2 db       	rcall	.-2204   	; 0x3a4 <manage_motor>
}
     c40:	ff 91       	pop	r31
     c42:	ef 91       	pop	r30
     c44:	bf 91       	pop	r27
     c46:	af 91       	pop	r26
     c48:	9f 91       	pop	r25
     c4a:	8f 91       	pop	r24
     c4c:	7f 91       	pop	r23
     c4e:	6f 91       	pop	r22
     c50:	5f 91       	pop	r21
     c52:	4f 91       	pop	r20
     c54:	3f 91       	pop	r19
     c56:	2f 91       	pop	r18
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ef 90       	pop	r14
     c5e:	0f 90       	pop	r0
     c60:	0b be       	out	0x3b, r0	; 59
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	0b b6       	in	r0, 0x3b	; 59
     c78:	0f 92       	push	r0
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	4f 93       	push	r20
     c80:	5f 93       	push	r21
     c82:	6f 93       	push	r22
     c84:	7f 93       	push	r23
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
	
	if (u8_SPI_count == 4)
     c92:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c96:	84 30       	cpi	r24, 0x04	; 4
     c98:	31 f4       	brne	.+12     	; 0xca6 <__vector_12+0x3a>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
     c9a:	82 e2       	ldi	r24, 0x22	; 34
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	6d dc       	rcall	.-1830   	; 0x57a <SPI_handler_4>
		u8_SPI_count = 0 ;
     ca0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <u8_SPI_count>
     ca4:	12 c0       	rjmp	.+36     	; 0xcca <__vector_12+0x5e>
	}
	
	if (u8_SPI_count == 3)
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <__vector_12+0x46>
	{
		u8_SPI_count ++ ;
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
     cb0:	18 c0       	rjmp	.+48     	; 0xce2 <__vector_12+0x76>
	}
	
	if (u8_SPI_count == 2)
     cb2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	41 f4       	brne	.+16     	; 0xcca <__vector_12+0x5e>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
     cba:	8a e1       	ldi	r24, 0x1A	; 26
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	2c dc       	rcall	.-1960   	; 0x518 <SPI_handler_2>
		u8_SPI_count ++ ;
     cc0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     cca:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     cce:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
     cd0:	41 f4       	brne	.+16     	; 0xce2 <__vector_12+0x76>
     cd2:	86 e1       	ldi	r24, 0x16	; 22
     cd4:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     cd6:	00 dc       	rcall	.-2048   	; 0x4d8 <SPI_handler_1>
     cd8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
     ce2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
     ce6:	81 11       	cpse	r24, r1
     ce8:	08 c0       	rjmp	.+16     	; 0xcfa <__vector_12+0x8e>
     cea:	82 e1       	ldi	r24, 0x12	; 18
     cec:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     cee:	d4 db       	rcall	.-2136   	; 0x498 <SPI_handler_0>
     cf0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0b be       	out	0x3b, r0	; 59
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of the reed switch)
{
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
	u16_speed_count ++ ;
     d2e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u16_speed_count>
     d32:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <u16_speed_count+0x1>
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <u16_speed_count+0x1>
     d3c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u16_speed_count>
}
     d40:	9f 91       	pop	r25
     d42:	8f 91       	pop	r24
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <handle_current_sensor>:
#define CORRECTION_OFFSET_BAT 1.0
#define CORRECTION_OFFSET_MOT 1.17
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg, uint8_t u8_sensor_num)
{
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	00 d0       	rcall	.+0      	; 0xd68 <handle_current_sensor+0x1a>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <handle_current_sensor+0x1c>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	8c 01       	movw	r16, r24
     d70:	f4 2e       	mov	r15, r20
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY) ;// /3 because current passes 3x in transducer for more precision.
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	50 d5       	rcall	.+2720   	; 0x1818 <__floatunsisf>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 ea       	ldi	r20, 0xA0	; 160
     d7e:	50 e4       	ldi	r21, 0x40	; 64
     d80:	01 d6       	rcall	.+3074   	; 0x1984 <__mulsf3>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e8       	ldi	r20, 0x80	; 128
     d88:	59 e3       	ldi	r21, 0x39	; 57
     d8a:	fc d5       	rcall	.+3064   	; 0x1984 <__mulsf3>
     d8c:	2e ea       	ldi	r18, 0xAE	; 174
     d8e:	37 e4       	ldi	r19, 0x47	; 71
     d90:	41 e2       	ldi	r20, 0x21	; 33
     d92:	50 e4       	ldi	r21, 0x40	; 64
     d94:	3f d4       	rcall	.+2174   	; 0x1614 <__subsf3>
     d96:	23 ec       	ldi	r18, 0xC3	; 195
     d98:	34 e6       	ldi	r19, 0x64	; 100
     d9a:	4a e2       	ldi	r20, 0x2A	; 42
     d9c:	5d e3       	ldi	r21, 0x3D	; 61
     d9e:	a3 d4       	rcall	.+2374   	; 0x16e6 <__divsf3>
     da0:	69 83       	std	Y+1, r22	; 0x01
     da2:	7a 83       	std	Y+2, r23	; 0x02
     da4:	8b 83       	std	Y+3, r24	; 0x03
     da6:	9c 83       	std	Y+4, r25	; 0x04
	if (u8_sensor_num)
     da8:	ff 20       	and	r15, r15
     daa:	71 f0       	breq	.+28     	; 0xdc8 <handle_current_sensor+0x7a>
	{//batt
		f_new_current = (f_new_current+CORRECTION_OFFSET_BAT);// correction of offset
     dac:	69 81       	ldd	r22, Y+1	; 0x01
     dae:	7a 81       	ldd	r23, Y+2	; 0x02
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	5f e3       	ldi	r21, 0x3F	; 63
     dbc:	2c d4       	rcall	.+2136   	; 0x1616 <__addsf3>
     dbe:	69 83       	std	Y+1, r22	; 0x01
     dc0:	7a 83       	std	Y+2, r23	; 0x02
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <handle_current_sensor+0x94>
	}else{
		f_new_current = (f_new_current+CORRECTION_OFFSET_MOT);// correction of offset
     dc8:	69 81       	ldd	r22, Y+1	; 0x01
     dca:	7a 81       	ldd	r23, Y+2	; 0x02
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	2f e8       	ldi	r18, 0x8F	; 143
     dd2:	32 ec       	ldi	r19, 0xC2	; 194
     dd4:	45 e9       	ldi	r20, 0x95	; 149
     dd6:	5f e3       	ldi	r21, 0x3F	; 63
     dd8:	1e d4       	rcall	.+2108   	; 0x1616 <__addsf3>
     dda:	69 83       	std	Y+1, r22	; 0x01
     ddc:	7a 83       	std	Y+2, r23	; 0x02
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
     de2:	89 80       	ldd	r8, Y+1	; 0x01
     de4:	9a 80       	ldd	r9, Y+2	; 0x02
     de6:	ab 80       	ldd	r10, Y+3	; 0x03
     de8:	bc 80       	ldd	r11, Y+4	; 0x04
     dea:	26 e6       	ldi	r18, 0x66	; 102
     dec:	36 e6       	ldi	r19, 0x66	; 102
     dee:	46 e6       	ldi	r20, 0x66	; 102
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	f8 01       	movw	r30, r16
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	c3 d5       	rcall	.+2950   	; 0x1984 <__mulsf3>
     dfe:	6b 01       	movw	r12, r22
     e00:	7c 01       	movw	r14, r24
     e02:	2d ec       	ldi	r18, 0xCD	; 205
     e04:	3c ec       	ldi	r19, 0xCC	; 204
     e06:	4c ec       	ldi	r20, 0xCC	; 204
     e08:	5d e3       	ldi	r21, 0x3D	; 61
     e0a:	c5 01       	movw	r24, r10
     e0c:	b4 01       	movw	r22, r8
     e0e:	ba d5       	rcall	.+2932   	; 0x1984 <__mulsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	c7 01       	movw	r24, r14
     e16:	b6 01       	movw	r22, r12
     e18:	fe d3       	rcall	.+2044   	; 0x1616 <__addsf3>
     e1a:	f8 01       	movw	r30, r16
     e1c:	60 83       	st	Z, r22
     e1e:	71 83       	std	Z+1, r23	; 0x01
     e20:	82 83       	std	Z+2, r24	; 0x02
     e22:	93 83       	std	Z+3, r25	; 0x03
}
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	8f 90       	pop	r8
     e44:	08 95       	ret

00000e46 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <handle_temp_sensor+0xa>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <handle_temp_sensor+0xc>
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	dd d4       	rcall	.+2490   	; 0x1818 <__floatunsisf>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 ea       	ldi	r20, 0xA0	; 160
     e64:	50 e4       	ldi	r21, 0x40	; 64
     e66:	8e d5       	rcall	.+2844   	; 0x1984 <__mulsf3>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	59 e3       	ldi	r21, 0x39	; 57
     e70:	89 d5       	rcall	.+2834   	; 0x1984 <__mulsf3>
     e72:	69 83       	std	Y+1, r22	; 0x01
     e74:	7a 83       	std	Y+2, r23	; 0x02
     e76:	8b 83       	std	Y+3, r24	; 0x03
     e78:	9c 83       	std	Y+4, r25	; 0x04
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
     e7a:	69 81       	ldd	r22, Y+1	; 0x01
     e7c:	7a 81       	ldd	r23, Y+2	; 0x02
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	2d ec       	ldi	r18, 0xCD	; 205
     e84:	3c ec       	ldi	r19, 0xCC	; 204
     e86:	4c e6       	ldi	r20, 0x6C	; 108
     e88:	50 e4       	ldi	r21, 0x40	; 64
     e8a:	29 d4       	rcall	.+2130   	; 0x16de <__cmpsf2>
     e8c:	18 16       	cp	r1, r24
     e8e:	8c f0       	brlt	.+34     	; 0xeb2 <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     e90:	69 81       	ldd	r22, Y+1	; 0x01
     e92:	7a 81       	ldd	r23, Y+2	; 0x02
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 ea       	ldi	r20, 0xA0	; 160
     e9e:	51 e4       	ldi	r21, 0x41	; 65
     ea0:	71 d5       	rcall	.+2786   	; 0x1984 <__mulsf3>
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 eb       	ldi	r20, 0xB0	; 176
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	b4 d3       	rcall	.+1896   	; 0x1614 <__subsf3>
     eac:	89 d4       	rcall	.+2322   	; 0x17c0 <__fixunssfsi>
     eae:	f8 01       	movw	r30, r16
     eb0:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     eb2:	69 81       	ldd	r22, Y+1	; 0x01
     eb4:	7a 81       	ldd	r23, Y+2	; 0x02
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	26 e6       	ldi	r18, 0x66	; 102
     ebc:	36 e6       	ldi	r19, 0x66	; 102
     ebe:	46 e9       	ldi	r20, 0x96	; 150
     ec0:	50 e4       	ldi	r21, 0x40	; 64
     ec2:	0d d4       	rcall	.+2074   	; 0x16de <__cmpsf2>
     ec4:	18 16       	cp	r1, r24
     ec6:	e4 f0       	brlt	.+56     	; 0xf00 <handle_temp_sensor+0xba>
     ec8:	69 81       	ldd	r22, Y+1	; 0x01
     eca:	7a 81       	ldd	r23, Y+2	; 0x02
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	2d ec       	ldi	r18, 0xCD	; 205
     ed2:	3c ec       	ldi	r19, 0xCC	; 204
     ed4:	4c e6       	ldi	r20, 0x6C	; 108
     ed6:	50 e4       	ldi	r21, 0x40	; 64
     ed8:	51 d5       	rcall	.+2722   	; 0x197c <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     eda:	18 16       	cp	r1, r24
     edc:	8c f4       	brge	.+34     	; 0xf00 <handle_temp_sensor+0xba>
     ede:	69 81       	ldd	r22, Y+1	; 0x01
     ee0:	7a 81       	ldd	r23, Y+2	; 0x02
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4e e5       	ldi	r20, 0x5E	; 94
     eec:	52 e4       	ldi	r21, 0x42	; 66
     eee:	4a d5       	rcall	.+2708   	; 0x1984 <__mulsf3>
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e8       	ldi	r19, 0x80	; 128
     ef4:	4b e1       	ldi	r20, 0x1B	; 27
     ef6:	53 e4       	ldi	r21, 0x43	; 67
     ef8:	8d d3       	rcall	.+1818   	; 0x1614 <__subsf3>
     efa:	62 d4       	rcall	.+2244   	; 0x17c0 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     efc:	f8 01       	movw	r30, r16
     efe:	60 83       	st	Z, r22
     f00:	69 81       	ldd	r22, Y+1	; 0x01
     f02:	7a 81       	ldd	r23, Y+2	; 0x02
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	26 e6       	ldi	r18, 0x66	; 102
     f0a:	36 e6       	ldi	r19, 0x66	; 102
     f0c:	46 e9       	ldi	r20, 0x96	; 150
     f0e:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     f10:	35 d5       	rcall	.+2666   	; 0x197c <__gesf2>
     f12:	18 16       	cp	r1, r24
     f14:	8c f4       	brge	.+34     	; 0xf38 <handle_temp_sensor+0xf2>
     f16:	69 81       	ldd	r22, Y+1	; 0x01
     f18:	7a 81       	ldd	r23, Y+2	; 0x02
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	48 e4       	ldi	r20, 0x48	; 72
     f24:	53 e4       	ldi	r21, 0x43	; 67
     f26:	2e d5       	rcall	.+2652   	; 0x1984 <__mulsf3>
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	42 e5       	ldi	r20, 0x52	; 82
     f2e:	54 e4       	ldi	r21, 0x44	; 68
     f30:	71 d3       	rcall	.+1762   	; 0x1614 <__subsf3>
     f32:	46 d4       	rcall	.+2188   	; 0x17c0 <__fixunssfsi>
	}
}
     f34:	f8 01       	movw	r30, r16
     f36:	60 83       	st	Z, r22
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	ef 92       	push	r14
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
     f5e:	4a 01       	movw	r8, r20
     f60:	5b 01       	movw	r10, r22
     f62:	c9 01       	movw	r24, r18
     f64:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
     f66:	a5 01       	movw	r20, r10
     f68:	94 01       	movw	r18, r8
     f6a:	0c d5       	rcall	.+2584   	; 0x1984 <__mulsf3>
     f6c:	4b 01       	movw	r8, r22
     f6e:	5c 01       	movw	r10, r24
     f70:	6e 2d       	mov	r22, r14
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	4f d4       	rcall	.+2206   	; 0x1818 <__floatunsisf>
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	c5 01       	movw	r24, r10
     f80:	b4 01       	movw	r22, r8
     f82:	00 d5       	rcall	.+2560   	; 0x1984 <__mulsf3>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4a e7       	ldi	r20, 0x7A	; 122
     f8a:	54 e4       	ldi	r21, 0x44	; 68
     f8c:	ac d3       	rcall	.+1880   	; 0x16e6 <__divsf3>
     f8e:	9b 01       	movw	r18, r22
     f90:	ac 01       	movw	r20, r24
     f92:	68 81       	ld	r22, Y
     f94:	79 81       	ldd	r23, Y+1	; 0x01
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	3d d3       	rcall	.+1658   	; 0x1616 <__addsf3>
     f9c:	68 83       	st	Y, r22
     f9e:	79 83       	std	Y+1, r23	; 0x01
     fa0:	8a 83       	std	Y+2, r24	; 0x02
     fa2:	9b 83       	std	Y+3, r25	; 0x03
}
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ef 90       	pop	r14
     fae:	bf 90       	pop	r11
     fb0:	af 90       	pop	r10
     fb2:	9f 90       	pop	r9
     fb4:	8f 90       	pop	r8
     fb6:	08 95       	ret

00000fb8 <err_check>:

void err_check(ModuleValues_t * vals) 
{
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
	if ((vals->f32_batt_volt < MIN_VOLT  || vals->f32_batt_volt > 100.0) && vals->motor_status != ERR) //under voltage. When the voltage is too low, the external ADC is not working properly and gives a huge voltage value.
     fc6:	c8 84       	ldd	r12, Y+8	; 0x08
     fc8:	d9 84       	ldd	r13, Y+9	; 0x09
     fca:	ea 84       	ldd	r14, Y+10	; 0x0a
     fcc:	fb 84       	ldd	r15, Y+11	; 0x0b
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e7       	ldi	r20, 0x70	; 112
     fd4:	51 e4       	ldi	r21, 0x41	; 65
     fd6:	c7 01       	movw	r24, r14
     fd8:	b6 01       	movw	r22, r12
     fda:	81 d3       	rcall	.+1794   	; 0x16de <__cmpsf2>
     fdc:	88 23       	and	r24, r24
     fde:	4c f0       	brlt	.+18     	; 0xff2 <err_check+0x3a>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	48 ec       	ldi	r20, 0xC8	; 200
     fe6:	52 e4       	ldi	r21, 0x42	; 66
     fe8:	c7 01       	movw	r24, r14
     fea:	b6 01       	movw	r22, r12
     fec:	c7 d4       	rcall	.+2446   	; 0x197c <__gesf2>
     fee:	18 16       	cp	r1, r24
     ff0:	24 f4       	brge	.+8      	; 0xffa <err_check+0x42>
     ff2:	8e 89       	ldd	r24, Y+22	; 0x16
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	09 f0       	breq	.+2      	; 0xffa <err_check+0x42>
	{
		vals->motor_status = OFF;
     ff8:	1e 8a       	std	Y+22, r1	; 0x16
	}
	
	if ((vals->f32_batt_volt < 100.0) && (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT) || vals->u8_motor_temp >= MAX_TEMP)) //over current, over voltage, over temp
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	48 ec       	ldi	r20, 0xC8	; 200
    1000:	52 e4       	ldi	r21, 0x42	; 66
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	6b d3       	rcall	.+1750   	; 0x16de <__cmpsf2>
    1008:	88 23       	and	r24, r24
    100a:	f4 f4       	brge	.+60     	; 0x1048 <err_check+0x90>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e7       	ldi	r20, 0x70	; 112
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	68 81       	ld	r22, Y
    1016:	79 81       	ldd	r23, Y+1	; 0x01
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	af d4       	rcall	.+2398   	; 0x197c <__gesf2>
    101e:	88 23       	and	r24, r24
    1020:	6c f4       	brge	.+26     	; 0x103c <err_check+0x84>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	4c e5       	ldi	r20, 0x5C	; 92
    1028:	52 e4       	ldi	r21, 0x42	; 66
    102a:	c7 01       	movw	r24, r14
    102c:	b6 01       	movw	r22, r12
    102e:	a6 d4       	rcall	.+2380   	; 0x197c <__gesf2>
    1030:	18 16       	cp	r1, r24
    1032:	24 f0       	brlt	.+8      	; 0x103c <err_check+0x84>
    1034:	88 89       	ldd	r24, Y+16	; 0x10
    1036:	84 36       	cpi	r24, 0x64	; 100
    1038:	18 f5       	brcc	.+70     	; 0x1080 <err_check+0xc8>
    103a:	09 c0       	rjmp	.+18     	; 0x104e <err_check+0x96>
	{
		vals->motor_status = ERR;
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	8e 8b       	std	Y+22, r24	; 0x16
	}
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
    1040:	88 89       	ldd	r24, Y+16	; 0x10
    1042:	84 36       	cpi	r24, 0x64	; 100
    1044:	38 f0       	brcs	.+14     	; 0x1054 <err_check+0x9c>
    1046:	1e c0       	rjmp	.+60     	; 0x1084 <err_check+0xcc>
    1048:	88 89       	ldd	r24, Y+16	; 0x10
    104a:	84 36       	cpi	r24, 0x64	; 100
    104c:	d8 f4       	brcc	.+54     	; 0x1084 <err_check+0xcc>
    104e:	8e 89       	ldd	r24, Y+22	; 0x16
    1050:	84 30       	cpi	r24, 0x04	; 4
    1052:	c1 f4       	brne	.+48     	; 0x1084 <err_check+0xcc>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e7       	ldi	r20, 0x70	; 112
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	68 81       	ld	r22, Y
    105e:	79 81       	ldd	r23, Y+1	; 0x01
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	3c d3       	rcall	.+1656   	; 0x16de <__cmpsf2>
    1066:	88 23       	and	r24, r24
    1068:	6c f4       	brge	.+26     	; 0x1084 <err_check+0xcc>
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4c e5       	ldi	r20, 0x5C	; 92
    1070:	52 e4       	ldi	r21, 0x42	; 66
    1072:	c7 01       	movw	r24, r14
    1074:	b6 01       	movw	r22, r12
    1076:	33 d3       	rcall	.+1638   	; 0x16de <__cmpsf2>
    1078:	18 16       	cp	r1, r24
	{
		vals->motor_status = OFF;
    107a:	24 f0       	brlt	.+8      	; 0x1084 <err_check+0xcc>
	}
    107c:	1e 8a       	std	Y+22, r1	; 0x16
		vals->motor_status = OFF;
	}
	
	if ((vals->f32_batt_volt < 100.0) && (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT) || vals->u8_motor_temp >= MAX_TEMP)) //over current, over voltage, over temp
	{
		vals->motor_status = ERR;
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <err_check+0xcc>
    1080:	84 e0       	ldi	r24, 0x04	; 4
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
	{
		vals->motor_status = OFF;
	}
    1082:	8e 8b       	std	Y+22, r24	; 0x16
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	08 95       	ret

00001092 <Set_ADC_Channel_ext>:
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 30       	cpi	r24, 0x08	; 8
    1096:	91 05       	cpc	r25, r1
    1098:	88 f5       	brcc	.+98     	; 0x10fc <Set_ADC_Channel_ext+0x6a>
    109a:	fc 01       	movw	r30, r24
    109c:	e6 5b       	subi	r30, 0xB6	; 182
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	d4 c4       	rjmp	.+2472   	; 0x1a4a <__tablejump2__>
    10a2:	86 e0       	ldi	r24, 0x06	; 6
    10a4:	fb 01       	movw	r30, r22
    10a6:	80 83       	st	Z, r24
    10a8:	11 82       	std	Z+1, r1	; 0x01
    10aa:	08 95       	ret
    10ac:	86 e0       	ldi	r24, 0x06	; 6
    10ae:	fb 01       	movw	r30, r22
    10b0:	80 83       	st	Z, r24
    10b2:	80 e4       	ldi	r24, 0x40	; 64
    10b4:	81 83       	std	Z+1, r24	; 0x01
    10b6:	08 95       	ret
    10b8:	86 e0       	ldi	r24, 0x06	; 6
    10ba:	fb 01       	movw	r30, r22
    10bc:	80 83       	st	Z, r24
    10be:	80 e8       	ldi	r24, 0x80	; 128
    10c0:	81 83       	std	Z+1, r24	; 0x01
    10c2:	08 95       	ret
    10c4:	86 e0       	ldi	r24, 0x06	; 6
    10c6:	fb 01       	movw	r30, r22
    10c8:	80 83       	st	Z, r24
    10ca:	80 ec       	ldi	r24, 0xC0	; 192
    10cc:	81 83       	std	Z+1, r24	; 0x01
    10ce:	08 95       	ret
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	fb 01       	movw	r30, r22
    10d4:	80 83       	st	Z, r24
    10d6:	11 82       	std	Z+1, r1	; 0x01
    10d8:	08 95       	ret
    10da:	87 e0       	ldi	r24, 0x07	; 7
    10dc:	fb 01       	movw	r30, r22
    10de:	80 83       	st	Z, r24
    10e0:	80 e4       	ldi	r24, 0x40	; 64
    10e2:	81 83       	std	Z+1, r24	; 0x01
    10e4:	08 95       	ret
    10e6:	87 e0       	ldi	r24, 0x07	; 7
    10e8:	fb 01       	movw	r30, r22
    10ea:	80 83       	st	Z, r24
    10ec:	80 e8       	ldi	r24, 0x80	; 128
    10ee:	81 83       	std	Z+1, r24	; 0x01
    10f0:	08 95       	ret
    10f2:	87 e0       	ldi	r24, 0x07	; 7
    10f4:	fb 01       	movw	r30, r22
    10f6:	80 83       	st	Z, r24
    10f8:	80 ec       	ldi	r24, 0xC0	; 192
    10fa:	81 83       	std	Z+1, r24	; 0x01
    10fc:	08 95       	ret

000010fe <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	0b b6       	in	r0, 0x3b	; 59
    110a:	0f 92       	push	r0
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	1f 92       	push	r1
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    112c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    1130:	80 ff       	sbrs	r24, 0
    1132:	47 c0       	rjmp	.+142    	; 0x11c2 <__stack+0xc3>
    1134:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1138:	90 ff       	sbrs	r25, 0
    113a:	43 c0       	rjmp	.+134    	; 0x11c2 <__stack+0xc3>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    113c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    1140:	ee ee       	ldi	r30, 0xEE	; 238
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    1148:	80 81       	ld	r24, Z
    114a:	8f 7b       	andi	r24, 0xBF	; 191
    114c:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    114e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_off>
    1152:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <tx_on>
    1156:	98 17       	cp	r25, r24
    1158:	89 f1       	breq	.+98     	; 0x11bc <__stack+0xbd>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    115a:	8f 70       	andi	r24, 0x0F	; 15
    115c:	2b e0       	ldi	r18, 0x0B	; 11
    115e:	82 9f       	mul	r24, r18
    1160:	c0 01       	movw	r24, r0
    1162:	11 24       	eor	r1, r1
    1164:	fc 01       	movw	r30, r24
    1166:	e6 50       	subi	r30, 0x06	; 6
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	20 81       	ld	r18, Z
    116c:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    1170:	20 81       	ld	r18, Z
    1172:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    1176:	21 81       	ldd	r18, Z+1	; 0x01
    1178:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    117c:	23 81       	ldd	r18, Z+3	; 0x03
    117e:	aa ef       	ldi	r26, 0xFA	; 250
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    1184:	24 81       	ldd	r18, Z+4	; 0x04
    1186:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    1188:	25 81       	ldd	r18, Z+5	; 0x05
    118a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    118c:	26 81       	ldd	r18, Z+6	; 0x06
    118e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    1190:	27 81       	ldd	r18, Z+7	; 0x07
    1192:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    1194:	20 85       	ldd	r18, Z+8	; 0x08
    1196:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    1198:	21 85       	ldd	r18, Z+9	; 0x09
    119a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    119c:	22 85       	ldd	r18, Z+10	; 0x0a
    119e:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    11a0:	fc 01       	movw	r30, r24
    11a2:	e4 50       	subi	r30, 0x04	; 4
    11a4:	fe 4f       	sbci	r31, 0xFE	; 254
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 70       	andi	r24, 0x0F	; 15
    11aa:	80 64       	ori	r24, 0x40	; 64
    11ac:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    11b0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_off>
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tx_off>
    11ba:	7d c0       	rjmp	.+250    	; 0x12b6 <__stack+0x1b7>
		} else {
			tx_busy = 0;
    11bc:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <tx_busy>
    11c0:	7a c0       	rjmp	.+244    	; 0x12b6 <__stack+0x1b7>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    11c2:	81 ff       	sbrs	r24, 1
    11c4:	78 c0       	rjmp	.+240    	; 0x12b6 <__stack+0x1b7>
    11c6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    11ca:	81 ff       	sbrs	r24, 1
    11cc:	74 c0       	rjmp	.+232    	; 0x12b6 <__stack+0x1b7>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    11ce:	80 e1       	ldi	r24, 0x10	; 16
    11d0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    11d4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_on>
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <rx_off>
    11e0:	29 1b       	sub	r18, r25
    11e2:	31 09       	sbc	r19, r1
    11e4:	2f 77       	andi	r18, 0x7F	; 127
    11e6:	33 27       	eor	r19, r19
    11e8:	20 31       	cpi	r18, 0x10	; 16
    11ea:	31 05       	cpc	r19, r1
    11ec:	0c f0       	brlt	.+2      	; 0x11f0 <__stack+0xf1>
    11ee:	58 c0       	rjmp	.+176    	; 0x12a0 <__stack+0x1a1>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    11f0:	e8 2f       	mov	r30, r24
    11f2:	ef 70       	andi	r30, 0x0F	; 15
    11f4:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    11f8:	2e 2f       	mov	r18, r30
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	4b e0       	ldi	r20, 0x0B	; 11
    11fe:	e4 9f       	mul	r30, r20
    1200:	f0 01       	movw	r30, r0
    1202:	11 24       	eor	r1, r1
    1204:	e6 5b       	subi	r30, 0xB6	; 182
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	9f 70       	andi	r25, 0x0F	; 15
    120a:	42 81       	ldd	r20, Z+2	; 0x02
    120c:	40 7f       	andi	r20, 0xF0	; 240
    120e:	94 2b       	or	r25, r20
    1210:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    1212:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1216:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    121a:	40 7e       	andi	r20, 0xE0	; 224
    121c:	97 70       	andi	r25, 0x07	; 7
    121e:	94 2b       	or	r25, r20
    1220:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    1222:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1226:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    1228:	aa ef       	ldi	r26, 0xFA	; 250
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	9c 91       	ld	r25, X
    122e:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    1230:	9c 91       	ld	r25, X
    1232:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    1234:	9c 91       	ld	r25, X
    1236:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    1238:	9c 91       	ld	r25, X
    123a:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    123c:	9c 91       	ld	r25, X
    123e:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    1240:	9c 91       	ld	r25, X
    1242:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    1244:	9c 91       	ld	r25, X
    1246:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    1248:	9c 91       	ld	r25, X
    124a:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    1252:	40 81       	ld	r20, Z
    1254:	42 95       	swap	r20
    1256:	46 95       	lsr	r20
    1258:	47 70       	andi	r20, 0x07	; 7
    125a:	51 81       	ldd	r21, Z+1	; 0x01
    125c:	65 2f       	mov	r22, r21
    125e:	66 0f       	add	r22, r22
    1260:	66 0f       	add	r22, r22
    1262:	66 0f       	add	r22, r22
    1264:	86 2f       	mov	r24, r22
    1266:	84 2b       	or	r24, r20
    1268:	95 2f       	mov	r25, r21
    126a:	92 95       	swap	r25
    126c:	96 95       	lsr	r25
    126e:	97 70       	andi	r25, 0x07	; 7
    1270:	89 2b       	or	r24, r25
    1272:	b1 f4       	brne	.+44     	; 0x12a0 <__stack+0x1a1>
    1274:	8b e0       	ldi	r24, 0x0B	; 11
    1276:	82 9f       	mul	r24, r18
    1278:	f0 01       	movw	r30, r0
    127a:	83 9f       	mul	r24, r19
    127c:	f0 0d       	add	r31, r0
    127e:	11 24       	eor	r1, r1
    1280:	e6 5b       	subi	r30, 0xB6	; 182
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	83 81       	ldd	r24, Z+3	; 0x03
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	59 f4       	brne	.+22     	; 0x12a0 <__stack+0x1a1>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    128a:	98 e0       	ldi	r25, 0x08	; 8
    128c:	88 e1       	ldi	r24, 0x18	; 24
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	a8 95       	wdr
    1294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    129e:	ff cf       	rjmp	.-2      	; 0x129e <__stack+0x19f>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    12a0:	ee ee       	ldi	r30, 0xEE	; 238
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    12b0:	80 e8       	ldi	r24, 0x80	; 128
    12b2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    12b6:	0f 90       	pop	r0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0b be       	out	0x3b, r0	; 59
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    12e4:	e8 ed       	ldi	r30, 0xD8	; 216
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    12ec:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    12f0:	2c e0       	ldi	r18, 0x0C	; 12
    12f2:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    12f6:	27 e3       	ldi	r18, 0x37	; 55
    12f8:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    12fc:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    1300:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    1304:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1308:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    130c:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    1310:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    1314:	cd ee       	ldi	r28, 0xED	; 237
    1316:	d0 e0       	ldi	r29, 0x00	; 0
    1318:	18 82       	st	Y, r1
	CANSTMOB = 0;
    131a:	ae ee       	ldi	r26, 0xEE	; 238
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    1320:	20 e1       	ldi	r18, 0x10	; 16
    1322:	28 83       	st	Y, r18
	CANSTMOB = 0;
    1324:	1c 92       	st	X, r1
	CANIDM4 = 0;
    1326:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    132a:	28 2f       	mov	r18, r24
    132c:	22 95       	swap	r18
    132e:	22 0f       	add	r18, r18
    1330:	20 7e       	andi	r18, 0xE0	; 224
    1332:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	96 95       	lsr	r25
    133c:	87 95       	ror	r24
    133e:	96 95       	lsr	r25
    1340:	87 95       	ror	r24
    1342:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    1346:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    134a:	86 2f       	mov	r24, r22
    134c:	82 95       	swap	r24
    134e:	88 0f       	add	r24, r24
    1350:	80 7e       	andi	r24, 0xE0	; 224
    1352:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    1356:	76 95       	lsr	r23
    1358:	67 95       	ror	r22
    135a:	76 95       	lsr	r23
    135c:	67 95       	ror	r22
    135e:	76 95       	lsr	r23
    1360:	67 95       	ror	r22
    1362:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    1366:	80 e8       	ldi	r24, 0x80	; 128
    1368:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    1372:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    1376:	80 eb       	ldi	r24, 0xB0	; 176
    1378:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	80 83       	st	Z, r24

	reset = 0;
    1380:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <reset>
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1390:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <rx_off>
    1394:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <rx_on>
    1398:	24 17       	cp	r18, r20
    139a:	89 f1       	breq	.+98     	; 0x13fe <can_read_message_if_new+0x74>
    139c:	a4 2f       	mov	r26, r20
    139e:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    13a0:	8b e0       	ldi	r24, 0x0B	; 11
    13a2:	a8 9f       	mul	r26, r24
    13a4:	b0 01       	movw	r22, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	fb 01       	movw	r30, r22
    13aa:	e6 5b       	subi	r30, 0xB6	; 182
    13ac:	fe 4f       	sbci	r31, 0xFE	; 254
    13ae:	20 81       	ld	r18, Z
    13b0:	22 95       	swap	r18
    13b2:	26 95       	lsr	r18
    13b4:	27 70       	andi	r18, 0x07	; 7
    13b6:	31 81       	ldd	r19, Z+1	; 0x01
    13b8:	53 2f       	mov	r21, r19
    13ba:	55 0f       	add	r21, r21
    13bc:	55 0f       	add	r21, r21
    13be:	55 0f       	add	r21, r21
    13c0:	25 2b       	or	r18, r21
    13c2:	32 95       	swap	r19
    13c4:	36 95       	lsr	r19
    13c6:	37 70       	andi	r19, 0x07	; 7
    13c8:	28 83       	st	Y, r18
    13ca:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    13cc:	fb 01       	movw	r30, r22
    13ce:	e4 5b       	subi	r30, 0xB4	; 180
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	20 81       	ld	r18, Z
    13d4:	2f 70       	andi	r18, 0x0F	; 15
    13d6:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    13d8:	22 23       	and	r18, r18
    13da:	99 f0       	breq	.+38     	; 0x1402 <can_read_message_if_new+0x78>
    13dc:	db 01       	movw	r26, r22
    13de:	a3 5b       	subi	r26, 0xB3	; 179
    13e0:	be 4f       	sbci	r27, 0xFE	; 254
    13e2:	fe 01       	movw	r30, r28
    13e4:	33 96       	adiw	r30, 0x03	; 3
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	2d 5f       	subi	r18, 0xFD	; 253
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	ce 01       	movw	r24, r28
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    13f2:	2d 91       	ld	r18, X+
    13f4:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    13f6:	e8 17       	cp	r30, r24
    13f8:	f9 07       	cpc	r31, r25
    13fa:	d9 f7       	brne	.-10     	; 0x13f2 <can_read_message_if_new+0x68>
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	04 c0       	rjmp	.+8      	; 0x140a <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    1402:	4f 5f       	subi	r20, 0xFF	; 255
    1404:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <rx_off>
	}

	return true;
    1408:	81 e0       	ldi	r24, 0x01	; 1
}
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    1416:	ab ed       	ldi	r26, 0xDB	; 219
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	8c 91       	ld	r24, X
    141c:	8f 77       	andi	r24, 0x7F	; 127
    141e:	8c 93       	st	X, r24

	if (!tx_busy) {
    1420:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tx_busy>
    1424:	81 11       	cpse	r24, r1
    1426:	27 c0       	rjmp	.+78     	; 0x1476 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    1428:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    142c:	80 81       	ld	r24, Z
    142e:	82 95       	swap	r24
    1430:	88 0f       	add	r24, r24
    1432:	80 7e       	andi	r24, 0xE0	; 224
    1434:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	96 95       	lsr	r25
    1442:	87 95       	ror	r24
    1444:	96 95       	lsr	r25
    1446:	87 95       	ror	r24
    1448:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    144c:	df 01       	movw	r26, r30
    144e:	13 96       	adiw	r26, 0x03	; 3
    1450:	9f 01       	movw	r18, r30
    1452:	25 5f       	subi	r18, 0xF5	; 245
    1454:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1456:	ca ef       	ldi	r28, 0xFA	; 250
    1458:	d0 e0       	ldi	r29, 0x00	; 0
    145a:	9d 91       	ld	r25, X+
    145c:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    145e:	a2 17       	cp	r26, r18
    1460:	b3 07       	cpc	r27, r19
    1462:	d9 f7       	brne	.-10     	; 0x145a <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	80 64       	ori	r24, 0x40	; 64
    146e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	43 c0       	rjmp	.+134    	; 0x14fc <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1476:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <tx_on>
    147a:	82 2f       	mov	r24, r18
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <tx_off>
    1482:	83 1b       	sub	r24, r19
    1484:	91 09       	sbc	r25, r1
    1486:	8f 77       	andi	r24, 0x7F	; 127
    1488:	99 27       	eor	r25, r25
    148a:	40 97       	sbiw	r24, 0x10	; 16
    148c:	b1 f1       	breq	.+108    	; 0x14fa <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    148e:	a2 2f       	mov	r26, r18
    1490:	af 70       	andi	r26, 0x0F	; 15
    1492:	8b e0       	ldi	r24, 0x0B	; 11
    1494:	a8 9f       	mul	r26, r24
    1496:	d0 01       	movw	r26, r0
    1498:	11 24       	eor	r1, r1
    149a:	ed 01       	movw	r28, r26
    149c:	c6 50       	subi	r28, 0x06	; 6
    149e:	de 4f       	sbci	r29, 0xFE	; 254
    14a0:	80 81       	ld	r24, Z
    14a2:	98 2f       	mov	r25, r24
    14a4:	92 95       	swap	r25
    14a6:	99 0f       	add	r25, r25
    14a8:	90 7e       	andi	r25, 0xE0	; 224
    14aa:	88 81       	ld	r24, Y
    14ac:	8f 71       	andi	r24, 0x1F	; 31
    14ae:	89 2b       	or	r24, r25
    14b0:	88 83       	st	Y, r24
    14b2:	80 81       	ld	r24, Z
    14b4:	98 2f       	mov	r25, r24
    14b6:	96 95       	lsr	r25
    14b8:	96 95       	lsr	r25
    14ba:	96 95       	lsr	r25
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	80 7e       	andi	r24, 0xE0	; 224
    14c0:	89 2b       	or	r24, r25
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	92 95       	swap	r25
    14c8:	99 0f       	add	r25, r25
    14ca:	90 7e       	andi	r25, 0xE0	; 224
    14cc:	8f 71       	andi	r24, 0x1F	; 31
    14ce:	89 2b       	or	r24, r25
    14d0:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	98 2f       	mov	r25, r24
    14d6:	9f 70       	andi	r25, 0x0F	; 15
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 7f       	andi	r24, 0xF0	; 240
    14dc:	89 2b       	or	r24, r25
    14de:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    14e0:	a3 50       	subi	r26, 0x03	; 3
    14e2:	be 4f       	sbci	r27, 0xFE	; 254
    14e4:	33 96       	adiw	r30, 0x03	; 3
    14e6:	88 e0       	ldi	r24, 0x08	; 8
    14e8:	01 90       	ld	r0, Z+
    14ea:	0d 92       	st	X+, r0
    14ec:	8a 95       	dec	r24
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    14f0:	2f 5f       	subi	r18, 0xFF	; 255
    14f2:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <tx_on>
		result = true;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    14fa:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    14fc:	eb ed       	ldi	r30, 0xDB	; 219
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	90 81       	ld	r25, Z
    1502:	90 68       	ori	r25, 0x80	; 128
    1504:	90 83       	st	Z, r25

	return result;
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <rgbled_turn_off>:
    150c:	95 b1       	in	r25, 0x05	; 5
    150e:	89 2b       	or	r24, r25
    1510:	85 b9       	out	0x05, r24	; 5
    1512:	08 95       	ret

00001514 <rgbled_init>:
    1514:	84 b1       	in	r24, 0x04	; 4
    1516:	80 6e       	ori	r24, 0xE0	; 224
    1518:	84 b9       	out	0x04, r24	; 4
    151a:	80 ee       	ldi	r24, 0xE0	; 224
    151c:	f7 cf       	rjmp	.-18     	; 0x150c <rgbled_turn_off>
    151e:	08 95       	ret

00001520 <rgbled_turn_on>:
    1520:	95 b1       	in	r25, 0x05	; 5
    1522:	80 95       	com	r24
    1524:	98 23       	and	r25, r24
    1526:	95 b9       	out	0x05, r25	; 5
    1528:	08 95       	ret

0000152a <rgbled_toggle>:
    152a:	95 b1       	in	r25, 0x05	; 5
    152c:	89 27       	eor	r24, r25
    152e:	85 b9       	out	0x05, r24	; 5
    1530:	08 95       	ret

00001532 <spi_init>:
    1532:	94 b1       	in	r25, 0x04	; 4
    1534:	97 60       	ori	r25, 0x07	; 7
    1536:	94 b9       	out	0x04, r25	; 4
    1538:	82 fb       	bst	r24, 2
    153a:	99 27       	eor	r25, r25
    153c:	90 f9       	bld	r25, 0
    153e:	28 2f       	mov	r18, r24
    1540:	22 70       	andi	r18, 0x02	; 2
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	80 65       	ori	r24, 0x50	; 80
    1546:	82 2b       	or	r24, r18
    1548:	8c bd       	out	0x2c, r24	; 44
    154a:	8c b5       	in	r24, 0x2c	; 44
    154c:	83 7f       	andi	r24, 0xF3	; 243
    154e:	8c bd       	out	0x2c, r24	; 44
    1550:	9d bd       	out	0x2d, r25	; 45
    1552:	08 95       	ret

00001554 <spi_trancieve>:
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ec 01       	movw	r28, r24
    155a:	28 98       	cbi	0x05, 0	; 5
    155c:	41 15       	cp	r20, r1
    155e:	51 05       	cpc	r21, r1
    1560:	c1 f0       	breq	.+48     	; 0x1592 <spi_trancieve+0x3e>
    1562:	fb 01       	movw	r30, r22
    1564:	dc 01       	movw	r26, r24
    1566:	46 0f       	add	r20, r22
    1568:	57 1f       	adc	r21, r23
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	20 97       	sbiw	r28, 0x00	; 0
    156e:	11 f0       	breq	.+4      	; 0x1574 <spi_trancieve+0x20>
    1570:	9c 91       	ld	r25, X
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <spi_trancieve+0x22>
    1574:	98 2f       	mov	r25, r24
    1576:	9e bd       	out	0x2e, r25	; 46
    1578:	0d b4       	in	r0, 0x2d	; 45
    157a:	07 fe       	sbrs	r0, 7
    157c:	fd cf       	rjmp	.-6      	; 0x1578 <spi_trancieve+0x24>
    157e:	61 15       	cp	r22, r1
    1580:	71 05       	cpc	r23, r1
    1582:	11 f0       	breq	.+4      	; 0x1588 <spi_trancieve+0x34>
    1584:	9e b5       	in	r25, 0x2e	; 46
    1586:	90 83       	st	Z, r25
    1588:	31 96       	adiw	r30, 0x01	; 1
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	e4 17       	cp	r30, r20
    158e:	f5 07       	cpc	r31, r21
    1590:	69 f7       	brne	.-38     	; 0x156c <spi_trancieve+0x18>
    1592:	21 11       	cpse	r18, r1
    1594:	28 9a       	sbi	0x05, 0	; 5
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <__vector_17>:
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	0b b6       	in	r0, 0x3b	; 59
    15a8:	0f 92       	push	r0
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	af 93       	push	r26
    15ba:	bf 93       	push	r27
    15bc:	ef 93       	push	r30
    15be:	ff 93       	push	r31
    15c0:	aa ec       	ldi	r26, 0xCA	; 202
    15c2:	b2 e0       	ldi	r27, 0x02	; 2
    15c4:	ea ea       	ldi	r30, 0xAA	; 170
    15c6:	f2 e0       	ldi	r31, 0x02	; 2
    15c8:	2a ec       	ldi	r18, 0xCA	; 202
    15ca:	32 e0       	ldi	r19, 0x02	; 2
    15cc:	8d 91       	ld	r24, X+
    15ce:	88 23       	and	r24, r24
    15d0:	59 f0       	breq	.+22     	; 0x15e8 <__vector_17+0x4c>
    15d2:	40 81       	ld	r20, Z
    15d4:	51 81       	ldd	r21, Z+1	; 0x01
    15d6:	62 81       	ldd	r22, Z+2	; 0x02
    15d8:	73 81       	ldd	r23, Z+3	; 0x03
    15da:	50 5e       	subi	r21, 0xE0	; 224
    15dc:	6f 4f       	sbci	r22, 0xFF	; 255
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	40 83       	st	Z, r20
    15e2:	51 83       	std	Z+1, r21	; 0x01
    15e4:	62 83       	std	Z+2, r22	; 0x02
    15e6:	73 83       	std	Z+3, r23	; 0x03
    15e8:	34 96       	adiw	r30, 0x04	; 4
    15ea:	e2 17       	cp	r30, r18
    15ec:	f3 07       	cpc	r31, r19
    15ee:	71 f7       	brne	.-36     	; 0x15cc <__vector_17+0x30>
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0b be       	out	0x3b, r0	; 59
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <__subsf3>:
    1614:	50 58       	subi	r21, 0x80	; 128

00001616 <__addsf3>:
    1616:	bb 27       	eor	r27, r27
    1618:	aa 27       	eor	r26, r26
    161a:	0e d0       	rcall	.+28     	; 0x1638 <__addsf3x>
    161c:	75 c1       	rjmp	.+746    	; 0x1908 <__fp_round>
    161e:	66 d1       	rcall	.+716    	; 0x18ec <__fp_pscA>
    1620:	30 f0       	brcs	.+12     	; 0x162e <__addsf3+0x18>
    1622:	6b d1       	rcall	.+726    	; 0x18fa <__fp_pscB>
    1624:	20 f0       	brcs	.+8      	; 0x162e <__addsf3+0x18>
    1626:	31 f4       	brne	.+12     	; 0x1634 <__addsf3+0x1e>
    1628:	9f 3f       	cpi	r25, 0xFF	; 255
    162a:	11 f4       	brne	.+4      	; 0x1630 <__addsf3+0x1a>
    162c:	1e f4       	brtc	.+6      	; 0x1634 <__addsf3+0x1e>
    162e:	5b c1       	rjmp	.+694    	; 0x18e6 <__fp_nan>
    1630:	0e f4       	brtc	.+2      	; 0x1634 <__addsf3+0x1e>
    1632:	e0 95       	com	r30
    1634:	e7 fb       	bst	r30, 7
    1636:	51 c1       	rjmp	.+674    	; 0x18da <__fp_inf>

00001638 <__addsf3x>:
    1638:	e9 2f       	mov	r30, r25
    163a:	77 d1       	rcall	.+750    	; 0x192a <__fp_split3>
    163c:	80 f3       	brcs	.-32     	; 0x161e <__addsf3+0x8>
    163e:	ba 17       	cp	r27, r26
    1640:	62 07       	cpc	r22, r18
    1642:	73 07       	cpc	r23, r19
    1644:	84 07       	cpc	r24, r20
    1646:	95 07       	cpc	r25, r21
    1648:	18 f0       	brcs	.+6      	; 0x1650 <__addsf3x+0x18>
    164a:	71 f4       	brne	.+28     	; 0x1668 <__addsf3x+0x30>
    164c:	9e f5       	brtc	.+102    	; 0x16b4 <__addsf3x+0x7c>
    164e:	8f c1       	rjmp	.+798    	; 0x196e <__fp_zero>
    1650:	0e f4       	brtc	.+2      	; 0x1654 <__addsf3x+0x1c>
    1652:	e0 95       	com	r30
    1654:	0b 2e       	mov	r0, r27
    1656:	ba 2f       	mov	r27, r26
    1658:	a0 2d       	mov	r26, r0
    165a:	0b 01       	movw	r0, r22
    165c:	b9 01       	movw	r22, r18
    165e:	90 01       	movw	r18, r0
    1660:	0c 01       	movw	r0, r24
    1662:	ca 01       	movw	r24, r20
    1664:	a0 01       	movw	r20, r0
    1666:	11 24       	eor	r1, r1
    1668:	ff 27       	eor	r31, r31
    166a:	59 1b       	sub	r21, r25
    166c:	99 f0       	breq	.+38     	; 0x1694 <__addsf3x+0x5c>
    166e:	59 3f       	cpi	r21, 0xF9	; 249
    1670:	50 f4       	brcc	.+20     	; 0x1686 <__addsf3x+0x4e>
    1672:	50 3e       	cpi	r21, 0xE0	; 224
    1674:	68 f1       	brcs	.+90     	; 0x16d0 <__addsf3x+0x98>
    1676:	1a 16       	cp	r1, r26
    1678:	f0 40       	sbci	r31, 0x00	; 0
    167a:	a2 2f       	mov	r26, r18
    167c:	23 2f       	mov	r18, r19
    167e:	34 2f       	mov	r19, r20
    1680:	44 27       	eor	r20, r20
    1682:	58 5f       	subi	r21, 0xF8	; 248
    1684:	f3 cf       	rjmp	.-26     	; 0x166c <__addsf3x+0x34>
    1686:	46 95       	lsr	r20
    1688:	37 95       	ror	r19
    168a:	27 95       	ror	r18
    168c:	a7 95       	ror	r26
    168e:	f0 40       	sbci	r31, 0x00	; 0
    1690:	53 95       	inc	r21
    1692:	c9 f7       	brne	.-14     	; 0x1686 <__addsf3x+0x4e>
    1694:	7e f4       	brtc	.+30     	; 0x16b4 <__addsf3x+0x7c>
    1696:	1f 16       	cp	r1, r31
    1698:	ba 0b       	sbc	r27, r26
    169a:	62 0b       	sbc	r22, r18
    169c:	73 0b       	sbc	r23, r19
    169e:	84 0b       	sbc	r24, r20
    16a0:	ba f0       	brmi	.+46     	; 0x16d0 <__addsf3x+0x98>
    16a2:	91 50       	subi	r25, 0x01	; 1
    16a4:	a1 f0       	breq	.+40     	; 0x16ce <__addsf3x+0x96>
    16a6:	ff 0f       	add	r31, r31
    16a8:	bb 1f       	adc	r27, r27
    16aa:	66 1f       	adc	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	c2 f7       	brpl	.-16     	; 0x16a2 <__addsf3x+0x6a>
    16b2:	0e c0       	rjmp	.+28     	; 0x16d0 <__addsf3x+0x98>
    16b4:	ba 0f       	add	r27, r26
    16b6:	62 1f       	adc	r22, r18
    16b8:	73 1f       	adc	r23, r19
    16ba:	84 1f       	adc	r24, r20
    16bc:	48 f4       	brcc	.+18     	; 0x16d0 <__addsf3x+0x98>
    16be:	87 95       	ror	r24
    16c0:	77 95       	ror	r23
    16c2:	67 95       	ror	r22
    16c4:	b7 95       	ror	r27
    16c6:	f7 95       	ror	r31
    16c8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <__addsf3x+0x96>
    16cc:	b3 cf       	rjmp	.-154    	; 0x1634 <__addsf3+0x1e>
    16ce:	93 95       	inc	r25
    16d0:	88 0f       	add	r24, r24
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <__addsf3x+0x9e>
    16d4:	99 27       	eor	r25, r25
    16d6:	ee 0f       	add	r30, r30
    16d8:	97 95       	ror	r25
    16da:	87 95       	ror	r24
    16dc:	08 95       	ret

000016de <__cmpsf2>:
    16de:	d9 d0       	rcall	.+434    	; 0x1892 <__fp_cmp>
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <__cmpsf2+0x6>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	08 95       	ret

000016e6 <__divsf3>:
    16e6:	0c d0       	rcall	.+24     	; 0x1700 <__divsf3x>
    16e8:	0f c1       	rjmp	.+542    	; 0x1908 <__fp_round>
    16ea:	07 d1       	rcall	.+526    	; 0x18fa <__fp_pscB>
    16ec:	40 f0       	brcs	.+16     	; 0x16fe <__divsf3+0x18>
    16ee:	fe d0       	rcall	.+508    	; 0x18ec <__fp_pscA>
    16f0:	30 f0       	brcs	.+12     	; 0x16fe <__divsf3+0x18>
    16f2:	21 f4       	brne	.+8      	; 0x16fc <__divsf3+0x16>
    16f4:	5f 3f       	cpi	r21, 0xFF	; 255
    16f6:	19 f0       	breq	.+6      	; 0x16fe <__divsf3+0x18>
    16f8:	f0 c0       	rjmp	.+480    	; 0x18da <__fp_inf>
    16fa:	51 11       	cpse	r21, r1
    16fc:	39 c1       	rjmp	.+626    	; 0x1970 <__fp_szero>
    16fe:	f3 c0       	rjmp	.+486    	; 0x18e6 <__fp_nan>

00001700 <__divsf3x>:
    1700:	14 d1       	rcall	.+552    	; 0x192a <__fp_split3>
    1702:	98 f3       	brcs	.-26     	; 0x16ea <__divsf3+0x4>

00001704 <__divsf3_pse>:
    1704:	99 23       	and	r25, r25
    1706:	c9 f3       	breq	.-14     	; 0x16fa <__divsf3+0x14>
    1708:	55 23       	and	r21, r21
    170a:	b1 f3       	breq	.-20     	; 0x16f8 <__divsf3+0x12>
    170c:	95 1b       	sub	r25, r21
    170e:	55 0b       	sbc	r21, r21
    1710:	bb 27       	eor	r27, r27
    1712:	aa 27       	eor	r26, r26
    1714:	62 17       	cp	r22, r18
    1716:	73 07       	cpc	r23, r19
    1718:	84 07       	cpc	r24, r20
    171a:	38 f0       	brcs	.+14     	; 0x172a <__divsf3_pse+0x26>
    171c:	9f 5f       	subi	r25, 0xFF	; 255
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	44 1f       	adc	r20, r20
    1726:	aa 1f       	adc	r26, r26
    1728:	a9 f3       	breq	.-22     	; 0x1714 <__divsf3_pse+0x10>
    172a:	33 d0       	rcall	.+102    	; 0x1792 <__divsf3_pse+0x8e>
    172c:	0e 2e       	mov	r0, r30
    172e:	3a f0       	brmi	.+14     	; 0x173e <__divsf3_pse+0x3a>
    1730:	e0 e8       	ldi	r30, 0x80	; 128
    1732:	30 d0       	rcall	.+96     	; 0x1794 <__divsf3_pse+0x90>
    1734:	91 50       	subi	r25, 0x01	; 1
    1736:	50 40       	sbci	r21, 0x00	; 0
    1738:	e6 95       	lsr	r30
    173a:	00 1c       	adc	r0, r0
    173c:	ca f7       	brpl	.-14     	; 0x1730 <__divsf3_pse+0x2c>
    173e:	29 d0       	rcall	.+82     	; 0x1792 <__divsf3_pse+0x8e>
    1740:	fe 2f       	mov	r31, r30
    1742:	27 d0       	rcall	.+78     	; 0x1792 <__divsf3_pse+0x8e>
    1744:	66 0f       	add	r22, r22
    1746:	77 1f       	adc	r23, r23
    1748:	88 1f       	adc	r24, r24
    174a:	bb 1f       	adc	r27, r27
    174c:	26 17       	cp	r18, r22
    174e:	37 07       	cpc	r19, r23
    1750:	48 07       	cpc	r20, r24
    1752:	ab 07       	cpc	r26, r27
    1754:	b0 e8       	ldi	r27, 0x80	; 128
    1756:	09 f0       	breq	.+2      	; 0x175a <__divsf3_pse+0x56>
    1758:	bb 0b       	sbc	r27, r27
    175a:	80 2d       	mov	r24, r0
    175c:	bf 01       	movw	r22, r30
    175e:	ff 27       	eor	r31, r31
    1760:	93 58       	subi	r25, 0x83	; 131
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	2a f0       	brmi	.+10     	; 0x1770 <__divsf3_pse+0x6c>
    1766:	9e 3f       	cpi	r25, 0xFE	; 254
    1768:	51 05       	cpc	r21, r1
    176a:	68 f0       	brcs	.+26     	; 0x1786 <__divsf3_pse+0x82>
    176c:	b6 c0       	rjmp	.+364    	; 0x18da <__fp_inf>
    176e:	00 c1       	rjmp	.+512    	; 0x1970 <__fp_szero>
    1770:	5f 3f       	cpi	r21, 0xFF	; 255
    1772:	ec f3       	brlt	.-6      	; 0x176e <__divsf3_pse+0x6a>
    1774:	98 3e       	cpi	r25, 0xE8	; 232
    1776:	dc f3       	brlt	.-10     	; 0x176e <__divsf3_pse+0x6a>
    1778:	86 95       	lsr	r24
    177a:	77 95       	ror	r23
    177c:	67 95       	ror	r22
    177e:	b7 95       	ror	r27
    1780:	f7 95       	ror	r31
    1782:	9f 5f       	subi	r25, 0xFF	; 255
    1784:	c9 f7       	brne	.-14     	; 0x1778 <__divsf3_pse+0x74>
    1786:	88 0f       	add	r24, r24
    1788:	91 1d       	adc	r25, r1
    178a:	96 95       	lsr	r25
    178c:	87 95       	ror	r24
    178e:	97 f9       	bld	r25, 7
    1790:	08 95       	ret
    1792:	e1 e0       	ldi	r30, 0x01	; 1
    1794:	66 0f       	add	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	bb 1f       	adc	r27, r27
    179c:	62 17       	cp	r22, r18
    179e:	73 07       	cpc	r23, r19
    17a0:	84 07       	cpc	r24, r20
    17a2:	ba 07       	cpc	r27, r26
    17a4:	20 f0       	brcs	.+8      	; 0x17ae <__divsf3_pse+0xaa>
    17a6:	62 1b       	sub	r22, r18
    17a8:	73 0b       	sbc	r23, r19
    17aa:	84 0b       	sbc	r24, r20
    17ac:	ba 0b       	sbc	r27, r26
    17ae:	ee 1f       	adc	r30, r30
    17b0:	88 f7       	brcc	.-30     	; 0x1794 <__divsf3_pse+0x90>
    17b2:	e0 95       	com	r30
    17b4:	08 95       	ret

000017b6 <__fixsfsi>:
    17b6:	04 d0       	rcall	.+8      	; 0x17c0 <__fixunssfsi>
    17b8:	68 94       	set
    17ba:	b1 11       	cpse	r27, r1
    17bc:	d9 c0       	rjmp	.+434    	; 0x1970 <__fp_szero>
    17be:	08 95       	ret

000017c0 <__fixunssfsi>:
    17c0:	bc d0       	rcall	.+376    	; 0x193a <__fp_splitA>
    17c2:	88 f0       	brcs	.+34     	; 0x17e6 <__fixunssfsi+0x26>
    17c4:	9f 57       	subi	r25, 0x7F	; 127
    17c6:	90 f0       	brcs	.+36     	; 0x17ec <__fixunssfsi+0x2c>
    17c8:	b9 2f       	mov	r27, r25
    17ca:	99 27       	eor	r25, r25
    17cc:	b7 51       	subi	r27, 0x17	; 23
    17ce:	a0 f0       	brcs	.+40     	; 0x17f8 <__fixunssfsi+0x38>
    17d0:	d1 f0       	breq	.+52     	; 0x1806 <__fixunssfsi+0x46>
    17d2:	66 0f       	add	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	88 1f       	adc	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	1a f0       	brmi	.+6      	; 0x17e2 <__fixunssfsi+0x22>
    17dc:	ba 95       	dec	r27
    17de:	c9 f7       	brne	.-14     	; 0x17d2 <__fixunssfsi+0x12>
    17e0:	12 c0       	rjmp	.+36     	; 0x1806 <__fixunssfsi+0x46>
    17e2:	b1 30       	cpi	r27, 0x01	; 1
    17e4:	81 f0       	breq	.+32     	; 0x1806 <__fixunssfsi+0x46>
    17e6:	c3 d0       	rcall	.+390    	; 0x196e <__fp_zero>
    17e8:	b1 e0       	ldi	r27, 0x01	; 1
    17ea:	08 95       	ret
    17ec:	c0 c0       	rjmp	.+384    	; 0x196e <__fp_zero>
    17ee:	67 2f       	mov	r22, r23
    17f0:	78 2f       	mov	r23, r24
    17f2:	88 27       	eor	r24, r24
    17f4:	b8 5f       	subi	r27, 0xF8	; 248
    17f6:	39 f0       	breq	.+14     	; 0x1806 <__fixunssfsi+0x46>
    17f8:	b9 3f       	cpi	r27, 0xF9	; 249
    17fa:	cc f3       	brlt	.-14     	; 0x17ee <__fixunssfsi+0x2e>
    17fc:	86 95       	lsr	r24
    17fe:	77 95       	ror	r23
    1800:	67 95       	ror	r22
    1802:	b3 95       	inc	r27
    1804:	d9 f7       	brne	.-10     	; 0x17fc <__fixunssfsi+0x3c>
    1806:	3e f4       	brtc	.+14     	; 0x1816 <__fixunssfsi+0x56>
    1808:	90 95       	com	r25
    180a:	80 95       	com	r24
    180c:	70 95       	com	r23
    180e:	61 95       	neg	r22
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	8f 4f       	sbci	r24, 0xFF	; 255
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	08 95       	ret

00001818 <__floatunsisf>:
    1818:	e8 94       	clt
    181a:	09 c0       	rjmp	.+18     	; 0x182e <__floatsisf+0x12>

0000181c <__floatsisf>:
    181c:	97 fb       	bst	r25, 7
    181e:	3e f4       	brtc	.+14     	; 0x182e <__floatsisf+0x12>
    1820:	90 95       	com	r25
    1822:	80 95       	com	r24
    1824:	70 95       	com	r23
    1826:	61 95       	neg	r22
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	8f 4f       	sbci	r24, 0xFF	; 255
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	99 23       	and	r25, r25
    1830:	a9 f0       	breq	.+42     	; 0x185c <__floatsisf+0x40>
    1832:	f9 2f       	mov	r31, r25
    1834:	96 e9       	ldi	r25, 0x96	; 150
    1836:	bb 27       	eor	r27, r27
    1838:	93 95       	inc	r25
    183a:	f6 95       	lsr	r31
    183c:	87 95       	ror	r24
    183e:	77 95       	ror	r23
    1840:	67 95       	ror	r22
    1842:	b7 95       	ror	r27
    1844:	f1 11       	cpse	r31, r1
    1846:	f8 cf       	rjmp	.-16     	; 0x1838 <__floatsisf+0x1c>
    1848:	fa f4       	brpl	.+62     	; 0x1888 <__floatsisf+0x6c>
    184a:	bb 0f       	add	r27, r27
    184c:	11 f4       	brne	.+4      	; 0x1852 <__floatsisf+0x36>
    184e:	60 ff       	sbrs	r22, 0
    1850:	1b c0       	rjmp	.+54     	; 0x1888 <__floatsisf+0x6c>
    1852:	6f 5f       	subi	r22, 0xFF	; 255
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	8f 4f       	sbci	r24, 0xFF	; 255
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <__floatsisf+0x6c>
    185c:	88 23       	and	r24, r24
    185e:	11 f0       	breq	.+4      	; 0x1864 <__floatsisf+0x48>
    1860:	96 e9       	ldi	r25, 0x96	; 150
    1862:	11 c0       	rjmp	.+34     	; 0x1886 <__floatsisf+0x6a>
    1864:	77 23       	and	r23, r23
    1866:	21 f0       	breq	.+8      	; 0x1870 <__floatsisf+0x54>
    1868:	9e e8       	ldi	r25, 0x8E	; 142
    186a:	87 2f       	mov	r24, r23
    186c:	76 2f       	mov	r23, r22
    186e:	05 c0       	rjmp	.+10     	; 0x187a <__floatsisf+0x5e>
    1870:	66 23       	and	r22, r22
    1872:	71 f0       	breq	.+28     	; 0x1890 <__floatsisf+0x74>
    1874:	96 e8       	ldi	r25, 0x86	; 134
    1876:	86 2f       	mov	r24, r22
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	2a f0       	brmi	.+10     	; 0x1888 <__floatsisf+0x6c>
    187e:	9a 95       	dec	r25
    1880:	66 0f       	add	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	da f7       	brpl	.-10     	; 0x187e <__floatsisf+0x62>
    1888:	88 0f       	add	r24, r24
    188a:	96 95       	lsr	r25
    188c:	87 95       	ror	r24
    188e:	97 f9       	bld	r25, 7
    1890:	08 95       	ret

00001892 <__fp_cmp>:
    1892:	99 0f       	add	r25, r25
    1894:	00 08       	sbc	r0, r0
    1896:	55 0f       	add	r21, r21
    1898:	aa 0b       	sbc	r26, r26
    189a:	e0 e8       	ldi	r30, 0x80	; 128
    189c:	fe ef       	ldi	r31, 0xFE	; 254
    189e:	16 16       	cp	r1, r22
    18a0:	17 06       	cpc	r1, r23
    18a2:	e8 07       	cpc	r30, r24
    18a4:	f9 07       	cpc	r31, r25
    18a6:	c0 f0       	brcs	.+48     	; 0x18d8 <__fp_cmp+0x46>
    18a8:	12 16       	cp	r1, r18
    18aa:	13 06       	cpc	r1, r19
    18ac:	e4 07       	cpc	r30, r20
    18ae:	f5 07       	cpc	r31, r21
    18b0:	98 f0       	brcs	.+38     	; 0x18d8 <__fp_cmp+0x46>
    18b2:	62 1b       	sub	r22, r18
    18b4:	73 0b       	sbc	r23, r19
    18b6:	84 0b       	sbc	r24, r20
    18b8:	95 0b       	sbc	r25, r21
    18ba:	39 f4       	brne	.+14     	; 0x18ca <__fp_cmp+0x38>
    18bc:	0a 26       	eor	r0, r26
    18be:	61 f0       	breq	.+24     	; 0x18d8 <__fp_cmp+0x46>
    18c0:	23 2b       	or	r18, r19
    18c2:	24 2b       	or	r18, r20
    18c4:	25 2b       	or	r18, r21
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <__fp_cmp+0x3e>
    18c8:	08 95       	ret
    18ca:	0a 26       	eor	r0, r26
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <__fp_cmp+0x3e>
    18ce:	a1 40       	sbci	r26, 0x01	; 1
    18d0:	a6 95       	lsr	r26
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	81 1d       	adc	r24, r1
    18d6:	81 1d       	adc	r24, r1
    18d8:	08 95       	ret

000018da <__fp_inf>:
    18da:	97 f9       	bld	r25, 7
    18dc:	9f 67       	ori	r25, 0x7F	; 127
    18de:	80 e8       	ldi	r24, 0x80	; 128
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	08 95       	ret

000018e6 <__fp_nan>:
    18e6:	9f ef       	ldi	r25, 0xFF	; 255
    18e8:	80 ec       	ldi	r24, 0xC0	; 192
    18ea:	08 95       	ret

000018ec <__fp_pscA>:
    18ec:	00 24       	eor	r0, r0
    18ee:	0a 94       	dec	r0
    18f0:	16 16       	cp	r1, r22
    18f2:	17 06       	cpc	r1, r23
    18f4:	18 06       	cpc	r1, r24
    18f6:	09 06       	cpc	r0, r25
    18f8:	08 95       	ret

000018fa <__fp_pscB>:
    18fa:	00 24       	eor	r0, r0
    18fc:	0a 94       	dec	r0
    18fe:	12 16       	cp	r1, r18
    1900:	13 06       	cpc	r1, r19
    1902:	14 06       	cpc	r1, r20
    1904:	05 06       	cpc	r0, r21
    1906:	08 95       	ret

00001908 <__fp_round>:
    1908:	09 2e       	mov	r0, r25
    190a:	03 94       	inc	r0
    190c:	00 0c       	add	r0, r0
    190e:	11 f4       	brne	.+4      	; 0x1914 <__fp_round+0xc>
    1910:	88 23       	and	r24, r24
    1912:	52 f0       	brmi	.+20     	; 0x1928 <__fp_round+0x20>
    1914:	bb 0f       	add	r27, r27
    1916:	40 f4       	brcc	.+16     	; 0x1928 <__fp_round+0x20>
    1918:	bf 2b       	or	r27, r31
    191a:	11 f4       	brne	.+4      	; 0x1920 <__fp_round+0x18>
    191c:	60 ff       	sbrs	r22, 0
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <__fp_round+0x20>
    1920:	6f 5f       	subi	r22, 0xFF	; 255
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	8f 4f       	sbci	r24, 0xFF	; 255
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	08 95       	ret

0000192a <__fp_split3>:
    192a:	57 fd       	sbrc	r21, 7
    192c:	90 58       	subi	r25, 0x80	; 128
    192e:	44 0f       	add	r20, r20
    1930:	55 1f       	adc	r21, r21
    1932:	59 f0       	breq	.+22     	; 0x194a <__fp_splitA+0x10>
    1934:	5f 3f       	cpi	r21, 0xFF	; 255
    1936:	71 f0       	breq	.+28     	; 0x1954 <__fp_splitA+0x1a>
    1938:	47 95       	ror	r20

0000193a <__fp_splitA>:
    193a:	88 0f       	add	r24, r24
    193c:	97 fb       	bst	r25, 7
    193e:	99 1f       	adc	r25, r25
    1940:	61 f0       	breq	.+24     	; 0x195a <__fp_splitA+0x20>
    1942:	9f 3f       	cpi	r25, 0xFF	; 255
    1944:	79 f0       	breq	.+30     	; 0x1964 <__fp_splitA+0x2a>
    1946:	87 95       	ror	r24
    1948:	08 95       	ret
    194a:	12 16       	cp	r1, r18
    194c:	13 06       	cpc	r1, r19
    194e:	14 06       	cpc	r1, r20
    1950:	55 1f       	adc	r21, r21
    1952:	f2 cf       	rjmp	.-28     	; 0x1938 <__fp_split3+0xe>
    1954:	46 95       	lsr	r20
    1956:	f1 df       	rcall	.-30     	; 0x193a <__fp_splitA>
    1958:	08 c0       	rjmp	.+16     	; 0x196a <__fp_splitA+0x30>
    195a:	16 16       	cp	r1, r22
    195c:	17 06       	cpc	r1, r23
    195e:	18 06       	cpc	r1, r24
    1960:	99 1f       	adc	r25, r25
    1962:	f1 cf       	rjmp	.-30     	; 0x1946 <__fp_splitA+0xc>
    1964:	86 95       	lsr	r24
    1966:	71 05       	cpc	r23, r1
    1968:	61 05       	cpc	r22, r1
    196a:	08 94       	sec
    196c:	08 95       	ret

0000196e <__fp_zero>:
    196e:	e8 94       	clt

00001970 <__fp_szero>:
    1970:	bb 27       	eor	r27, r27
    1972:	66 27       	eor	r22, r22
    1974:	77 27       	eor	r23, r23
    1976:	cb 01       	movw	r24, r22
    1978:	97 f9       	bld	r25, 7
    197a:	08 95       	ret

0000197c <__gesf2>:
    197c:	8a df       	rcall	.-236    	; 0x1892 <__fp_cmp>
    197e:	08 f4       	brcc	.+2      	; 0x1982 <__gesf2+0x6>
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	08 95       	ret

00001984 <__mulsf3>:
    1984:	0b d0       	rcall	.+22     	; 0x199c <__mulsf3x>
    1986:	c0 cf       	rjmp	.-128    	; 0x1908 <__fp_round>
    1988:	b1 df       	rcall	.-158    	; 0x18ec <__fp_pscA>
    198a:	28 f0       	brcs	.+10     	; 0x1996 <__mulsf3+0x12>
    198c:	b6 df       	rcall	.-148    	; 0x18fa <__fp_pscB>
    198e:	18 f0       	brcs	.+6      	; 0x1996 <__mulsf3+0x12>
    1990:	95 23       	and	r25, r21
    1992:	09 f0       	breq	.+2      	; 0x1996 <__mulsf3+0x12>
    1994:	a2 cf       	rjmp	.-188    	; 0x18da <__fp_inf>
    1996:	a7 cf       	rjmp	.-178    	; 0x18e6 <__fp_nan>
    1998:	11 24       	eor	r1, r1
    199a:	ea cf       	rjmp	.-44     	; 0x1970 <__fp_szero>

0000199c <__mulsf3x>:
    199c:	c6 df       	rcall	.-116    	; 0x192a <__fp_split3>
    199e:	a0 f3       	brcs	.-24     	; 0x1988 <__mulsf3+0x4>

000019a0 <__mulsf3_pse>:
    19a0:	95 9f       	mul	r25, r21
    19a2:	d1 f3       	breq	.-12     	; 0x1998 <__mulsf3+0x14>
    19a4:	95 0f       	add	r25, r21
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	55 1f       	adc	r21, r21
    19aa:	62 9f       	mul	r22, r18
    19ac:	f0 01       	movw	r30, r0
    19ae:	72 9f       	mul	r23, r18
    19b0:	bb 27       	eor	r27, r27
    19b2:	f0 0d       	add	r31, r0
    19b4:	b1 1d       	adc	r27, r1
    19b6:	63 9f       	mul	r22, r19
    19b8:	aa 27       	eor	r26, r26
    19ba:	f0 0d       	add	r31, r0
    19bc:	b1 1d       	adc	r27, r1
    19be:	aa 1f       	adc	r26, r26
    19c0:	64 9f       	mul	r22, r20
    19c2:	66 27       	eor	r22, r22
    19c4:	b0 0d       	add	r27, r0
    19c6:	a1 1d       	adc	r26, r1
    19c8:	66 1f       	adc	r22, r22
    19ca:	82 9f       	mul	r24, r18
    19cc:	22 27       	eor	r18, r18
    19ce:	b0 0d       	add	r27, r0
    19d0:	a1 1d       	adc	r26, r1
    19d2:	62 1f       	adc	r22, r18
    19d4:	73 9f       	mul	r23, r19
    19d6:	b0 0d       	add	r27, r0
    19d8:	a1 1d       	adc	r26, r1
    19da:	62 1f       	adc	r22, r18
    19dc:	83 9f       	mul	r24, r19
    19de:	a0 0d       	add	r26, r0
    19e0:	61 1d       	adc	r22, r1
    19e2:	22 1f       	adc	r18, r18
    19e4:	74 9f       	mul	r23, r20
    19e6:	33 27       	eor	r19, r19
    19e8:	a0 0d       	add	r26, r0
    19ea:	61 1d       	adc	r22, r1
    19ec:	23 1f       	adc	r18, r19
    19ee:	84 9f       	mul	r24, r20
    19f0:	60 0d       	add	r22, r0
    19f2:	21 1d       	adc	r18, r1
    19f4:	82 2f       	mov	r24, r18
    19f6:	76 2f       	mov	r23, r22
    19f8:	6a 2f       	mov	r22, r26
    19fa:	11 24       	eor	r1, r1
    19fc:	9f 57       	subi	r25, 0x7F	; 127
    19fe:	50 40       	sbci	r21, 0x00	; 0
    1a00:	8a f0       	brmi	.+34     	; 0x1a24 <__mulsf3_pse+0x84>
    1a02:	e1 f0       	breq	.+56     	; 0x1a3c <__mulsf3_pse+0x9c>
    1a04:	88 23       	and	r24, r24
    1a06:	4a f0       	brmi	.+18     	; 0x1a1a <__mulsf3_pse+0x7a>
    1a08:	ee 0f       	add	r30, r30
    1a0a:	ff 1f       	adc	r31, r31
    1a0c:	bb 1f       	adc	r27, r27
    1a0e:	66 1f       	adc	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	88 1f       	adc	r24, r24
    1a14:	91 50       	subi	r25, 0x01	; 1
    1a16:	50 40       	sbci	r21, 0x00	; 0
    1a18:	a9 f7       	brne	.-22     	; 0x1a04 <__mulsf3_pse+0x64>
    1a1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	70 f0       	brcs	.+28     	; 0x1a3c <__mulsf3_pse+0x9c>
    1a20:	5c cf       	rjmp	.-328    	; 0x18da <__fp_inf>
    1a22:	a6 cf       	rjmp	.-180    	; 0x1970 <__fp_szero>
    1a24:	5f 3f       	cpi	r21, 0xFF	; 255
    1a26:	ec f3       	brlt	.-6      	; 0x1a22 <__mulsf3_pse+0x82>
    1a28:	98 3e       	cpi	r25, 0xE8	; 232
    1a2a:	dc f3       	brlt	.-10     	; 0x1a22 <__mulsf3_pse+0x82>
    1a2c:	86 95       	lsr	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	b7 95       	ror	r27
    1a34:	f7 95       	ror	r31
    1a36:	e7 95       	ror	r30
    1a38:	9f 5f       	subi	r25, 0xFF	; 255
    1a3a:	c1 f7       	brne	.-16     	; 0x1a2c <__mulsf3_pse+0x8c>
    1a3c:	fe 2b       	or	r31, r30
    1a3e:	88 0f       	add	r24, r24
    1a40:	91 1d       	adc	r25, r1
    1a42:	96 95       	lsr	r25
    1a44:	87 95       	ror	r24
    1a46:	97 f9       	bld	r25, 7
    1a48:	08 95       	ret

00001a4a <__tablejump2__>:
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	00 24       	eor	r0, r0
    1a50:	00 1c       	adc	r0, r0
    1a52:	0b be       	out	0x3b, r0	; 59
    1a54:	07 90       	elpm	r0, Z+
    1a56:	f6 91       	elpm	r31, Z
    1a58:	e0 2d       	mov	r30, r0
    1a5a:	09 94       	ijmp

00001a5c <_exit>:
    1a5c:	f8 94       	cli

00001a5e <__stop_program>:
    1a5e:	ff cf       	rjmp	.-2      	; 0x1a5e <__stop_program>
