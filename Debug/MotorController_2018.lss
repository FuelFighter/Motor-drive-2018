
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000265a  000026ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000265a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024a  0080013a  0080013a  00002728  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000595d  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aa1  00000000  00000000  000085e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002aef  00000000  00000000  0000a082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ec0  00000000  00000000  0000cb74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001600  00000000  00000000  0000da34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d39  00000000  00000000  0000f034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00012d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_6>
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_12>
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_16>
      44:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_17>
      48:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	92 c7       	rjmp	.+3876   	; 0xf7a <__vector_21>
      56:	00 00       	nop
      58:	72 c7       	rjmp	.+3812   	; 0xf3e <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b5 c7       	rjmp	.+3946   	; 0xfec <__vector_32>
      82:	00 00       	nop
      84:	95 c7       	rjmp	.+3882   	; 0xfb0 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	3d 0b       	sbc	r19, r29
      96:	42 0b       	sbc	r20, r18
      98:	48 0b       	sbc	r20, r24
      9a:	4e 0b       	sbc	r20, r30
      9c:	54 0b       	sbc	r21, r20
      9e:	59 0b       	sbc	r21, r25
      a0:	5f 0b       	sbc	r21, r31
      a2:	65 0b       	sbc	r22, r21

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e5       	ldi	r30, 0x5A	; 90
      b8:	f6 e2       	ldi	r31, 0x26	; 38
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	aa 33       	cpi	r26, 0x3A	; 58
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	aa e3       	ldi	r26, 0x3A	; 58
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a4 38       	cpi	r26, 0x84	; 132
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	ca d7       	rcall	.+3988   	; 0x1070 <main>
      dc:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static uint8_t b_saturation = 0;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <f32_Integrator>
      e6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <f32_Integrator+0x1>
      ea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <f32_Integrator+0x2>
      ee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <set_I>:
}

void set_I(uint8_t duty)
{
	f32_Integrator = duty;
      f4:	68 2f       	mov	r22, r24
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     100:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <f32_Integrator>
     104:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <f32_Integrator+0x1>
     108:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <f32_Integrator+0x2>
     10c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <f32_Integrator+0x3>
     110:	08 95       	ret

00000112 <controller>:
}

void controller(ModuleValues_t *vals){
     112:	8f 92       	push	r8
     114:	9f 92       	push	r9
     116:	af 92       	push	r10
     118:	bf 92       	push	r11
     11a:	cf 92       	push	r12
     11c:	df 92       	push	r13
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	ec 01       	movw	r28, r24

	if (vals->ctrl_type == CURRENT)
     12c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     12e:	81 11       	cpse	r24, r1
     130:	87 c0       	rjmp	.+270    	; 0x240 <controller+0x12e>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     132:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     136:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     13a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     13e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	4e eb       	ldi	r20, 0xBE	; 190
     148:	52 e4       	ldi	r21, 0x42	; 66
     14a:	c7 01       	movw	r24, r14
     14c:	b6 01       	movw	r22, r12
     14e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__gesf2>
     152:	88 23       	and	r24, r24
     154:	54 f4       	brge	.+20     	; 0x16a <controller+0x58>
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	48 e4       	ldi	r20, 0x48	; 72
     15c:	52 e4       	ldi	r21, 0x42	; 66
     15e:	c7 01       	movw	r24, r14
     160:	b6 01       	movw	r22, r12
     162:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__cmpsf2>
     166:	18 16       	cp	r1, r24
     168:	24 f0       	brlt	.+8      	; 0x172 <controller+0x60>
		{
			b_saturation = 1 ;
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
     170:	02 c0       	rjmp	.+4      	; 0x176 <controller+0x64>
			} else {
			b_saturation = 0;
     172:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
		}
		
		f32_CurrentDelta = ((float)(vals->i8_throttle_cmd)-vals->f32_motor_current)	;
     176:	6b 89       	ldd	r22, Y+19	; 0x13
     178:	06 2e       	mov	r0, r22
     17a:	00 0c       	add	r0, r0
     17c:	77 0b       	sbc	r23, r23
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatsisf>
     186:	28 81       	ld	r18, Y
     188:	39 81       	ldd	r19, Y+1	; 0x01
     18a:	4a 81       	ldd	r20, Y+2	; 0x02
     18c:	5b 81       	ldd	r21, Y+3	; 0x03
     18e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__subsf3>
     192:	6b 01       	movw	r12, r22
     194:	7c 01       	movw	r14, r24
     196:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <f32_CurrentDelta>
     19a:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <f32_CurrentDelta+0x1>
     19e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <f32_CurrentDelta+0x2>
     1a2:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <f32_CurrentDelta+0x3>
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     1a6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     1aa:	81 11       	cpse	r24, r1
     1ac:	1c c0       	rjmp	.+56     	; 0x1e6 <controller+0xd4>
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     1ae:	2a e0       	ldi	r18, 0x0A	; 10
     1b0:	37 ed       	ldi	r19, 0xD7	; 215
     1b2:	43 e2       	ldi	r20, 0x23	; 35
     1b4:	5c e3       	ldi	r21, 0x3C	; 60
     1b6:	c7 01       	movw	r24, r14
     1b8:	b6 01       	movw	r22, r12
     1ba:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     1be:	9b 01       	movw	r18, r22
     1c0:	ac 01       	movw	r20, r24
     1c2:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <f32_Integrator>
     1c6:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <f32_Integrator+0x1>
     1ca:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <f32_Integrator+0x2>
     1ce:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <f32_Integrator+0x3>
     1d2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__addsf3>
     1d6:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <f32_Integrator>
     1da:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <f32_Integrator+0x1>
     1de:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <f32_Integrator+0x2>
     1e2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1e6:	23 e3       	ldi	r18, 0x33	; 51
     1e8:	33 e3       	ldi	r19, 0x33	; 51
     1ea:	43 e7       	ldi	r20, 0x73	; 115
     1ec:	52 e4       	ldi	r21, 0x42	; 66
     1ee:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <f32_Integrator>
     1f2:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <f32_Integrator+0x1>
     1f6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <f32_Integrator+0x2>
     1fa:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <f32_Integrator+0x3>
     1fe:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     202:	4b 01       	movw	r8, r22
     204:	5c 01       	movw	r10, r24
     206:	29 ef       	ldi	r18, 0xF9	; 249
     208:	3f e0       	ldi	r19, 0x0F	; 15
     20a:	49 e7       	ldi	r20, 0x79	; 121
     20c:	5f e3       	ldi	r21, 0x3F	; 63
     20e:	c7 01       	movw	r24, r14
     210:	b6 01       	movw	r22, r12
     212:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     216:	9b 01       	movw	r18, r22
     218:	ac 01       	movw	r20, r24
     21a:	c5 01       	movw	r24, r10
     21c:	b4 01       	movw	r22, r8
     21e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__addsf3>
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	48 e4       	ldi	r20, 0x48	; 72
     228:	52 e4       	ldi	r21, 0x42	; 66
     22a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__addsf3>
     22e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     232:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     236:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     23a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     23e:	10 c0       	rjmp	.+32     	; 0x260 <controller+0x14e>
	
	}else if (vals->ctrl_type == PWM)
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	71 f4       	brne	.+28     	; 0x260 <controller+0x14e>
	{
		f32_DutyCycleCmd = (float)(vals->u8_duty_cycle);
     244:	6c 89       	ldd	r22, Y+20	; 0x14
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     250:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     254:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     258:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     25c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     260:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     264:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     268:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     26c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	4e eb       	ldi	r20, 0xBE	; 190
     276:	52 e4       	ldi	r21, 0x42	; 66
     278:	c7 01       	movw	r24, r14
     27a:	b6 01       	movw	r22, r12
     27c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__gesf2>
     280:	18 16       	cp	r1, r24
     282:	6c f4       	brge	.+26     	; 0x29e <controller+0x18c>
	{
		f32_DutyCycleCmd = 95;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ae eb       	ldi	r26, 0xBE	; 190
     28a:	b2 e4       	ldi	r27, 0x42	; 66
     28c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     290:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     294:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     298:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     29c:	16 c0       	rjmp	.+44     	; 0x2ca <controller+0x1b8>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	48 e4       	ldi	r20, 0x48	; 72
     2a4:	52 e4       	ldi	r21, 0x42	; 66
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__cmpsf2>
     2ae:	88 23       	and	r24, r24
     2b0:	64 f4       	brge	.+24     	; 0x2ca <controller+0x1b8>
	{
		f32_DutyCycleCmd = 50;
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	a8 e4       	ldi	r26, 0x48	; 72
     2b8:	b2 e4       	ldi	r27, 0x42	; 66
     2ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2c2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2c6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     2ca:	06 e9       	ldi	r16, 0x96	; 150
     2cc:	10 e0       	ldi	r17, 0x00	; 0
     2ce:	f8 01       	movw	r30, r16
     2d0:	e0 80       	ld	r14, Z
     2d2:	f1 80       	ldd	r15, Z+1	; 0x01
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	48 ec       	ldi	r20, 0xC8	; 200
     2da:	52 e4       	ldi	r21, 0x42	; 66
     2dc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2e0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2ec:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     2f0:	4b 01       	movw	r8, r22
     2f2:	5c 01       	movw	r10, r24
     2f4:	b7 01       	movw	r22, r14
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c5 01       	movw	r24, r10
     304:	b4 01       	movw	r22, r8
     306:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     30a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fixsfsi>
     30e:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     312:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     316:	f8 01       	movw	r30, r16
     318:	60 81       	ld	r22, Z
     31a:	71 81       	ldd	r23, Z+1	; 0x01
     31c:	00 81       	ld	r16, Z
     31e:	11 81       	ldd	r17, Z+1	; 0x01
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     328:	6b 01       	movw	r12, r22
     32a:	7c 01       	movw	r14, r24
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	48 ec       	ldi	r20, 0xC8	; 200
     332:	52 e4       	ldi	r21, 0x42	; 66
     334:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     338:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     33c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     340:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     344:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     348:	4b 01       	movw	r8, r22
     34a:	5c 01       	movw	r10, r24
     34c:	b8 01       	movw	r22, r16
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     356:	9b 01       	movw	r18, r22
     358:	ac 01       	movw	r20, r24
     35a:	c5 01       	movw	r24, r10
     35c:	b4 01       	movw	r22, r8
     35e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__subsf3>
     36e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fixsfsi>
     372:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     376:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	vals->u8_duty_cycle = (uint16_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     37a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     37e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     382:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     386:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     38a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     38e:	6c 8b       	std	Y+20, r22	; 0x14
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	08 95       	ret

000003aa <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     3aa:	24 9a       	sbi	0x04, 4	; 4
     3ac:	08 95       	ret

000003ae <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state)
     3ae:	88 23       	and	r24, r24
     3b0:	11 f0       	breq	.+4      	; 0x3b6 <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     3b2:	2c 9a       	sbi	0x05, 4	; 5
     3b4:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     3b6:	2c 98       	cbi	0x05, 4	; 5
     3b8:	08 95       	ret

000003ba <SPI_handler_0>:
static uint8_t u8_rxBuffer[3];

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     3c0:	66 e4       	ldi	r22, 0x46	; 70
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 35 0b 	call	0x166a	; 0x166a <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	43 e0       	ldi	r20, 0x03	; 3
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	63 e4       	ldi	r22, 0x43	; 67
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	86 e4       	ldi	r24, 0x46	; 70
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     3dc:	e3 e4       	ldi	r30, 0x43	; 67
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	61 81       	ldd	r22, Z+1	; 0x01
     3e2:	6f 71       	andi	r22, 0x1F	; 31
     3e4:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg,0);
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	76 2f       	mov	r23, r22
     3ea:	66 27       	eor	r22, r22
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	68 2b       	or	r22, r24
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 00 0a 	call	0x1400	; 0x1400 <handle_current_sensor>
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     404:	66 e4       	ldi	r22, 0x46	; 70
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 35 0b 	call	0x166a	; 0x166a <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     40e:	21 e0       	ldi	r18, 0x01	; 1
     410:	43 e0       	ldi	r20, 0x03	; 3
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	63 e4       	ldi	r22, 0x43	; 67
     416:	71 e0       	ldi	r23, 0x01	; 1
     418:	86 e4       	ldi	r24, 0x46	; 70
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     420:	e3 e4       	ldi	r30, 0x43	; 67
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	61 81       	ldd	r22, Z+1	; 0x01
     426:	6f 71       	andi	r22, 0x1F	; 31
     428:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg,1);
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	76 2f       	mov	r23, r22
     42e:	66 27       	eor	r22, r22
     430:	82 81       	ldd	r24, Z+2	; 0x02
     432:	68 2b       	or	r22, r24
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	ce 01       	movw	r24, r28
     438:	e3 d7       	rcall	.+4038   	; 0x1400 <handle_current_sensor>
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     446:	66 e4       	ldi	r22, 0x46	; 70
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 35 0b 	call	0x166a	; 0x166a <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     450:	21 e0       	ldi	r18, 0x01	; 1
     452:	43 e0       	ldi	r20, 0x03	; 3
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	63 e4       	ldi	r22, 0x43	; 67
     458:	71 e0       	ldi	r23, 0x01	; 1
     45a:	86 e4       	ldi	r24, 0x46	; 70
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     462:	e3 e4       	ldi	r30, 0x43	; 67
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	61 81       	ldd	r22, Z+1	; 0x01
     468:	6f 71       	andi	r22, 0x1F	; 31
     46a:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	76 2f       	mov	r23, r22
     470:	66 27       	eor	r22, r22
     472:	82 81       	ldd	r24, Z+2	; 0x02
     474:	68 2b       	or	r22, r24
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     47e:	23 e3       	ldi	r18, 0x33	; 51
     480:	33 e3       	ldi	r19, 0x33	; 51
     482:	44 e8       	ldi	r20, 0x84	; 132
     484:	52 e4       	ldi	r21, 0x42	; 66
     486:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     48a:	24 ea       	ldi	r18, 0xA4	; 164
     48c:	30 e7       	ldi	r19, 0x70	; 112
     48e:	4d eb       	ldi	r20, 0xBD	; 189
     490:	5e e3       	ldi	r21, 0x3E	; 62
     492:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__subsf3>
     496:	68 83       	st	Y, r22
     498:	79 83       	std	Y+1, r23	; 0x01
     49a:	8a 83       	std	Y+2, r24	; 0x02
     49c:	9b 83       	std	Y+3, r25	; 0x03
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     4aa:	66 e4       	ldi	r22, 0x46	; 70
     4ac:	71 e0       	ldi	r23, 0x01	; 1
     4ae:	84 e0       	ldi	r24, 0x04	; 4
     4b0:	0e 94 35 0b 	call	0x166a	; 0x166a <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	43 e0       	ldi	r20, 0x03	; 3
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	63 e4       	ldi	r22, 0x43	; 67
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	86 e4       	ldi	r24, 0x46	; 70
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4c6:	e3 e4       	ldi	r30, 0x43	; 67
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	61 81       	ldd	r22, Z+1	; 0x01
     4cc:	6f 71       	andi	r22, 0x1F	; 31
     4ce:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	76 2f       	mov	r23, r22
     4d4:	66 27       	eor	r22, r22
     4d6:	82 81       	ldd	r24, Z+2	; 0x02
     4d8:	68 2b       	or	r22, r24
     4da:	ce 01       	movw	r24, r28
     4dc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <handle_temp_sensor>
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <handle_can>:

///////////////////////  CAN  /////////////////////////


//receiving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	8c 01       	movw	r16, r24
     4f0:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx) && vals->motor_status != ERR){
     4f2:	cb 01       	movw	r24, r22
     4f4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <can_read_message_if_new>
     4f8:	88 23       	and	r24, r24
     4fa:	09 f4       	brne	.+2      	; 0x4fe <handle_can+0x18>
     4fc:	56 c0       	rjmp	.+172    	; 0x5aa <handle_can+0xc4>
     4fe:	f8 01       	movw	r30, r16
     500:	81 8d       	ldd	r24, Z+25	; 0x19
     502:	84 30       	cpi	r24, 0x04	; 4
     504:	09 f4       	brne	.+2      	; 0x508 <handle_can+0x22>
     506:	51 c0       	rjmp	.+162    	; 0x5aa <handle_can+0xc4>
		switch (rx->id){
     508:	28 81       	ld	r18, Y
     50a:	39 81       	ldd	r19, Y+1	; 0x01
     50c:	20 32       	cpi	r18, 0x20	; 32
     50e:	f1 e0       	ldi	r31, 0x01	; 1
     510:	3f 07       	cpc	r19, r31
     512:	e9 f1       	breq	.+122    	; 0x58e <handle_can+0xa8>
     514:	20 33       	cpi	r18, 0x30	; 48
     516:	32 40       	sbci	r19, 0x02	; 2
     518:	09 f0       	breq	.+2      	; 0x51c <handle_can+0x36>
     51a:	47 c0       	rjmp	.+142    	; 0x5aa <handle_can+0xc4>
			case DASHBOARD_CAN_ID	: //receiving can messages from the steering wheel
				
				vals->message_mode = CAN ;
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	f8 01       	movw	r30, r16
     520:	92 8f       	std	Z+26, r25	; 0x1a
				vals->ctrl_type = CURRENT ;
     522:	16 8e       	std	Z+30, r1	; 0x1e
				vals->u16_watchdog_can = WATCHDOG_CAN_RELOAD_VALUE ; // resetting to max value each time a message is received.
     524:	28 ec       	ldi	r18, 0xC8	; 200
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	36 8b       	std	Z+22, r19	; 0x16
     52a:	25 8b       	std	Z+21, r18	; 0x15

				if (rx->data.u8[3] > 10 && (vals->motor_status == IDLE || vals->motor_status == ACCEL))
     52c:	9e 81       	ldd	r25, Y+6	; 0x06
     52e:	9b 30       	cpi	r25, 0x0B	; 11
     530:	c0 f1       	brcs	.+112    	; 0x5a2 <handle_can+0xbc>
     532:	28 2f       	mov	r18, r24
     534:	2d 7f       	andi	r18, 0xFD	; 253
     536:	21 30       	cpi	r18, 0x01	; 1
     538:	81 f5       	brne	.+96     	; 0x59a <handle_can+0xb4>
				{
					vals->i8_throttle_cmd = rx->data.u8[3]/10 ; 
     53a:	2d ec       	ldi	r18, 0xCD	; 205
     53c:	92 9f       	mul	r25, r18
     53e:	91 2d       	mov	r25, r1
     540:	11 24       	eor	r1, r1
     542:	96 95       	lsr	r25
     544:	96 95       	lsr	r25
     546:	96 95       	lsr	r25
     548:	93 8b       	std	Z+19, r25	; 0x13
					vals->u16_watchdog_throttle = WATCHDOG_THROTTLE_RELOAD_VALUE ;
     54a:	28 ec       	ldi	r18, 0xC8	; 200
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	30 8f       	std	Z+24, r19	; 0x18
     550:	27 8b       	std	Z+23, r18	; 0x17
				}
				
				if (rx->data.u8[2] > 25 && (vals->motor_status == IDLE || vals->motor_status == BRAKE))
     552:	9d 81       	ldd	r25, Y+5	; 0x05
     554:	9a 31       	cpi	r25, 0x1A	; 26
     556:	a8 f0       	brcs	.+42     	; 0x582 <handle_can+0x9c>
     558:	82 50       	subi	r24, 0x02	; 2
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	30 f5       	brcc	.+76     	; 0x5aa <handle_can+0xc4>
				{
					vals->i8_throttle_cmd = -rx->data.u8[2]/10 ;
     55e:	89 2f       	mov	r24, r25
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	91 95       	neg	r25
     564:	81 95       	neg	r24
     566:	91 09       	sbc	r25, r1
     568:	6a e0       	ldi	r22, 0x0A	; 10
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	0e 94 11 10 	call	0x2022	; 0x2022 <__divmodhi4>
     570:	f8 01       	movw	r30, r16
     572:	63 8b       	std	Z+19, r22	; 0x13
					vals->u16_watchdog_throttle = WATCHDOG_THROTTLE_RELOAD_VALUE ;
     574:	88 ec       	ldi	r24, 0xC8	; 200
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	90 8f       	std	Z+24, r25	; 0x18
     57a:	87 8b       	std	Z+23, r24	; 0x17
				}
				
				if (rx->data.u8[2] <= 25 && rx->data.u8[3] <= 10)
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	8a 31       	cpi	r24, 0x1A	; 26
     580:	a0 f4       	brcc	.+40     	; 0x5aa <handle_can+0xc4>
     582:	8e 81       	ldd	r24, Y+6	; 0x06
     584:	8b 30       	cpi	r24, 0x0B	; 11
     586:	88 f4       	brcc	.+34     	; 0x5aa <handle_can+0xc4>
				{
					vals->i8_throttle_cmd = 0;
     588:	f8 01       	movw	r30, r16
     58a:	13 8a       	std	Z+19, r1	; 0x13
     58c:	0e c0       	rjmp	.+28     	; 0x5aa <handle_can+0xc4>
				}
				
			break;
			
			case E_CLUTCH_CAN_ID :
				vals->pwtrain_type = GEAR ;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	f8 01       	movw	r30, r16
     592:	80 a3       	std	Z+32, r24	; 0x20
				vals->gear_status = rx->data.u8[0] ; //receiving gear status from the clutch
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	83 8f       	std	Z+27, r24	; 0x1b
			break;
		}
	}
}
     598:	08 c0       	rjmp	.+16     	; 0x5aa <handle_can+0xc4>
				{
					vals->i8_throttle_cmd = rx->data.u8[3]/10 ; 
					vals->u16_watchdog_throttle = WATCHDOG_THROTTLE_RELOAD_VALUE ;
				}
				
				if (rx->data.u8[2] > 25 && (vals->motor_status == IDLE || vals->motor_status == BRAKE))
     59a:	9d 81       	ldd	r25, Y+5	; 0x05
     59c:	9a 31       	cpi	r25, 0x1A	; 26
     59e:	e0 f6       	brcc	.-72     	; 0x558 <handle_can+0x72>
     5a0:	04 c0       	rjmp	.+8      	; 0x5aa <handle_can+0xc4>
     5a2:	9d 81       	ldd	r25, Y+5	; 0x05
     5a4:	9a 31       	cpi	r25, 0x1A	; 26
     5a6:	c0 f6       	brcc	.-80     	; 0x558 <handle_can+0x72>
     5a8:	ef cf       	rjmp	.-34     	; 0x588 <handle_can+0xa2>
				vals->pwtrain_type = GEAR ;
				vals->gear_status = rx->data.u8[0] ; //receiving gear status from the clutch
			break;
		}
	}
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	08 95       	ret

000005b4 <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(ModuleValues_t vals){
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
	
	txFrame.id = MOTOR_CAN_ID;
     5c0:	0b ee       	ldi	r16, 0xEB	; 235
     5c2:	12 e0       	ldi	r17, 0x02	; 2
     5c4:	80 e5       	ldi	r24, 0x50	; 80
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	f8 01       	movw	r30, r16
     5ca:	91 83       	std	Z+1, r25	; 0x01
     5cc:	80 83       	st	Z, r24
	txFrame.length = 8;
     5ce:	88 e0       	ldi	r24, 0x08	; 8
     5d0:	82 83       	std	Z+2, r24	; 0x02
	
	txFrame.data.u8[0] = vals.motor_status;
     5d2:	88 a1       	ldd	r24, Y+32	; 0x20
     5d4:	83 83       	std	Z+3, r24	; 0x03
	txFrame.data.i8[1] = (int8_t)(vals.f32_motor_current*10);
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e2       	ldi	r20, 0x20	; 32
     5dc:	51 e4       	ldi	r21, 0x41	; 65
     5de:	6f 81       	ldd	r22, Y+7	; 0x07
     5e0:	78 85       	ldd	r23, Y+8	; 0x08
     5e2:	89 85       	ldd	r24, Y+9	; 0x09
     5e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     5ea:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fixsfsi>
     5ee:	f8 01       	movw	r30, r16
     5f0:	64 83       	std	Z+4, r22	; 0x04
	txFrame.data.u16[1] = (uint16_t)(vals.f32_batt_volt*10);
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	6f 85       	ldd	r22, Y+15	; 0x0f
     5fc:	78 89       	ldd	r23, Y+16	; 0x10
     5fe:	89 89       	ldd	r24, Y+17	; 0x11
     600:	9a 89       	ldd	r25, Y+18	; 0x12
     602:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     606:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     60a:	f8 01       	movw	r30, r16
     60c:	76 83       	std	Z+6, r23	; 0x06
     60e:	65 83       	std	Z+5, r22	; 0x05
	txFrame.data.u16[2] = (uint16_t)(vals.f32_energy/100.0) ;
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	48 ec       	ldi	r20, 0xC8	; 200
     616:	52 e4       	ldi	r21, 0x42	; 66
     618:	6b 89       	ldd	r22, Y+19	; 0x13
     61a:	7c 89       	ldd	r23, Y+20	; 0x14
     61c:	8d 89       	ldd	r24, Y+21	; 0x15
     61e:	9e 89       	ldd	r25, Y+22	; 0x16
     620:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     624:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     628:	f8 01       	movw	r30, r16
     62a:	70 87       	std	Z+8, r23	; 0x08
     62c:	67 83       	std	Z+7, r22	; 0x07
	txFrame.data.u8[6] = (vals.u16_car_speed*3.6) ; //sent in km/h
     62e:	68 8d       	ldd	r22, Y+24	; 0x18
     630:	79 8d       	ldd	r23, Y+25	; 0x19
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     63a:	26 e6       	ldi	r18, 0x66	; 102
     63c:	36 e6       	ldi	r19, 0x66	; 102
     63e:	46 e6       	ldi	r20, 0x66	; 102
     640:	50 e4       	ldi	r21, 0x40	; 64
     642:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     646:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     64a:	f8 01       	movw	r30, r16
     64c:	61 87       	std	Z+9, r22	; 0x09
	txFrame.data.u8[7] = vals.u8_motor_temp;
     64e:	8f 89       	ldd	r24, Y+23	; 0x17
     650:	82 87       	std	Z+10, r24	; 0x0a
		
	can_send_message(&txFrame);
     652:	c8 01       	movw	r24, r16
     654:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <can_send_message>
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <handle_clutch_cmd_can_msg>:

void handle_clutch_cmd_can_msg(ModuleValues_t vals){
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
	
	txFrame.id = MOTOR_CL_CMD_CAN_ID;
     66a:	eb ee       	ldi	r30, 0xEB	; 235
     66c:	f2 e0       	ldi	r31, 0x02	; 2
     66e:	81 e5       	ldi	r24, 0x51	; 81
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	80 83       	st	Z, r24
	txFrame.length = 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	82 83       	std	Z+2, r24	; 0x02

	txFrame.data.u8[0] = vals.gear_required;
     67a:	89 a1       	ldd	r24, Y+33	; 0x21
     67c:	83 83       	std	Z+3, r24	; 0x03
		
	can_send_message(&txFrame);
     67e:	cf 01       	movw	r24, r30
     680:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <can_send_message>
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <receive_uart>:

///////////////////  UART  ////////////////////

//receiving 
void receive_uart(ModuleValues_t * vals)
{
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <receive_uart+0xa>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	ac 01       	movw	r20, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     69a:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <rx0_Head>
     69e:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <rx0_Tail>
	if(uart_AvailableBytes()!=0){
     6a2:	92 1b       	sub	r25, r18
     6a4:	9f 71       	andi	r25, 0x1F	; 31
     6a6:	f9 f0       	breq	.+62     	; 0x6e6 <receive_uart+0x5c>
     6a8:	8a 01       	movw	r16, r20
		vals->message_mode = UART ;
     6aa:	fa 01       	movw	r30, r20
		volatile int16_t i16_data_received=uart_getint();
     6ac:	12 8e       	std	Z+26, r1	; 0x1a
     6ae:	e8 d3       	rcall	.+2000   	; 0xe80 <uart0_getint>
		uart_flush();
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
		
		if (vals->ctrl_type == CURRENT)
     6b4:	6a d3       	rcall	.+1748   	; 0xd8a <uart0_flush>
     6b6:	f8 01       	movw	r30, r16
     6b8:	86 8d       	ldd	r24, Z+30	; 0x1e
     6ba:	81 11       	cpse	r24, r1
		{
			if (i16_data_received > -10 && i16_data_received < 10) //limited braking and acceleration at 10A
     6bc:	0e c0       	rjmp	.+28     	; 0x6da <receive_uart+0x50>
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	87 3f       	cpi	r24, 0xF7	; 247
     6c4:	9f 4f       	sbci	r25, 0xFF	; 255
     6c6:	7c f0       	brlt	.+30     	; 0x6e6 <receive_uart+0x5c>
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	0a 97       	sbiw	r24, 0x0a	; 10
			{
				vals->i8_throttle_cmd = i16_data_received ;
     6ce:	5c f4       	brge	.+22     	; 0x6e6 <receive_uart+0x5c>
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	f8 01       	movw	r30, r16
     6d6:	83 8b       	std	Z+19, r24	; 0x13
			}
				
		}else if (vals->ctrl_type == PWM)
     6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <receive_uart+0x5c>
     6da:	81 30       	cpi	r24, 0x01	; 1
		{
			vals->u8_duty_cycle = i16_data_received;
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <receive_uart+0x5c>
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	f8 01       	movw	r30, r16
		}
	}
}
     6e4:	84 8b       	std	Z+20, r24	; 0x14
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(ModuleValues_t vals)
{
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
	if (vals.b_send_uart_data)
     704:	88 a5       	ldd	r24, Y+40	; 0x28
     706:	88 23       	and	r24, r24
     708:	09 f4       	brne	.+2      	; 0x70c <send_uart+0x18>
     70a:	69 c0       	rjmp	.+210    	; 0x7de <send_uart+0xea>
	{
		//printf("%i,%i,%u,%u,%u,%u,%i",(int16_t)(vals.f32_motor_current*1000),(int16_t)(vals.f32_batt_current*1000),(uint16_t)(vals.f32_batt_volt*1000),vals.u8_car_speed,vals.u8_duty_cycle,vals.u8_motor_temp,vals.i8_throttle_cmd);
		printf("%i",(int16_t)(vals.f32_batt_current*1000));
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	4a e7       	ldi	r20, 0x7A	; 122
     712:	54 e4       	ldi	r21, 0x44	; 68
     714:	6d 85       	ldd	r22, Y+13	; 0x0d
     716:	7e 85       	ldd	r23, Y+14	; 0x0e
     718:	8f 85       	ldd	r24, Y+15	; 0x0f
     71a:	98 89       	ldd	r25, Y+16	; 0x10
     71c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     720:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fixsfsi>
     724:	7f 93       	push	r23
     726:	6f 93       	push	r22
     728:	03 e3       	ldi	r16, 0x33	; 51
     72a:	11 e0       	ldi	r17, 0x01	; 1
     72c:	1f 93       	push	r17
     72e:	0f 93       	push	r16
     730:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
		printf(",");
     734:	8c e2       	ldi	r24, 0x2C	; 44
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 79 10 	call	0x20f2	; 0x20f2 <putchar>
		printf("%u",(uint16_t)(vals.f32_batt_volt*1000));
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	4a e7       	ldi	r20, 0x7A	; 122
     742:	54 e4       	ldi	r21, 0x44	; 68
     744:	69 89       	ldd	r22, Y+17	; 0x11
     746:	7a 89       	ldd	r23, Y+18	; 0x12
     748:	8b 89       	ldd	r24, Y+19	; 0x13
     74a:	9c 89       	ldd	r25, Y+20	; 0x14
     74c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     750:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     754:	7f 93       	push	r23
     756:	6f 93       	push	r22
     758:	0f 2e       	mov	r0, r31
     75a:	f6 e3       	ldi	r31, 0x36	; 54
     75c:	ef 2e       	mov	r14, r31
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	ff 2e       	mov	r15, r31
     762:	f0 2d       	mov	r31, r0
     764:	ff 92       	push	r15
     766:	ef 92       	push	r14
     768:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
		printf(",");
     76c:	8c e2       	ldi	r24, 0x2C	; 44
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 79 10 	call	0x20f2	; 0x20f2 <putchar>
		printf("%i",(int16_t)(vals.f32_motor_current*1000));
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	4a e7       	ldi	r20, 0x7A	; 122
     77a:	54 e4       	ldi	r21, 0x44	; 68
     77c:	69 85       	ldd	r22, Y+9	; 0x09
     77e:	7a 85       	ldd	r23, Y+10	; 0x0a
     780:	8b 85       	ldd	r24, Y+11	; 0x0b
     782:	9c 85       	ldd	r25, Y+12	; 0x0c
     784:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     788:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fixsfsi>
     78c:	7f 93       	push	r23
     78e:	6f 93       	push	r22
     790:	1f 93       	push	r17
     792:	0f 93       	push	r16
     794:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
		printf(",");
     798:	8c e2       	ldi	r24, 0x2C	; 44
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <putchar>
		printf("%u",vals.u8_duty_cycle);
     7a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7a2:	1f 92       	push	r1
     7a4:	8f 93       	push	r24
     7a6:	ff 92       	push	r15
     7a8:	ef 92       	push	r14
     7aa:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
		printf(",");
     7ae:	8c e2       	ldi	r24, 0x2C	; 44
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 79 10 	call	0x20f2	; 0x20f2 <putchar>
		printf("%i",vals.i8_throttle_cmd);
     7b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7b8:	28 2f       	mov	r18, r24
     7ba:	08 2e       	mov	r0, r24
     7bc:	00 0c       	add	r0, r0
     7be:	33 0b       	sbc	r19, r19
     7c0:	3f 93       	push	r19
     7c2:	8f 93       	push	r24
     7c4:	1f 93       	push	r17
     7c6:	0f 93       	push	r16
     7c8:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
		printf("\n");
     7cc:	8a e0       	ldi	r24, 0x0A	; 10
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <putchar>
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
	}
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	08 95       	ret

000007ec <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(ModuleValues_t vals)
{	
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     7f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	51 f1       	breq	.+84     	; 0x84e <manage_LEDs+0x62>
     7fa:	28 f4       	brcc	.+10     	; 0x806 <manage_LEDs+0x1a>
     7fc:	88 23       	and	r24, r24
     7fe:	49 f0       	breq	.+18     	; 0x812 <manage_LEDs+0x26>
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	d9 f0       	breq	.+54     	; 0x83a <manage_LEDs+0x4e>
     804:	41 c0       	rjmp	.+130    	; 0x888 <manage_LEDs+0x9c>
     806:	84 30       	cpi	r24, 0x04	; 4
     808:	b1 f1       	breq	.+108    	; 0x876 <manage_LEDs+0x8a>
     80a:	58 f1       	brcs	.+86     	; 0x862 <manage_LEDs+0x76>
     80c:	85 30       	cpi	r24, 0x05	; 5
     80e:	59 f0       	breq	.+22     	; 0x826 <manage_LEDs+0x3a>
     810:	3b c0       	rjmp	.+118    	; 0x888 <manage_LEDs+0x9c>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     812:	80 e4       	ldi	r24, 0x40	; 64
     814:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_off(LED_RED);
     818:	80 e2       	ldi	r24, 0x20	; 32
     81a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <rgbled_turn_on>
		break ;
     824:	31 c0       	rjmp	.+98     	; 0x888 <manage_LEDs+0x9c>
		
		case ENGAGE :
			rgbled_turn_off(LED_RED);
     826:	80 e2       	ldi	r24, 0x20	; 32
     828:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <rgbled_turn_on>
			rgbled_turn_on(LED_BLUE);
     832:	80 e8       	ldi	r24, 0x80	; 128
     834:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <rgbled_turn_on>
		break ;
     838:	27 c0       	rjmp	.+78     	; 0x888 <manage_LEDs+0x9c>
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     840:	80 e8       	ldi	r24, 0x80	; 128
     842:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     846:	80 e4       	ldi	r24, 0x40	; 64
     848:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <rgbled_toggle>
		break;
     84c:	1d c0       	rjmp	.+58     	; 0x888 <manage_LEDs+0x9c>
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     84e:	80 e2       	ldi	r24, 0x20	; 32
     850:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     854:	80 e8       	ldi	r24, 0x80	; 128
     856:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     85a:	80 e4       	ldi	r24, 0x40	; 64
     85c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <rgbled_toggle>
		break;
     860:	13 c0       	rjmp	.+38     	; 0x888 <manage_LEDs+0x9c>
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     86e:	80 e4       	ldi	r24, 0x40	; 64
     870:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <rgbled_turn_on>
		break;
     874:	09 c0       	rjmp	.+18     	; 0x888 <manage_LEDs+0x9c>
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     876:	80 e4       	ldi	r24, 0x40	; 64
     878:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     87c:	80 e8       	ldi	r24, 0x80	; 128
     87e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     882:	80 e2       	ldi	r24, 0x20	; 32
     884:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <rgbled_turn_on>
		break;
	}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <speed_init>:
#define VOLT_SPEED_CST 102.0 //rmp/V

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     88e:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     890:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     892:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     894:	ea e6       	ldi	r30, 0x6A	; 106
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	8c 60       	ori	r24, 0x0C	; 12
     89c:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     89e:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     8a0:	ed 9a       	sbi	0x1d, 5	; 29
     8a2:	08 95       	ret

000008a4 <handle_speed_sensor>:
}

void handle_speed_sensor(uint16_t *u16_speed, uint16_t *u16_counter) // period in ms
{
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	8c 01       	movw	r16, r24
     8ae:	eb 01       	movw	r28, r22
	//volatile uint8_t u8_new_speed = (uint8_t)(DISTANCE/(*u16_counter); // speed calculated in mm/ms
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u16_speed = (uint16_t)(17458.0/((float)*u16_counter)); // speed calculated in mm/ms ;
     8b0:	68 81       	ld	r22, Y
     8b2:	79 81       	ldd	r23, Y+1	; 0x01
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	74 e6       	ldi	r23, 0x64	; 100
     8c4:	88 e8       	ldi	r24, 0x88	; 136
     8c6:	96 e4       	ldi	r25, 0x46	; 70
     8c8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     8cc:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     8d0:	f8 01       	movw	r30, r16
     8d2:	71 83       	std	Z+1, r23	; 0x01
     8d4:	60 83       	st	Z, r22
	//printf("%u,%u\n",*u16_counter,*u16_speed);
	*u16_counter = 0 ;
     8d6:	19 82       	std	Y+1, r1	; 0x01
     8d8:	18 82       	st	Y, r1
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <compute_synch_duty>:

uint8_t compute_synch_duty(uint8_t speed_ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
     8e4:	8f 92       	push	r8
     8e6:	9f 92       	push	r9
     8e8:	af 92       	push	r10
     8ea:	bf 92       	push	r11
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	1f 92       	push	r1
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	69 01       	movw	r12, r18
     900:	7a 01       	movw	r14, r20
	volatile uint8_t Duty = 50 ;
     902:	92 e3       	ldi	r25, 0x32	; 50
     904:	99 83       	std	Y+1, r25	; 0x01
	if (gear == GEAR1)
     906:	61 30       	cpi	r22, 0x01	; 1
     908:	91 f5       	brne	.+100    	; 0x96e <compute_synch_duty+0x8a>
	{
		Duty = (VOLT_SPEED_CST/((float)speed_ms*60.0/(PI*D_WHEEL*GEAR_RATIO_1)))/(2.0*vbatt) + 0.5 ;// Vm/2Vbatt +0.5
     90a:	68 2f       	mov	r22, r24
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e7       	ldi	r20, 0x70	; 112
     91c:	52 e4       	ldi	r21, 0x42	; 66
     91e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     922:	22 ee       	ldi	r18, 0xE2	; 226
     924:	3a e3       	ldi	r19, 0x3A	; 58
     926:	4a ed       	ldi	r20, 0xDA	; 218
     928:	54 e4       	ldi	r21, 0x44	; 68
     92a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	8c ec       	ldi	r24, 0xCC	; 204
     938:	92 e4       	ldi	r25, 0x42	; 66
     93a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     93e:	4b 01       	movw	r8, r22
     940:	5c 01       	movw	r10, r24
     942:	a7 01       	movw	r20, r14
     944:	96 01       	movw	r18, r12
     946:	c7 01       	movw	r24, r14
     948:	b6 01       	movw	r22, r12
     94a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__addsf3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	c5 01       	movw	r24, r10
     954:	b4 01       	movw	r22, r8
     956:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	5f e3       	ldi	r21, 0x3F	; 63
     962:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__addsf3>
     966:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     96a:	69 83       	std	Y+1, r22	; 0x01
     96c:	33 c0       	rjmp	.+102    	; 0x9d4 <compute_synch_duty+0xf0>
	}
	if (gear == GEAR2)
     96e:	62 30       	cpi	r22, 0x02	; 2
     970:	89 f5       	brne	.+98     	; 0x9d4 <compute_synch_duty+0xf0>
	{
		Duty = (VOLT_SPEED_CST/((float)speed_ms*60.0/(PI*D_WHEEL*GEAR_RATIO_2)))/(2.0*vbatt) + 0.5 ;// Vm/2Vbatt +0.5
     972:	68 2f       	mov	r22, r24
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e7       	ldi	r20, 0x70	; 112
     984:	52 e4       	ldi	r21, 0x42	; 66
     986:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     98a:	22 ee       	ldi	r18, 0xE2	; 226
     98c:	3a e3       	ldi	r19, 0x3A	; 58
     98e:	4a ed       	ldi	r20, 0xDA	; 218
     990:	54 e4       	ldi	r21, 0x44	; 68
     992:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     996:	9b 01       	movw	r18, r22
     998:	ac 01       	movw	r20, r24
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	8c ec       	ldi	r24, 0xCC	; 204
     9a0:	92 e4       	ldi	r25, 0x42	; 66
     9a2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     9a6:	4b 01       	movw	r8, r22
     9a8:	5c 01       	movw	r10, r24
     9aa:	a7 01       	movw	r20, r14
     9ac:	96 01       	movw	r18, r12
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__addsf3>
     9b6:	9b 01       	movw	r18, r22
     9b8:	ac 01       	movw	r20, r24
     9ba:	c5 01       	movw	r24, r10
     9bc:	b4 01       	movw	r22, r8
     9be:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__addsf3>
     9ce:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     9d2:	69 83       	std	Y+1, r22	; 0x01
	}
	return Duty ;
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     9d6:	0f 90       	pop	r0
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	bf 90       	pop	r11
     9e6:	af 90       	pop	r10
     9e8:	9f 90       	pop	r9
     9ea:	8f 90       	pop	r8
     9ec:	08 95       	ret

000009ee <state_handler>:

static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a00:	c8 84       	ldd	r12, Y+8	; 0x08
     a02:	d9 84       	ldd	r13, Y+9	; 0x09
     a04:	ea 84       	ldd	r14, Y+10	; 0x0a
     a06:	fb 84       	ldd	r15, Y+11	; 0x0b
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e7       	ldi	r20, 0x70	; 112
     a0e:	51 e4       	ldi	r21, 0x41	; 65
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__gesf2>
     a18:	88 23       	and	r24, r24
     a1a:	6c f1       	brlt	.+90     	; 0xa76 <state_handler+0x88>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	48 ec       	ldi	r20, 0xC8	; 200
     a22:	52 e4       	ldi	r21, 0x42	; 66
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__cmpsf2>
     a2c:	88 23       	and	r24, r24
     a2e:	0c f4       	brge	.+2      	; 0xa32 <state_handler+0x44>
     a30:	19 c1       	rjmp	.+562    	; 0xc64 <state_handler+0x276>
     a32:	10 e0       	ldi	r17, 0x00	; 0
     a34:	23 c0       	rjmp	.+70     	; 0xa7c <state_handler+0x8e>
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	4c e5       	ldi	r20, 0x5C	; 92
     a3c:	52 e4       	ldi	r21, 0x42	; 66
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__gesf2>
     a46:	18 16       	cp	r1, r24
     a48:	c4 f4       	brge	.+48     	; 0xa7a <state_handler+0x8c>
	{
		b_major_fault = 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <b_major_fault>
	}
	
	switch(vals->motor_status)
     a50:	89 8d       	ldd	r24, Y+25	; 0x19
     a52:	82 30       	cpi	r24, 0x02	; 2
     a54:	09 f4       	brne	.+2      	; 0xa58 <state_handler+0x6a>
     a56:	b4 c0       	rjmp	.+360    	; 0xbc0 <state_handler+0x1d2>
     a58:	30 f4       	brcc	.+12     	; 0xa66 <state_handler+0x78>
     a5a:	88 23       	and	r24, r24
     a5c:	09 f1       	breq	.+66     	; 0xaa0 <state_handler+0xb2>
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	09 f4       	brne	.+2      	; 0xa64 <state_handler+0x76>
     a62:	89 c0       	rjmp	.+274    	; 0xb76 <state_handler+0x188>
     a64:	e6 c0       	rjmp	.+460    	; 0xc32 <state_handler+0x244>
     a66:	84 30       	cpi	r24, 0x04	; 4
     a68:	09 f4       	brne	.+2      	; 0xa6c <state_handler+0x7e>
     a6a:	d9 c0       	rjmp	.+434    	; 0xc1e <state_handler+0x230>
     a6c:	58 f1       	brcs	.+86     	; 0xac4 <state_handler+0xd6>
     a6e:	85 30       	cpi	r24, 0x05	; 5
     a70:	09 f4       	brne	.+2      	; 0xa74 <state_handler+0x86>
     a72:	47 c0       	rjmp	.+142    	; 0xb02 <state_handler+0x114>
     a74:	de c0       	rjmp	.+444    	; 0xc32 <state_handler+0x244>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <state_handler+0x8e>
     a7a:	11 e0       	ldi	r17, 0x01	; 1
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
	{
		b_major_fault = 1;
	}
	
	switch(vals->motor_status)
     a7c:	89 8d       	ldd	r24, Y+25	; 0x19
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	09 f4       	brne	.+2      	; 0xa84 <state_handler+0x96>
     a82:	9f c0       	rjmp	.+318    	; 0xbc2 <state_handler+0x1d4>
     a84:	30 f4       	brcc	.+12     	; 0xa92 <state_handler+0xa4>
     a86:	88 23       	and	r24, r24
     a88:	61 f0       	breq	.+24     	; 0xaa2 <state_handler+0xb4>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <state_handler+0xa2>
     a8e:	74 c0       	rjmp	.+232    	; 0xb78 <state_handler+0x18a>
     a90:	d1 c0       	rjmp	.+418    	; 0xc34 <state_handler+0x246>
     a92:	84 30       	cpi	r24, 0x04	; 4
     a94:	09 f4       	brne	.+2      	; 0xa98 <state_handler+0xaa>
     a96:	b9 c0       	rjmp	.+370    	; 0xc0a <state_handler+0x21c>
     a98:	b0 f0       	brcs	.+44     	; 0xac6 <state_handler+0xd8>
     a9a:	85 30       	cpi	r24, 0x05	; 5
     a9c:	99 f1       	breq	.+102    	; 0xb04 <state_handler+0x116>
     a9e:	ca c0       	rjmp	.+404    	; 0xc34 <state_handler+0x246>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     aa0:	11 e0       	ldi	r17, 0x01	; 1
	
	switch(vals->motor_status)
	{
		case OFF:
			//transition 1
			if (vals->u16_watchdog_can > 0 && b_board_powered)
     aa2:	8d 89       	ldd	r24, Y+21	; 0x15
     aa4:	9e 89       	ldd	r25, Y+22	; 0x16
     aa6:	89 2b       	or	r24, r25
     aa8:	21 f0       	breq	.+8      	; 0xab2 <state_handler+0xc4>
     aaa:	11 23       	and	r17, r17
     aac:	11 f0       	breq	.+4      	; 0xab2 <state_handler+0xc4>
			{
				vals->motor_status = IDLE;
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	89 8f       	std	Y+25, r24	; 0x19
			}
			//During
			drivers(0);//drivers shutdown
     ab2:	80 e0       	ldi	r24, 0x00	; 0
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     ab4:	7c dc       	rcall	.-1800   	; 0x3ae <drivers>
     ab6:	1d 8e       	std	Y+29, r1	; 0x1d
			vals->i8_throttle_cmd = 0;
     ab8:	14 db       	rcall	.-2520   	; 0xe2 <reset_I>
			vals->u8_duty_cycle = 50;
     aba:	1b 8a       	std	Y+19, r1	; 0x13
     abc:	82 e3       	ldi	r24, 0x32	; 50
			vals->gear_required = NEUTRAL ;
     abe:	8c 8b       	std	Y+20, r24	; 0x14
		
		break;
     ac0:	1c 8e       	std	Y+28, r1	; 0x1c
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     ac2:	b8 c0       	rjmp	.+368    	; 0xc34 <state_handler+0x246>
		
		break;
		
		case IDLE: 
		
			if (vals->pwtrain_type == BELT)
     ac4:	11 e0       	ldi	r17, 0x01	; 1
     ac6:	88 a1       	ldd	r24, Y+32	; 0x20
     ac8:	81 11       	cpse	r24, r1
			{
				//transition 5
				if (vals->i8_throttle_cmd > 0)
     aca:	da c0       	rjmp	.+436    	; 0xc80 <state_handler+0x292>
     acc:	8b 89       	ldd	r24, Y+19	; 0x13
     ace:	18 16       	cp	r1, r24
				{
					vals->motor_status = ACCEL;
     ad0:	14 f4       	brge	.+4      	; 0xad6 <state_handler+0xe8>
     ad2:	91 e0       	ldi	r25, 0x01	; 1
				}
				//transition 7
				if (vals->i8_throttle_cmd < 0)
     ad4:	99 8f       	std	Y+25, r25	; 0x19
     ad6:	88 23       	and	r24, r24
				{
					vals->motor_status = BRAKE;
     ad8:	14 f4       	brge	.+4      	; 0xade <state_handler+0xf0>
				}
				drivers(1);//drivers enable
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	89 8f       	std	Y+25, r24	; 0x19
				controller(vals); //current loop running with 0 torque
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	66 dc       	rcall	.-1844   	; 0x3ae <drivers>
     ae2:	ce 01       	movw	r24, r28
				//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
			}
			
			if (vals->pwtrain_type == GEAR)
     ae4:	16 db       	rcall	.-2516   	; 0x112 <controller>
     ae6:	88 a1       	ldd	r24, Y+32	; 0x20
     ae8:	81 30       	cpi	r24, 0x01	; 1
     aea:	09 f0       	breq	.+2      	; 0xaee <state_handler+0x100>
			{
				//transition 5
				if (vals->i8_throttle_cmd != 0)
     aec:	a3 c0       	rjmp	.+326    	; 0xc34 <state_handler+0x246>
     aee:	8b 89       	ldd	r24, Y+19	; 0x13
				{
					vals->motor_status = ENGAGE;
     af0:	88 23       	and	r24, r24
				}
				drivers(0); //disable
     af2:	11 f0       	breq	.+4      	; 0xaf8 <state_handler+0x10a>
     af4:	85 e0       	ldi	r24, 0x05	; 5
				vals->gear_required = NEUTRAL ;
				reset_I();
     af6:	89 8f       	std	Y+25, r24	; 0x19
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	59 dc       	rcall	.-1870   	; 0x3ae <drivers>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     afc:	1c 8e       	std	Y+28, r1	; 0x1c
			}
			
		break;
		
		case ENGAGE: // /!\ TODO : with the two gears, all turning motion has to be inverted for the inner gear.
			drivers(1);
     afe:	f1 da       	rcall	.-2590   	; 0xe2 <reset_I>
     b00:	99 c0       	rjmp	.+306    	; 0xc34 <state_handler+0x246>
     b02:	11 e0       	ldi	r17, 0x01	; 1
			vals->gear_required = GEAR1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
			vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, vals->gear_required, vals->f32_batt_volt) ; //Setting duty
     b06:	53 dc       	rcall	.-1882   	; 0x3ae <drivers>
     b08:	01 e0       	ldi	r16, 0x01	; 1
     b0a:	0c 8f       	std	Y+28, r16	; 0x1c
     b0c:	28 85       	ldd	r18, Y+8	; 0x08
     b0e:	39 85       	ldd	r19, Y+9	; 0x09
     b10:	4a 85       	ldd	r20, Y+10	; 0x0a
     b12:	5b 85       	ldd	r21, Y+11	; 0x0b
			set_I(vals->u8_duty_cycle) ; //set integrator
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	89 89       	ldd	r24, Y+17	; 0x11
			save_ctrl_type = vals->ctrl_type ; // PWM type ctrl is needed only for the engagement process. The mode will be reverted to previous in ACCEL and BRAKE modes
     b18:	e5 de       	rcall	.-566    	; 0x8e4 <compute_synch_duty>
     b1a:	8c 8b       	std	Y+20, r24	; 0x14
     b1c:	eb da       	rcall	.-2602   	; 0xf4 <set_I>
			vals->ctrl_type = PWM ;
     b1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
			controller(vals) ; //speed up motor to synch speed
     b20:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <save_ctrl_type>
     b24:	0e 8f       	std	Y+30, r16	; 0x1e
			//transition 10, GEAR
			if (vals->i8_throttle_cmd > 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     b26:	ce 01       	movw	r24, r28
     b28:	f4 da       	rcall	.-2584   	; 0x112 <controller>
     b2a:	8b 89       	ldd	r24, Y+19	; 0x13
     b2c:	18 16       	cp	r1, r24
     b2e:	64 f4       	brge	.+24     	; 0xb48 <state_handler+0x15a>
     b30:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b32:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b34:	92 13       	cpse	r25, r18
     b36:	15 c0       	rjmp	.+42     	; 0xb62 <state_handler+0x174>
			{
				vals->motor_status = ACCEL;
     b38:	99 23       	and	r25, r25
     b3a:	99 f0       	breq	.+38     	; 0xb62 <state_handler+0x174>
			}
			//transition 9, GEAR
			if (vals->i8_throttle_cmd < 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	99 8f       	std	Y+25, r25	; 0x19
     b40:	88 23       	and	r24, r24
     b42:	0c f0       	brlt	.+2      	; 0xb46 <state_handler+0x158>
     b44:	a8 c0       	rjmp	.+336    	; 0xc96 <state_handler+0x2a8>
     b46:	08 c0       	rjmp	.+16     	; 0xb58 <state_handler+0x16a>
     b48:	88 23       	and	r24, r24
     b4a:	5c f4       	brge	.+22     	; 0xb62 <state_handler+0x174>
     b4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b4e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b50:	92 13       	cpse	r25, r18
     b52:	07 c0       	rjmp	.+14     	; 0xb62 <state_handler+0x174>
			{
				vals->motor_status = BRAKE;
     b54:	99 23       	and	r25, r25
     b56:	29 f0       	breq	.+10     	; 0xb62 <state_handler+0x174>
			}
			//transition 11, GEAR
			if (vals->i8_throttle_cmd == 0 && vals->u16_watchdog_throttle == 0)
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	99 8f       	std	Y+25, r25	; 0x19
     b5c:	81 11       	cpse	r24, r1
     b5e:	71 c0       	rjmp	.+226    	; 0xc42 <state_handler+0x254>
     b60:	9e c0       	rjmp	.+316    	; 0xc9e <state_handler+0x2b0>
     b62:	81 11       	cpse	r24, r1
     b64:	67 c0       	rjmp	.+206    	; 0xc34 <state_handler+0x246>
     b66:	8f 89       	ldd	r24, Y+23	; 0x17
     b68:	98 8d       	ldd	r25, Y+24	; 0x18
     b6a:	89 2b       	or	r24, r25
			{
				vals->motor_status = IDLE;
     b6c:	09 f0       	breq	.+2      	; 0xb70 <state_handler+0x182>
     b6e:	62 c0       	rjmp	.+196    	; 0xc34 <state_handler+0x246>
     b70:	83 e0       	ldi	r24, 0x03	; 3
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     b72:	89 8f       	std	Y+25, r24	; 0x19
			}
		break;
		
		case ACCEL:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 50)
     b74:	66 c0       	rjmp	.+204    	; 0xc42 <state_handler+0x254>
     b76:	11 e0       	ldi	r17, 0x01	; 1
     b78:	8d 89       	ldd	r24, Y+21	; 0x15
     b7a:	9e 89       	ldd	r25, Y+22	; 0x16
     b7c:	87 39       	cpi	r24, 0x97	; 151
			{
				vals->i8_throttle_cmd = 0;
     b7e:	91 05       	cpc	r25, r1
     b80:	10 f4       	brcc	.+4      	; 0xb86 <state_handler+0x198>
			}
			//transition 6
			if (vals->i8_throttle_cmd == 0 && vals->u16_watchdog_throttle == 0)
     b82:	1b 8a       	std	Y+19, r1	; 0x13
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <state_handler+0x19e>
     b86:	9b 89       	ldd	r25, Y+19	; 0x13
     b88:	91 11       	cpse	r25, r1
     b8a:	09 c0       	rjmp	.+18     	; 0xb9e <state_handler+0x1b0>
     b8c:	8f 89       	ldd	r24, Y+23	; 0x17
     b8e:	98 8d       	ldd	r25, Y+24	; 0x18
			{
				vals->motor_status = IDLE;
     b90:	89 2b       	or	r24, r25
     b92:	21 f4       	brne	.+8      	; 0xb9c <state_handler+0x1ae>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	89 8f       	std	Y+25, r24	; 0x19
     b98:	90 e0       	ldi	r25, 0x00	; 0
			}
			//transition 12, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <state_handler+0x1b0>
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	88 a1       	ldd	r24, Y+32	; 0x20
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	41 f4       	brne	.+16     	; 0xbb4 <state_handler+0x1c6>
			{
				vals->motor_status = ENGAGE;
     ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba6:	81 11       	cpse	r24, r1
     ba8:	6e c0       	rjmp	.+220    	; 0xc86 <state_handler+0x298>
			}
			//transition 14, GEAR
			if (vals->pwtrain_type == GEAR && vals->i8_throttle_cmd < 0)
			{
				vals->motor_status = BRAKE;
     baa:	85 e0       	ldi	r24, 0x05	; 5
     bac:	89 8f       	std	Y+25, r24	; 0x19
			}
			vals->ctrl_type = save_ctrl_type ;
     bae:	6b c0       	rjmp	.+214    	; 0xc86 <state_handler+0x298>
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	89 8f       	std	Y+25, r24	; 0x19
			controller(vals);
     bb4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <save_ctrl_type>
     bb8:	8e 8f       	std	Y+30, r24	; 0x1e
		break;
     bba:	ce 01       	movw	r24, r28
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     bbc:	aa da       	rcall	.-2732   	; 0x112 <controller>
			controller(vals);
		break;
		
		case BRAKE:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 50)
     bbe:	3a c0       	rjmp	.+116    	; 0xc34 <state_handler+0x246>
     bc0:	11 e0       	ldi	r17, 0x01	; 1
     bc2:	8d 89       	ldd	r24, Y+21	; 0x15
     bc4:	9e 89       	ldd	r25, Y+22	; 0x16
     bc6:	87 39       	cpi	r24, 0x97	; 151
			{
				vals->i8_throttle_cmd = 0;
     bc8:	91 05       	cpc	r25, r1
     bca:	10 f4       	brcc	.+4      	; 0xbd0 <state_handler+0x1e2>
			}
			//transition 8
			if (vals->i8_throttle_cmd == 0 && vals->u16_watchdog_throttle == 0)
     bcc:	1b 8a       	std	Y+19, r1	; 0x13
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <state_handler+0x1e8>
     bd0:	9b 89       	ldd	r25, Y+19	; 0x13
     bd2:	91 11       	cpse	r25, r1
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <state_handler+0x1fa>
     bd6:	8f 89       	ldd	r24, Y+23	; 0x17
     bd8:	98 8d       	ldd	r25, Y+24	; 0x18
			{
				vals->motor_status = IDLE;
     bda:	89 2b       	or	r24, r25
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <state_handler+0x1f8>
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	89 8f       	std	Y+25, r24	; 0x19
     be2:	90 e0       	ldi	r25, 0x00	; 0
			}
			//transition 13, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <state_handler+0x1fa>
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	88 a1       	ldd	r24, Y+32	; 0x20
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	41 f4       	brne	.+16     	; 0xbfe <state_handler+0x210>
			{
				vals->motor_status = ENGAGE;
     bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bf0:	81 11       	cpse	r24, r1
     bf2:	4d c0       	rjmp	.+154    	; 0xc8e <state_handler+0x2a0>
			}
			//transition 15, GEAR
			if (vals->pwtrain_type == GEAR && vals->i8_throttle_cmd > 0)
			{
				vals->motor_status = ACCEL;
     bf4:	85 e0       	ldi	r24, 0x05	; 5
     bf6:	89 8f       	std	Y+25, r24	; 0x19
			}
			vals->ctrl_type = save_ctrl_type ;
     bf8:	4a c0       	rjmp	.+148    	; 0xc8e <state_handler+0x2a0>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	89 8f       	std	Y+25, r24	; 0x19
			controller(vals); //negative throttle cmd
     bfe:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <save_ctrl_type>
     c02:	8e 8f       	std	Y+30, r24	; 0x1e
		break;
		
		case ERR:
			//transition 4
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
     c04:	ce 01       	movw	r24, r28
     c06:	85 da       	rcall	.-2806   	; 0x112 <controller>
     c08:	15 c0       	rjmp	.+42     	; 0xc34 <state_handler+0x246>
     c0a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <b_major_fault>
			{
				vals->motor_status = IDLE;
     c0e:	81 11       	cpse	r24, r1
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <state_handler+0x232>
     c12:	88 89       	ldd	r24, Y+16	; 0x10
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     c14:	84 36       	cpi	r24, 0x64	; 100
			//transition 4
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
			{
				vals->motor_status = IDLE;
			}
			drivers(0);//drivers shutdown
     c16:	20 f4       	brcc	.+8      	; 0xc20 <state_handler+0x232>
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	89 8f       	std	Y+25, r24	; 0x19
			vals->b_driver_status = 0;
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <state_handler+0x232>
			vals->gear_required = NEUTRAL;
     c1e:	11 e0       	ldi	r17, 0x01	; 1
			reset_I(); //reset integrator
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	c5 db       	rcall	.-2166   	; 0x3ae <drivers>
			vals->i8_throttle_cmd = 0;
     c24:	1d 8e       	std	Y+29, r1	; 0x1d
			vals->u8_duty_cycle = 50;
     c26:	1c 8e       	std	Y+28, r1	; 0x1c
     c28:	5c da       	rcall	.-2888   	; 0xe2 <reset_I>
		break;	
     c2a:	1b 8a       	std	Y+19, r1	; 0x13
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     c2c:	82 e3       	ldi	r24, 0x32	; 50
			vals->i8_throttle_cmd = 0;
			vals->u8_duty_cycle = 50;
		break;	
	}
	
	if ((vals->motor_status == IDLE || vals->motor_status == ACCEL || vals->motor_status == BRAKE || vals->motor_status == ENGAGE) && (vals->u16_watchdog_can == 0 || !b_board_powered))
     c2e:	8c 8b       	std	Y+20, r24	; 0x14
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <state_handler+0x246>
     c32:	11 e0       	ldi	r17, 0x01	; 1
     c34:	89 8d       	ldd	r24, Y+25	; 0x19
     c36:	9f ef       	ldi	r25, 0xFF	; 255
     c38:	98 0f       	add	r25, r24
     c3a:	93 30       	cpi	r25, 0x03	; 3
     c3c:	10 f0       	brcs	.+4      	; 0xc42 <state_handler+0x254>
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	39 f4       	brne	.+14     	; 0xc50 <state_handler+0x262>
     c42:	8d 89       	ldd	r24, Y+21	; 0x15
     c44:	9e 89       	ldd	r25, Y+22	; 0x16
     c46:	89 2b       	or	r24, r25
	{
		// transition 2
		vals->motor_status = OFF;
     c48:	11 f0       	breq	.+4      	; 0xc4e <state_handler+0x260>
	}
	
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
     c4a:	11 11       	cpse	r17, r1
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <state_handler+0x262>
     c4e:	19 8e       	std	Y+25, r1	; 0x19
     c50:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <b_major_fault>
     c54:	81 11       	cpse	r24, r1
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <state_handler+0x270>
	{
		//transition 3
		vals->motor_status = ERR;
     c58:	88 89       	ldd	r24, Y+16	; 0x10
     c5a:	84 36       	cpi	r24, 0x64	; 100
	}
     c5c:	30 f1       	brcs	.+76     	; 0xcaa <state_handler+0x2bc>

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	89 8f       	std	Y+25, r24	; 0x19
     c62:	23 c0       	rjmp	.+70     	; 0xcaa <state_handler+0x2bc>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e7       	ldi	r20, 0x70	; 112
     c6a:	51 e4       	ldi	r21, 0x41	; 65
     c6c:	68 81       	ld	r22, Y
     c6e:	79 81       	ldd	r23, Y+1	; 0x01
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__gesf2>
     c78:	88 23       	and	r24, r24
				drivers(1);//drivers enable
				controller(vals); //current loop running with 0 torque
				//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
			}
			
			if (vals->pwtrain_type == GEAR)
     c7a:	0c f0       	brlt	.+2      	; 0xc7e <state_handler+0x290>
     c7c:	e6 ce       	rjmp	.-564    	; 0xa4a <state_handler+0x5c>
     c7e:	db ce       	rjmp	.-586    	; 0xa36 <state_handler+0x48>
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
			{
				vals->motor_status = ENGAGE;
			}
			//transition 14, GEAR
			if (vals->pwtrain_type == GEAR && vals->i8_throttle_cmd < 0)
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	f9 f6       	brne	.-66     	; 0xc42 <state_handler+0x254>
     c84:	34 cf       	rjmp	.-408    	; 0xaee <state_handler+0x100>
     c86:	99 23       	and	r25, r25
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
			{
				vals->motor_status = ENGAGE;
			}
			//transition 15, GEAR
			if (vals->pwtrain_type == GEAR && vals->i8_throttle_cmd > 0)
     c88:	0c f0       	brlt	.+2      	; 0xc8c <state_handler+0x29e>
     c8a:	94 cf       	rjmp	.-216    	; 0xbb4 <state_handler+0x1c6>
     c8c:	91 cf       	rjmp	.-222    	; 0xbb0 <state_handler+0x1c2>
     c8e:	19 16       	cp	r1, r25
			if (vals->i8_throttle_cmd < 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
			{
				vals->motor_status = BRAKE;
			}
			//transition 11, GEAR
			if (vals->i8_throttle_cmd == 0 && vals->u16_watchdog_throttle == 0)
     c90:	0c f4       	brge	.+2      	; 0xc94 <state_handler+0x2a6>
     c92:	b3 cf       	rjmp	.-154    	; 0xbfa <state_handler+0x20c>
     c94:	b4 cf       	rjmp	.-152    	; 0xbfe <state_handler+0x210>
     c96:	88 23       	and	r24, r24
     c98:	09 f4       	brne	.+2      	; 0xc9c <state_handler+0x2ae>
     c9a:	65 cf       	rjmp	.-310    	; 0xb66 <state_handler+0x178>
     c9c:	d2 cf       	rjmp	.-92     	; 0xc42 <state_handler+0x254>
     c9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ca0:	98 8d       	ldd	r25, Y+24	; 0x18
     ca2:	89 2b       	or	r24, r25
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		//transition 3
		vals->motor_status = ERR;
	}
     ca4:	09 f4       	brne	.+2      	; 0xca8 <state_handler+0x2ba>
     ca6:	64 cf       	rjmp	.-312    	; 0xb70 <state_handler+0x182>
     ca8:	cc cf       	rjmp	.-104    	; 0xc42 <state_handler+0x254>
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	08 95       	ret

00000cbc <pwm_init>:

#include "pwm.h"
#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     cc0:	8e b1       	in	r24, 0x0e	; 14
     cc2:	87 7e       	andi	r24, 0xE7	; 231
     cc4:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     cc6:	8d b1       	in	r24, 0x0d	; 13
     cc8:	88 61       	ori	r24, 0x18	; 24
     cca:	8d b9       	out	0x0d, r24	; 13
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
		
	}else{//UNIPOLAR
		
		//Timer 3 phase correct pwm, TOP at ICR (mode 10)
		TCCR3B |= (1<<WGM33);
     ccc:	a1 e9       	ldi	r26, 0x91	; 145
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	8c 91       	ld	r24, X
     cd2:	80 61       	ori	r24, 0x10	; 16
     cd4:	8c 93       	st	X, r24
		TCCR3B &= ~(1<<WGM32);
     cd6:	8c 91       	ld	r24, X
     cd8:	87 7f       	andi	r24, 0xF7	; 247
     cda:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     cdc:	e0 e9       	ldi	r30, 0x90	; 144
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	80 83       	st	Z, r24
		
		// Set OC3A on Compare Match when up-counting. clear OC3A on Compare Match when downcounting.
		TCCR3A |= (1<<COM3A1);
     cec:	80 81       	ld	r24, Z
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 7b       	andi	r24, 0xBF	; 191
     cf6:	80 83       	st	Z, r24
		
		// Set OC3B on Compare Match when up-counting. Clear OC3B on Compare Match when downcounting.
		TCCR3A |= (1<<COM3B1);
     cf8:	80 81       	ld	r24, Z
     cfa:	80 62       	ori	r24, 0x20	; 32
     cfc:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3B0);
     cfe:	80 81       	ld	r24, Z
     d00:	8f 7e       	andi	r24, 0xEF	; 239
     d02:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		TCCR3B |= (1<<CS30);
     d04:	8c 91       	ld	r24, X
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     d0a:	8c 91       	ld	r24, X
     d0c:	89 7f       	andi	r24, 0xF9	; 249
     d0e:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x85; //30kHz  0x85, 20kHz : 0x100
     d10:	c6 e9       	ldi	r28, 0x96	; 150
     d12:	d0 e0       	ldi	r29, 0x00	; 0
     d14:	85 e8       	ldi	r24, 0x85	; 133
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	99 83       	std	Y+1, r25	; 0x01
     d1a:	88 83       	st	Y, r24
		
		//initialising compare registers at Duty cycle 50%
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3
     d1c:	68 81       	ld	r22, Y
     d1e:	79 81       	ldd	r23, Y+1	; 0x01
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	5f e3       	ldi	r21, 0x3F	; 63
     d30:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__mulsf3>
     d34:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fixsfsi>
     d38:	e8 e9       	ldi	r30, 0x98	; 152
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	71 83       	std	Z+1, r23	; 0x01
     d3e:	60 83       	st	Z, r22
		OCR3B = ICR3-OCR3A ; //PWM_PE4
     d40:	88 81       	ld	r24, Y
     d42:	99 81       	ldd	r25, Y+1	; 0x01
     d44:	20 81       	ld	r18, Z
     d46:	31 81       	ldd	r19, Z+1	; 0x01
     d48:	82 1b       	sub	r24, r18
     d4a:	93 0b       	sbc	r25, r19
     d4c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d50:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
}
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     d5a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <tx0_Head>
     d5e:	9f 5f       	subi	r25, 0xFF	; 255
     d60:	9f 71       	andi	r25, 0x1F	; 31
     d62:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <tx0_Tail>
     d66:	92 17       	cp	r25, r18
     d68:	e1 f3       	breq	.-8      	; 0xd62 <uart0_putc+0x8>
     d6a:	e9 2f       	mov	r30, r25
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	e2 5a       	subi	r30, 0xA2	; 162
     d70:	fc 4f       	sbci	r31, 0xFC	; 252
     d72:	80 83       	st	Z, r24
     d74:	2f b7       	in	r18, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <tx0_Head>
     d7c:	e1 ec       	ldi	r30, 0xC1	; 193
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	80 62       	ori	r24, 0x20	; 32
     d84:	80 83       	st	Z, r24
     d86:	2f bf       	out	0x3f, r18	; 63
     d88:	08 95       	ret

00000d8a <uart0_flush>:
     d8a:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <tx0_Tail>
     d8e:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <tx0_Head>
     d92:	98 13       	cpse	r25, r24
     d94:	fa cf       	rjmp	.-12     	; 0xd8a <uart0_flush>
     d96:	08 95       	ret

00000d98 <uart1_putc>:
     d98:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <tx1_Head>
     d9c:	9f 5f       	subi	r25, 0xFF	; 255
     d9e:	9f 71       	andi	r25, 0x1F	; 31
     da0:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <tx1_Tail>
     da4:	92 17       	cp	r25, r18
     da6:	e1 f3       	breq	.-8      	; 0xda0 <uart1_putc+0x8>
     da8:	e9 2f       	mov	r30, r25
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	e7 5e       	subi	r30, 0xE7	; 231
     dae:	fc 4f       	sbci	r31, 0xFC	; 252
     db0:	80 83       	st	Z, r24
     db2:	2f b7       	in	r18, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <tx1_Head>
     dba:	e9 ec       	ldi	r30, 0xC9	; 201
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 62       	ori	r24, 0x20	; 32
     dc2:	80 83       	st	Z, r24
     dc4:	2f bf       	out	0x3f, r18	; 63
     dc6:	08 95       	ret

00000dc8 <uart_putchar>:
     dc8:	cf 93       	push	r28
     dca:	c8 2f       	mov	r28, r24
     dcc:	fb 01       	movw	r30, r22
     dce:	84 85       	ldd	r24, Z+12	; 0x0c
     dd0:	95 85       	ldd	r25, Z+13	; 0x0d
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	39 f0       	breq	.+14     	; 0xde4 <uart_putchar+0x1c>
     dd6:	ca 30       	cpi	r28, 0x0A	; 10
     dd8:	11 f4       	brne	.+4      	; 0xdde <uart_putchar+0x16>
     dda:	8d e0       	ldi	r24, 0x0D	; 13
     ddc:	be df       	rcall	.-132    	; 0xd5a <uart0_putc>
     dde:	8c 2f       	mov	r24, r28
     de0:	bc df       	rcall	.-136    	; 0xd5a <uart0_putc>
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <uart_putchar+0x28>
     de4:	ca 30       	cpi	r28, 0x0A	; 10
     de6:	11 f4       	brne	.+4      	; 0xdec <uart_putchar+0x24>
     de8:	8d e0       	ldi	r24, 0x0D	; 13
     dea:	d6 df       	rcall	.-84     	; 0xd98 <uart1_putc>
     dec:	8c 2f       	mov	r24, r28
     dee:	d4 df       	rcall	.-88     	; 0xd98 <uart1_putc>
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <uart0_getc>:
     df8:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <rx0_Tail>
     dfc:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <rx0_Head>
     e00:	89 17       	cp	r24, r25
     e02:	59 f0       	breq	.+22     	; 0xe1a <uart0_getc+0x22>
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	98 2f       	mov	r25, r24
     e08:	9f 71       	andi	r25, 0x1F	; 31
     e0a:	e9 2f       	mov	r30, r25
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ea 50       	subi	r30, 0x0A	; 10
     e10:	fd 4f       	sbci	r31, 0xFD	; 253
     e12:	80 81       	ld	r24, Z
     e14:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <rx0_Tail>
     e18:	08 95       	ret
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	08 95       	ret

00000e1e <uart0_getlnToFirstWhiteSpace>:
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	7c 01       	movw	r14, r24
     e2c:	16 2f       	mov	r17, r22
     e2e:	e4 df       	rcall	.-56     	; 0xdf8 <uart0_getc>
     e30:	f7 01       	movw	r30, r14
     e32:	80 83       	st	Z, r24
     e34:	81 32       	cpi	r24, 0x21	; 33
     e36:	d8 f3       	brcs	.-10     	; 0xe2e <uart0_getlnToFirstWhiteSpace+0x10>
     e38:	e7 01       	movw	r28, r14
     e3a:	21 96       	adiw	r28, 0x01	; 1
     e3c:	12 30       	cpi	r17, 0x02	; 2
     e3e:	c1 f0       	breq	.+48     	; 0xe70 <uart0_getlnToFirstWhiteSpace+0x52>
     e40:	13 50       	subi	r17, 0x03	; 3
     e42:	81 2f       	mov	r24, r17
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 96       	adiw	r24, 0x02	; 2
     e48:	87 01       	movw	r16, r14
     e4a:	08 0f       	add	r16, r24
     e4c:	19 1f       	adc	r17, r25
     e4e:	d4 df       	rcall	.-88     	; 0xdf8 <uart0_getc>
     e50:	88 83       	st	Y, r24
     e52:	88 23       	and	r24, r24
     e54:	e1 f3       	breq	.-8      	; 0xe4e <uart0_getlnToFirstWhiteSpace+0x30>
     e56:	8d 30       	cpi	r24, 0x0D	; 13
     e58:	21 f4       	brne	.+8      	; 0xe62 <uart0_getlnToFirstWhiteSpace+0x44>
     e5a:	ce df       	rcall	.-100    	; 0xdf8 <uart0_getc>
     e5c:	88 23       	and	r24, r24
     e5e:	e9 f3       	breq	.-6      	; 0xe5a <uart0_getlnToFirstWhiteSpace+0x3c>
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <uart0_getlnToFirstWhiteSpace+0x52>
     e62:	81 32       	cpi	r24, 0x21	; 33
     e64:	28 f0       	brcs	.+10     	; 0xe70 <uart0_getlnToFirstWhiteSpace+0x52>
     e66:	21 96       	adiw	r28, 0x01	; 1
     e68:	0c 17       	cp	r16, r28
     e6a:	1d 07       	cpc	r17, r29
     e6c:	81 f7       	brne	.-32     	; 0xe4e <uart0_getlnToFirstWhiteSpace+0x30>
     e6e:	e8 01       	movw	r28, r16
     e70:	18 82       	st	Y, r1
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	08 95       	ret

00000e80 <uart0_getint>:
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	27 97       	sbiw	r28, 0x07	; 7
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	c1 df       	rcall	.-126    	; 0xe1e <uart0_getlnToFirstWhiteSpace>
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	0e 94 41 10 	call	0x2082	; 0x2082 <atoi>
     ea4:	27 96       	adiw	r28, 0x07	; 7
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <uart0_getData>:
     eb6:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <rx0_Tail>
     eba:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <rx0_Head>
     ebe:	89 17       	cp	r24, r25
     ec0:	61 f0       	breq	.+24     	; 0xeda <uart0_getData+0x24>
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	8f 71       	andi	r24, 0x1F	; 31
     ec6:	e8 2f       	mov	r30, r24
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ea 50       	subi	r30, 0x0A	; 10
     ecc:	fd 4f       	sbci	r31, 0xFD	; 253
     ece:	90 81       	ld	r25, Z
     ed0:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <rx0_Tail>
     ed4:	89 2f       	mov	r24, r25
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	08 95       	ret
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f ef       	ldi	r25, 0xFF	; 255
     ede:	08 95       	ret

00000ee0 <uart1_getData>:
     ee0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <rx1_Tail>
     ee4:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <rx1_Head>
     ee8:	89 17       	cp	r24, r25
     eea:	61 f0       	breq	.+24     	; 0xf04 <uart1_getData+0x24>
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	8f 71       	andi	r24, 0x1F	; 31
     ef0:	e8 2f       	mov	r30, r24
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	e6 5c       	subi	r30, 0xC6	; 198
     ef6:	fc 4f       	sbci	r31, 0xFC	; 252
     ef8:	90 81       	ld	r25, Z
     efa:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <rx1_Tail>
     efe:	89 2f       	mov	r24, r25
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	08 95       	ret
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <uart_getchar>:
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	fc 01       	movw	r30, r24
     f10:	84 85       	ldd	r24, Z+12	; 0x0c
     f12:	95 85       	ldd	r25, Z+13	; 0x0d
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	41 f0       	breq	.+16     	; 0xf28 <uart_getchar+0x1e>
     f18:	ce df       	rcall	.-100    	; 0xeb6 <uart0_getData>
     f1a:	ec 01       	movw	r28, r24
     f1c:	99 23       	and	r25, r25
     f1e:	e4 f3       	brlt	.-8      	; 0xf18 <uart_getchar+0xe>
     f20:	1c df       	rcall	.-456    	; 0xd5a <uart0_putc>
     f22:	ce 01       	movw	r24, r28
     f24:	99 27       	eor	r25, r25
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <uart_getchar+0x2c>
     f28:	db df       	rcall	.-74     	; 0xee0 <uart1_getData>
     f2a:	ec 01       	movw	r28, r24
     f2c:	99 23       	and	r25, r25
     f2e:	e4 f3       	brlt	.-8      	; 0xf28 <uart_getchar+0x1e>
     f30:	33 df       	rcall	.-410    	; 0xd98 <uart1_putc>
     f32:	ce 01       	movw	r24, r28
     f34:	99 27       	eor	r25, r25
     f36:	99 27       	eor	r25, r25
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f3e:	0f 93       	push	r16
     f40:	0f b7       	in	r16, 0x3f	; 63
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <tx0_Tail>
     f4a:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <tx0_Head>
     f4e:	e3 95       	inc	r30
     f50:	ef 71       	andi	r30, 0x1F	; 31
     f52:	ef 13       	cpse	r30, r31
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <USART0_TX_CONTINUE>
     f56:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f5a:	ff 7d       	andi	r31, 0xDF	; 223
     f5c:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000f60 <USART0_TX_CONTINUE>:
     f60:	e0 93 17 03 	sts	0x0317, r30	; 0x800317 <tx0_Tail>
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	e2 5a       	subi	r30, 0xA2	; 162
     f68:	fc 4f       	sbci	r31, 0xFC	; 252
     f6a:	e0 81       	ld	r30, Z
     f6c:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000f70 <USART0_TX_EXIT>:
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	0f bf       	out	0x3f, r16	; 63
     f76:	0f 91       	pop	r16
     f78:	18 95       	reti

00000f7a <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f7a:	0f 93       	push	r16
     f7c:	0f b7       	in	r16, 0x3f	; 63
     f7e:	9f 93       	push	r25
     f80:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
     f88:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <rx0_Head>
     f8c:	f0 91 18 03 	lds	r31, 0x0318	; 0x800318 <rx0_Tail>
     f90:	e3 95       	inc	r30
     f92:	ef 71       	andi	r30, 0x1F	; 31
     f94:	fe 17       	cp	r31, r30
     f96:	31 f0       	breq	.+12     	; 0xfa4 <USART0_RX_EXIT>
     f98:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <rx0_Head>
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	ea 50       	subi	r30, 0x0A	; 10
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	90 83       	st	Z, r25

00000fa4 <USART0_RX_EXIT>:
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	9f 91       	pop	r25
     faa:	0f bf       	out	0x3f, r16	; 63
     fac:	0f 91       	pop	r16
     fae:	18 95       	reti

00000fb0 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     fb0:	0f 93       	push	r16
     fb2:	0f b7       	in	r16, 0x3f	; 63
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31
     fb8:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <tx1_Tail>
     fbc:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <tx1_Head>
     fc0:	e3 95       	inc	r30
     fc2:	ef 71       	andi	r30, 0x1F	; 31
     fc4:	ef 13       	cpse	r30, r31
     fc6:	05 c0       	rjmp	.+10     	; 0xfd2 <USART1_TX_CONTINUE>
     fc8:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     fcc:	ff 7d       	andi	r31, 0xDF	; 223
     fce:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000fd2 <USART1_TX_CONTINUE>:
     fd2:	e0 93 5b 03 	sts	0x035B, r30	; 0x80035b <tx1_Tail>
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	e7 5e       	subi	r30, 0xE7	; 231
     fda:	fc 4f       	sbci	r31, 0xFC	; 252
     fdc:	e0 81       	ld	r30, Z
     fde:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000fe2 <USART1_TX_EXIT>:
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	0f bf       	out	0x3f, r16	; 63
     fe8:	0f 91       	pop	r16
     fea:	18 95       	reti

00000fec <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     fec:	0f 93       	push	r16
     fee:	0f b7       	in	r16, 0x3f	; 63
     ff0:	9f 93       	push	r25
     ff2:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
     ffa:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <rx1_Head>
     ffe:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <rx1_Tail>
    1002:	e3 95       	inc	r30
    1004:	ef 71       	andi	r30, 0x1F	; 31
    1006:	fe 17       	cp	r31, r30
    1008:	31 f0       	breq	.+12     	; 0x1016 <USART1_RX_EXIT>
    100a:	e0 93 5c 03 	sts	0x035C, r30	; 0x80035c <rx1_Head>
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	e6 5c       	subi	r30, 0xC6	; 198
    1012:	fc 4f       	sbci	r31, 0xFC	; 252
    1014:	90 83       	st	Z, r25

00001016 <USART1_RX_EXIT>:
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	9f 91       	pop	r25
    101c:	0f bf       	out	0x3f, r16	; 63
    101e:	0f 91       	pop	r16
    1020:	18 95       	reti

00001022 <timer1_init_ts>:
//for speed
static uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
    1022:	e1 e8       	ldi	r30, 0x81	; 129
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	83 60       	ori	r24, 0x03	; 3
    102a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
    102c:	80 81       	ld	r24, Z
    102e:	88 60       	ori	r24, 0x08	; 8
    1030:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
    1032:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1036:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
    103a:	ef e6       	ldi	r30, 0x6F	; 111
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	82 60       	ori	r24, 0x02	; 2
    1042:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
    1044:	8d e7       	ldi	r24, 0x7D	; 125
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    104c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1050:	08 95       	ret

00001052 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
    1052:	84 b5       	in	r24, 0x24	; 36
    1054:	85 60       	ori	r24, 0x05	; 5
    1056:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
    1058:	84 b5       	in	r24, 0x24	; 36
    105a:	88 60       	ori	r24, 0x08	; 8
    105c:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
    105e:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
    1060:	ee e6       	ldi	r30, 0x6E	; 110
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
    106a:	87 e2       	ldi	r24, 0x27	; 39
    106c:	87 bd       	out	0x27, r24	; 39
    106e:	08 95       	ret

00001070 <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
    1070:	f8 94       	cli
    1072:	3c d5       	rcall	.+2680   	; 0x1aec <rgbled_init>
	can_init(0,0);
    1074:	23 de       	rcall	.-954    	; 0xcbc <pwm_init>
    1076:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
    1078:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
    107e:	1c d4       	rcall	.+2104   	; 0x18b8 <can_init>
    1080:	d0 df       	rcall	.-96     	; 0x1022 <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
    1082:	e7 df       	rcall	.-50     	; 0x1052 <timer0_init_ts>
    1084:	04 dc       	rcall	.-2040   	; 0x88e <speed_init>
    1086:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
    1088:	40 d5       	rcall	.+2688   	; 0x1b0a <spi_init>
    108a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
    108e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
    1092:	88 e9       	ldi	r24, 0x98	; 152
    1094:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
    1098:	ee e7       	ldi	r30, 0x7E	; 126
    109a:	f3 e0       	ldi	r31, 0x03	; 3
    109c:	84 e0       	ldi	r24, 0x04	; 4
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
    10a2:	82 83       	std	Z+2, r24	; 0x02
	drivers(0);
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
	sei();
    10a8:	80 d9       	rcall	.-3328   	; 0x3aa <drivers_init>
	
    while (1){
		
		handle_can(&ComValues, &rxFrame); //receive CAN
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	80 d9       	rcall	.-3328   	; 0x3ae <drivers>
    10ae:	78 94       	sei
    10b0:	60 ee       	ldi	r22, 0xE0	; 224
    10b2:	72 e0       	ldi	r23, 0x02	; 2
    10b4:	82 e1       	ldi	r24, 0x12	; 18
		receive_uart(&ComValues);
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	16 da       	rcall	.-3028   	; 0x4e6 <handle_can>
    10ba:	82 e1       	ldi	r24, 0x12	; 18
    10bc:	91 e0       	ldi	r25, 0x01	; 1
		
		if (b_send_can)
    10be:	e5 da       	rcall	.-2614   	; 0x68a <receive_uart>
    10c0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <b_send_can>
    10c4:	88 23       	and	r24, r24
		{
			handle_motor_status_can_msg(ComValues); //send motor status on CAN
    10c6:	b1 f1       	breq	.+108    	; 0x1134 <__stack+0x35>
    10c8:	8d b7       	in	r24, 0x3d	; 61
    10ca:	9e b7       	in	r25, 0x3e	; 62
    10cc:	81 97       	sbiw	r24, 0x21	; 33
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	9e bf       	out	0x3e, r25	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	8d bf       	out	0x3d, r24	; 61
    10d8:	ad b7       	in	r26, 0x3d	; 61
    10da:	be b7       	in	r27, 0x3e	; 62
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	81 e2       	ldi	r24, 0x21	; 33
    10e0:	e2 e1       	ldi	r30, 0x12	; 18
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	01 90       	ld	r0, Z+
    10e6:	0d 92       	st	X+, r0
    10e8:	8a 95       	dec	r24
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <main+0x74>
			handle_clutch_cmd_can_msg(ComValues); // send clutch command on CAN
    10ec:	63 da       	rcall	.-2874   	; 0x5b4 <handle_motor_status_can_msg>
    10ee:	8d b7       	in	r24, 0x3d	; 61
    10f0:	9e b7       	in	r25, 0x3e	; 62
    10f2:	81 96       	adiw	r24, 0x21	; 33
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	9e bf       	out	0x3e, r25	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	8d bf       	out	0x3d, r24	; 61
    10fe:	81 97       	sbiw	r24, 0x21	; 33
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	9e bf       	out	0x3e, r25	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	8d bf       	out	0x3d, r24	; 61
    110a:	ad b7       	in	r26, 0x3d	; 61
    110c:	be b7       	in	r27, 0x3e	; 62
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	81 e2       	ldi	r24, 0x21	; 33
    1112:	e2 e1       	ldi	r30, 0x12	; 18
    1114:	f1 e0       	ldi	r31, 0x01	; 1
    1116:	01 90       	ld	r0, Z+
    1118:	0d 92       	st	X+, r0
    111a:	8a 95       	dec	r24
    111c:	e1 f7       	brne	.-8      	; 0x1116 <__stack+0x17>
			b_send_can = 0;
    111e:	a1 da       	rcall	.-2750   	; 0x662 <handle_clutch_cmd_can_msg>
    1120:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <b_send_can>
    1124:	8d b7       	in	r24, 0x3d	; 61
    1126:	9e b7       	in	r25, 0x3e	; 62
    1128:	81 96       	adiw	r24, 0x21	; 33
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	9e bf       	out	0x3e, r25	; 62
    1130:	0f be       	out	0x3f, r0	; 63
		}
		
		if (b_send_uart)
    1132:	8d bf       	out	0x3d, r24	; 61
    1134:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <b_send_uart>
    1138:	88 23       	and	r24, r24
    113a:	09 f4       	brne	.+2      	; 0x113e <__stack+0x3f>
		{
			send_uart(ComValues);
    113c:	b9 cf       	rjmp	.-142    	; 0x10b0 <main+0x40>
    113e:	8d b7       	in	r24, 0x3d	; 61
    1140:	9e b7       	in	r25, 0x3e	; 62
    1142:	81 97       	sbiw	r24, 0x21	; 33
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	9e bf       	out	0x3e, r25	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	8d bf       	out	0x3d, r24	; 61
    114e:	ad b7       	in	r26, 0x3d	; 61
    1150:	be b7       	in	r27, 0x3e	; 62
    1152:	11 96       	adiw	r26, 0x01	; 1
    1154:	81 e2       	ldi	r24, 0x21	; 33
    1156:	e2 e1       	ldi	r30, 0x12	; 18
    1158:	f1 e0       	ldi	r31, 0x01	; 1
    115a:	01 90       	ld	r0, Z+
    115c:	0d 92       	st	X+, r0
    115e:	8a 95       	dec	r24
    1160:	e1 f7       	brne	.-8      	; 0x115a <__stack+0x5b>
			b_send_uart = 0;
    1162:	c8 da       	rcall	.-2672   	; 0x6f4 <send_uart>
    1164:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <b_send_uart>
    1168:	8d b7       	in	r24, 0x3d	; 61
    116a:	9e b7       	in	r25, 0x3e	; 62
    116c:	81 96       	adiw	r24, 0x21	; 33
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	9e bf       	out	0x3e, r25	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	8d bf       	out	0x3d, r24	; 61
    1178:	9b cf       	rjmp	.-202    	; 0x10b0 <main+0x40>

0000117a <__vector_16>:
		}
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	0b b6       	in	r0, 0x3b	; 59
    1186:	0f 92       	push	r0
    1188:	ef 92       	push	r14
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
	
	if (systic_counter_fast == 1) // every 10ms
    11a6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <systic_counter_fast>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__vector_16+0x36>
    11ae:	42 c0       	rjmp	.+132    	; 0x1234 <__vector_16+0xba>
	{
		b_send_uart = 1;
    11b0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <b_send_uart>
		if (ComValues.u16_watchdog_can != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    11b4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ComValues+0x15>
    11b8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <ComValues+0x16>
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	71 f0       	breq	.+28     	; 0x11dc <__vector_16+0x62>
    11c0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <ComValues+0x1a>
    11c4:	21 30       	cpi	r18, 0x01	; 1
    11c6:	d1 f4       	brne	.+52     	; 0x11fc <__vector_16+0x82>
		{
			ComValues.u16_watchdog_can -- ;
    11c8:	e2 e1       	ldi	r30, 0x12	; 18
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	96 8b       	std	Z+22, r25	; 0x16
    11d0:	85 8b       	std	Z+21, r24	; 0x15
		}
		
		if (ComValues.u16_watchdog_throttle != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    11d2:	87 89       	ldd	r24, Z+23	; 0x17
    11d4:	90 8d       	ldd	r25, Z+24	; 0x18
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	59 f4       	brne	.+22     	; 0x11f0 <__vector_16+0x76>
    11da:	18 c0       	rjmp	.+48     	; 0x120c <__vector_16+0x92>
    11dc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ComValues+0x17>
    11e0:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ComValues+0x18>
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	51 f0       	breq	.+20     	; 0x11fc <__vector_16+0x82>
    11e8:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <ComValues+0x1a>
    11ec:	21 30       	cpi	r18, 0x01	; 1
    11ee:	31 f4       	brne	.+12     	; 0x11fc <__vector_16+0x82>
		{
			ComValues.u16_watchdog_throttle -- ;
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ComValues+0x18>
    11f6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ComValues+0x17>
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <__vector_16+0x92>
		}else if (ComValues.message_mode == UART)
    11fc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ComValues+0x1a>
    1200:	81 11       	cpse	r24, r1
    1202:	04 c0       	rjmp	.+8      	; 0x120c <__vector_16+0x92>
		{
			ComValues.u16_watchdog_throttle = 0 ;
    1204:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ComValues+0x18>
    1208:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ComValues+0x17>
		}
		
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;		
    120c:	e2 e1       	ldi	r30, 0x12	; 18
    120e:	f1 e0       	ldi	r31, 0x01	; 1
    1210:	00 85       	ldd	r16, Z+8	; 0x08
    1212:	11 85       	ldd	r17, Z+9	; 0x09
    1214:	22 85       	ldd	r18, Z+10	; 0x0a
    1216:	33 85       	ldd	r19, Z+11	; 0x0b
    1218:	44 81       	ldd	r20, Z+4	; 0x04
    121a:	55 81       	ldd	r21, Z+5	; 0x05
    121c:	66 81       	ldd	r22, Z+6	; 0x06
    121e:	77 81       	ldd	r23, Z+7	; 0x07
    1220:	0f 2e       	mov	r0, r31
    1222:	fa e0       	ldi	r31, 0x0A	; 10
    1224:	ef 2e       	mov	r14, r31
    1226:	f0 2d       	mov	r31, r0
    1228:	8e e1       	ldi	r24, 0x1E	; 30
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	e7 d1       	rcall	.+974    	; 0x15fc <handle_joulemeter>
		systic_counter_fast = 0;
    122e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <systic_counter_fast>
    1232:	03 c0       	rjmp	.+6      	; 0x123a <__vector_16+0xc0>
	} else {
		systic_counter_fast ++;
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
    123a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <systic_counter_slow>
    123e:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <systic_counter_slow+0x1>
    1242:	84 36       	cpi	r24, 0x64	; 100
    1244:	91 05       	cpc	r25, r1
    1246:	19 f5       	brne	.+70     	; 0x128e <__vector_16+0x114>
	{
		b_send_can = 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <b_send_can>
		manage_LEDs(ComValues); //UM LED according to motor state
    124e:	8d b7       	in	r24, 0x3d	; 61
    1250:	9e b7       	in	r25, 0x3e	; 62
    1252:	81 97       	sbiw	r24, 0x21	; 33
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	9e bf       	out	0x3e, r25	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	8d bf       	out	0x3d, r24	; 61
    125e:	ad b7       	in	r26, 0x3d	; 61
    1260:	be b7       	in	r27, 0x3e	; 62
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	81 e2       	ldi	r24, 0x21	; 33
    1266:	e2 e1       	ldi	r30, 0x12	; 18
    1268:	f1 e0       	ldi	r31, 0x01	; 1
    126a:	01 90       	ld	r0, Z+
    126c:	0d 92       	st	X+, r0
    126e:	8a 95       	dec	r24
    1270:	e1 f7       	brne	.-8      	; 0x126a <__vector_16+0xf0>
    1272:	bc da       	rcall	.-2696   	; 0x7ec <manage_LEDs>
		systic_counter_slow = 0;
    1274:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <systic_counter_slow+0x1>
    1278:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <systic_counter_slow>
    127c:	8d b7       	in	r24, 0x3d	; 61
    127e:	9e b7       	in	r25, 0x3e	; 62
    1280:	81 96       	adiw	r24, 0x21	; 33
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	9e bf       	out	0x3e, r25	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	8d bf       	out	0x3d, r24	; 61
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <__vector_16+0x11e>
		} else {
		systic_counter_slow ++;
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <systic_counter_slow+0x1>
    1294:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <systic_counter_slow>
	}
	state_handler(&ComValues);
    1298:	82 e1       	ldi	r24, 0x12	; 18
    129a:	91 e0       	ldi	r25, 0x01	; 1
}
    129c:	a8 db       	rcall	.-2224   	; 0x9ee <state_handler>
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ef 90       	pop	r14
    12bc:	0f 90       	pop	r0
    12be:	0b be       	out	0x3b, r0	; 59
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	0b b6       	in	r0, 0x3b	; 59
    12d6:	0f 92       	push	r0
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
	
	if (u16_speed_count < 65530 )
    12f0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u16_speed_count>
    12f4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <u16_speed_count+0x1>
    12f8:	8a 3f       	cpi	r24, 0xFA	; 250
    12fa:	2f ef       	ldi	r18, 0xFF	; 255
    12fc:	92 07       	cpc	r25, r18
    12fe:	30 f4       	brcc	.+12     	; 0x130c <__vector_12+0x42>
	{
		u16_speed_count ++ ;
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <u16_speed_count+0x1>
    1306:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u16_speed_count>
    130a:	08 c0       	rjmp	.+16     	; 0x131c <__vector_12+0x52>
	} else
	{
		ComValues.u16_car_speed = 0;
    130c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ComValues+0x12>
    1310:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ComValues+0x11>
		u16_speed_count = 0;
    1314:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <u16_speed_count+0x1>
    1318:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <u16_speed_count>
	}
	
	if (u8_SPI_count == 4)
    131c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8_SPI_count>
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	31 f4       	brne	.+12     	; 0x1330 <__vector_12+0x66>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
    1324:	82 e2       	ldi	r24, 0x22	; 34
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	bd d8       	rcall	.-3718   	; 0x4a4 <SPI_handler_4>
		u8_SPI_count = 0 ;
    132a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u8_SPI_count>
    132e:	12 c0       	rjmp	.+36     	; 0x1354 <__vector_12+0x8a>
	}
	
	if (u8_SPI_count == 3)
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	21 f4       	brne	.+8      	; 0x133c <__vector_12+0x72>
	{
		u8_SPI_count ++ ;
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8_SPI_count>
    133a:	18 c0       	rjmp	.+48     	; 0x136c <__vector_12+0xa2>
	}
	
	if (u8_SPI_count == 2)
    133c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8_SPI_count>
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	41 f4       	brne	.+16     	; 0x1354 <__vector_12+0x8a>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
    1344:	8a e1       	ldi	r24, 0x1A	; 26
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	7b d8       	rcall	.-3850   	; 0x440 <SPI_handler_2>
		u8_SPI_count ++ ;
    134a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8_SPI_count>
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
    1354:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8_SPI_count>
    1358:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
    135a:	41 f4       	brne	.+16     	; 0x136c <__vector_12+0xa2>
    135c:	86 e1       	ldi	r24, 0x16	; 22
    135e:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    1360:	4e d8       	rcall	.-3940   	; 0x3fe <SPI_handler_1>
    1362:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8_SPI_count>
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
    136c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
    1370:	81 11       	cpse	r24, r1
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <__vector_12+0xba>
    1374:	82 e1       	ldi	r24, 0x12	; 18
    1376:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    1378:	20 d8       	rcall	.-4032   	; 0x3ba <SPI_handler_0>
    137a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8_SPI_count>
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8_SPI_count>
	}
}
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0b be       	out	0x3b, r0	; 59
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti

000013aa <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of the reed switch)
{
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	0b b6       	in	r0, 0x3b	; 59
    13b6:	0f 92       	push	r0
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
	handle_speed_sensor(&ComValues.u16_car_speed, &u16_speed_count);
    13d0:	6a e4       	ldi	r22, 0x4A	; 74
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	83 e2       	ldi	r24, 0x23	; 35
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	65 da       	rcall	.-2870   	; 0x8a4 <handle_speed_sensor>
}
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0b be       	out	0x3b, r0	; 59
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <handle_current_sensor>:
#define CORRECTION_OFFSET_BAT 0.98
#define CORRECTION_OFFSET_MOT 1.25
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg, uint8_t u8_sensor_num)
{
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <handle_current_sensor+0x1a>
    141a:	00 d0       	rcall	.+0      	; 0x141c <handle_current_sensor+0x1c>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	8c 01       	movw	r16, r24
    1422:	f4 2e       	mov	r15, r20
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY) ;// /3 because current passes 3x in transducer for more precision.
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	e3 d4       	rcall	.+2502   	; 0x1df0 <__floatunsisf>
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 ea       	ldi	r20, 0xA0	; 160
    1430:	50 e4       	ldi	r21, 0x40	; 64
    1432:	94 d5       	rcall	.+2856   	; 0x1f5c <__mulsf3>
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	59 e3       	ldi	r21, 0x39	; 57
    143c:	8f d5       	rcall	.+2846   	; 0x1f5c <__mulsf3>
    143e:	2e ea       	ldi	r18, 0xAE	; 174
    1440:	37 e4       	ldi	r19, 0x47	; 71
    1442:	41 e2       	ldi	r20, 0x21	; 33
    1444:	50 e4       	ldi	r21, 0x40	; 64
    1446:	d2 d3       	rcall	.+1956   	; 0x1bec <__subsf3>
    1448:	23 ec       	ldi	r18, 0xC3	; 195
    144a:	34 e6       	ldi	r19, 0x64	; 100
    144c:	4a e2       	ldi	r20, 0x2A	; 42
    144e:	5d e3       	ldi	r21, 0x3D	; 61
    1450:	36 d4       	rcall	.+2156   	; 0x1cbe <__divsf3>
    1452:	69 83       	std	Y+1, r22	; 0x01
    1454:	7a 83       	std	Y+2, r23	; 0x02
    1456:	8b 83       	std	Y+3, r24	; 0x03
    1458:	9c 83       	std	Y+4, r25	; 0x04
	if (u8_sensor_num)
    145a:	ff 20       	and	r15, r15
    145c:	71 f0       	breq	.+28     	; 0x147a <handle_current_sensor+0x7a>
	{//batt
		f_new_current = (f_new_current+CORRECTION_OFFSET_BAT);// correction of offset
    145e:	69 81       	ldd	r22, Y+1	; 0x01
    1460:	7a 81       	ldd	r23, Y+2	; 0x02
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	28 e4       	ldi	r18, 0x48	; 72
    1468:	31 ee       	ldi	r19, 0xE1	; 225
    146a:	4a e7       	ldi	r20, 0x7A	; 122
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	bf d3       	rcall	.+1918   	; 0x1bee <__addsf3>
    1470:	69 83       	std	Y+1, r22	; 0x01
    1472:	7a 83       	std	Y+2, r23	; 0x02
    1474:	8b 83       	std	Y+3, r24	; 0x03
    1476:	9c 83       	std	Y+4, r25	; 0x04
    1478:	0d c0       	rjmp	.+26     	; 0x1494 <handle_current_sensor+0x94>
	}else{
		f_new_current = (f_new_current+CORRECTION_OFFSET_MOT);// correction of offset
    147a:	69 81       	ldd	r22, Y+1	; 0x01
    147c:	7a 81       	ldd	r23, Y+2	; 0x02
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 ea       	ldi	r20, 0xA0	; 160
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	b1 d3       	rcall	.+1890   	; 0x1bee <__addsf3>
    148c:	69 83       	std	Y+1, r22	; 0x01
    148e:	7a 83       	std	Y+2, r23	; 0x02
    1490:	8b 83       	std	Y+3, r24	; 0x03
    1492:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    1494:	89 80       	ldd	r8, Y+1	; 0x01
    1496:	9a 80       	ldd	r9, Y+2	; 0x02
    1498:	ab 80       	ldd	r10, Y+3	; 0x03
    149a:	bc 80       	ldd	r11, Y+4	; 0x04
    149c:	26 e6       	ldi	r18, 0x66	; 102
    149e:	36 e6       	ldi	r19, 0x66	; 102
    14a0:	46 e6       	ldi	r20, 0x66	; 102
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	f8 01       	movw	r30, r16
    14a6:	60 81       	ld	r22, Z
    14a8:	71 81       	ldd	r23, Z+1	; 0x01
    14aa:	82 81       	ldd	r24, Z+2	; 0x02
    14ac:	93 81       	ldd	r25, Z+3	; 0x03
    14ae:	56 d5       	rcall	.+2732   	; 0x1f5c <__mulsf3>
    14b0:	6b 01       	movw	r12, r22
    14b2:	7c 01       	movw	r14, r24
    14b4:	2d ec       	ldi	r18, 0xCD	; 205
    14b6:	3c ec       	ldi	r19, 0xCC	; 204
    14b8:	4c ec       	ldi	r20, 0xCC	; 204
    14ba:	5d e3       	ldi	r21, 0x3D	; 61
    14bc:	c5 01       	movw	r24, r10
    14be:	b4 01       	movw	r22, r8
    14c0:	4d d5       	rcall	.+2714   	; 0x1f5c <__mulsf3>
    14c2:	9b 01       	movw	r18, r22
    14c4:	ac 01       	movw	r20, r24
    14c6:	c7 01       	movw	r24, r14
    14c8:	b6 01       	movw	r22, r12
    14ca:	91 d3       	rcall	.+1826   	; 0x1bee <__addsf3>
    14cc:	f8 01       	movw	r30, r16
    14ce:	60 83       	st	Z, r22
    14d0:	71 83       	std	Z+1, r23	; 0x01
    14d2:	82 83       	std	Z+2, r24	; 0x02
    14d4:	93 83       	std	Z+3, r25	; 0x03
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	af 90       	pop	r10
    14f2:	9f 90       	pop	r9
    14f4:	8f 90       	pop	r8
    14f6:	08 95       	ret

000014f8 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	00 d0       	rcall	.+0      	; 0x1502 <handle_temp_sensor+0xa>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <handle_temp_sensor+0xc>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	70 d4       	rcall	.+2272   	; 0x1df0 <__floatunsisf>
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 ea       	ldi	r20, 0xA0	; 160
    1516:	50 e4       	ldi	r21, 0x40	; 64
    1518:	21 d5       	rcall	.+2626   	; 0x1f5c <__mulsf3>
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	59 e3       	ldi	r21, 0x39	; 57
    1522:	1c d5       	rcall	.+2616   	; 0x1f5c <__mulsf3>
    1524:	69 83       	std	Y+1, r22	; 0x01
    1526:	7a 83       	std	Y+2, r23	; 0x02
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	9c 83       	std	Y+4, r25	; 0x04
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    152c:	69 81       	ldd	r22, Y+1	; 0x01
    152e:	7a 81       	ldd	r23, Y+2	; 0x02
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	2d ec       	ldi	r18, 0xCD	; 205
    1536:	3c ec       	ldi	r19, 0xCC	; 204
    1538:	4c e6       	ldi	r20, 0x6C	; 108
    153a:	50 e4       	ldi	r21, 0x40	; 64
    153c:	bc d3       	rcall	.+1912   	; 0x1cb6 <__cmpsf2>
    153e:	18 16       	cp	r1, r24
    1540:	8c f0       	brlt	.+34     	; 0x1564 <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
    1542:	69 81       	ldd	r22, Y+1	; 0x01
    1544:	7a 81       	ldd	r23, Y+2	; 0x02
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 ea       	ldi	r20, 0xA0	; 160
    1550:	51 e4       	ldi	r21, 0x41	; 65
    1552:	04 d5       	rcall	.+2568   	; 0x1f5c <__mulsf3>
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 eb       	ldi	r20, 0xB0	; 176
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	47 d3       	rcall	.+1678   	; 0x1bec <__subsf3>
    155e:	1c d4       	rcall	.+2104   	; 0x1d98 <__fixunssfsi>
    1560:	f8 01       	movw	r30, r16
    1562:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    1564:	69 81       	ldd	r22, Y+1	; 0x01
    1566:	7a 81       	ldd	r23, Y+2	; 0x02
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	26 e6       	ldi	r18, 0x66	; 102
    156e:	36 e6       	ldi	r19, 0x66	; 102
    1570:	46 e9       	ldi	r20, 0x96	; 150
    1572:	50 e4       	ldi	r21, 0x40	; 64
    1574:	a0 d3       	rcall	.+1856   	; 0x1cb6 <__cmpsf2>
    1576:	18 16       	cp	r1, r24
    1578:	e4 f0       	brlt	.+56     	; 0x15b2 <handle_temp_sensor+0xba>
    157a:	69 81       	ldd	r22, Y+1	; 0x01
    157c:	7a 81       	ldd	r23, Y+2	; 0x02
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	2d ec       	ldi	r18, 0xCD	; 205
    1584:	3c ec       	ldi	r19, 0xCC	; 204
    1586:	4c e6       	ldi	r20, 0x6C	; 108
    1588:	50 e4       	ldi	r21, 0x40	; 64
    158a:	e4 d4       	rcall	.+2504   	; 0x1f54 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    158c:	18 16       	cp	r1, r24
    158e:	8c f4       	brge	.+34     	; 0x15b2 <handle_temp_sensor+0xba>
    1590:	69 81       	ldd	r22, Y+1	; 0x01
    1592:	7a 81       	ldd	r23, Y+2	; 0x02
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4e e5       	ldi	r20, 0x5E	; 94
    159e:	52 e4       	ldi	r21, 0x42	; 66
    15a0:	dd d4       	rcall	.+2490   	; 0x1f5c <__mulsf3>
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e8       	ldi	r19, 0x80	; 128
    15a6:	4b e1       	ldi	r20, 0x1B	; 27
    15a8:	53 e4       	ldi	r21, 0x43	; 67
    15aa:	20 d3       	rcall	.+1600   	; 0x1bec <__subsf3>
    15ac:	f5 d3       	rcall	.+2026   	; 0x1d98 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
    15ae:	f8 01       	movw	r30, r16
    15b0:	60 83       	st	Z, r22
    15b2:	69 81       	ldd	r22, Y+1	; 0x01
    15b4:	7a 81       	ldd	r23, Y+2	; 0x02
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	26 e6       	ldi	r18, 0x66	; 102
    15bc:	36 e6       	ldi	r19, 0x66	; 102
    15be:	46 e9       	ldi	r20, 0x96	; 150
    15c0:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
    15c2:	c8 d4       	rcall	.+2448   	; 0x1f54 <__gesf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	8c f4       	brge	.+34     	; 0x15ea <handle_temp_sensor+0xf2>
    15c8:	69 81       	ldd	r22, Y+1	; 0x01
    15ca:	7a 81       	ldd	r23, Y+2	; 0x02
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	48 e4       	ldi	r20, 0x48	; 72
    15d6:	53 e4       	ldi	r21, 0x43	; 67
    15d8:	c1 d4       	rcall	.+2434   	; 0x1f5c <__mulsf3>
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	42 e5       	ldi	r20, 0x52	; 82
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	04 d3       	rcall	.+1544   	; 0x1bec <__subsf3>
    15e4:	d9 d3       	rcall	.+1970   	; 0x1d98 <__fixunssfsi>
	}
}
    15e6:	f8 01       	movw	r30, r16
    15e8:	60 83       	st	Z, r22
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    15fc:	8f 92       	push	r8
    15fe:	9f 92       	push	r9
    1600:	af 92       	push	r10
    1602:	bf 92       	push	r11
    1604:	ef 92       	push	r14
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	4a 01       	movw	r8, r20
    1612:	5b 01       	movw	r10, r22
    1614:	c9 01       	movw	r24, r18
    1616:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    1618:	a5 01       	movw	r20, r10
    161a:	94 01       	movw	r18, r8
    161c:	9f d4       	rcall	.+2366   	; 0x1f5c <__mulsf3>
    161e:	4b 01       	movw	r8, r22
    1620:	5c 01       	movw	r10, r24
    1622:	6e 2d       	mov	r22, r14
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	e2 d3       	rcall	.+1988   	; 0x1df0 <__floatunsisf>
    162c:	9b 01       	movw	r18, r22
    162e:	ac 01       	movw	r20, r24
    1630:	c5 01       	movw	r24, r10
    1632:	b4 01       	movw	r22, r8
    1634:	93 d4       	rcall	.+2342   	; 0x1f5c <__mulsf3>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	54 e4       	ldi	r21, 0x44	; 68
    163e:	3f d3       	rcall	.+1662   	; 0x1cbe <__divsf3>
    1640:	9b 01       	movw	r18, r22
    1642:	ac 01       	movw	r20, r24
    1644:	68 81       	ld	r22, Y
    1646:	79 81       	ldd	r23, Y+1	; 0x01
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	d0 d2       	rcall	.+1440   	; 0x1bee <__addsf3>
    164e:	68 83       	st	Y, r22
    1650:	79 83       	std	Y+1, r23	; 0x01
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	9b 83       	std	Y+3, r25	; 0x03
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ef 90       	pop	r14
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	08 95       	ret

0000166a <Set_ADC_Channel_ext>:
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
}

void Set_ADC_Channel_ext(uint8_t u8_CHn, uint8_t * u8_ADC_tx) //for MCP3208 external ADC
{
	switch(u8_CHn)
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	88 30       	cpi	r24, 0x08	; 8
    166e:	91 05       	cpc	r25, r1
    1670:	88 f5       	brcc	.+98     	; 0x16d4 <Set_ADC_Channel_ext+0x6a>
    1672:	fc 01       	movw	r30, r24
    1674:	e6 5b       	subi	r30, 0xB6	; 182
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	e7 c4       	rjmp	.+2510   	; 0x2048 <__tablejump2__>
	{
		case 0 :
			u8_ADC_tx[0] = 0b00000110 ;
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	fb 01       	movw	r30, r22
    167e:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b00 ;
    1680:	11 82       	std	Z+1, r1	; 0x01
		break;
    1682:	08 95       	ret
		
		case 1 :
			u8_ADC_tx[0] = 0b00000110 ;
    1684:	86 e0       	ldi	r24, 0x06	; 6
    1686:	fb 01       	movw	r30, r22
    1688:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b01 << 6 ;
    168a:	80 e4       	ldi	r24, 0x40	; 64
    168c:	81 83       	std	Z+1, r24	; 0x01
		break;
    168e:	08 95       	ret
		
		case 2 :
			u8_ADC_tx[0] = 0b00000110 ;
    1690:	86 e0       	ldi	r24, 0x06	; 6
    1692:	fb 01       	movw	r30, r22
    1694:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b10 << 6 ;
    1696:	80 e8       	ldi	r24, 0x80	; 128
    1698:	81 83       	std	Z+1, r24	; 0x01
		break;
    169a:	08 95       	ret
		
		case 3 :
		u8_ADC_tx[0] = 0b00000110 ;
    169c:	86 e0       	ldi	r24, 0x06	; 6
    169e:	fb 01       	movw	r30, r22
    16a0:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    16a2:	80 ec       	ldi	r24, 0xC0	; 192
    16a4:	81 83       	std	Z+1, r24	; 0x01
		break;
    16a6:	08 95       	ret
		
		case 4 :
		u8_ADC_tx[0] = 0b00000111 ;
    16a8:	87 e0       	ldi	r24, 0x07	; 7
    16aa:	fb 01       	movw	r30, r22
    16ac:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b00 << 6 ;
    16ae:	11 82       	std	Z+1, r1	; 0x01
		break;
    16b0:	08 95       	ret
		
		case 5 :
		u8_ADC_tx[0] = 0b00000111 ;
    16b2:	87 e0       	ldi	r24, 0x07	; 7
    16b4:	fb 01       	movw	r30, r22
    16b6:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b01 << 6 ;
    16b8:	80 e4       	ldi	r24, 0x40	; 64
    16ba:	81 83       	std	Z+1, r24	; 0x01
		break;
    16bc:	08 95       	ret
		
		case 6 :
		u8_ADC_tx[0] = 0b00000111 ;
    16be:	87 e0       	ldi	r24, 0x07	; 7
    16c0:	fb 01       	movw	r30, r22
    16c2:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b10 << 6 ;
    16c4:	80 e8       	ldi	r24, 0x80	; 128
    16c6:	81 83       	std	Z+1, r24	; 0x01
		break;
    16c8:	08 95       	ret
		
		case 7 :
		u8_ADC_tx[0] = 0b00000111 ;
    16ca:	87 e0       	ldi	r24, 0x07	; 7
    16cc:	fb 01       	movw	r30, r22
    16ce:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    16d0:	80 ec       	ldi	r24, 0xC0	; 192
    16d2:	81 83       	std	Z+1, r24	; 0x01
    16d4:	08 95       	ret

000016d6 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	0b b6       	in	r0, 0x3b	; 59
    16e2:	0f 92       	push	r0
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	1f 92       	push	r1
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    1704:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    1708:	80 ff       	sbrs	r24, 0
    170a:	47 c0       	rjmp	.+142    	; 0x179a <__vector_18+0xc4>
    170c:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1710:	90 ff       	sbrs	r25, 0
    1712:	43 c0       	rjmp	.+134    	; 0x179a <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    1714:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    1718:	ee ee       	ldi	r30, 0xEE	; 238
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    1720:	80 81       	ld	r24, Z
    1722:	8f 7b       	andi	r24, 0xBF	; 191
    1724:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    1726:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <tx_off>
    172a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <tx_on>
    172e:	98 17       	cp	r25, r24
    1730:	89 f1       	breq	.+98     	; 0x1794 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    1732:	8f 70       	andi	r24, 0x0F	; 15
    1734:	2b e0       	ldi	r18, 0x0B	; 11
    1736:	82 9f       	mul	r24, r18
    1738:	c0 01       	movw	r24, r0
    173a:	11 24       	eor	r1, r1
    173c:	fc 01       	movw	r30, r24
    173e:	e8 5f       	subi	r30, 0xF8	; 248
    1740:	fd 4f       	sbci	r31, 0xFD	; 253
    1742:	20 81       	ld	r18, Z
    1744:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    1748:	20 81       	ld	r18, Z
    174a:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    174e:	21 81       	ldd	r18, Z+1	; 0x01
    1750:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    1754:	23 81       	ldd	r18, Z+3	; 0x03
    1756:	aa ef       	ldi	r26, 0xFA	; 250
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    175c:	24 81       	ldd	r18, Z+4	; 0x04
    175e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    1760:	25 81       	ldd	r18, Z+5	; 0x05
    1762:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    1764:	26 81       	ldd	r18, Z+6	; 0x06
    1766:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    1768:	27 81       	ldd	r18, Z+7	; 0x07
    176a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    176c:	20 85       	ldd	r18, Z+8	; 0x08
    176e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    1770:	21 85       	ldd	r18, Z+9	; 0x09
    1772:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    1774:	22 85       	ldd	r18, Z+10	; 0x0a
    1776:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    1778:	fc 01       	movw	r30, r24
    177a:	e6 5f       	subi	r30, 0xF6	; 246
    177c:	fd 4f       	sbci	r31, 0xFD	; 253
    177e:	80 81       	ld	r24, Z
    1780:	8f 70       	andi	r24, 0x0F	; 15
    1782:	80 64       	ori	r24, 0x40	; 64
    1784:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    1788:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <tx_off>
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_off>
    1792:	7d c0       	rjmp	.+250    	; 0x188e <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    1794:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <tx_busy>
    1798:	7a c0       	rjmp	.+244    	; 0x188e <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    179a:	81 ff       	sbrs	r24, 1
    179c:	78 c0       	rjmp	.+240    	; 0x188e <__vector_18+0x1b8>
    179e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    17a2:	81 ff       	sbrs	r24, 1
    17a4:	74 c0       	rjmp	.+232    	; 0x188e <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    17a6:	80 e1       	ldi	r24, 0x10	; 16
    17a8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    17ac:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <rx_on>
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <rx_off>
    17b8:	29 1b       	sub	r18, r25
    17ba:	31 09       	sbc	r19, r1
    17bc:	2f 77       	andi	r18, 0x7F	; 127
    17be:	33 27       	eor	r19, r19
    17c0:	20 31       	cpi	r18, 0x10	; 16
    17c2:	31 05       	cpc	r19, r1
    17c4:	0c f0       	brlt	.+2      	; 0x17c8 <__vector_18+0xf2>
    17c6:	58 c0       	rjmp	.+176    	; 0x1878 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    17c8:	e8 2f       	mov	r30, r24
    17ca:	ef 70       	andi	r30, 0x0F	; 15
    17cc:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    17d0:	2e 2f       	mov	r18, r30
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4b e0       	ldi	r20, 0x0B	; 11
    17d6:	e4 9f       	mul	r30, r20
    17d8:	f0 01       	movw	r30, r0
    17da:	11 24       	eor	r1, r1
    17dc:	e8 5a       	subi	r30, 0xA8	; 168
    17de:	fe 4f       	sbci	r31, 0xFE	; 254
    17e0:	9f 70       	andi	r25, 0x0F	; 15
    17e2:	42 81       	ldd	r20, Z+2	; 0x02
    17e4:	40 7f       	andi	r20, 0xF0	; 240
    17e6:	94 2b       	or	r25, r20
    17e8:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    17ea:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17ee:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    17f2:	40 7e       	andi	r20, 0xE0	; 224
    17f4:	97 70       	andi	r25, 0x07	; 7
    17f6:	94 2b       	or	r25, r20
    17f8:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    17fa:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17fe:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    1800:	aa ef       	ldi	r26, 0xFA	; 250
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	9c 91       	ld	r25, X
    1806:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    1808:	9c 91       	ld	r25, X
    180a:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    180c:	9c 91       	ld	r25, X
    180e:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    1810:	9c 91       	ld	r25, X
    1812:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    1814:	9c 91       	ld	r25, X
    1816:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    1818:	9c 91       	ld	r25, X
    181a:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    181c:	9c 91       	ld	r25, X
    181e:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    1820:	9c 91       	ld	r25, X
    1822:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    182a:	40 81       	ld	r20, Z
    182c:	42 95       	swap	r20
    182e:	46 95       	lsr	r20
    1830:	47 70       	andi	r20, 0x07	; 7
    1832:	51 81       	ldd	r21, Z+1	; 0x01
    1834:	65 2f       	mov	r22, r21
    1836:	66 0f       	add	r22, r22
    1838:	66 0f       	add	r22, r22
    183a:	66 0f       	add	r22, r22
    183c:	86 2f       	mov	r24, r22
    183e:	84 2b       	or	r24, r20
    1840:	95 2f       	mov	r25, r21
    1842:	92 95       	swap	r25
    1844:	96 95       	lsr	r25
    1846:	97 70       	andi	r25, 0x07	; 7
    1848:	89 2b       	or	r24, r25
    184a:	b1 f4       	brne	.+44     	; 0x1878 <__vector_18+0x1a2>
    184c:	8b e0       	ldi	r24, 0x0B	; 11
    184e:	82 9f       	mul	r24, r18
    1850:	f0 01       	movw	r30, r0
    1852:	83 9f       	mul	r24, r19
    1854:	f0 0d       	add	r31, r0
    1856:	11 24       	eor	r1, r1
    1858:	e8 5a       	subi	r30, 0xA8	; 168
    185a:	fe 4f       	sbci	r31, 0xFE	; 254
    185c:	83 81       	ldd	r24, Z+3	; 0x03
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	59 f4       	brne	.+22     	; 0x1878 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1862:	98 e0       	ldi	r25, 0x08	; 8
    1864:	88 e1       	ldi	r24, 0x18	; 24
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	a8 95       	wdr
    186c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1876:	ff cf       	rjmp	.-2      	; 0x1876 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    1878:	ee ee       	ldi	r30, 0xEE	; 238
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    1880:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    1882:	80 81       	ld	r24, Z
    1884:	8f 7d       	andi	r24, 0xDF	; 223
    1886:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    1888:	80 e8       	ldi	r24, 0x80	; 128
    188a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    188e:	0f 90       	pop	r0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	6f 91       	pop	r22
    18a2:	5f 91       	pop	r21
    18a4:	4f 91       	pop	r20
    18a6:	3f 91       	pop	r19
    18a8:	2f 91       	pop	r18
    18aa:	0f 90       	pop	r0
    18ac:	0b be       	out	0x3b, r0	; 59
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    18bc:	e8 ed       	ldi	r30, 0xD8	; 216
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	21 e0       	ldi	r18, 0x01	; 1
    18c2:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    18c4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    18c8:	2c e0       	ldi	r18, 0x0C	; 12
    18ca:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    18ce:	27 e3       	ldi	r18, 0x37	; 55
    18d0:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    18d4:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    18d8:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    18dc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18e0:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    18e4:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    18e8:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    18ec:	cd ee       	ldi	r28, 0xED	; 237
    18ee:	d0 e0       	ldi	r29, 0x00	; 0
    18f0:	18 82       	st	Y, r1
	CANSTMOB = 0;
    18f2:	ae ee       	ldi	r26, 0xEE	; 238
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    18f8:	20 e1       	ldi	r18, 0x10	; 16
    18fa:	28 83       	st	Y, r18
	CANSTMOB = 0;
    18fc:	1c 92       	st	X, r1
	CANIDM4 = 0;
    18fe:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    1902:	28 2f       	mov	r18, r24
    1904:	22 95       	swap	r18
    1906:	22 0f       	add	r18, r18
    1908:	20 7e       	andi	r18, 0xE0	; 224
    190a:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	96 95       	lsr	r25
    1914:	87 95       	ror	r24
    1916:	96 95       	lsr	r25
    1918:	87 95       	ror	r24
    191a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    191e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    1922:	86 2f       	mov	r24, r22
    1924:	82 95       	swap	r24
    1926:	88 0f       	add	r24, r24
    1928:	80 7e       	andi	r24, 0xE0	; 224
    192a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    192e:	76 95       	lsr	r23
    1930:	67 95       	ror	r22
    1932:	76 95       	lsr	r23
    1934:	67 95       	ror	r22
    1936:	76 95       	lsr	r23
    1938:	67 95       	ror	r22
    193a:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    193e:	80 e8       	ldi	r24, 0x80	; 128
    1940:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    194a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    194e:	80 eb       	ldi	r24, 0xB0	; 176
    1950:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	80 83       	st	Z, r24

	reset = 0;
    1958:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <reset>
}
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1968:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <rx_off>
    196c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <rx_on>
    1970:	24 17       	cp	r18, r20
    1972:	89 f1       	breq	.+98     	; 0x19d6 <can_read_message_if_new+0x74>
    1974:	a4 2f       	mov	r26, r20
    1976:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    1978:	8b e0       	ldi	r24, 0x0B	; 11
    197a:	a8 9f       	mul	r26, r24
    197c:	b0 01       	movw	r22, r0
    197e:	11 24       	eor	r1, r1
    1980:	fb 01       	movw	r30, r22
    1982:	e8 5a       	subi	r30, 0xA8	; 168
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	20 81       	ld	r18, Z
    1988:	22 95       	swap	r18
    198a:	26 95       	lsr	r18
    198c:	27 70       	andi	r18, 0x07	; 7
    198e:	31 81       	ldd	r19, Z+1	; 0x01
    1990:	53 2f       	mov	r21, r19
    1992:	55 0f       	add	r21, r21
    1994:	55 0f       	add	r21, r21
    1996:	55 0f       	add	r21, r21
    1998:	25 2b       	or	r18, r21
    199a:	32 95       	swap	r19
    199c:	36 95       	lsr	r19
    199e:	37 70       	andi	r19, 0x07	; 7
    19a0:	28 83       	st	Y, r18
    19a2:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    19a4:	fb 01       	movw	r30, r22
    19a6:	e6 5a       	subi	r30, 0xA6	; 166
    19a8:	fe 4f       	sbci	r31, 0xFE	; 254
    19aa:	20 81       	ld	r18, Z
    19ac:	2f 70       	andi	r18, 0x0F	; 15
    19ae:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    19b0:	22 23       	and	r18, r18
    19b2:	99 f0       	breq	.+38     	; 0x19da <can_read_message_if_new+0x78>
    19b4:	db 01       	movw	r26, r22
    19b6:	a5 5a       	subi	r26, 0xA5	; 165
    19b8:	be 4f       	sbci	r27, 0xFE	; 254
    19ba:	fe 01       	movw	r30, r28
    19bc:	33 96       	adiw	r30, 0x03	; 3
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	2d 5f       	subi	r18, 0xFD	; 253
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	ce 01       	movw	r24, r28
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    19ca:	2d 91       	ld	r18, X+
    19cc:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    19ce:	e8 17       	cp	r30, r24
    19d0:	f9 07       	cpc	r31, r25
    19d2:	d9 f7       	brne	.-10     	; 0x19ca <can_read_message_if_new+0x68>
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	04 c0       	rjmp	.+8      	; 0x19e2 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    19da:	4f 5f       	subi	r20, 0xFF	; 255
    19dc:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <rx_off>
	}

	return true;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
}
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	08 95       	ret

000019e8 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    19ee:	ab ed       	ldi	r26, 0xDB	; 219
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	8c 91       	ld	r24, X
    19f4:	8f 77       	andi	r24, 0x7F	; 127
    19f6:	8c 93       	st	X, r24

	if (!tx_busy) {
    19f8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_busy>
    19fc:	81 11       	cpse	r24, r1
    19fe:	27 c0       	rjmp	.+78     	; 0x1a4e <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    1a00:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    1a04:	80 81       	ld	r24, Z
    1a06:	82 95       	swap	r24
    1a08:	88 0f       	add	r24, r24
    1a0a:	80 7e       	andi	r24, 0xE0	; 224
    1a0c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	96 95       	lsr	r25
    1a16:	87 95       	ror	r24
    1a18:	96 95       	lsr	r25
    1a1a:	87 95       	ror	r24
    1a1c:	96 95       	lsr	r25
    1a1e:	87 95       	ror	r24
    1a20:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1a24:	df 01       	movw	r26, r30
    1a26:	13 96       	adiw	r26, 0x03	; 3
    1a28:	9f 01       	movw	r18, r30
    1a2a:	25 5f       	subi	r18, 0xF5	; 245
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1a2e:	ca ef       	ldi	r28, 0xFA	; 250
    1a30:	d0 e0       	ldi	r29, 0x00	; 0
    1a32:	9d 91       	ld	r25, X+
    1a34:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1a36:	a2 17       	cp	r26, r18
    1a38:	b3 07       	cpc	r27, r19
    1a3a:	d9 f7       	brne	.-10     	; 0x1a32 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	80 64       	ori	r24, 0x40	; 64
    1a46:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	43 c0       	rjmp	.+134    	; 0x1ad4 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1a4e:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <tx_on>
    1a52:	82 2f       	mov	r24, r18
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <tx_off>
    1a5a:	83 1b       	sub	r24, r19
    1a5c:	91 09       	sbc	r25, r1
    1a5e:	8f 77       	andi	r24, 0x7F	; 127
    1a60:	99 27       	eor	r25, r25
    1a62:	40 97       	sbiw	r24, 0x10	; 16
    1a64:	b1 f1       	breq	.+108    	; 0x1ad2 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1a66:	a2 2f       	mov	r26, r18
    1a68:	af 70       	andi	r26, 0x0F	; 15
    1a6a:	8b e0       	ldi	r24, 0x0B	; 11
    1a6c:	a8 9f       	mul	r26, r24
    1a6e:	d0 01       	movw	r26, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	ed 01       	movw	r28, r26
    1a74:	c8 5f       	subi	r28, 0xF8	; 248
    1a76:	dd 4f       	sbci	r29, 0xFD	; 253
    1a78:	80 81       	ld	r24, Z
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	92 95       	swap	r25
    1a7e:	99 0f       	add	r25, r25
    1a80:	90 7e       	andi	r25, 0xE0	; 224
    1a82:	88 81       	ld	r24, Y
    1a84:	8f 71       	andi	r24, 0x1F	; 31
    1a86:	89 2b       	or	r24, r25
    1a88:	88 83       	st	Y, r24
    1a8a:	80 81       	ld	r24, Z
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	96 95       	lsr	r25
    1a90:	96 95       	lsr	r25
    1a92:	96 95       	lsr	r25
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	80 7e       	andi	r24, 0xE0	; 224
    1a98:	89 2b       	or	r24, r25
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	92 95       	swap	r25
    1aa0:	99 0f       	add	r25, r25
    1aa2:	90 7e       	andi	r25, 0xE0	; 224
    1aa4:	8f 71       	andi	r24, 0x1F	; 31
    1aa6:	89 2b       	or	r24, r25
    1aa8:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	98 2f       	mov	r25, r24
    1aae:	9f 70       	andi	r25, 0x0F	; 15
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	80 7f       	andi	r24, 0xF0	; 240
    1ab4:	89 2b       	or	r24, r25
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1ab8:	a5 5f       	subi	r26, 0xF5	; 245
    1aba:	bd 4f       	sbci	r27, 0xFD	; 253
    1abc:	33 96       	adiw	r30, 0x03	; 3
    1abe:	88 e0       	ldi	r24, 0x08	; 8
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	0d 92       	st	X+, r0
    1ac4:	8a 95       	dec	r24
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    1ac8:	2f 5f       	subi	r18, 0xFF	; 255
    1aca:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <tx_on>
		result = true;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1ad4:	eb ed       	ldi	r30, 0xDB	; 219
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	90 81       	ld	r25, Z
    1ada:	90 68       	ori	r25, 0x80	; 128
    1adc:	90 83       	st	Z, r25

	return result;
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
    1ae4:	95 b1       	in	r25, 0x05	; 5
    1ae6:	89 2b       	or	r24, r25
    1ae8:	85 b9       	out	0x05, r24	; 5
    1aea:	08 95       	ret

00001aec <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
    1aec:	84 b1       	in	r24, 0x04	; 4
    1aee:	80 6e       	ori	r24, 0xE0	; 224
    1af0:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
    1af2:	80 ee       	ldi	r24, 0xE0	; 224
    1af4:	f7 cf       	rjmp	.-18     	; 0x1ae4 <rgbled_turn_off>
    1af6:	08 95       	ret

00001af8 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
    1af8:	95 b1       	in	r25, 0x05	; 5
    1afa:	80 95       	com	r24
    1afc:	98 23       	and	r25, r24
    1afe:	95 b9       	out	0x05, r25	; 5
    1b00:	08 95       	ret

00001b02 <rgbled_toggle>:
}

void rgbled_toggle(RgbLedColor_t color) {
	PORTB ^= color;
    1b02:	95 b1       	in	r25, 0x05	; 5
    1b04:	89 27       	eor	r24, r25
    1b06:	85 b9       	out	0x05, r24	; 5
    1b08:	08 95       	ret

00001b0a <spi_init>:
#define PIN_SCK PB1
#define PIN_SS PB0

void spi_init(spi_prescale_t clock_prescale) {
	// Set MOSI, SS, and SCK output, all others input
	DDR_SPI |= (1 << PIN_MOSI) | (1 << PIN_SCK) | (1 << PIN_SS);
    1b0a:	94 b1       	in	r25, 0x04	; 4
    1b0c:	97 60       	ori	r25, 0x07	; 7
    1b0e:	94 b9       	out	0x04, r25	; 4
	
	uint8_t SPI2X_val = (uint8_t)((clock_prescale >> 2) & 0b001);
    1b10:	82 fb       	bst	r24, 2
    1b12:	99 27       	eor	r25, r25
    1b14:	90 f9       	bld	r25, 0
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0) | (1 << CPOL) | (1 << CPHA);
	SPSR = (SPI2X_val << SPI2X);
*/

	// Enable SPI, Master, selected prescaling, mode 0 (CPOL = CPHA = 0)
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0);
    1b16:	28 2f       	mov	r18, r24
    1b18:	22 70       	andi	r18, 0x02	; 2
    1b1a:	81 70       	andi	r24, 0x01	; 1
    1b1c:	80 65       	ori	r24, 0x50	; 80
    1b1e:	82 2b       	or	r24, r18
    1b20:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA));
    1b22:	8c b5       	in	r24, 0x2c	; 44
    1b24:	83 7f       	andi	r24, 0xF3	; 243
    1b26:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPI2X_val << SPI2X);
    1b28:	9d bd       	out	0x2d, r25	; 45
    1b2a:	08 95       	ret

00001b2c <spi_trancieve>:

}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	ec 01       	movw	r28, r24
	PORTB &= ~(1 << PIN_SS);
    1b32:	28 98       	cbi	0x05, 0	; 5

	for (size_t i = 0; i < length; i++) {
    1b34:	41 15       	cp	r20, r1
    1b36:	51 05       	cpc	r21, r1
    1b38:	c1 f0       	breq	.+48     	; 0x1b6a <spi_trancieve+0x3e>
    1b3a:	fb 01       	movw	r30, r22
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	46 0f       	add	r20, r22
    1b40:	57 1f       	adc	r21, r23
		SPDR = (tx_buffer != NULL) ? tx_buffer[i] : 0xFF;
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	20 97       	sbiw	r28, 0x00	; 0
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <spi_trancieve+0x20>
    1b48:	9c 91       	ld	r25, X
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <spi_trancieve+0x22>
    1b4c:	98 2f       	mov	r25, r24
    1b4e:	9e bd       	out	0x2e, r25	; 46

		while(!(SPSR & (1 << SPIF)));
    1b50:	0d b4       	in	r0, 0x2d	; 45
    1b52:	07 fe       	sbrs	r0, 7
    1b54:	fd cf       	rjmp	.-6      	; 0x1b50 <spi_trancieve+0x24>
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
    1b56:	61 15       	cp	r22, r1
    1b58:	71 05       	cpc	r23, r1
    1b5a:	11 f0       	breq	.+4      	; 0x1b60 <spi_trancieve+0x34>
    1b5c:	9e b5       	in	r25, 0x2e	; 46
    1b5e:	90 83       	st	Z, r25
    1b60:	31 96       	adiw	r30, 0x01	; 1
    1b62:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
	PORTB &= ~(1 << PIN_SS);

	for (size_t i = 0; i < length; i++) {
    1b64:	e4 17       	cp	r30, r20
    1b66:	f5 07       	cpc	r31, r21
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <spi_trancieve+0x18>
		while(!(SPSR & (1 << SPIF)));
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
	}

	if (last_in_transmission) {
    1b6a:	21 11       	cpse	r18, r1
		PORTB |= (1 << PIN_SS);
    1b6c:	28 9a       	sbi	0x05, 0	; 5
	}
}
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	0b b6       	in	r0, 0x3b	; 59
    1b80:	0f 92       	push	r0
    1b82:	2f 93       	push	r18
    1b84:	3f 93       	push	r19
    1b86:	4f 93       	push	r20
    1b88:	5f 93       	push	r21
    1b8a:	6f 93       	push	r22
    1b8c:	7f 93       	push	r23
    1b8e:	8f 93       	push	r24
    1b90:	af 93       	push	r26
    1b92:	bf 93       	push	r27
    1b94:	ef 93       	push	r30
    1b96:	ff 93       	push	r31
    1b98:	a8 ed       	ldi	r26, 0xD8	; 216
    1b9a:	b2 e0       	ldi	r27, 0x02	; 2
    1b9c:	e8 eb       	ldi	r30, 0xB8	; 184
    1b9e:	f2 e0       	ldi	r31, 0x02	; 2
    1ba0:	28 ed       	ldi	r18, 0xD8	; 216
    1ba2:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	88 23       	and	r24, r24
    1ba8:	59 f0       	breq	.+22     	; 0x1bc0 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
    1baa:	40 81       	ld	r20, Z
    1bac:	51 81       	ldd	r21, Z+1	; 0x01
    1bae:	62 81       	ldd	r22, Z+2	; 0x02
    1bb0:	73 81       	ldd	r23, Z+3	; 0x03
    1bb2:	50 5e       	subi	r21, 0xE0	; 224
    1bb4:	6f 4f       	sbci	r22, 0xFF	; 255
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	40 83       	st	Z, r20
    1bba:	51 83       	std	Z+1, r21	; 0x01
    1bbc:	62 83       	std	Z+2, r22	; 0x02
    1bbe:	73 83       	std	Z+3, r23	; 0x03
    1bc0:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
    1bc2:	e2 17       	cp	r30, r18
    1bc4:	f3 07       	cpc	r31, r19
    1bc6:	71 f7       	brne	.-36     	; 0x1ba4 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
    1bc8:	ff 91       	pop	r31
    1bca:	ef 91       	pop	r30
    1bcc:	bf 91       	pop	r27
    1bce:	af 91       	pop	r26
    1bd0:	8f 91       	pop	r24
    1bd2:	7f 91       	pop	r23
    1bd4:	6f 91       	pop	r22
    1bd6:	5f 91       	pop	r21
    1bd8:	4f 91       	pop	r20
    1bda:	3f 91       	pop	r19
    1bdc:	2f 91       	pop	r18
    1bde:	0f 90       	pop	r0
    1be0:	0b be       	out	0x3b, r0	; 59
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <__subsf3>:
    1bec:	50 58       	subi	r21, 0x80	; 128

00001bee <__addsf3>:
    1bee:	bb 27       	eor	r27, r27
    1bf0:	aa 27       	eor	r26, r26
    1bf2:	0e d0       	rcall	.+28     	; 0x1c10 <__addsf3x>
    1bf4:	75 c1       	rjmp	.+746    	; 0x1ee0 <__fp_round>
    1bf6:	66 d1       	rcall	.+716    	; 0x1ec4 <__fp_pscA>
    1bf8:	30 f0       	brcs	.+12     	; 0x1c06 <__addsf3+0x18>
    1bfa:	6b d1       	rcall	.+726    	; 0x1ed2 <__fp_pscB>
    1bfc:	20 f0       	brcs	.+8      	; 0x1c06 <__addsf3+0x18>
    1bfe:	31 f4       	brne	.+12     	; 0x1c0c <__addsf3+0x1e>
    1c00:	9f 3f       	cpi	r25, 0xFF	; 255
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <__addsf3+0x1a>
    1c04:	1e f4       	brtc	.+6      	; 0x1c0c <__addsf3+0x1e>
    1c06:	5b c1       	rjmp	.+694    	; 0x1ebe <__fp_nan>
    1c08:	0e f4       	brtc	.+2      	; 0x1c0c <__addsf3+0x1e>
    1c0a:	e0 95       	com	r30
    1c0c:	e7 fb       	bst	r30, 7
    1c0e:	51 c1       	rjmp	.+674    	; 0x1eb2 <__fp_inf>

00001c10 <__addsf3x>:
    1c10:	e9 2f       	mov	r30, r25
    1c12:	77 d1       	rcall	.+750    	; 0x1f02 <__fp_split3>
    1c14:	80 f3       	brcs	.-32     	; 0x1bf6 <__addsf3+0x8>
    1c16:	ba 17       	cp	r27, r26
    1c18:	62 07       	cpc	r22, r18
    1c1a:	73 07       	cpc	r23, r19
    1c1c:	84 07       	cpc	r24, r20
    1c1e:	95 07       	cpc	r25, r21
    1c20:	18 f0       	brcs	.+6      	; 0x1c28 <__addsf3x+0x18>
    1c22:	71 f4       	brne	.+28     	; 0x1c40 <__addsf3x+0x30>
    1c24:	9e f5       	brtc	.+102    	; 0x1c8c <__addsf3x+0x7c>
    1c26:	8f c1       	rjmp	.+798    	; 0x1f46 <__fp_zero>
    1c28:	0e f4       	brtc	.+2      	; 0x1c2c <__addsf3x+0x1c>
    1c2a:	e0 95       	com	r30
    1c2c:	0b 2e       	mov	r0, r27
    1c2e:	ba 2f       	mov	r27, r26
    1c30:	a0 2d       	mov	r26, r0
    1c32:	0b 01       	movw	r0, r22
    1c34:	b9 01       	movw	r22, r18
    1c36:	90 01       	movw	r18, r0
    1c38:	0c 01       	movw	r0, r24
    1c3a:	ca 01       	movw	r24, r20
    1c3c:	a0 01       	movw	r20, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	ff 27       	eor	r31, r31
    1c42:	59 1b       	sub	r21, r25
    1c44:	99 f0       	breq	.+38     	; 0x1c6c <__addsf3x+0x5c>
    1c46:	59 3f       	cpi	r21, 0xF9	; 249
    1c48:	50 f4       	brcc	.+20     	; 0x1c5e <__addsf3x+0x4e>
    1c4a:	50 3e       	cpi	r21, 0xE0	; 224
    1c4c:	68 f1       	brcs	.+90     	; 0x1ca8 <__addsf3x+0x98>
    1c4e:	1a 16       	cp	r1, r26
    1c50:	f0 40       	sbci	r31, 0x00	; 0
    1c52:	a2 2f       	mov	r26, r18
    1c54:	23 2f       	mov	r18, r19
    1c56:	34 2f       	mov	r19, r20
    1c58:	44 27       	eor	r20, r20
    1c5a:	58 5f       	subi	r21, 0xF8	; 248
    1c5c:	f3 cf       	rjmp	.-26     	; 0x1c44 <__addsf3x+0x34>
    1c5e:	46 95       	lsr	r20
    1c60:	37 95       	ror	r19
    1c62:	27 95       	ror	r18
    1c64:	a7 95       	ror	r26
    1c66:	f0 40       	sbci	r31, 0x00	; 0
    1c68:	53 95       	inc	r21
    1c6a:	c9 f7       	brne	.-14     	; 0x1c5e <__addsf3x+0x4e>
    1c6c:	7e f4       	brtc	.+30     	; 0x1c8c <__addsf3x+0x7c>
    1c6e:	1f 16       	cp	r1, r31
    1c70:	ba 0b       	sbc	r27, r26
    1c72:	62 0b       	sbc	r22, r18
    1c74:	73 0b       	sbc	r23, r19
    1c76:	84 0b       	sbc	r24, r20
    1c78:	ba f0       	brmi	.+46     	; 0x1ca8 <__addsf3x+0x98>
    1c7a:	91 50       	subi	r25, 0x01	; 1
    1c7c:	a1 f0       	breq	.+40     	; 0x1ca6 <__addsf3x+0x96>
    1c7e:	ff 0f       	add	r31, r31
    1c80:	bb 1f       	adc	r27, r27
    1c82:	66 1f       	adc	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	c2 f7       	brpl	.-16     	; 0x1c7a <__addsf3x+0x6a>
    1c8a:	0e c0       	rjmp	.+28     	; 0x1ca8 <__addsf3x+0x98>
    1c8c:	ba 0f       	add	r27, r26
    1c8e:	62 1f       	adc	r22, r18
    1c90:	73 1f       	adc	r23, r19
    1c92:	84 1f       	adc	r24, r20
    1c94:	48 f4       	brcc	.+18     	; 0x1ca8 <__addsf3x+0x98>
    1c96:	87 95       	ror	r24
    1c98:	77 95       	ror	r23
    1c9a:	67 95       	ror	r22
    1c9c:	b7 95       	ror	r27
    1c9e:	f7 95       	ror	r31
    1ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca2:	08 f0       	brcs	.+2      	; 0x1ca6 <__addsf3x+0x96>
    1ca4:	b3 cf       	rjmp	.-154    	; 0x1c0c <__addsf3+0x1e>
    1ca6:	93 95       	inc	r25
    1ca8:	88 0f       	add	r24, r24
    1caa:	08 f0       	brcs	.+2      	; 0x1cae <__addsf3x+0x9e>
    1cac:	99 27       	eor	r25, r25
    1cae:	ee 0f       	add	r30, r30
    1cb0:	97 95       	ror	r25
    1cb2:	87 95       	ror	r24
    1cb4:	08 95       	ret

00001cb6 <__cmpsf2>:
    1cb6:	d9 d0       	rcall	.+434    	; 0x1e6a <__fp_cmp>
    1cb8:	08 f4       	brcc	.+2      	; 0x1cbc <__cmpsf2+0x6>
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	08 95       	ret

00001cbe <__divsf3>:
    1cbe:	0c d0       	rcall	.+24     	; 0x1cd8 <__divsf3x>
    1cc0:	0f c1       	rjmp	.+542    	; 0x1ee0 <__fp_round>
    1cc2:	07 d1       	rcall	.+526    	; 0x1ed2 <__fp_pscB>
    1cc4:	40 f0       	brcs	.+16     	; 0x1cd6 <__divsf3+0x18>
    1cc6:	fe d0       	rcall	.+508    	; 0x1ec4 <__fp_pscA>
    1cc8:	30 f0       	brcs	.+12     	; 0x1cd6 <__divsf3+0x18>
    1cca:	21 f4       	brne	.+8      	; 0x1cd4 <__divsf3+0x16>
    1ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cce:	19 f0       	breq	.+6      	; 0x1cd6 <__divsf3+0x18>
    1cd0:	f0 c0       	rjmp	.+480    	; 0x1eb2 <__fp_inf>
    1cd2:	51 11       	cpse	r21, r1
    1cd4:	39 c1       	rjmp	.+626    	; 0x1f48 <__fp_szero>
    1cd6:	f3 c0       	rjmp	.+486    	; 0x1ebe <__fp_nan>

00001cd8 <__divsf3x>:
    1cd8:	14 d1       	rcall	.+552    	; 0x1f02 <__fp_split3>
    1cda:	98 f3       	brcs	.-26     	; 0x1cc2 <__divsf3+0x4>

00001cdc <__divsf3_pse>:
    1cdc:	99 23       	and	r25, r25
    1cde:	c9 f3       	breq	.-14     	; 0x1cd2 <__divsf3+0x14>
    1ce0:	55 23       	and	r21, r21
    1ce2:	b1 f3       	breq	.-20     	; 0x1cd0 <__divsf3+0x12>
    1ce4:	95 1b       	sub	r25, r21
    1ce6:	55 0b       	sbc	r21, r21
    1ce8:	bb 27       	eor	r27, r27
    1cea:	aa 27       	eor	r26, r26
    1cec:	62 17       	cp	r22, r18
    1cee:	73 07       	cpc	r23, r19
    1cf0:	84 07       	cpc	r24, r20
    1cf2:	38 f0       	brcs	.+14     	; 0x1d02 <__divsf3_pse+0x26>
    1cf4:	9f 5f       	subi	r25, 0xFF	; 255
    1cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	44 1f       	adc	r20, r20
    1cfe:	aa 1f       	adc	r26, r26
    1d00:	a9 f3       	breq	.-22     	; 0x1cec <__divsf3_pse+0x10>
    1d02:	33 d0       	rcall	.+102    	; 0x1d6a <__divsf3_pse+0x8e>
    1d04:	0e 2e       	mov	r0, r30
    1d06:	3a f0       	brmi	.+14     	; 0x1d16 <__divsf3_pse+0x3a>
    1d08:	e0 e8       	ldi	r30, 0x80	; 128
    1d0a:	30 d0       	rcall	.+96     	; 0x1d6c <__divsf3_pse+0x90>
    1d0c:	91 50       	subi	r25, 0x01	; 1
    1d0e:	50 40       	sbci	r21, 0x00	; 0
    1d10:	e6 95       	lsr	r30
    1d12:	00 1c       	adc	r0, r0
    1d14:	ca f7       	brpl	.-14     	; 0x1d08 <__divsf3_pse+0x2c>
    1d16:	29 d0       	rcall	.+82     	; 0x1d6a <__divsf3_pse+0x8e>
    1d18:	fe 2f       	mov	r31, r30
    1d1a:	27 d0       	rcall	.+78     	; 0x1d6a <__divsf3_pse+0x8e>
    1d1c:	66 0f       	add	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	88 1f       	adc	r24, r24
    1d22:	bb 1f       	adc	r27, r27
    1d24:	26 17       	cp	r18, r22
    1d26:	37 07       	cpc	r19, r23
    1d28:	48 07       	cpc	r20, r24
    1d2a:	ab 07       	cpc	r26, r27
    1d2c:	b0 e8       	ldi	r27, 0x80	; 128
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <__divsf3_pse+0x56>
    1d30:	bb 0b       	sbc	r27, r27
    1d32:	80 2d       	mov	r24, r0
    1d34:	bf 01       	movw	r22, r30
    1d36:	ff 27       	eor	r31, r31
    1d38:	93 58       	subi	r25, 0x83	; 131
    1d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3c:	2a f0       	brmi	.+10     	; 0x1d48 <__divsf3_pse+0x6c>
    1d3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d40:	51 05       	cpc	r21, r1
    1d42:	68 f0       	brcs	.+26     	; 0x1d5e <__divsf3_pse+0x82>
    1d44:	b6 c0       	rjmp	.+364    	; 0x1eb2 <__fp_inf>
    1d46:	00 c1       	rjmp	.+512    	; 0x1f48 <__fp_szero>
    1d48:	5f 3f       	cpi	r21, 0xFF	; 255
    1d4a:	ec f3       	brlt	.-6      	; 0x1d46 <__divsf3_pse+0x6a>
    1d4c:	98 3e       	cpi	r25, 0xE8	; 232
    1d4e:	dc f3       	brlt	.-10     	; 0x1d46 <__divsf3_pse+0x6a>
    1d50:	86 95       	lsr	r24
    1d52:	77 95       	ror	r23
    1d54:	67 95       	ror	r22
    1d56:	b7 95       	ror	r27
    1d58:	f7 95       	ror	r31
    1d5a:	9f 5f       	subi	r25, 0xFF	; 255
    1d5c:	c9 f7       	brne	.-14     	; 0x1d50 <__divsf3_pse+0x74>
    1d5e:	88 0f       	add	r24, r24
    1d60:	91 1d       	adc	r25, r1
    1d62:	96 95       	lsr	r25
    1d64:	87 95       	ror	r24
    1d66:	97 f9       	bld	r25, 7
    1d68:	08 95       	ret
    1d6a:	e1 e0       	ldi	r30, 0x01	; 1
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	bb 1f       	adc	r27, r27
    1d74:	62 17       	cp	r22, r18
    1d76:	73 07       	cpc	r23, r19
    1d78:	84 07       	cpc	r24, r20
    1d7a:	ba 07       	cpc	r27, r26
    1d7c:	20 f0       	brcs	.+8      	; 0x1d86 <__divsf3_pse+0xaa>
    1d7e:	62 1b       	sub	r22, r18
    1d80:	73 0b       	sbc	r23, r19
    1d82:	84 0b       	sbc	r24, r20
    1d84:	ba 0b       	sbc	r27, r26
    1d86:	ee 1f       	adc	r30, r30
    1d88:	88 f7       	brcc	.-30     	; 0x1d6c <__divsf3_pse+0x90>
    1d8a:	e0 95       	com	r30
    1d8c:	08 95       	ret

00001d8e <__fixsfsi>:
    1d8e:	04 d0       	rcall	.+8      	; 0x1d98 <__fixunssfsi>
    1d90:	68 94       	set
    1d92:	b1 11       	cpse	r27, r1
    1d94:	d9 c0       	rjmp	.+434    	; 0x1f48 <__fp_szero>
    1d96:	08 95       	ret

00001d98 <__fixunssfsi>:
    1d98:	bc d0       	rcall	.+376    	; 0x1f12 <__fp_splitA>
    1d9a:	88 f0       	brcs	.+34     	; 0x1dbe <__fixunssfsi+0x26>
    1d9c:	9f 57       	subi	r25, 0x7F	; 127
    1d9e:	90 f0       	brcs	.+36     	; 0x1dc4 <__fixunssfsi+0x2c>
    1da0:	b9 2f       	mov	r27, r25
    1da2:	99 27       	eor	r25, r25
    1da4:	b7 51       	subi	r27, 0x17	; 23
    1da6:	a0 f0       	brcs	.+40     	; 0x1dd0 <__fixunssfsi+0x38>
    1da8:	d1 f0       	breq	.+52     	; 0x1dde <__fixunssfsi+0x46>
    1daa:	66 0f       	add	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	88 1f       	adc	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	1a f0       	brmi	.+6      	; 0x1dba <__fixunssfsi+0x22>
    1db4:	ba 95       	dec	r27
    1db6:	c9 f7       	brne	.-14     	; 0x1daa <__fixunssfsi+0x12>
    1db8:	12 c0       	rjmp	.+36     	; 0x1dde <__fixunssfsi+0x46>
    1dba:	b1 30       	cpi	r27, 0x01	; 1
    1dbc:	81 f0       	breq	.+32     	; 0x1dde <__fixunssfsi+0x46>
    1dbe:	c3 d0       	rcall	.+390    	; 0x1f46 <__fp_zero>
    1dc0:	b1 e0       	ldi	r27, 0x01	; 1
    1dc2:	08 95       	ret
    1dc4:	c0 c0       	rjmp	.+384    	; 0x1f46 <__fp_zero>
    1dc6:	67 2f       	mov	r22, r23
    1dc8:	78 2f       	mov	r23, r24
    1dca:	88 27       	eor	r24, r24
    1dcc:	b8 5f       	subi	r27, 0xF8	; 248
    1dce:	39 f0       	breq	.+14     	; 0x1dde <__fixunssfsi+0x46>
    1dd0:	b9 3f       	cpi	r27, 0xF9	; 249
    1dd2:	cc f3       	brlt	.-14     	; 0x1dc6 <__fixunssfsi+0x2e>
    1dd4:	86 95       	lsr	r24
    1dd6:	77 95       	ror	r23
    1dd8:	67 95       	ror	r22
    1dda:	b3 95       	inc	r27
    1ddc:	d9 f7       	brne	.-10     	; 0x1dd4 <__fixunssfsi+0x3c>
    1dde:	3e f4       	brtc	.+14     	; 0x1dee <__fixunssfsi+0x56>
    1de0:	90 95       	com	r25
    1de2:	80 95       	com	r24
    1de4:	70 95       	com	r23
    1de6:	61 95       	neg	r22
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	8f 4f       	sbci	r24, 0xFF	; 255
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	08 95       	ret

00001df0 <__floatunsisf>:
    1df0:	e8 94       	clt
    1df2:	09 c0       	rjmp	.+18     	; 0x1e06 <__floatsisf+0x12>

00001df4 <__floatsisf>:
    1df4:	97 fb       	bst	r25, 7
    1df6:	3e f4       	brtc	.+14     	; 0x1e06 <__floatsisf+0x12>
    1df8:	90 95       	com	r25
    1dfa:	80 95       	com	r24
    1dfc:	70 95       	com	r23
    1dfe:	61 95       	neg	r22
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	8f 4f       	sbci	r24, 0xFF	; 255
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	99 23       	and	r25, r25
    1e08:	a9 f0       	breq	.+42     	; 0x1e34 <__floatsisf+0x40>
    1e0a:	f9 2f       	mov	r31, r25
    1e0c:	96 e9       	ldi	r25, 0x96	; 150
    1e0e:	bb 27       	eor	r27, r27
    1e10:	93 95       	inc	r25
    1e12:	f6 95       	lsr	r31
    1e14:	87 95       	ror	r24
    1e16:	77 95       	ror	r23
    1e18:	67 95       	ror	r22
    1e1a:	b7 95       	ror	r27
    1e1c:	f1 11       	cpse	r31, r1
    1e1e:	f8 cf       	rjmp	.-16     	; 0x1e10 <__floatsisf+0x1c>
    1e20:	fa f4       	brpl	.+62     	; 0x1e60 <__floatsisf+0x6c>
    1e22:	bb 0f       	add	r27, r27
    1e24:	11 f4       	brne	.+4      	; 0x1e2a <__floatsisf+0x36>
    1e26:	60 ff       	sbrs	r22, 0
    1e28:	1b c0       	rjmp	.+54     	; 0x1e60 <__floatsisf+0x6c>
    1e2a:	6f 5f       	subi	r22, 0xFF	; 255
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	16 c0       	rjmp	.+44     	; 0x1e60 <__floatsisf+0x6c>
    1e34:	88 23       	and	r24, r24
    1e36:	11 f0       	breq	.+4      	; 0x1e3c <__floatsisf+0x48>
    1e38:	96 e9       	ldi	r25, 0x96	; 150
    1e3a:	11 c0       	rjmp	.+34     	; 0x1e5e <__floatsisf+0x6a>
    1e3c:	77 23       	and	r23, r23
    1e3e:	21 f0       	breq	.+8      	; 0x1e48 <__floatsisf+0x54>
    1e40:	9e e8       	ldi	r25, 0x8E	; 142
    1e42:	87 2f       	mov	r24, r23
    1e44:	76 2f       	mov	r23, r22
    1e46:	05 c0       	rjmp	.+10     	; 0x1e52 <__floatsisf+0x5e>
    1e48:	66 23       	and	r22, r22
    1e4a:	71 f0       	breq	.+28     	; 0x1e68 <__floatsisf+0x74>
    1e4c:	96 e8       	ldi	r25, 0x86	; 134
    1e4e:	86 2f       	mov	r24, r22
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	2a f0       	brmi	.+10     	; 0x1e60 <__floatsisf+0x6c>
    1e56:	9a 95       	dec	r25
    1e58:	66 0f       	add	r22, r22
    1e5a:	77 1f       	adc	r23, r23
    1e5c:	88 1f       	adc	r24, r24
    1e5e:	da f7       	brpl	.-10     	; 0x1e56 <__floatsisf+0x62>
    1e60:	88 0f       	add	r24, r24
    1e62:	96 95       	lsr	r25
    1e64:	87 95       	ror	r24
    1e66:	97 f9       	bld	r25, 7
    1e68:	08 95       	ret

00001e6a <__fp_cmp>:
    1e6a:	99 0f       	add	r25, r25
    1e6c:	00 08       	sbc	r0, r0
    1e6e:	55 0f       	add	r21, r21
    1e70:	aa 0b       	sbc	r26, r26
    1e72:	e0 e8       	ldi	r30, 0x80	; 128
    1e74:	fe ef       	ldi	r31, 0xFE	; 254
    1e76:	16 16       	cp	r1, r22
    1e78:	17 06       	cpc	r1, r23
    1e7a:	e8 07       	cpc	r30, r24
    1e7c:	f9 07       	cpc	r31, r25
    1e7e:	c0 f0       	brcs	.+48     	; 0x1eb0 <__fp_cmp+0x46>
    1e80:	12 16       	cp	r1, r18
    1e82:	13 06       	cpc	r1, r19
    1e84:	e4 07       	cpc	r30, r20
    1e86:	f5 07       	cpc	r31, r21
    1e88:	98 f0       	brcs	.+38     	; 0x1eb0 <__fp_cmp+0x46>
    1e8a:	62 1b       	sub	r22, r18
    1e8c:	73 0b       	sbc	r23, r19
    1e8e:	84 0b       	sbc	r24, r20
    1e90:	95 0b       	sbc	r25, r21
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <__fp_cmp+0x38>
    1e94:	0a 26       	eor	r0, r26
    1e96:	61 f0       	breq	.+24     	; 0x1eb0 <__fp_cmp+0x46>
    1e98:	23 2b       	or	r18, r19
    1e9a:	24 2b       	or	r18, r20
    1e9c:	25 2b       	or	r18, r21
    1e9e:	21 f4       	brne	.+8      	; 0x1ea8 <__fp_cmp+0x3e>
    1ea0:	08 95       	ret
    1ea2:	0a 26       	eor	r0, r26
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <__fp_cmp+0x3e>
    1ea6:	a1 40       	sbci	r26, 0x01	; 1
    1ea8:	a6 95       	lsr	r26
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	81 1d       	adc	r24, r1
    1eae:	81 1d       	adc	r24, r1
    1eb0:	08 95       	ret

00001eb2 <__fp_inf>:
    1eb2:	97 f9       	bld	r25, 7
    1eb4:	9f 67       	ori	r25, 0x7F	; 127
    1eb6:	80 e8       	ldi	r24, 0x80	; 128
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	08 95       	ret

00001ebe <__fp_nan>:
    1ebe:	9f ef       	ldi	r25, 0xFF	; 255
    1ec0:	80 ec       	ldi	r24, 0xC0	; 192
    1ec2:	08 95       	ret

00001ec4 <__fp_pscA>:
    1ec4:	00 24       	eor	r0, r0
    1ec6:	0a 94       	dec	r0
    1ec8:	16 16       	cp	r1, r22
    1eca:	17 06       	cpc	r1, r23
    1ecc:	18 06       	cpc	r1, r24
    1ece:	09 06       	cpc	r0, r25
    1ed0:	08 95       	ret

00001ed2 <__fp_pscB>:
    1ed2:	00 24       	eor	r0, r0
    1ed4:	0a 94       	dec	r0
    1ed6:	12 16       	cp	r1, r18
    1ed8:	13 06       	cpc	r1, r19
    1eda:	14 06       	cpc	r1, r20
    1edc:	05 06       	cpc	r0, r21
    1ede:	08 95       	ret

00001ee0 <__fp_round>:
    1ee0:	09 2e       	mov	r0, r25
    1ee2:	03 94       	inc	r0
    1ee4:	00 0c       	add	r0, r0
    1ee6:	11 f4       	brne	.+4      	; 0x1eec <__fp_round+0xc>
    1ee8:	88 23       	and	r24, r24
    1eea:	52 f0       	brmi	.+20     	; 0x1f00 <__fp_round+0x20>
    1eec:	bb 0f       	add	r27, r27
    1eee:	40 f4       	brcc	.+16     	; 0x1f00 <__fp_round+0x20>
    1ef0:	bf 2b       	or	r27, r31
    1ef2:	11 f4       	brne	.+4      	; 0x1ef8 <__fp_round+0x18>
    1ef4:	60 ff       	sbrs	r22, 0
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <__fp_round+0x20>
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	8f 4f       	sbci	r24, 0xFF	; 255
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	08 95       	ret

00001f02 <__fp_split3>:
    1f02:	57 fd       	sbrc	r21, 7
    1f04:	90 58       	subi	r25, 0x80	; 128
    1f06:	44 0f       	add	r20, r20
    1f08:	55 1f       	adc	r21, r21
    1f0a:	59 f0       	breq	.+22     	; 0x1f22 <__fp_splitA+0x10>
    1f0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0e:	71 f0       	breq	.+28     	; 0x1f2c <__fp_splitA+0x1a>
    1f10:	47 95       	ror	r20

00001f12 <__fp_splitA>:
    1f12:	88 0f       	add	r24, r24
    1f14:	97 fb       	bst	r25, 7
    1f16:	99 1f       	adc	r25, r25
    1f18:	61 f0       	breq	.+24     	; 0x1f32 <__fp_splitA+0x20>
    1f1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f1c:	79 f0       	breq	.+30     	; 0x1f3c <__fp_splitA+0x2a>
    1f1e:	87 95       	ror	r24
    1f20:	08 95       	ret
    1f22:	12 16       	cp	r1, r18
    1f24:	13 06       	cpc	r1, r19
    1f26:	14 06       	cpc	r1, r20
    1f28:	55 1f       	adc	r21, r21
    1f2a:	f2 cf       	rjmp	.-28     	; 0x1f10 <__fp_split3+0xe>
    1f2c:	46 95       	lsr	r20
    1f2e:	f1 df       	rcall	.-30     	; 0x1f12 <__fp_splitA>
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <__fp_splitA+0x30>
    1f32:	16 16       	cp	r1, r22
    1f34:	17 06       	cpc	r1, r23
    1f36:	18 06       	cpc	r1, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	f1 cf       	rjmp	.-30     	; 0x1f1e <__fp_splitA+0xc>
    1f3c:	86 95       	lsr	r24
    1f3e:	71 05       	cpc	r23, r1
    1f40:	61 05       	cpc	r22, r1
    1f42:	08 94       	sec
    1f44:	08 95       	ret

00001f46 <__fp_zero>:
    1f46:	e8 94       	clt

00001f48 <__fp_szero>:
    1f48:	bb 27       	eor	r27, r27
    1f4a:	66 27       	eor	r22, r22
    1f4c:	77 27       	eor	r23, r23
    1f4e:	cb 01       	movw	r24, r22
    1f50:	97 f9       	bld	r25, 7
    1f52:	08 95       	ret

00001f54 <__gesf2>:
    1f54:	8a df       	rcall	.-236    	; 0x1e6a <__fp_cmp>
    1f56:	08 f4       	brcc	.+2      	; 0x1f5a <__gesf2+0x6>
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	08 95       	ret

00001f5c <__mulsf3>:
    1f5c:	0b d0       	rcall	.+22     	; 0x1f74 <__mulsf3x>
    1f5e:	c0 cf       	rjmp	.-128    	; 0x1ee0 <__fp_round>
    1f60:	b1 df       	rcall	.-158    	; 0x1ec4 <__fp_pscA>
    1f62:	28 f0       	brcs	.+10     	; 0x1f6e <__mulsf3+0x12>
    1f64:	b6 df       	rcall	.-148    	; 0x1ed2 <__fp_pscB>
    1f66:	18 f0       	brcs	.+6      	; 0x1f6e <__mulsf3+0x12>
    1f68:	95 23       	and	r25, r21
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <__mulsf3+0x12>
    1f6c:	a2 cf       	rjmp	.-188    	; 0x1eb2 <__fp_inf>
    1f6e:	a7 cf       	rjmp	.-178    	; 0x1ebe <__fp_nan>
    1f70:	11 24       	eor	r1, r1
    1f72:	ea cf       	rjmp	.-44     	; 0x1f48 <__fp_szero>

00001f74 <__mulsf3x>:
    1f74:	c6 df       	rcall	.-116    	; 0x1f02 <__fp_split3>
    1f76:	a0 f3       	brcs	.-24     	; 0x1f60 <__mulsf3+0x4>

00001f78 <__mulsf3_pse>:
    1f78:	95 9f       	mul	r25, r21
    1f7a:	d1 f3       	breq	.-12     	; 0x1f70 <__mulsf3+0x14>
    1f7c:	95 0f       	add	r25, r21
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	55 1f       	adc	r21, r21
    1f82:	62 9f       	mul	r22, r18
    1f84:	f0 01       	movw	r30, r0
    1f86:	72 9f       	mul	r23, r18
    1f88:	bb 27       	eor	r27, r27
    1f8a:	f0 0d       	add	r31, r0
    1f8c:	b1 1d       	adc	r27, r1
    1f8e:	63 9f       	mul	r22, r19
    1f90:	aa 27       	eor	r26, r26
    1f92:	f0 0d       	add	r31, r0
    1f94:	b1 1d       	adc	r27, r1
    1f96:	aa 1f       	adc	r26, r26
    1f98:	64 9f       	mul	r22, r20
    1f9a:	66 27       	eor	r22, r22
    1f9c:	b0 0d       	add	r27, r0
    1f9e:	a1 1d       	adc	r26, r1
    1fa0:	66 1f       	adc	r22, r22
    1fa2:	82 9f       	mul	r24, r18
    1fa4:	22 27       	eor	r18, r18
    1fa6:	b0 0d       	add	r27, r0
    1fa8:	a1 1d       	adc	r26, r1
    1faa:	62 1f       	adc	r22, r18
    1fac:	73 9f       	mul	r23, r19
    1fae:	b0 0d       	add	r27, r0
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	62 1f       	adc	r22, r18
    1fb4:	83 9f       	mul	r24, r19
    1fb6:	a0 0d       	add	r26, r0
    1fb8:	61 1d       	adc	r22, r1
    1fba:	22 1f       	adc	r18, r18
    1fbc:	74 9f       	mul	r23, r20
    1fbe:	33 27       	eor	r19, r19
    1fc0:	a0 0d       	add	r26, r0
    1fc2:	61 1d       	adc	r22, r1
    1fc4:	23 1f       	adc	r18, r19
    1fc6:	84 9f       	mul	r24, r20
    1fc8:	60 0d       	add	r22, r0
    1fca:	21 1d       	adc	r18, r1
    1fcc:	82 2f       	mov	r24, r18
    1fce:	76 2f       	mov	r23, r22
    1fd0:	6a 2f       	mov	r22, r26
    1fd2:	11 24       	eor	r1, r1
    1fd4:	9f 57       	subi	r25, 0x7F	; 127
    1fd6:	50 40       	sbci	r21, 0x00	; 0
    1fd8:	8a f0       	brmi	.+34     	; 0x1ffc <__mulsf3_pse+0x84>
    1fda:	e1 f0       	breq	.+56     	; 0x2014 <__mulsf3_pse+0x9c>
    1fdc:	88 23       	and	r24, r24
    1fde:	4a f0       	brmi	.+18     	; 0x1ff2 <__mulsf3_pse+0x7a>
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	bb 1f       	adc	r27, r27
    1fe6:	66 1f       	adc	r22, r22
    1fe8:	77 1f       	adc	r23, r23
    1fea:	88 1f       	adc	r24, r24
    1fec:	91 50       	subi	r25, 0x01	; 1
    1fee:	50 40       	sbci	r21, 0x00	; 0
    1ff0:	a9 f7       	brne	.-22     	; 0x1fdc <__mulsf3_pse+0x64>
    1ff2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ff4:	51 05       	cpc	r21, r1
    1ff6:	70 f0       	brcs	.+28     	; 0x2014 <__mulsf3_pse+0x9c>
    1ff8:	5c cf       	rjmp	.-328    	; 0x1eb2 <__fp_inf>
    1ffa:	a6 cf       	rjmp	.-180    	; 0x1f48 <__fp_szero>
    1ffc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ffe:	ec f3       	brlt	.-6      	; 0x1ffa <__mulsf3_pse+0x82>
    2000:	98 3e       	cpi	r25, 0xE8	; 232
    2002:	dc f3       	brlt	.-10     	; 0x1ffa <__mulsf3_pse+0x82>
    2004:	86 95       	lsr	r24
    2006:	77 95       	ror	r23
    2008:	67 95       	ror	r22
    200a:	b7 95       	ror	r27
    200c:	f7 95       	ror	r31
    200e:	e7 95       	ror	r30
    2010:	9f 5f       	subi	r25, 0xFF	; 255
    2012:	c1 f7       	brne	.-16     	; 0x2004 <__mulsf3_pse+0x8c>
    2014:	fe 2b       	or	r31, r30
    2016:	88 0f       	add	r24, r24
    2018:	91 1d       	adc	r25, r1
    201a:	96 95       	lsr	r25
    201c:	87 95       	ror	r24
    201e:	97 f9       	bld	r25, 7
    2020:	08 95       	ret

00002022 <__divmodhi4>:
    2022:	97 fb       	bst	r25, 7
    2024:	07 2e       	mov	r0, r23
    2026:	16 f4       	brtc	.+4      	; 0x202c <__divmodhi4+0xa>
    2028:	00 94       	com	r0
    202a:	06 d0       	rcall	.+12     	; 0x2038 <__divmodhi4_neg1>
    202c:	77 fd       	sbrc	r23, 7
    202e:	08 d0       	rcall	.+16     	; 0x2040 <__divmodhi4_neg2>
    2030:	14 d0       	rcall	.+40     	; 0x205a <__udivmodhi4>
    2032:	07 fc       	sbrc	r0, 7
    2034:	05 d0       	rcall	.+10     	; 0x2040 <__divmodhi4_neg2>
    2036:	3e f4       	brtc	.+14     	; 0x2046 <__divmodhi4_exit>

00002038 <__divmodhi4_neg1>:
    2038:	90 95       	com	r25
    203a:	81 95       	neg	r24
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	08 95       	ret

00002040 <__divmodhi4_neg2>:
    2040:	70 95       	com	r23
    2042:	61 95       	neg	r22
    2044:	7f 4f       	sbci	r23, 0xFF	; 255

00002046 <__divmodhi4_exit>:
    2046:	08 95       	ret

00002048 <__tablejump2__>:
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	00 24       	eor	r0, r0
    204e:	00 1c       	adc	r0, r0
    2050:	0b be       	out	0x3b, r0	; 59
    2052:	07 90       	elpm	r0, Z+
    2054:	f6 91       	elpm	r31, Z
    2056:	e0 2d       	mov	r30, r0
    2058:	09 94       	ijmp

0000205a <__udivmodhi4>:
    205a:	aa 1b       	sub	r26, r26
    205c:	bb 1b       	sub	r27, r27
    205e:	51 e1       	ldi	r21, 0x11	; 17
    2060:	07 c0       	rjmp	.+14     	; 0x2070 <__udivmodhi4_ep>

00002062 <__udivmodhi4_loop>:
    2062:	aa 1f       	adc	r26, r26
    2064:	bb 1f       	adc	r27, r27
    2066:	a6 17       	cp	r26, r22
    2068:	b7 07       	cpc	r27, r23
    206a:	10 f0       	brcs	.+4      	; 0x2070 <__udivmodhi4_ep>
    206c:	a6 1b       	sub	r26, r22
    206e:	b7 0b       	sbc	r27, r23

00002070 <__udivmodhi4_ep>:
    2070:	88 1f       	adc	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	5a 95       	dec	r21
    2076:	a9 f7       	brne	.-22     	; 0x2062 <__udivmodhi4_loop>
    2078:	80 95       	com	r24
    207a:	90 95       	com	r25
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	08 95       	ret

00002082 <atoi>:
    2082:	fc 01       	movw	r30, r24
    2084:	88 27       	eor	r24, r24
    2086:	99 27       	eor	r25, r25
    2088:	e8 94       	clt
    208a:	21 91       	ld	r18, Z+
    208c:	20 32       	cpi	r18, 0x20	; 32
    208e:	e9 f3       	breq	.-6      	; 0x208a <atoi+0x8>
    2090:	29 30       	cpi	r18, 0x09	; 9
    2092:	10 f0       	brcs	.+4      	; 0x2098 <atoi+0x16>
    2094:	2e 30       	cpi	r18, 0x0E	; 14
    2096:	c8 f3       	brcs	.-14     	; 0x208a <atoi+0x8>
    2098:	2b 32       	cpi	r18, 0x2B	; 43
    209a:	39 f0       	breq	.+14     	; 0x20aa <atoi+0x28>
    209c:	2d 32       	cpi	r18, 0x2D	; 45
    209e:	31 f4       	brne	.+12     	; 0x20ac <atoi+0x2a>
    20a0:	68 94       	set
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <atoi+0x28>
    20a4:	0b d0       	rcall	.+22     	; 0x20bc <__mulhi_const_10>
    20a6:	82 0f       	add	r24, r18
    20a8:	91 1d       	adc	r25, r1
    20aa:	21 91       	ld	r18, Z+
    20ac:	20 53       	subi	r18, 0x30	; 48
    20ae:	2a 30       	cpi	r18, 0x0A	; 10
    20b0:	c8 f3       	brcs	.-14     	; 0x20a4 <atoi+0x22>
    20b2:	1e f4       	brtc	.+6      	; 0x20ba <atoi+0x38>
    20b4:	90 95       	com	r25
    20b6:	81 95       	neg	r24
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	08 95       	ret

000020bc <__mulhi_const_10>:
    20bc:	7a e0       	ldi	r23, 0x0A	; 10
    20be:	97 9f       	mul	r25, r23
    20c0:	90 2d       	mov	r25, r0
    20c2:	87 9f       	mul	r24, r23
    20c4:	80 2d       	mov	r24, r0
    20c6:	91 0d       	add	r25, r1
    20c8:	11 24       	eor	r1, r1
    20ca:	08 95       	ret

000020cc <printf>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	ae 01       	movw	r20, r28
    20d6:	4b 5f       	subi	r20, 0xFB	; 251
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255
    20da:	fa 01       	movw	r30, r20
    20dc:	61 91       	ld	r22, Z+
    20de:	71 91       	ld	r23, Z+
    20e0:	af 01       	movw	r20, r30
    20e2:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <__iob+0x2>
    20e6:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <__iob+0x3>
    20ea:	08 d0       	rcall	.+16     	; 0x20fc <vfprintf>
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <putchar>:
    20f2:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <__iob+0x2>
    20f6:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <__iob+0x3>
    20fa:	13 c2       	rjmp	.+1062   	; 0x2522 <fputc>

000020fc <vfprintf>:
    20fc:	2f 92       	push	r2
    20fe:	3f 92       	push	r3
    2100:	4f 92       	push	r4
    2102:	5f 92       	push	r5
    2104:	6f 92       	push	r6
    2106:	7f 92       	push	r7
    2108:	8f 92       	push	r8
    210a:	9f 92       	push	r9
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	2b 97       	sbiw	r28, 0x0b	; 11
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	6c 01       	movw	r12, r24
    2132:	7b 01       	movw	r14, r22
    2134:	8a 01       	movw	r16, r20
    2136:	fc 01       	movw	r30, r24
    2138:	17 82       	std	Z+7, r1	; 0x07
    213a:	16 82       	std	Z+6, r1	; 0x06
    213c:	83 81       	ldd	r24, Z+3	; 0x03
    213e:	81 ff       	sbrs	r24, 1
    2140:	bf c1       	rjmp	.+894    	; 0x24c0 <vfprintf+0x3c4>
    2142:	ce 01       	movw	r24, r28
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	3c 01       	movw	r6, r24
    2148:	f6 01       	movw	r30, r12
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	f7 01       	movw	r30, r14
    214e:	93 fd       	sbrc	r25, 3
    2150:	85 91       	lpm	r24, Z+
    2152:	93 ff       	sbrs	r25, 3
    2154:	81 91       	ld	r24, Z+
    2156:	7f 01       	movw	r14, r30
    2158:	88 23       	and	r24, r24
    215a:	09 f4       	brne	.+2      	; 0x215e <vfprintf+0x62>
    215c:	ad c1       	rjmp	.+858    	; 0x24b8 <vfprintf+0x3bc>
    215e:	85 32       	cpi	r24, 0x25	; 37
    2160:	39 f4       	brne	.+14     	; 0x2170 <vfprintf+0x74>
    2162:	93 fd       	sbrc	r25, 3
    2164:	85 91       	lpm	r24, Z+
    2166:	93 ff       	sbrs	r25, 3
    2168:	81 91       	ld	r24, Z+
    216a:	7f 01       	movw	r14, r30
    216c:	85 32       	cpi	r24, 0x25	; 37
    216e:	21 f4       	brne	.+8      	; 0x2178 <vfprintf+0x7c>
    2170:	b6 01       	movw	r22, r12
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	d6 d1       	rcall	.+940    	; 0x2522 <fputc>
    2176:	e8 cf       	rjmp	.-48     	; 0x2148 <vfprintf+0x4c>
    2178:	91 2c       	mov	r9, r1
    217a:	21 2c       	mov	r2, r1
    217c:	31 2c       	mov	r3, r1
    217e:	ff e1       	ldi	r31, 0x1F	; 31
    2180:	f3 15       	cp	r31, r3
    2182:	d8 f0       	brcs	.+54     	; 0x21ba <vfprintf+0xbe>
    2184:	8b 32       	cpi	r24, 0x2B	; 43
    2186:	79 f0       	breq	.+30     	; 0x21a6 <vfprintf+0xaa>
    2188:	38 f4       	brcc	.+14     	; 0x2198 <vfprintf+0x9c>
    218a:	80 32       	cpi	r24, 0x20	; 32
    218c:	79 f0       	breq	.+30     	; 0x21ac <vfprintf+0xb0>
    218e:	83 32       	cpi	r24, 0x23	; 35
    2190:	a1 f4       	brne	.+40     	; 0x21ba <vfprintf+0xbe>
    2192:	23 2d       	mov	r18, r3
    2194:	20 61       	ori	r18, 0x10	; 16
    2196:	1d c0       	rjmp	.+58     	; 0x21d2 <vfprintf+0xd6>
    2198:	8d 32       	cpi	r24, 0x2D	; 45
    219a:	61 f0       	breq	.+24     	; 0x21b4 <vfprintf+0xb8>
    219c:	80 33       	cpi	r24, 0x30	; 48
    219e:	69 f4       	brne	.+26     	; 0x21ba <vfprintf+0xbe>
    21a0:	23 2d       	mov	r18, r3
    21a2:	21 60       	ori	r18, 0x01	; 1
    21a4:	16 c0       	rjmp	.+44     	; 0x21d2 <vfprintf+0xd6>
    21a6:	83 2d       	mov	r24, r3
    21a8:	82 60       	ori	r24, 0x02	; 2
    21aa:	38 2e       	mov	r3, r24
    21ac:	e3 2d       	mov	r30, r3
    21ae:	e4 60       	ori	r30, 0x04	; 4
    21b0:	3e 2e       	mov	r3, r30
    21b2:	2a c0       	rjmp	.+84     	; 0x2208 <vfprintf+0x10c>
    21b4:	f3 2d       	mov	r31, r3
    21b6:	f8 60       	ori	r31, 0x08	; 8
    21b8:	1d c0       	rjmp	.+58     	; 0x21f4 <vfprintf+0xf8>
    21ba:	37 fc       	sbrc	r3, 7
    21bc:	2d c0       	rjmp	.+90     	; 0x2218 <vfprintf+0x11c>
    21be:	20 ed       	ldi	r18, 0xD0	; 208
    21c0:	28 0f       	add	r18, r24
    21c2:	2a 30       	cpi	r18, 0x0A	; 10
    21c4:	40 f0       	brcs	.+16     	; 0x21d6 <vfprintf+0xda>
    21c6:	8e 32       	cpi	r24, 0x2E	; 46
    21c8:	b9 f4       	brne	.+46     	; 0x21f8 <vfprintf+0xfc>
    21ca:	36 fc       	sbrc	r3, 6
    21cc:	75 c1       	rjmp	.+746    	; 0x24b8 <vfprintf+0x3bc>
    21ce:	23 2d       	mov	r18, r3
    21d0:	20 64       	ori	r18, 0x40	; 64
    21d2:	32 2e       	mov	r3, r18
    21d4:	19 c0       	rjmp	.+50     	; 0x2208 <vfprintf+0x10c>
    21d6:	36 fe       	sbrs	r3, 6
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <vfprintf+0xea>
    21da:	8a e0       	ldi	r24, 0x0A	; 10
    21dc:	98 9e       	mul	r9, r24
    21de:	20 0d       	add	r18, r0
    21e0:	11 24       	eor	r1, r1
    21e2:	92 2e       	mov	r9, r18
    21e4:	11 c0       	rjmp	.+34     	; 0x2208 <vfprintf+0x10c>
    21e6:	ea e0       	ldi	r30, 0x0A	; 10
    21e8:	2e 9e       	mul	r2, r30
    21ea:	20 0d       	add	r18, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	22 2e       	mov	r2, r18
    21f0:	f3 2d       	mov	r31, r3
    21f2:	f0 62       	ori	r31, 0x20	; 32
    21f4:	3f 2e       	mov	r3, r31
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <vfprintf+0x10c>
    21f8:	8c 36       	cpi	r24, 0x6C	; 108
    21fa:	21 f4       	brne	.+8      	; 0x2204 <vfprintf+0x108>
    21fc:	83 2d       	mov	r24, r3
    21fe:	80 68       	ori	r24, 0x80	; 128
    2200:	38 2e       	mov	r3, r24
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <vfprintf+0x10c>
    2204:	88 36       	cpi	r24, 0x68	; 104
    2206:	41 f4       	brne	.+16     	; 0x2218 <vfprintf+0x11c>
    2208:	f7 01       	movw	r30, r14
    220a:	93 fd       	sbrc	r25, 3
    220c:	85 91       	lpm	r24, Z+
    220e:	93 ff       	sbrs	r25, 3
    2210:	81 91       	ld	r24, Z+
    2212:	7f 01       	movw	r14, r30
    2214:	81 11       	cpse	r24, r1
    2216:	b3 cf       	rjmp	.-154    	; 0x217e <vfprintf+0x82>
    2218:	98 2f       	mov	r25, r24
    221a:	9f 7d       	andi	r25, 0xDF	; 223
    221c:	95 54       	subi	r25, 0x45	; 69
    221e:	93 30       	cpi	r25, 0x03	; 3
    2220:	28 f4       	brcc	.+10     	; 0x222c <vfprintf+0x130>
    2222:	0c 5f       	subi	r16, 0xFC	; 252
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	9f e3       	ldi	r25, 0x3F	; 63
    2228:	99 83       	std	Y+1, r25	; 0x01
    222a:	0d c0       	rjmp	.+26     	; 0x2246 <vfprintf+0x14a>
    222c:	83 36       	cpi	r24, 0x63	; 99
    222e:	31 f0       	breq	.+12     	; 0x223c <vfprintf+0x140>
    2230:	83 37       	cpi	r24, 0x73	; 115
    2232:	71 f0       	breq	.+28     	; 0x2250 <vfprintf+0x154>
    2234:	83 35       	cpi	r24, 0x53	; 83
    2236:	09 f0       	breq	.+2      	; 0x223a <vfprintf+0x13e>
    2238:	55 c0       	rjmp	.+170    	; 0x22e4 <vfprintf+0x1e8>
    223a:	20 c0       	rjmp	.+64     	; 0x227c <vfprintf+0x180>
    223c:	f8 01       	movw	r30, r16
    223e:	80 81       	ld	r24, Z
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	0e 5f       	subi	r16, 0xFE	; 254
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	88 24       	eor	r8, r8
    2248:	83 94       	inc	r8
    224a:	91 2c       	mov	r9, r1
    224c:	53 01       	movw	r10, r6
    224e:	12 c0       	rjmp	.+36     	; 0x2274 <vfprintf+0x178>
    2250:	28 01       	movw	r4, r16
    2252:	f2 e0       	ldi	r31, 0x02	; 2
    2254:	4f 0e       	add	r4, r31
    2256:	51 1c       	adc	r5, r1
    2258:	f8 01       	movw	r30, r16
    225a:	a0 80       	ld	r10, Z
    225c:	b1 80       	ldd	r11, Z+1	; 0x01
    225e:	36 fe       	sbrs	r3, 6
    2260:	03 c0       	rjmp	.+6      	; 0x2268 <vfprintf+0x16c>
    2262:	69 2d       	mov	r22, r9
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <vfprintf+0x170>
    2268:	6f ef       	ldi	r22, 0xFF	; 255
    226a:	7f ef       	ldi	r23, 0xFF	; 255
    226c:	c5 01       	movw	r24, r10
    226e:	4e d1       	rcall	.+668    	; 0x250c <strnlen>
    2270:	4c 01       	movw	r8, r24
    2272:	82 01       	movw	r16, r4
    2274:	f3 2d       	mov	r31, r3
    2276:	ff 77       	andi	r31, 0x7F	; 127
    2278:	3f 2e       	mov	r3, r31
    227a:	15 c0       	rjmp	.+42     	; 0x22a6 <vfprintf+0x1aa>
    227c:	28 01       	movw	r4, r16
    227e:	22 e0       	ldi	r18, 0x02	; 2
    2280:	42 0e       	add	r4, r18
    2282:	51 1c       	adc	r5, r1
    2284:	f8 01       	movw	r30, r16
    2286:	a0 80       	ld	r10, Z
    2288:	b1 80       	ldd	r11, Z+1	; 0x01
    228a:	36 fe       	sbrs	r3, 6
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <vfprintf+0x198>
    228e:	69 2d       	mov	r22, r9
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <vfprintf+0x19c>
    2294:	6f ef       	ldi	r22, 0xFF	; 255
    2296:	7f ef       	ldi	r23, 0xFF	; 255
    2298:	c5 01       	movw	r24, r10
    229a:	2d d1       	rcall	.+602    	; 0x24f6 <strnlen_P>
    229c:	4c 01       	movw	r8, r24
    229e:	f3 2d       	mov	r31, r3
    22a0:	f0 68       	ori	r31, 0x80	; 128
    22a2:	3f 2e       	mov	r3, r31
    22a4:	82 01       	movw	r16, r4
    22a6:	33 fc       	sbrc	r3, 3
    22a8:	19 c0       	rjmp	.+50     	; 0x22dc <vfprintf+0x1e0>
    22aa:	82 2d       	mov	r24, r2
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	88 16       	cp	r8, r24
    22b0:	99 06       	cpc	r9, r25
    22b2:	a0 f4       	brcc	.+40     	; 0x22dc <vfprintf+0x1e0>
    22b4:	b6 01       	movw	r22, r12
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	33 d1       	rcall	.+614    	; 0x2522 <fputc>
    22bc:	2a 94       	dec	r2
    22be:	f5 cf       	rjmp	.-22     	; 0x22aa <vfprintf+0x1ae>
    22c0:	f5 01       	movw	r30, r10
    22c2:	37 fc       	sbrc	r3, 7
    22c4:	85 91       	lpm	r24, Z+
    22c6:	37 fe       	sbrs	r3, 7
    22c8:	81 91       	ld	r24, Z+
    22ca:	5f 01       	movw	r10, r30
    22cc:	b6 01       	movw	r22, r12
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	28 d1       	rcall	.+592    	; 0x2522 <fputc>
    22d2:	21 10       	cpse	r2, r1
    22d4:	2a 94       	dec	r2
    22d6:	21 e0       	ldi	r18, 0x01	; 1
    22d8:	82 1a       	sub	r8, r18
    22da:	91 08       	sbc	r9, r1
    22dc:	81 14       	cp	r8, r1
    22de:	91 04       	cpc	r9, r1
    22e0:	79 f7       	brne	.-34     	; 0x22c0 <vfprintf+0x1c4>
    22e2:	e1 c0       	rjmp	.+450    	; 0x24a6 <vfprintf+0x3aa>
    22e4:	84 36       	cpi	r24, 0x64	; 100
    22e6:	11 f0       	breq	.+4      	; 0x22ec <vfprintf+0x1f0>
    22e8:	89 36       	cpi	r24, 0x69	; 105
    22ea:	39 f5       	brne	.+78     	; 0x233a <vfprintf+0x23e>
    22ec:	f8 01       	movw	r30, r16
    22ee:	37 fe       	sbrs	r3, 7
    22f0:	07 c0       	rjmp	.+14     	; 0x2300 <vfprintf+0x204>
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	0c 5f       	subi	r16, 0xFC	; 252
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	08 c0       	rjmp	.+16     	; 0x2310 <vfprintf+0x214>
    2300:	60 81       	ld	r22, Z
    2302:	71 81       	ldd	r23, Z+1	; 0x01
    2304:	07 2e       	mov	r0, r23
    2306:	00 0c       	add	r0, r0
    2308:	88 0b       	sbc	r24, r24
    230a:	99 0b       	sbc	r25, r25
    230c:	0e 5f       	subi	r16, 0xFE	; 254
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	f3 2d       	mov	r31, r3
    2312:	ff 76       	andi	r31, 0x6F	; 111
    2314:	3f 2e       	mov	r3, r31
    2316:	97 ff       	sbrs	r25, 7
    2318:	09 c0       	rjmp	.+18     	; 0x232c <vfprintf+0x230>
    231a:	90 95       	com	r25
    231c:	80 95       	com	r24
    231e:	70 95       	com	r23
    2320:	61 95       	neg	r22
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8f 4f       	sbci	r24, 0xFF	; 255
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	f0 68       	ori	r31, 0x80	; 128
    232a:	3f 2e       	mov	r3, r31
    232c:	2a e0       	ldi	r18, 0x0A	; 10
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	a3 01       	movw	r20, r6
    2332:	33 d1       	rcall	.+614    	; 0x259a <__ultoa_invert>
    2334:	88 2e       	mov	r8, r24
    2336:	86 18       	sub	r8, r6
    2338:	44 c0       	rjmp	.+136    	; 0x23c2 <vfprintf+0x2c6>
    233a:	85 37       	cpi	r24, 0x75	; 117
    233c:	31 f4       	brne	.+12     	; 0x234a <vfprintf+0x24e>
    233e:	23 2d       	mov	r18, r3
    2340:	2f 7e       	andi	r18, 0xEF	; 239
    2342:	b2 2e       	mov	r11, r18
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	25 c0       	rjmp	.+74     	; 0x2394 <vfprintf+0x298>
    234a:	93 2d       	mov	r25, r3
    234c:	99 7f       	andi	r25, 0xF9	; 249
    234e:	b9 2e       	mov	r11, r25
    2350:	8f 36       	cpi	r24, 0x6F	; 111
    2352:	c1 f0       	breq	.+48     	; 0x2384 <vfprintf+0x288>
    2354:	18 f4       	brcc	.+6      	; 0x235c <vfprintf+0x260>
    2356:	88 35       	cpi	r24, 0x58	; 88
    2358:	79 f0       	breq	.+30     	; 0x2378 <vfprintf+0x27c>
    235a:	ae c0       	rjmp	.+348    	; 0x24b8 <vfprintf+0x3bc>
    235c:	80 37       	cpi	r24, 0x70	; 112
    235e:	19 f0       	breq	.+6      	; 0x2366 <vfprintf+0x26a>
    2360:	88 37       	cpi	r24, 0x78	; 120
    2362:	21 f0       	breq	.+8      	; 0x236c <vfprintf+0x270>
    2364:	a9 c0       	rjmp	.+338    	; 0x24b8 <vfprintf+0x3bc>
    2366:	e9 2f       	mov	r30, r25
    2368:	e0 61       	ori	r30, 0x10	; 16
    236a:	be 2e       	mov	r11, r30
    236c:	b4 fe       	sbrs	r11, 4
    236e:	0d c0       	rjmp	.+26     	; 0x238a <vfprintf+0x28e>
    2370:	fb 2d       	mov	r31, r11
    2372:	f4 60       	ori	r31, 0x04	; 4
    2374:	bf 2e       	mov	r11, r31
    2376:	09 c0       	rjmp	.+18     	; 0x238a <vfprintf+0x28e>
    2378:	34 fe       	sbrs	r3, 4
    237a:	0a c0       	rjmp	.+20     	; 0x2390 <vfprintf+0x294>
    237c:	29 2f       	mov	r18, r25
    237e:	26 60       	ori	r18, 0x06	; 6
    2380:	b2 2e       	mov	r11, r18
    2382:	06 c0       	rjmp	.+12     	; 0x2390 <vfprintf+0x294>
    2384:	28 e0       	ldi	r18, 0x08	; 8
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	05 c0       	rjmp	.+10     	; 0x2394 <vfprintf+0x298>
    238a:	20 e1       	ldi	r18, 0x10	; 16
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <vfprintf+0x298>
    2390:	20 e1       	ldi	r18, 0x10	; 16
    2392:	32 e0       	ldi	r19, 0x02	; 2
    2394:	f8 01       	movw	r30, r16
    2396:	b7 fe       	sbrs	r11, 7
    2398:	07 c0       	rjmp	.+14     	; 0x23a8 <vfprintf+0x2ac>
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	0c 5f       	subi	r16, 0xFC	; 252
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <vfprintf+0x2b8>
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 5f       	subi	r16, 0xFE	; 254
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
    23b4:	a3 01       	movw	r20, r6
    23b6:	f1 d0       	rcall	.+482    	; 0x259a <__ultoa_invert>
    23b8:	88 2e       	mov	r8, r24
    23ba:	86 18       	sub	r8, r6
    23bc:	fb 2d       	mov	r31, r11
    23be:	ff 77       	andi	r31, 0x7F	; 127
    23c0:	3f 2e       	mov	r3, r31
    23c2:	36 fe       	sbrs	r3, 6
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <vfprintf+0x2e4>
    23c6:	23 2d       	mov	r18, r3
    23c8:	2e 7f       	andi	r18, 0xFE	; 254
    23ca:	a2 2e       	mov	r10, r18
    23cc:	89 14       	cp	r8, r9
    23ce:	58 f4       	brcc	.+22     	; 0x23e6 <vfprintf+0x2ea>
    23d0:	34 fe       	sbrs	r3, 4
    23d2:	0b c0       	rjmp	.+22     	; 0x23ea <vfprintf+0x2ee>
    23d4:	32 fc       	sbrc	r3, 2
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <vfprintf+0x2ee>
    23d8:	83 2d       	mov	r24, r3
    23da:	8e 7e       	andi	r24, 0xEE	; 238
    23dc:	a8 2e       	mov	r10, r24
    23de:	05 c0       	rjmp	.+10     	; 0x23ea <vfprintf+0x2ee>
    23e0:	b8 2c       	mov	r11, r8
    23e2:	a3 2c       	mov	r10, r3
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <vfprintf+0x2f0>
    23e6:	b8 2c       	mov	r11, r8
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <vfprintf+0x2f0>
    23ea:	b9 2c       	mov	r11, r9
    23ec:	a4 fe       	sbrs	r10, 4
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <vfprintf+0x312>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e8 0d       	add	r30, r8
    23f4:	f1 1d       	adc	r31, r1
    23f6:	80 81       	ld	r24, Z
    23f8:	80 33       	cpi	r24, 0x30	; 48
    23fa:	21 f4       	brne	.+8      	; 0x2404 <vfprintf+0x308>
    23fc:	9a 2d       	mov	r25, r10
    23fe:	99 7e       	andi	r25, 0xE9	; 233
    2400:	a9 2e       	mov	r10, r25
    2402:	09 c0       	rjmp	.+18     	; 0x2416 <vfprintf+0x31a>
    2404:	a2 fe       	sbrs	r10, 2
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <vfprintf+0x318>
    2408:	b3 94       	inc	r11
    240a:	b3 94       	inc	r11
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <vfprintf+0x31a>
    240e:	8a 2d       	mov	r24, r10
    2410:	86 78       	andi	r24, 0x86	; 134
    2412:	09 f0       	breq	.+2      	; 0x2416 <vfprintf+0x31a>
    2414:	b3 94       	inc	r11
    2416:	a3 fc       	sbrc	r10, 3
    2418:	10 c0       	rjmp	.+32     	; 0x243a <vfprintf+0x33e>
    241a:	a0 fe       	sbrs	r10, 0
    241c:	06 c0       	rjmp	.+12     	; 0x242a <vfprintf+0x32e>
    241e:	b2 14       	cp	r11, r2
    2420:	80 f4       	brcc	.+32     	; 0x2442 <vfprintf+0x346>
    2422:	28 0c       	add	r2, r8
    2424:	92 2c       	mov	r9, r2
    2426:	9b 18       	sub	r9, r11
    2428:	0d c0       	rjmp	.+26     	; 0x2444 <vfprintf+0x348>
    242a:	b2 14       	cp	r11, r2
    242c:	58 f4       	brcc	.+22     	; 0x2444 <vfprintf+0x348>
    242e:	b6 01       	movw	r22, r12
    2430:	80 e2       	ldi	r24, 0x20	; 32
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	76 d0       	rcall	.+236    	; 0x2522 <fputc>
    2436:	b3 94       	inc	r11
    2438:	f8 cf       	rjmp	.-16     	; 0x242a <vfprintf+0x32e>
    243a:	b2 14       	cp	r11, r2
    243c:	18 f4       	brcc	.+6      	; 0x2444 <vfprintf+0x348>
    243e:	2b 18       	sub	r2, r11
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <vfprintf+0x34a>
    2442:	98 2c       	mov	r9, r8
    2444:	21 2c       	mov	r2, r1
    2446:	a4 fe       	sbrs	r10, 4
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <vfprintf+0x36c>
    244a:	b6 01       	movw	r22, r12
    244c:	80 e3       	ldi	r24, 0x30	; 48
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	68 d0       	rcall	.+208    	; 0x2522 <fputc>
    2452:	a2 fe       	sbrs	r10, 2
    2454:	16 c0       	rjmp	.+44     	; 0x2482 <vfprintf+0x386>
    2456:	a1 fc       	sbrc	r10, 1
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <vfprintf+0x364>
    245a:	88 e7       	ldi	r24, 0x78	; 120
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <vfprintf+0x368>
    2460:	88 e5       	ldi	r24, 0x58	; 88
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	b6 01       	movw	r22, r12
    2466:	0c c0       	rjmp	.+24     	; 0x2480 <vfprintf+0x384>
    2468:	8a 2d       	mov	r24, r10
    246a:	86 78       	andi	r24, 0x86	; 134
    246c:	51 f0       	breq	.+20     	; 0x2482 <vfprintf+0x386>
    246e:	a1 fe       	sbrs	r10, 1
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <vfprintf+0x37a>
    2472:	8b e2       	ldi	r24, 0x2B	; 43
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <vfprintf+0x37c>
    2476:	80 e2       	ldi	r24, 0x20	; 32
    2478:	a7 fc       	sbrc	r10, 7
    247a:	8d e2       	ldi	r24, 0x2D	; 45
    247c:	b6 01       	movw	r22, r12
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	50 d0       	rcall	.+160    	; 0x2522 <fputc>
    2482:	89 14       	cp	r8, r9
    2484:	30 f4       	brcc	.+12     	; 0x2492 <vfprintf+0x396>
    2486:	b6 01       	movw	r22, r12
    2488:	80 e3       	ldi	r24, 0x30	; 48
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	4a d0       	rcall	.+148    	; 0x2522 <fputc>
    248e:	9a 94       	dec	r9
    2490:	f8 cf       	rjmp	.-16     	; 0x2482 <vfprintf+0x386>
    2492:	8a 94       	dec	r8
    2494:	f3 01       	movw	r30, r6
    2496:	e8 0d       	add	r30, r8
    2498:	f1 1d       	adc	r31, r1
    249a:	80 81       	ld	r24, Z
    249c:	b6 01       	movw	r22, r12
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	40 d0       	rcall	.+128    	; 0x2522 <fputc>
    24a2:	81 10       	cpse	r8, r1
    24a4:	f6 cf       	rjmp	.-20     	; 0x2492 <vfprintf+0x396>
    24a6:	22 20       	and	r2, r2
    24a8:	09 f4       	brne	.+2      	; 0x24ac <vfprintf+0x3b0>
    24aa:	4e ce       	rjmp	.-868    	; 0x2148 <vfprintf+0x4c>
    24ac:	b6 01       	movw	r22, r12
    24ae:	80 e2       	ldi	r24, 0x20	; 32
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	37 d0       	rcall	.+110    	; 0x2522 <fputc>
    24b4:	2a 94       	dec	r2
    24b6:	f7 cf       	rjmp	.-18     	; 0x24a6 <vfprintf+0x3aa>
    24b8:	f6 01       	movw	r30, r12
    24ba:	86 81       	ldd	r24, Z+6	; 0x06
    24bc:	97 81       	ldd	r25, Z+7	; 0x07
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <vfprintf+0x3c8>
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	9f ef       	ldi	r25, 0xFF	; 255
    24c4:	2b 96       	adiw	r28, 0x0b	; 11
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	bf 90       	pop	r11
    24e2:	af 90       	pop	r10
    24e4:	9f 90       	pop	r9
    24e6:	8f 90       	pop	r8
    24e8:	7f 90       	pop	r7
    24ea:	6f 90       	pop	r6
    24ec:	5f 90       	pop	r5
    24ee:	4f 90       	pop	r4
    24f0:	3f 90       	pop	r3
    24f2:	2f 90       	pop	r2
    24f4:	08 95       	ret

000024f6 <strnlen_P>:
    24f6:	fc 01       	movw	r30, r24
    24f8:	05 90       	lpm	r0, Z+
    24fa:	61 50       	subi	r22, 0x01	; 1
    24fc:	70 40       	sbci	r23, 0x00	; 0
    24fe:	01 10       	cpse	r0, r1
    2500:	d8 f7       	brcc	.-10     	; 0x24f8 <strnlen_P+0x2>
    2502:	80 95       	com	r24
    2504:	90 95       	com	r25
    2506:	8e 0f       	add	r24, r30
    2508:	9f 1f       	adc	r25, r31
    250a:	08 95       	ret

0000250c <strnlen>:
    250c:	fc 01       	movw	r30, r24
    250e:	61 50       	subi	r22, 0x01	; 1
    2510:	70 40       	sbci	r23, 0x00	; 0
    2512:	01 90       	ld	r0, Z+
    2514:	01 10       	cpse	r0, r1
    2516:	d8 f7       	brcc	.-10     	; 0x250e <strnlen+0x2>
    2518:	80 95       	com	r24
    251a:	90 95       	com	r25
    251c:	8e 0f       	add	r24, r30
    251e:	9f 1f       	adc	r25, r31
    2520:	08 95       	ret

00002522 <fputc>:
    2522:	0f 93       	push	r16
    2524:	1f 93       	push	r17
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	fb 01       	movw	r30, r22
    252c:	23 81       	ldd	r18, Z+3	; 0x03
    252e:	21 fd       	sbrc	r18, 1
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <fputc+0x16>
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	9f ef       	ldi	r25, 0xFF	; 255
    2536:	2c c0       	rjmp	.+88     	; 0x2590 <fputc+0x6e>
    2538:	22 ff       	sbrs	r18, 2
    253a:	16 c0       	rjmp	.+44     	; 0x2568 <fputc+0x46>
    253c:	46 81       	ldd	r20, Z+6	; 0x06
    253e:	57 81       	ldd	r21, Z+7	; 0x07
    2540:	24 81       	ldd	r18, Z+4	; 0x04
    2542:	35 81       	ldd	r19, Z+5	; 0x05
    2544:	42 17       	cp	r20, r18
    2546:	53 07       	cpc	r21, r19
    2548:	44 f4       	brge	.+16     	; 0x255a <fputc+0x38>
    254a:	a0 81       	ld	r26, Z
    254c:	b1 81       	ldd	r27, Z+1	; 0x01
    254e:	9d 01       	movw	r18, r26
    2550:	2f 5f       	subi	r18, 0xFF	; 255
    2552:	3f 4f       	sbci	r19, 0xFF	; 255
    2554:	31 83       	std	Z+1, r19	; 0x01
    2556:	20 83       	st	Z, r18
    2558:	8c 93       	st	X, r24
    255a:	26 81       	ldd	r18, Z+6	; 0x06
    255c:	37 81       	ldd	r19, Z+7	; 0x07
    255e:	2f 5f       	subi	r18, 0xFF	; 255
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	37 83       	std	Z+7, r19	; 0x07
    2564:	26 83       	std	Z+6, r18	; 0x06
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <fputc+0x6e>
    2568:	8b 01       	movw	r16, r22
    256a:	ec 01       	movw	r28, r24
    256c:	fb 01       	movw	r30, r22
    256e:	00 84       	ldd	r0, Z+8	; 0x08
    2570:	f1 85       	ldd	r31, Z+9	; 0x09
    2572:	e0 2d       	mov	r30, r0
    2574:	09 95       	icall
    2576:	89 2b       	or	r24, r25
    2578:	e1 f6       	brne	.-72     	; 0x2532 <fputc+0x10>
    257a:	d8 01       	movw	r26, r16
    257c:	16 96       	adiw	r26, 0x06	; 6
    257e:	8d 91       	ld	r24, X+
    2580:	9c 91       	ld	r25, X
    2582:	17 97       	sbiw	r26, 0x07	; 7
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	17 96       	adiw	r26, 0x07	; 7
    2588:	9c 93       	st	X, r25
    258a:	8e 93       	st	-X, r24
    258c:	16 97       	sbiw	r26, 0x06	; 6
    258e:	ce 01       	movw	r24, r28
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	08 95       	ret

0000259a <__ultoa_invert>:
    259a:	fa 01       	movw	r30, r20
    259c:	aa 27       	eor	r26, r26
    259e:	28 30       	cpi	r18, 0x08	; 8
    25a0:	51 f1       	breq	.+84     	; 0x25f6 <__ultoa_invert+0x5c>
    25a2:	20 31       	cpi	r18, 0x10	; 16
    25a4:	81 f1       	breq	.+96     	; 0x2606 <__ultoa_invert+0x6c>
    25a6:	e8 94       	clt
    25a8:	6f 93       	push	r22
    25aa:	6e 7f       	andi	r22, 0xFE	; 254
    25ac:	6e 5f       	subi	r22, 0xFE	; 254
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	8f 4f       	sbci	r24, 0xFF	; 255
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	af 4f       	sbci	r26, 0xFF	; 255
    25b6:	b1 e0       	ldi	r27, 0x01	; 1
    25b8:	3e d0       	rcall	.+124    	; 0x2636 <__ultoa_invert+0x9c>
    25ba:	b4 e0       	ldi	r27, 0x04	; 4
    25bc:	3c d0       	rcall	.+120    	; 0x2636 <__ultoa_invert+0x9c>
    25be:	67 0f       	add	r22, r23
    25c0:	78 1f       	adc	r23, r24
    25c2:	89 1f       	adc	r24, r25
    25c4:	9a 1f       	adc	r25, r26
    25c6:	a1 1d       	adc	r26, r1
    25c8:	68 0f       	add	r22, r24
    25ca:	79 1f       	adc	r23, r25
    25cc:	8a 1f       	adc	r24, r26
    25ce:	91 1d       	adc	r25, r1
    25d0:	a1 1d       	adc	r26, r1
    25d2:	6a 0f       	add	r22, r26
    25d4:	71 1d       	adc	r23, r1
    25d6:	81 1d       	adc	r24, r1
    25d8:	91 1d       	adc	r25, r1
    25da:	a1 1d       	adc	r26, r1
    25dc:	20 d0       	rcall	.+64     	; 0x261e <__ultoa_invert+0x84>
    25de:	09 f4       	brne	.+2      	; 0x25e2 <__ultoa_invert+0x48>
    25e0:	68 94       	set
    25e2:	3f 91       	pop	r19
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	26 9f       	mul	r18, r22
    25e8:	11 24       	eor	r1, r1
    25ea:	30 19       	sub	r19, r0
    25ec:	30 5d       	subi	r19, 0xD0	; 208
    25ee:	31 93       	st	Z+, r19
    25f0:	de f6       	brtc	.-74     	; 0x25a8 <__ultoa_invert+0xe>
    25f2:	cf 01       	movw	r24, r30
    25f4:	08 95       	ret
    25f6:	46 2f       	mov	r20, r22
    25f8:	47 70       	andi	r20, 0x07	; 7
    25fa:	40 5d       	subi	r20, 0xD0	; 208
    25fc:	41 93       	st	Z+, r20
    25fe:	b3 e0       	ldi	r27, 0x03	; 3
    2600:	0f d0       	rcall	.+30     	; 0x2620 <__ultoa_invert+0x86>
    2602:	c9 f7       	brne	.-14     	; 0x25f6 <__ultoa_invert+0x5c>
    2604:	f6 cf       	rjmp	.-20     	; 0x25f2 <__ultoa_invert+0x58>
    2606:	46 2f       	mov	r20, r22
    2608:	4f 70       	andi	r20, 0x0F	; 15
    260a:	40 5d       	subi	r20, 0xD0	; 208
    260c:	4a 33       	cpi	r20, 0x3A	; 58
    260e:	18 f0       	brcs	.+6      	; 0x2616 <__ultoa_invert+0x7c>
    2610:	49 5d       	subi	r20, 0xD9	; 217
    2612:	31 fd       	sbrc	r19, 1
    2614:	40 52       	subi	r20, 0x20	; 32
    2616:	41 93       	st	Z+, r20
    2618:	02 d0       	rcall	.+4      	; 0x261e <__ultoa_invert+0x84>
    261a:	a9 f7       	brne	.-22     	; 0x2606 <__ultoa_invert+0x6c>
    261c:	ea cf       	rjmp	.-44     	; 0x25f2 <__ultoa_invert+0x58>
    261e:	b4 e0       	ldi	r27, 0x04	; 4
    2620:	a6 95       	lsr	r26
    2622:	97 95       	ror	r25
    2624:	87 95       	ror	r24
    2626:	77 95       	ror	r23
    2628:	67 95       	ror	r22
    262a:	ba 95       	dec	r27
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__ultoa_invert+0x86>
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	61 05       	cpc	r22, r1
    2632:	71 05       	cpc	r23, r1
    2634:	08 95       	ret
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	0a 2e       	mov	r0, r26
    263c:	06 94       	lsr	r0
    263e:	57 95       	ror	r21
    2640:	47 95       	ror	r20
    2642:	37 95       	ror	r19
    2644:	27 95       	ror	r18
    2646:	ba 95       	dec	r27
    2648:	c9 f7       	brne	.-14     	; 0x263c <__ultoa_invert+0xa2>
    264a:	62 0f       	add	r22, r18
    264c:	73 1f       	adc	r23, r19
    264e:	84 1f       	adc	r24, r20
    2650:	95 1f       	adc	r25, r21
    2652:	a0 1d       	adc	r26, r0
    2654:	08 95       	ret

00002656 <_exit>:
    2656:	f8 94       	cli

00002658 <__stop_program>:
    2658:	ff cf       	rjmp	.-2      	; 0x2658 <__stop_program>
