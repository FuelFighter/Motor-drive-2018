
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001f10  00001fa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  0080012e  0080012e  00001fd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f28  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001943  00000000  00000000  00007420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002562  00000000  00000000  00008d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e00  00000000  00000000  0000b2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001546  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b27  00000000  00000000  0000d60e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00011135  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	2d c6       	rjmp	.+3162   	; 0xc74 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c5       	rjmp	.+2958   	; 0xbc0 <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	61 c5       	rjmp	.+2754   	; 0xb04 <__vector_16>
      42:	00 00       	nop
      44:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_17>
      48:	8b c7       	rjmp	.+3862   	; 0xf60 <__vector_18>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	8e c4       	rjmp	.+2332   	; 0x972 <__vector_21>
      56:	00 00       	nop
      58:	6e c4       	rjmp	.+2268   	; 0x936 <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b1 c4       	rjmp	.+2402   	; 0x9e4 <__vector_32>
      82:	00 00       	nop
      84:	91 c4       	rjmp	.+2338   	; 0x9a8 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	82 07       	cpc	r24, r18
      96:	87 07       	cpc	r24, r23
      98:	8d 07       	cpc	r24, r29
      9a:	93 07       	cpc	r25, r19
      9c:	99 07       	cpc	r25, r25
      9e:	9e 07       	cpc	r25, r30
      a0:	a4 07       	cpc	r26, r20
      a2:	aa 07       	cpc	r26, r26

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e1       	ldi	r30, 0x10	; 16
      b8:	ff e1       	ldi	r31, 0x1F	; 31
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	ae 32       	cpi	r26, 0x2E	; 46
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	ae e2       	ldi	r26, 0x2E	; 46
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a4 37       	cpi	r26, 0x74	; 116
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	c6 d4       	rcall	.+2444   	; 0xa68 <main>
      dc:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <f32_Integrator>
      e6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <f32_Integrator+0x1>
      ea:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <f32_Integrator+0x2>
      ee:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     11c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     120:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     124:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     128:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4e eb       	ldi	r20, 0xBE	; 190
     132:	52 e4       	ldi	r21, 0x42	; 66
     134:	c7 01       	movw	r24, r14
     136:	b6 01       	movw	r22, r12
     138:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gesf2>
     13c:	88 23       	and	r24, r24
     13e:	54 f4       	brge	.+20     	; 0x154 <controller+0x60>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	48 e4       	ldi	r20, 0x48	; 72
     146:	52 e4       	ldi	r21, 0x42	; 66
     148:	c7 01       	movw	r24, r14
     14a:	b6 01       	movw	r22, r12
     14c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__cmpsf2>
     150:	18 16       	cp	r1, r24
     152:	24 f0       	brlt	.+8      	; 0x15c <controller+0x68>
	{
		b_saturation = true ;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
     15a:	02 c0       	rjmp	.+4      	; 0x160 <controller+0x6c>
		} else {
		b_saturation = false;
     15c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	}
	
	f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     160:	a3 01       	movw	r20, r6
     162:	92 01       	movw	r18, r4
     164:	c5 01       	movw	r24, r10
     166:	b4 01       	movw	r22, r8
     168:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__subsf3>
     16c:	6b 01       	movw	r12, r22
     16e:	7c 01       	movw	r14, r24
     170:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <f32_CurrentDelta>
     174:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <f32_CurrentDelta+0x1>
     178:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <f32_CurrentDelta+0x2>
     17c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <f32_CurrentDelta+0x3>
	
	if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) intgral windup protection
     180:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     184:	81 11       	cpse	r24, r1
     186:	1c c0       	rjmp	.+56     	; 0x1c0 <controller+0xcc>
	{
		f32_Integrator+=f32_CurrentDelta*TimeStep ;
     188:	2a e0       	ldi	r18, 0x0A	; 10
     18a:	37 ed       	ldi	r19, 0xD7	; 215
     18c:	43 e2       	ldi	r20, 0x23	; 35
     18e:	5c e3       	ldi	r21, 0x3C	; 60
     190:	c7 01       	movw	r24, r14
     192:	b6 01       	movw	r22, r12
     194:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3>
     198:	9b 01       	movw	r18, r22
     19a:	ac 01       	movw	r20, r24
     19c:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <f32_Integrator>
     1a0:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <f32_Integrator+0x1>
     1a4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <f32_Integrator+0x2>
     1a8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <f32_Integrator+0x3>
     1ac:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__addsf3>
     1b0:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <f32_Integrator>
     1b4:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <f32_Integrator+0x1>
     1b8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <f32_Integrator+0x2>
     1bc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <f32_Integrator+0x3>
	}
	
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
	f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c0:	23 e3       	ldi	r18, 0x33	; 51
     1c2:	33 e3       	ldi	r19, 0x33	; 51
     1c4:	43 e7       	ldi	r20, 0x73	; 115
     1c6:	52 e4       	ldi	r21, 0x42	; 66
     1c8:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <f32_Integrator>
     1cc:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <f32_Integrator+0x1>
     1d0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <f32_Integrator+0x2>
     1d4:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <f32_Integrator+0x3>
     1d8:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3>
     1dc:	4b 01       	movw	r8, r22
     1de:	5c 01       	movw	r10, r24
     1e0:	29 ef       	ldi	r18, 0xF9	; 249
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 e7       	ldi	r20, 0x79	; 121
     1e6:	5f e3       	ldi	r21, 0x3F	; 63
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3>
     1f0:	9b 01       	movw	r18, r22
     1f2:	ac 01       	movw	r20, r24
     1f4:	c5 01       	movw	r24, r10
     1f6:	b4 01       	movw	r22, r8
     1f8:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__addsf3>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	48 e4       	ldi	r20, 0x48	; 72
     202:	52 e4       	ldi	r21, 0x42	; 66
     204:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__addsf3>
     208:	6b 01       	movw	r12, r22
     20a:	7c 01       	movw	r14, r24
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4e eb       	ldi	r20, 0xBE	; 190
     222:	52 e4       	ldi	r21, 0x42	; 66
     224:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gesf2>
     228:	18 16       	cp	r1, r24
     22a:	6c f4       	brge	.+26     	; 0x246 <controller+0x152>
	{
		f32_DutyCycleCmd = 95;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	ae eb       	ldi	r26, 0xBE	; 190
     232:	b2 e4       	ldi	r27, 0x42	; 66
     234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     238:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     23c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     240:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     244:	16 c0       	rjmp	.+44     	; 0x272 <controller+0x17e>
	}
	
	if (f32_DutyCycleCmd < 50)
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	48 e4       	ldi	r20, 0x48	; 72
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__cmpsf2>
     256:	88 23       	and	r24, r24
     258:	64 f4       	brge	.+24     	; 0x272 <controller+0x17e>
	{
		f32_DutyCycleCmd = 50;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a8 e4       	ldi	r26, 0x48	; 72
     260:	b2 e4       	ldi	r27, 0x42	; 66
     262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     26a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     26e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
     272:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     276:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	48 ec       	ldi	r20, 0xC8	; 200
     280:	52 e4       	ldi	r21, 0x42	; 66
     282:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     286:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     28e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     292:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	be 01       	movw	r22, r28
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatunsisf>
     2a4:	9b 01       	movw	r18, r22
     2a6:	ac 01       	movw	r20, r24
     2a8:	c7 01       	movw	r24, r14
     2aa:	b6 01       	movw	r22, r12
     2ac:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3>
     2b0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     2b4:	e8 e9       	ldi	r30, 0x98	; 152
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	71 83       	std	Z+1, r23	; 0x01
     2ba:	60 83       	st	Z, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     2c4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ;
     2c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2d8:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
     2dc:	f8 01       	movw	r30, r16
     2de:	60 83       	st	Z, r22
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	7f 90       	pop	r7
     2fa:	6f 90       	pop	r6
     2fc:	5f 90       	pop	r5
     2fe:	4f 90       	pop	r4
     300:	08 95       	ret

00000302 <drivers_init>:

void drivers_init()
{
	DDRB |= (1 << PB4) ;
     302:	24 9a       	sbi	0x04, 4	; 4
     304:	08 95       	ret

00000306 <drivers>:
}

void drivers(uint8_t b_state)
{
	if (b_state)
     306:	88 23       	and	r24, r24
     308:	11 f0       	breq	.+4      	; 0x30e <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     30a:	2c 9a       	sbi	0x05, 4	; 5
     30c:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     30e:	2c 98       	cbi	0x05, 4	; 5
     310:	08 95       	ret

00000312 <manage_motor>:
	}
}

void manage_motor(ModuleValues_t * vals)
{
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
		if (vals->f32_batt_volt > 15.0) //if motor controller card powered
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e7       	ldi	r20, 0x70	; 112
     32a:	51 e4       	ldi	r21, 0x41	; 65
     32c:	68 85       	ldd	r22, Y+8	; 0x08
     32e:	79 85       	ldd	r23, Y+9	; 0x09
     330:	8a 85       	ldd	r24, Y+10	; 0x0a
     332:	9b 85       	ldd	r25, Y+11	; 0x0b
     334:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gesf2>
     338:	18 16       	cp	r1, r24
     33a:	0c f0       	brlt	.+2      	; 0x33e <manage_motor+0x2c>
     33c:	46 c0       	rjmp	.+140    	; 0x3ca <manage_motor+0xb8>
	{
		if (vals->motor_status == BRAKE)
     33e:	8e 89       	ldd	r24, Y+22	; 0x16
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	d9 f4       	brne	.+54     	; 0x37a <manage_motor+0x68>
		{
			vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     344:	84 ef       	ldi	r24, 0xF4	; 244
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	9d 8b       	std	Y+21, r25	; 0x15
     34a:	8c 8b       	std	Y+20, r24	; 0x14
			drivers(1); //drivers turn on
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	db df       	rcall	.-74     	; 0x306 <drivers>
			controller(-vals->u8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle);
     350:	c8 80       	ld	r12, Y
     352:	d9 80       	ldd	r13, Y+1	; 0x01
     354:	ea 80       	ldd	r14, Y+2	; 0x02
     356:	fb 80       	ldd	r15, Y+3	; 0x03
     358:	6a 89       	ldd	r22, Y+18	; 0x12
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	71 95       	neg	r23
     35e:	61 95       	neg	r22
     360:	71 09       	sbc	r23, r1
     362:	07 2e       	mov	r0, r23
     364:	00 0c       	add	r0, r0
     366:	88 0b       	sbc	r24, r24
     368:	99 0b       	sbc	r25, r25
     36a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatsisf>
     36e:	8e 01       	movw	r16, r28
     370:	0d 5e       	subi	r16, 0xED	; 237
     372:	1f 4f       	sbci	r17, 0xFF	; 255
     374:	a7 01       	movw	r20, r14
     376:	96 01       	movw	r18, r12
     378:	bd de       	rcall	.-646    	; 0xf4 <controller>
		}
	
		if (vals->motor_status == ACCEL)
     37a:	8e 89       	ldd	r24, Y+22	; 0x16
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	b1 f4       	brne	.+44     	; 0x3ac <manage_motor+0x9a>
		{
			vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     380:	84 ef       	ldi	r24, 0xF4	; 244
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	9d 8b       	std	Y+21, r25	; 0x15
			drivers(1); //drivers turn on
     386:	8c 8b       	std	Y+20, r24	; 0x14
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	bd df       	rcall	.-134    	; 0x306 <drivers>
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle);
     38c:	c8 80       	ld	r12, Y
     38e:	d9 80       	ldd	r13, Y+1	; 0x01
     390:	ea 80       	ldd	r14, Y+2	; 0x02
     392:	fb 80       	ldd	r15, Y+3	; 0x03
     394:	6a 89       	ldd	r22, Y+18	; 0x12
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatunsisf>
     3a0:	8e 01       	movw	r16, r28
     3a2:	0d 5e       	subi	r16, 0xED	; 237
     3a4:	1f 4f       	sbci	r17, 0xFF	; 255
     3a6:	a7 01       	movw	r20, r14
     3a8:	96 01       	movw	r18, r12
     3aa:	a4 de       	rcall	.-696    	; 0xf4 <controller>
		}
		if (vals->motor_status == IDLE)
     3ac:	8e 89       	ldd	r24, Y+22	; 0x16
     3ae:	81 11       	cpse	r24, r1
     3b0:	0f c0       	rjmp	.+30     	; 0x3d0 <manage_motor+0xbe>
				drivers(0);//drivers shutdown
				reset_I(); //reset integrator
			}else{
				vals->u16_watchdog -- ;
			}*/
			controller(0.0, vals->f32_motor_current,&vals->u8_duty_cycle);		
     3b2:	8e 01       	movw	r16, r28
     3b4:	0d 5e       	subi	r16, 0xED	; 237
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	28 81       	ld	r18, Y
     3ba:	39 81       	ldd	r19, Y+1	; 0x01
     3bc:	4a 81       	ldd	r20, Y+2	; 0x02
     3be:	5b 81       	ldd	r21, Y+3	; 0x03
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	cb 01       	movw	r24, r22
		}
	}else{
		drivers(0);//drivers shutdown
     3c6:	96 de       	rcall	.-724    	; 0xf4 <controller>
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <manage_motor+0xbe>
     3ca:	80 e0       	ldi	r24, 0x00	; 0
		reset_I(); //reset integrator
     3cc:	9c df       	rcall	.-200    	; 0x306 <drivers>
     3ce:	89 de       	rcall	.-750    	; 0xe2 <reset_I>
	}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	08 95       	ret

000003e2 <SPI_handler_0>:
}

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     3e8:	6a e3       	ldi	r22, 0x3A	; 58
     3ea:	71 e0       	ldi	r23, 0x01	; 1
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	82 d5       	rcall	.+2820   	; 0xef4 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     3f0:	21 e0       	ldi	r18, 0x01	; 1
     3f2:	43 e0       	ldi	r20, 0x03	; 3
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	67 e3       	ldi	r22, 0x37	; 55
     3f8:	71 e0       	ldi	r23, 0x01	; 1
     3fa:	8a e3       	ldi	r24, 0x3A	; 58
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 18 0a 	call	0x1430	; 0x1430 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     402:	e7 e3       	ldi	r30, 0x37	; 55
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	61 81       	ldd	r22, Z+1	; 0x01
     408:	6f 71       	andi	r22, 0x1F	; 31
     40a:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg);
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	76 2f       	mov	r23, r22
     410:	66 27       	eor	r22, r22
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	68 2b       	or	r22, r24
     416:	ce 01       	movw	r24, r28
     418:	44 d4       	rcall	.+2184   	; 0xca2 <handle_current_sensor>
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     426:	6a e3       	ldi	r22, 0x3A	; 58
     428:	71 e0       	ldi	r23, 0x01	; 1
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	63 d5       	rcall	.+2758   	; 0xef4 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	43 e0       	ldi	r20, 0x03	; 3
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	67 e3       	ldi	r22, 0x37	; 55
     436:	71 e0       	ldi	r23, 0x01	; 1
     438:	8a e3       	ldi	r24, 0x3A	; 58
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	f9 d7       	rcall	.+4082   	; 0x1430 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     43e:	e7 e3       	ldi	r30, 0x37	; 55
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	61 81       	ldd	r22, Z+1	; 0x01
     444:	6f 71       	andi	r22, 0x1F	; 31
     446:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg);
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	76 2f       	mov	r23, r22
     44c:	66 27       	eor	r22, r22
     44e:	82 81       	ldd	r24, Z+2	; 0x02
     450:	68 2b       	or	r22, r24
     452:	ce 01       	movw	r24, r28
     454:	26 d4       	rcall	.+2124   	; 0xca2 <handle_current_sensor>
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     462:	6a e3       	ldi	r22, 0x3A	; 58
     464:	71 e0       	ldi	r23, 0x01	; 1
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	45 d5       	rcall	.+2698   	; 0xef4 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	43 e0       	ldi	r20, 0x03	; 3
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	67 e3       	ldi	r22, 0x37	; 55
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	8a e3       	ldi	r24, 0x3A	; 58
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	db d7       	rcall	.+4022   	; 0x1430 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     47a:	e7 e3       	ldi	r30, 0x37	; 55
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	61 81       	ldd	r22, Z+1	; 0x01
     480:	6f 71       	andi	r22, 0x1F	; 31
     482:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	76 2f       	mov	r23, r22
     488:	66 27       	eor	r22, r22
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	68 2b       	or	r22, r24
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatunsisf>
     496:	23 e3       	ldi	r18, 0x33	; 51
     498:	33 e3       	ldi	r19, 0x33	; 51
     49a:	44 e8       	ldi	r20, 0x84	; 132
     49c:	52 e4       	ldi	r21, 0x42	; 66
     49e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divsf3>
     4a2:	24 ea       	ldi	r18, 0xA4	; 164
     4a4:	30 e7       	ldi	r19, 0x70	; 112
     4a6:	4d eb       	ldi	r20, 0xBD	; 189
     4a8:	5e e3       	ldi	r21, 0x3E	; 62
     4aa:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__subsf3>
     4ae:	68 83       	st	Y, r22
     4b0:	79 83       	std	Y+1, r23	; 0x01
     4b2:	8a 83       	std	Y+2, r24	; 0x02
     4b4:	9b 83       	std	Y+3, r25	; 0x03
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     4c2:	6a e3       	ldi	r22, 0x3A	; 58
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	15 d5       	rcall	.+2602   	; 0xef4 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     4ca:	21 e0       	ldi	r18, 0x01	; 1
     4cc:	43 e0       	ldi	r20, 0x03	; 3
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	67 e3       	ldi	r22, 0x37	; 55
     4d2:	71 e0       	ldi	r23, 0x01	; 1
     4d4:	8a e3       	ldi	r24, 0x3A	; 58
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	ab d7       	rcall	.+3926   	; 0x1430 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4da:	e7 e3       	ldi	r30, 0x37	; 55
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	61 81       	ldd	r22, Z+1	; 0x01
     4e0:	6f 71       	andi	r22, 0x1F	; 31
     4e2:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	76 2f       	mov	r23, r22
     4e8:	66 27       	eor	r22, r22
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	68 2b       	or	r22, r24
     4ee:	ce 01       	movw	r24, r28
     4f0:	48 d4       	rcall	.+2192   	; 0xd82 <handle_temp_sensor>
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <handle_can>:

///////////////////////  CAN  /////////////////////////


//recieving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	8c 01       	movw	r16, r24
     502:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     504:	cb 01       	movw	r24, r22
     506:	72 d6       	rcall	.+3300   	; 0x11ec <can_read_message_if_new>
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <handle_can+0x16>
     50c:	4f c0       	rjmp	.+158    	; 0x5ac <handle_can+0xb4>
		switch (rx->id){
     50e:	88 81       	ld	r24, Y
     510:	99 81       	ldd	r25, Y+1	; 0x01
     512:	80 31       	cpi	r24, 0x10	; 16
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	92 07       	cpc	r25, r18
     518:	11 f1       	breq	.+68     	; 0x55e <handle_can+0x66>
     51a:	80 33       	cpi	r24, 0x30	; 48
     51c:	92 40       	sbci	r25, 0x02	; 2
     51e:	09 f0       	breq	.+2      	; 0x522 <handle_can+0x2a>
     520:	45 c0       	rjmp	.+138    	; 0x5ac <handle_can+0xb4>
			case FORWARD_CAN_ID:
			
			if (rx->data.u8[3] > 10)
     522:	8e 81       	ldd	r24, Y+6	; 0x06
     524:	8b 30       	cpi	r24, 0x0B	; 11
     526:	a0 f0       	brcs	.+40     	; 0x550 <handle_can+0x58>
			{
				vals->motor_status = ACCEL ;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	f8 01       	movw	r30, r16
     52c:	86 8b       	std	Z+22, r24	; 0x16
				vals->u8_throttle_cmd = rx->data.u8[3]/10.0 ;
     52e:	6e 81       	ldd	r22, Y+6	; 0x06
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatsisf>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e2       	ldi	r20, 0x20	; 32
     540:	51 e4       	ldi	r21, 0x41	; 65
     542:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divsf3>
     546:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
     54a:	f8 01       	movw	r30, r16
     54c:	62 8b       	std	Z+18, r22	; 0x12
     54e:	2e c0       	rjmp	.+92     	; 0x5ac <handle_can+0xb4>
				} else {
				vals->motor_status = IDLE ;
     550:	f8 01       	movw	r30, r16
     552:	16 8a       	std	Z+22, r1	; 0x16
				vals->u8_throttle_cmd = 0;
     554:	12 8a       	std	Z+18, r1	; 0x12
			}
			
			if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	8a 31       	cpi	r24, 0x1A	; 26
     55a:	a8 f4       	brcc	.+42     	; 0x586 <handle_can+0x8e>
     55c:	27 c0       	rjmp	.+78     	; 0x5ac <handle_can+0xb4>
			
			
			break;
			
			case BRAKE_CAN_ID:
				vals->motor_status = BRAKE;
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	f8 01       	movw	r30, r16
     562:	86 8b       	std	Z+22, r24	; 0x16
				vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     564:	6d 81       	ldd	r22, Y+5	; 0x05
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatsisf>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e2       	ldi	r20, 0x20	; 32
     576:	51 e4       	ldi	r21, 0x41	; 65
     578:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divsf3>
     57c:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
     580:	f8 01       	movw	r30, r16
     582:	62 8b       	std	Z+18, r22	; 0x12
			break;
		}
	}
}
     584:	13 c0       	rjmp	.+38     	; 0x5ac <handle_can+0xb4>
				vals->u8_throttle_cmd = 0;
			}
			
			if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
			{
				vals->motor_status = BRAKE ;
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	f8 01       	movw	r30, r16
     58a:	86 8b       	std	Z+22, r24	; 0x16
				vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e2       	ldi	r20, 0x20	; 32
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divsf3>
     5a4:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
     5a8:	f8 01       	movw	r30, r16
     5aa:	62 8b       	std	Z+18, r22	; 0x12
				vals->motor_status = BRAKE;
				vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
			break;
		}
	}
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
	if(*send){
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 81       	ld	r18, Z
     5c6:	22 23       	and	r18, r18
     5c8:	61 f1       	breq	.+88     	; 0x622 <handle_motor_status_can_msg+0x6c>
     5ca:	eb 01       	movw	r28, r22
     5cc:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     5ce:	0f 2e       	mov	r0, r31
     5d0:	fb ed       	ldi	r31, 0xDB	; 219
     5d2:	ef 2e       	mov	r14, r31
     5d4:	f2 e0       	ldi	r31, 0x02	; 2
     5d6:	ff 2e       	mov	r15, r31
     5d8:	f0 2d       	mov	r31, r0
     5da:	8e 89       	ldd	r24, Y+22	; 0x16
     5dc:	f7 01       	movw	r30, r14
     5de:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = 0;
     5e0:	14 82       	std	Z+4, r1	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     5e2:	68 81       	ld	r22, Y
     5e4:	79 81       	ldd	r23, Y+1	; 0x01
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ea:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
     5ee:	f7 01       	movw	r30, r14
     5f0:	76 83       	std	Z+6, r23	; 0x06
     5f2:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = (uint16_t)(vals->f32_energy*1000) ;
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	4a e7       	ldi	r20, 0x7A	; 122
     5fa:	54 e4       	ldi	r21, 0x44	; 68
     5fc:	6c 85       	ldd	r22, Y+12	; 0x0c
     5fe:	7d 85       	ldd	r23, Y+13	; 0x0d
     600:	8e 85       	ldd	r24, Y+14	; 0x0e
     602:	9f 85       	ldd	r25, Y+15	; 0x0f
     604:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3>
     608:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
     60c:	f7 01       	movw	r30, r14
     60e:	70 87       	std	Z+8, r23	; 0x08
     610:	67 83       	std	Z+7, r22	; 0x07
		txFrame.data.u16[3] = vals->u8_car_speed;
     612:	89 89       	ldd	r24, Y+17	; 0x11
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	92 87       	std	Z+10, r25	; 0x0a
     618:	81 87       	std	Z+9, r24	; 0x09
		
		can_send_message(&txFrame);
     61a:	c7 01       	movw	r24, r14
     61c:	2a d6       	rcall	.+3156   	; 0x1272 <can_send_message>
		*send = 0;
     61e:	f8 01       	movw	r30, r16
     620:	10 82       	st	Z, r1
	}
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	08 95       	ret

00000630 <receive_uart>:

///////////////////  UART  ////////////////////

void receive_uart(ModuleValues_t * vals)
{
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	00 d0       	rcall	.+0      	; 0x63a <receive_uart+0xa>
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	ac 01       	movw	r20, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     640:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <rx0_Head>
     644:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <rx0_Tail>
	if(uart_AvailableBytes()!=0){
     648:	92 1b       	sub	r25, r18
     64a:	9f 71       	andi	r25, 0x1F	; 31
     64c:	59 f1       	breq	.+86     	; 0x6a4 <receive_uart+0x74>
		volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     64e:	8a 01       	movw	r16, r20
     650:	13 d1       	rcall	.+550    	; 0x878 <uart0_getint>
		uart_flush();
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
		if (u16_data_received >10 && u16_data_received <= 20)
     656:	95 d0       	rcall	.+298    	; 0x782 <uart0_flush>
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	0b 97       	sbiw	r24, 0x0b	; 11
     65e:	58 f0       	brcs	.+22     	; 0x676 <receive_uart+0x46>
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	45 97       	sbiw	r24, 0x15	; 21
		{
			vals->u8_throttle_cmd = u16_data_received-10 ;
     666:	38 f4       	brcc	.+14     	; 0x676 <receive_uart+0x46>
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	8a 50       	subi	r24, 0x0A	; 10
     66e:	f8 01       	movw	r30, r16
			vals->motor_status = BRAKE ;
     670:	82 8b       	std	Z+18, r24	; 0x12
     672:	82 e0       	ldi	r24, 0x02	; 2
		}
		if (u16_data_received>0 && u16_data_received <= 10)
     674:	86 8b       	std	Z+22, r24	; 0x16
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	89 2b       	or	r24, r25
     67c:	51 f0       	breq	.+20     	; 0x692 <receive_uart+0x62>
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	0b 97       	sbiw	r24, 0x0b	; 11
		{
			vals->u8_throttle_cmd = u16_data_received ;
     684:	30 f4       	brcc	.+12     	; 0x692 <receive_uart+0x62>
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	f8 01       	movw	r30, r16
			vals->motor_status = ACCEL;
     68c:	82 8b       	std	Z+18, r24	; 0x12
     68e:	81 e0       	ldi	r24, 0x01	; 1
		}
		if (u16_data_received == 0)
     690:	86 8b       	std	Z+22, r24	; 0x16
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	89 2b       	or	r24, r25
		{
			vals->u8_throttle_cmd = u16_data_received ;
     698:	29 f4       	brne	.+10     	; 0x6a4 <receive_uart+0x74>
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	f8 01       	movw	r30, r16
			vals->motor_status = IDLE;
     6a0:	82 8b       	std	Z+18, r24	; 0x12
		}
	}
     6a2:	16 8a       	std	Z+22, r1	; 0x16
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     6b2:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     6b4:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     6b6:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     6b8:	ea e6       	ldi	r30, 0x6A	; 106
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	8c 60       	ori	r24, 0x0C	; 12
     6c0:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     6c2:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     6c4:	ed 9a       	sbi	0x1d, 5	; 29
     6c6:	08 95       	ret

000006c8 <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint16_t u16_period) // period in ms
{
     6c8:	8f 92       	push	r8
     6ca:	9f 92       	push	r9
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	1f 92       	push	r1
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	6c 01       	movw	r12, r24
     6e8:	7b 01       	movw	r14, r22
     6ea:	8a 01       	movw	r16, r20
	volatile uint8_t u8_new_speed = (uint8_t)(((float)*u16_counter)*D_WHEEL*PI/N_MAG/u16_period); // speed calculated in mm/ms
     6ec:	fb 01       	movw	r30, r22
     6ee:	60 81       	ld	r22, Z
     6f0:	71 81       	ldd	r23, Z+1	; 0x01
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	fe d7       	rcall	.+4092   	; 0x16f4 <__floatunsisf>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	4a ef       	ldi	r20, 0xFA	; 250
     6fe:	53 e4       	ldi	r21, 0x43	; 67
     700:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3>
     704:	23 ec       	ldi	r18, 0xC3	; 195
     706:	35 ef       	ldi	r19, 0xF5	; 245
     708:	48 e4       	ldi	r20, 0x48	; 72
     70a:	50 e4       	ldi	r21, 0x40	; 64
     70c:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3>
     710:	4b 01       	movw	r8, r22
     712:	5c 01       	movw	r10, r24
     714:	b8 01       	movw	r22, r16
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	ec d7       	rcall	.+4056   	; 0x16f4 <__floatunsisf>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c5 01       	movw	r24, r10
     722:	b4 01       	movw	r22, r8
     724:	4e d7       	rcall	.+3740   	; 0x15c2 <__divsf3>
     726:	ba d7       	rcall	.+3956   	; 0x169c <__fixunssfsi>
     728:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	f6 01       	movw	r30, r12
     72e:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     730:	f7 01       	movw	r30, r14
     732:	11 82       	std	Z+1, r1	; 0x01
     734:	10 82       	st	Z, r1
}
     736:	0f 90       	pop	r0
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	08 95       	ret

00000752 <uart0_putc>:
     752:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <tx0_Head>
     756:	9f 5f       	subi	r25, 0xFF	; 255
     758:	9f 71       	andi	r25, 0x1F	; 31
     75a:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <tx0_Tail>
     75e:	92 17       	cp	r25, r18
     760:	e1 f3       	breq	.-8      	; 0x75a <uart0_putc+0x8>
     762:	e9 2f       	mov	r30, r25
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	e2 5b       	subi	r30, 0xB2	; 178
     768:	fc 4f       	sbci	r31, 0xFC	; 252
     76a:	80 83       	st	Z, r24
     76c:	2f b7       	in	r18, 0x3f	; 63
     76e:	f8 94       	cli
     770:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <tx0_Head>
     774:	e1 ec       	ldi	r30, 0xC1	; 193
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	80 62       	ori	r24, 0x20	; 32
     77c:	80 83       	st	Z, r24
     77e:	2f bf       	out	0x3f, r18	; 63
     780:	08 95       	ret

00000782 <uart0_flush>:
     782:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <tx0_Tail>
     786:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <tx0_Head>
     78a:	98 13       	cpse	r25, r24
     78c:	fa cf       	rjmp	.-12     	; 0x782 <uart0_flush>
     78e:	08 95       	ret

00000790 <uart1_putc>:
     790:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <tx1_Head>
     794:	9f 5f       	subi	r25, 0xFF	; 255
     796:	9f 71       	andi	r25, 0x1F	; 31
     798:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <tx1_Tail>
     79c:	92 17       	cp	r25, r18
     79e:	e1 f3       	breq	.-8      	; 0x798 <uart1_putc+0x8>
     7a0:	e9 2f       	mov	r30, r25
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	e7 5f       	subi	r30, 0xF7	; 247
     7a6:	fc 4f       	sbci	r31, 0xFC	; 252
     7a8:	80 83       	st	Z, r24
     7aa:	2f b7       	in	r18, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <tx1_Head>
     7b2:	e9 ec       	ldi	r30, 0xC9	; 201
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	80 62       	ori	r24, 0x20	; 32
     7ba:	80 83       	st	Z, r24
     7bc:	2f bf       	out	0x3f, r18	; 63
     7be:	08 95       	ret

000007c0 <uart_putchar>:
     7c0:	cf 93       	push	r28
     7c2:	c8 2f       	mov	r28, r24
     7c4:	fb 01       	movw	r30, r22
     7c6:	84 85       	ldd	r24, Z+12	; 0x0c
     7c8:	95 85       	ldd	r25, Z+13	; 0x0d
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	39 f0       	breq	.+14     	; 0x7dc <uart_putchar+0x1c>
     7ce:	ca 30       	cpi	r28, 0x0A	; 10
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <uart_putchar+0x16>
     7d2:	8d e0       	ldi	r24, 0x0D	; 13
     7d4:	be df       	rcall	.-132    	; 0x752 <uart0_putc>
     7d6:	8c 2f       	mov	r24, r28
     7d8:	bc df       	rcall	.-136    	; 0x752 <uart0_putc>
     7da:	06 c0       	rjmp	.+12     	; 0x7e8 <uart_putchar+0x28>
     7dc:	ca 30       	cpi	r28, 0x0A	; 10
     7de:	11 f4       	brne	.+4      	; 0x7e4 <uart_putchar+0x24>
     7e0:	8d e0       	ldi	r24, 0x0D	; 13
     7e2:	d6 df       	rcall	.-84     	; 0x790 <uart1_putc>
     7e4:	8c 2f       	mov	r24, r28
     7e6:	d4 df       	rcall	.-88     	; 0x790 <uart1_putc>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <uart0_getc>:
     7f0:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <rx0_Tail>
     7f4:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <rx0_Head>
     7f8:	89 17       	cp	r24, r25
     7fa:	59 f0       	breq	.+22     	; 0x812 <uart0_getc+0x22>
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	98 2f       	mov	r25, r24
     800:	9f 71       	andi	r25, 0x1F	; 31
     802:	e9 2f       	mov	r30, r25
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	ea 51       	subi	r30, 0x1A	; 26
     808:	fd 4f       	sbci	r31, 0xFD	; 253
     80a:	80 81       	ld	r24, Z
     80c:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <rx0_Tail>
     810:	08 95       	ret
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	08 95       	ret

00000816 <uart0_getlnToFirstWhiteSpace>:
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	7c 01       	movw	r14, r24
     824:	16 2f       	mov	r17, r22
     826:	e4 df       	rcall	.-56     	; 0x7f0 <uart0_getc>
     828:	f7 01       	movw	r30, r14
     82a:	80 83       	st	Z, r24
     82c:	81 32       	cpi	r24, 0x21	; 33
     82e:	d8 f3       	brcs	.-10     	; 0x826 <uart0_getlnToFirstWhiteSpace+0x10>
     830:	e7 01       	movw	r28, r14
     832:	21 96       	adiw	r28, 0x01	; 1
     834:	12 30       	cpi	r17, 0x02	; 2
     836:	c1 f0       	breq	.+48     	; 0x868 <uart0_getlnToFirstWhiteSpace+0x52>
     838:	13 50       	subi	r17, 0x03	; 3
     83a:	81 2f       	mov	r24, r17
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	02 96       	adiw	r24, 0x02	; 2
     840:	87 01       	movw	r16, r14
     842:	08 0f       	add	r16, r24
     844:	19 1f       	adc	r17, r25
     846:	d4 df       	rcall	.-88     	; 0x7f0 <uart0_getc>
     848:	88 83       	st	Y, r24
     84a:	88 23       	and	r24, r24
     84c:	e1 f3       	breq	.-8      	; 0x846 <uart0_getlnToFirstWhiteSpace+0x30>
     84e:	8d 30       	cpi	r24, 0x0D	; 13
     850:	21 f4       	brne	.+8      	; 0x85a <uart0_getlnToFirstWhiteSpace+0x44>
     852:	ce df       	rcall	.-100    	; 0x7f0 <uart0_getc>
     854:	88 23       	and	r24, r24
     856:	e9 f3       	breq	.-6      	; 0x852 <uart0_getlnToFirstWhiteSpace+0x3c>
     858:	07 c0       	rjmp	.+14     	; 0x868 <uart0_getlnToFirstWhiteSpace+0x52>
     85a:	81 32       	cpi	r24, 0x21	; 33
     85c:	28 f0       	brcs	.+10     	; 0x868 <uart0_getlnToFirstWhiteSpace+0x52>
     85e:	21 96       	adiw	r28, 0x01	; 1
     860:	0c 17       	cp	r16, r28
     862:	1d 07       	cpc	r17, r29
     864:	81 f7       	brne	.-32     	; 0x846 <uart0_getlnToFirstWhiteSpace+0x30>
     866:	e8 01       	movw	r28, r16
     868:	18 82       	st	Y, r1
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <uart0_getint>:
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	27 97       	sbiw	r28, 0x07	; 7
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	67 e0       	ldi	r22, 0x07	; 7
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	c1 df       	rcall	.-126    	; 0x816 <uart0_getlnToFirstWhiteSpace>
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	0e 94 9c 0c 	call	0x1938	; 0x1938 <atoi>
     89c:	27 96       	adiw	r28, 0x07	; 7
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <uart0_getData>:
     8ae:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <rx0_Tail>
     8b2:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <rx0_Head>
     8b6:	89 17       	cp	r24, r25
     8b8:	61 f0       	breq	.+24     	; 0x8d2 <uart0_getData+0x24>
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	8f 71       	andi	r24, 0x1F	; 31
     8be:	e8 2f       	mov	r30, r24
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	ea 51       	subi	r30, 0x1A	; 26
     8c4:	fd 4f       	sbci	r31, 0xFD	; 253
     8c6:	90 81       	ld	r25, Z
     8c8:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <rx0_Tail>
     8cc:	89 2f       	mov	r24, r25
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	9f ef       	ldi	r25, 0xFF	; 255
     8d6:	08 95       	ret

000008d8 <uart1_getData>:
     8d8:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <rx1_Tail>
     8dc:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <rx1_Head>
     8e0:	89 17       	cp	r24, r25
     8e2:	61 f0       	breq	.+24     	; 0x8fc <uart1_getData+0x24>
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	8f 71       	andi	r24, 0x1F	; 31
     8e8:	e8 2f       	mov	r30, r24
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	e6 5d       	subi	r30, 0xD6	; 214
     8ee:	fc 4f       	sbci	r31, 0xFC	; 252
     8f0:	90 81       	ld	r25, Z
     8f2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <rx1_Tail>
     8f6:	89 2f       	mov	r24, r25
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	08 95       	ret
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	9f ef       	ldi	r25, 0xFF	; 255
     900:	08 95       	ret

00000902 <uart_getchar>:
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	fc 01       	movw	r30, r24
     908:	84 85       	ldd	r24, Z+12	; 0x0c
     90a:	95 85       	ldd	r25, Z+13	; 0x0d
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	41 f0       	breq	.+16     	; 0x920 <uart_getchar+0x1e>
     910:	ce df       	rcall	.-100    	; 0x8ae <uart0_getData>
     912:	ec 01       	movw	r28, r24
     914:	99 23       	and	r25, r25
     916:	e4 f3       	brlt	.-8      	; 0x910 <uart_getchar+0xe>
     918:	1c df       	rcall	.-456    	; 0x752 <uart0_putc>
     91a:	ce 01       	movw	r24, r28
     91c:	99 27       	eor	r25, r25
     91e:	07 c0       	rjmp	.+14     	; 0x92e <uart_getchar+0x2c>
     920:	db df       	rcall	.-74     	; 0x8d8 <uart1_getData>
     922:	ec 01       	movw	r28, r24
     924:	99 23       	and	r25, r25
     926:	e4 f3       	brlt	.-8      	; 0x920 <uart_getchar+0x1e>
     928:	33 df       	rcall	.-410    	; 0x790 <uart1_putc>
     92a:	ce 01       	movw	r24, r28
     92c:	99 27       	eor	r25, r25
     92e:	99 27       	eor	r25, r25
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <__vector_22>:
     936:	0f 93       	push	r16
     938:	0f b7       	in	r16, 0x3f	; 63
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
     93e:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <tx0_Tail>
     942:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <tx0_Head>
     946:	e3 95       	inc	r30
     948:	ef 71       	andi	r30, 0x1F	; 31
     94a:	ef 13       	cpse	r30, r31
     94c:	05 c0       	rjmp	.+10     	; 0x958 <USART0_TX_CONTINUE>
     94e:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     952:	ff 7d       	andi	r31, 0xDF	; 223
     954:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000958 <USART0_TX_CONTINUE>:
     958:	e0 93 07 03 	sts	0x0307, r30	; 0x800307 <tx0_Tail>
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	e2 5b       	subi	r30, 0xB2	; 178
     960:	fc 4f       	sbci	r31, 0xFC	; 252
     962:	e0 81       	ld	r30, Z
     964:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000968 <USART0_TX_EXIT>:
     968:	ff 91       	pop	r31
     96a:	ef 91       	pop	r30
     96c:	0f bf       	out	0x3f, r16	; 63
     96e:	0f 91       	pop	r16
     970:	18 95       	reti

00000972 <__vector_21>:
     972:	0f 93       	push	r16
     974:	0f b7       	in	r16, 0x3f	; 63
     976:	9f 93       	push	r25
     978:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     97c:	ef 93       	push	r30
     97e:	ff 93       	push	r31
     980:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <rx0_Head>
     984:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <rx0_Tail>
     988:	e3 95       	inc	r30
     98a:	ef 71       	andi	r30, 0x1F	; 31
     98c:	fe 17       	cp	r31, r30
     98e:	31 f0       	breq	.+12     	; 0x99c <USART0_RX_EXIT>
     990:	e0 93 4a 03 	sts	0x034A, r30	; 0x80034a <rx0_Head>
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ea 51       	subi	r30, 0x1A	; 26
     998:	fd 4f       	sbci	r31, 0xFD	; 253
     99a:	90 83       	st	Z, r25

0000099c <USART0_RX_EXIT>:
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	9f 91       	pop	r25
     9a2:	0f bf       	out	0x3f, r16	; 63
     9a4:	0f 91       	pop	r16
     9a6:	18 95       	reti

000009a8 <__vector_33>:
     9a8:	0f 93       	push	r16
     9aa:	0f b7       	in	r16, 0x3f	; 63
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
     9b0:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <tx1_Tail>
     9b4:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <tx1_Head>
     9b8:	e3 95       	inc	r30
     9ba:	ef 71       	andi	r30, 0x1F	; 31
     9bc:	ef 13       	cpse	r30, r31
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <USART1_TX_CONTINUE>
     9c0:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     9c4:	ff 7d       	andi	r31, 0xDF	; 223
     9c6:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

000009ca <USART1_TX_CONTINUE>:
     9ca:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <tx1_Tail>
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e7 5f       	subi	r30, 0xF7	; 247
     9d2:	fc 4f       	sbci	r31, 0xFC	; 252
     9d4:	e0 81       	ld	r30, Z
     9d6:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

000009da <USART1_TX_EXIT>:
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	0f bf       	out	0x3f, r16	; 63
     9e0:	0f 91       	pop	r16
     9e2:	18 95       	reti

000009e4 <__vector_32>:
     9e4:	0f 93       	push	r16
     9e6:	0f b7       	in	r16, 0x3f	; 63
     9e8:	9f 93       	push	r25
     9ea:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
     9f2:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <rx1_Head>
     9f6:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <rx1_Tail>
     9fa:	e3 95       	inc	r30
     9fc:	ef 71       	andi	r30, 0x1F	; 31
     9fe:	fe 17       	cp	r31, r30
     a00:	31 f0       	breq	.+12     	; 0xa0e <USART1_RX_EXIT>
     a02:	e0 93 4c 03 	sts	0x034C, r30	; 0x80034c <rx1_Head>
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	e6 5d       	subi	r30, 0xD6	; 214
     a0a:	fc 4f       	sbci	r31, 0xFC	; 252
     a0c:	90 83       	st	Z, r25

00000a0e <USART1_RX_EXIT>:
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	9f 91       	pop	r25
     a14:	0f bf       	out	0x3f, r16	; 63
     a16:	0f 91       	pop	r16
     a18:	18 95       	reti

00000a1a <timer1_init_ts>:

//for speed
static uint16_t u16_speed_count = 0;

void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     a1a:	e1 e8       	ldi	r30, 0x81	; 129
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	83 60       	ori	r24, 0x03	; 3
     a22:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     a24:	80 81       	ld	r24, Z
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     a2a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a2e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     a32:	ef e6       	ldi	r30, 0x6F	; 111
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	82 60       	ori	r24, 0x02	; 2
     a3a:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     a3c:	8d e7       	ldi	r24, 0x7D	; 125
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a44:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a48:	08 95       	ret

00000a4a <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     a4a:	84 b5       	in	r24, 0x24	; 36
     a4c:	85 60       	ori	r24, 0x05	; 5
     a4e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     a50:	84 b5       	in	r24, 0x24	; 36
     a52:	88 60       	ori	r24, 0x08	; 8
     a54:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     a56:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     a58:	ee e6       	ldi	r30, 0x6E	; 110
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms
     a62:	87 e2       	ldi	r24, 0x27	; 39
     a64:	87 bd       	out	0x27, r24	; 39
     a66:	08 95       	ret

00000a68 <main>:
};

int main(void)	
{
	cli();
	pwm_init();
     a68:	f8 94       	cli
	can_init(0,0);
     a6a:	81 d4       	rcall	.+2306   	; 0x136e <pwm_init>
     a6c:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
	timer0_init_ts();
     a6e:	70 e0       	ldi	r23, 0x00	; 0
	speed_init();
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     a74:	66 d3       	rcall	.+1740   	; 0x1142 <can_init>
     a76:	d1 df       	rcall	.-94     	; 0xa1a <timer1_init_ts>
     a78:	e8 df       	rcall	.-48     	; 0xa4a <timer0_init_ts>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     a7a:	1b de       	rcall	.-970    	; 0x6b2 <speed_init>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     a7e:	c7 d4       	rcall	.+2446   	; 0x140e <spi_init>
     a80:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     a84:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     a88:	88 e9       	ldi	r24, 0x98	; 152
     a8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     a8e:	ee e6       	ldi	r30, 0x6E	; 110
	
	rgbled_init();
     a90:	f3 e0       	ldi	r31, 0x03	; 3
     a92:	84 e0       	ldi	r24, 0x04	; 4
	drivers_init();
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	93 83       	std	Z+3, r25	; 0x03
	sei();
	
	rgbled_turn_on(LED_BLUE);
     a98:	82 83       	std	Z+2, r24	; 0x02
     a9a:	91 83       	std	Z+1, r25	; 0x01
		
		handle_motor_status_can_msg(&send_can, &ComValues);
		handle_can(&ComValues, &rxFrame);
	
		//sends motor current and current cmd through USB
		printf("%i",ComValues.u8_car_speed);
     a9c:	80 83       	st	Z, r24
	
	rgbled_turn_on(LED_BLUE);

    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     a9e:	ac d4       	rcall	.+2392   	; 0x13f8 <rgbled_init>
     aa0:	30 dc       	rcall	.-1952   	; 0x302 <drivers_init>
     aa2:	78 94       	sei
     aa4:	80 e8       	ldi	r24, 0x80	; 128
     aa6:	ae d4       	rcall	.+2396   	; 0x1404 <rgbled_turn_on>
		handle_can(&ComValues, &rxFrame);
     aa8:	cb e2       	ldi	r28, 0x2B	; 43
     aaa:	d1 e0       	ldi	r29, 0x01	; 1
     aac:	62 e1       	ldi	r22, 0x12	; 18
     aae:	71 e0       	ldi	r23, 0x01	; 1
	
		//sends motor current and current cmd through USB
		printf("%i",ComValues.u8_car_speed);
     ab0:	8f e3       	ldi	r24, 0x3F	; 63
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	80 dd       	rcall	.-1280   	; 0x5b6 <handle_motor_status_can_msg>
     ab6:	60 ed       	ldi	r22, 0xD0	; 208
     ab8:	72 e0       	ldi	r23, 0x02	; 2
     aba:	82 e1       	ldi	r24, 0x12	; 18
     abc:	91 e0       	ldi	r25, 0x01	; 1
		printf(",");
     abe:	1c dd       	rcall	.-1480   	; 0x4f8 <handle_can>
     ac0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <ComValues+0x11>
		printf("%i",u16_speed_count);
     ac4:	1f 92       	push	r1
     ac6:	8f 93       	push	r24
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	5a d7       	rcall	.+3764   	; 0x1982 <printf>
     ace:	8c e2       	ldi	r24, 0x2C	; 44
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	6a d7       	rcall	.+3796   	; 0x19a8 <putchar>
     ad4:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <u16_speed_count+0x1>
		printf("\n");
     ad8:	8f 93       	push	r24
     ada:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u16_speed_count>
		printf("%u",ComValues.u8_throttle_cmd*1000);
		printf(",");
		printf("%u",(uint16_t)(ComValues.u8_duty_cycle*10.0));
		printf("\n");
		*/
		receive_uart(&ComValues);
     ade:	8f 93       	push	r24
     ae0:	df 93       	push	r29
     ae2:	cf 93       	push	r28
     ae4:	4e d7       	rcall	.+3740   	; 0x1982 <printf>
     ae6:	8a e0       	ldi	r24, 0x0A	; 10
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	5e d7       	rcall	.+3772   	; 0x19a8 <putchar>
     aec:	82 e1       	ldi	r24, 0x12	; 18
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	9f dd       	rcall	.-1218   	; 0x630 <receive_uart>
     af2:	8d b7       	in	r24, 0x3d	; 61
     af4:	9e b7       	in	r25, 0x3e	; 62
     af6:	08 96       	adiw	r24, 0x08	; 8
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	9e bf       	out	0x3e, r25	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	8d bf       	out	0x3d, r24	; 61
     b02:	d4 cf       	rjmp	.-88     	; 0xaac <main+0x44>

00000b04 <__vector_16>:
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	0f 92       	push	r0
     b0c:	11 24       	eor	r1, r1
     b0e:	0b b6       	in	r0, 0x3b	; 59
     b10:	0f 92       	push	r0
     b12:	ef 92       	push	r14
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	2f 93       	push	r18
     b1a:	3f 93       	push	r19
     b1c:	4f 93       	push	r20
     b1e:	5f 93       	push	r21
     b20:	6f 93       	push	r22
     b22:	7f 93       	push	r23
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
     b28:	af 93       	push	r26
     b2a:	bf 93       	push	r27
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
	
	if (can_sender_counter == 1) // every 10ms
     b30:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <can_sender_counter>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	b9 f4       	brne	.+46     	; 0xb66 <__vector_16+0x62>
	{
		//handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 10.0);
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;
     b38:	e2 e1       	ldi	r30, 0x12	; 18
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
     b3c:	00 85       	ldd	r16, Z+8	; 0x08
     b3e:	11 85       	ldd	r17, Z+9	; 0x09
     b40:	22 85       	ldd	r18, Z+10	; 0x0a
     b42:	33 85       	ldd	r19, Z+11	; 0x0b
     b44:	44 81       	ldd	r20, Z+4	; 0x04
     b46:	55 81       	ldd	r21, Z+5	; 0x05
     b48:	66 81       	ldd	r22, Z+6	; 0x06
     b4a:	77 81       	ldd	r23, Z+7	; 0x07
     b4c:	0f 2e       	mov	r0, r31
     b4e:	fa e0       	ldi	r31, 0x0A	; 10
     b50:	ef 2e       	mov	r14, r31
     b52:	f0 2d       	mov	r31, r0
     b54:	8e e1       	ldi	r24, 0x1E	; 30
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	96 d1       	rcall	.+812    	; 0xe86 <handle_joulemeter>
		send_can = 1;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <send_can>
		can_sender_counter = 0;
     b60:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <can_sender_counter>
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <__vector_16+0x68>
	} else {
		can_sender_counter ++;
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <can_sender_counter>
	}
	
	if (speed_handler_counter == 100) // every 1s
     b6c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <speed_handler_counter>
     b70:	84 36       	cpi	r24, 0x64	; 100
     b72:	51 f4       	brne	.+20     	; 0xb88 <__vector_16+0x84>
	{
		handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 1000);
     b74:	48 ee       	ldi	r20, 0xE8	; 232
     b76:	53 e0       	ldi	r21, 0x03	; 3
     b78:	6c e3       	ldi	r22, 0x3C	; 60
     b7a:	71 e0       	ldi	r23, 0x01	; 1
     b7c:	83 e2       	ldi	r24, 0x23	; 35
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	a3 dd       	rcall	.-1210   	; 0x6c8 <handle_speed_sensor>
		speed_handler_counter = 0;
     b82:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <speed_handler_counter>
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <__vector_16+0x8a>
		} else {
		speed_handler_counter ++;
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <speed_handler_counter>
	}
	
	manage_motor(&ComValues);
     b8e:	82 e1       	ldi	r24, 0x12	; 18
     b90:	91 e0       	ldi	r25, 0x01	; 1
}
     b92:	bf db       	rcall	.-2178   	; 0x312 <manage_motor>
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ef 90       	pop	r14
     bb2:	0f 90       	pop	r0
     bb4:	0b be       	out	0x3b, r0	; 59
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	0b b6       	in	r0, 0x3b	; 59
     bcc:	0f 92       	push	r0
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31

	if (u8_SPI_count == 4)
     be6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     bea:	84 30       	cpi	r24, 0x04	; 4
     bec:	31 f4       	brne	.+12     	; 0xbfa <__vector_12+0x3a>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
     bee:	82 e2       	ldi	r24, 0x22	; 34
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	64 dc       	rcall	.-1848   	; 0x4bc <SPI_handler_4>
		u8_SPI_count = 0 ;
     bf4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <u8_SPI_count>
     bf8:	12 c0       	rjmp	.+36     	; 0xc1e <__vector_12+0x5e>
	}
	
	if (u8_SPI_count == 3)
     bfa:	83 30       	cpi	r24, 0x03	; 3
     bfc:	21 f4       	brne	.+8      	; 0xc06 <__vector_12+0x46>
	{
		u8_SPI_count ++ ;
     bfe:	84 e0       	ldi	r24, 0x04	; 4
     c00:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
     c04:	18 c0       	rjmp	.+48     	; 0xc36 <__vector_12+0x76>
	}
	
	if (u8_SPI_count == 2)
     c06:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	41 f4       	brne	.+16     	; 0xc1e <__vector_12+0x5e>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
     c0e:	8a e1       	ldi	r24, 0x1A	; 26
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	24 dc       	rcall	.-1976   	; 0x45c <SPI_handler_2>
		u8_SPI_count ++ ;
     c14:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     c1e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c22:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
     c24:	41 f4       	brne	.+16     	; 0xc36 <__vector_12+0x76>
     c26:	86 e1       	ldi	r24, 0x16	; 22
     c28:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     c2a:	fa db       	rcall	.-2060   	; 0x420 <SPI_handler_1>
     c2c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c30:	8f 5f       	subi	r24, 0xFF	; 255
     c32:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
     c36:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
     c3a:	81 11       	cpse	r24, r1
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <__vector_12+0x8e>
     c3e:	82 e1       	ldi	r24, 0x12	; 18
     c40:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     c42:	cf db       	rcall	.-2146   	; 0x3e2 <SPI_handler_0>
     c44:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}
}
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0b be       	out	0x3b, r0	; 59
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_6>:


ISR(INT5_vect)
{
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
	u16_speed_count ++ ;
     c82:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u16_speed_count>
     c86:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <u16_speed_count+0x1>
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <u16_speed_count+0x1>
     c90:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u16_speed_count>
}
     c94:	9f 91       	pop	r25
     c96:	8f 91       	pop	r24
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.26
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	00 d0       	rcall	.+0      	; 0xcbc <handle_current_sensor+0x1a>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <handle_current_sensor+0x1c>
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	15 d5       	rcall	.+2602   	; 0x16f4 <__floatunsisf>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 ea       	ldi	r20, 0xA0	; 160
     cd0:	50 e4       	ldi	r21, 0x40	; 64
     cd2:	c6 d5       	rcall	.+2956   	; 0x1860 <__mulsf3>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	59 e3       	ldi	r21, 0x39	; 57
     cdc:	c1 d5       	rcall	.+2946   	; 0x1860 <__mulsf3>
     cde:	27 ed       	ldi	r18, 0xD7	; 215
     ce0:	33 ea       	ldi	r19, 0xA3	; 163
     ce2:	40 e1       	ldi	r20, 0x10	; 16
     ce4:	50 e4       	ldi	r21, 0x40	; 64
     ce6:	04 d4       	rcall	.+2056   	; 0x14f0 <__subsf3>
     ce8:	23 ec       	ldi	r18, 0xC3	; 195
     cea:	34 e6       	ldi	r19, 0x64	; 100
     cec:	4a e2       	ldi	r20, 0x2A	; 42
     cee:	5d e3       	ldi	r21, 0x3D	; 61
     cf0:	68 d4       	rcall	.+2256   	; 0x15c2 <__divsf3>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e4       	ldi	r20, 0x40	; 64
     cf8:	50 e4       	ldi	r21, 0x40	; 64
     cfa:	63 d4       	rcall	.+2246   	; 0x15c2 <__divsf3>
     cfc:	69 83       	std	Y+1, r22	; 0x01
     cfe:	7a 83       	std	Y+2, r23	; 0x02
     d00:	8b 83       	std	Y+3, r24	; 0x03
     d02:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current-1.76);// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     d04:	69 81       	ldd	r22, Y+1	; 0x01
     d06:	7a 81       	ldd	r23, Y+2	; 0x02
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	2e ea       	ldi	r18, 0xAE	; 174
     d0e:	37 e4       	ldi	r19, 0x47	; 71
     d10:	41 ee       	ldi	r20, 0xE1	; 225
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	ed d3       	rcall	.+2010   	; 0x14f0 <__subsf3>
     d16:	69 83       	std	Y+1, r22	; 0x01
     d18:	7a 83       	std	Y+2, r23	; 0x02
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	9c 83       	std	Y+4, r25	; 0x04
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
     d1e:	89 80       	ldd	r8, Y+1	; 0x01
     d20:	9a 80       	ldd	r9, Y+2	; 0x02
     d22:	ab 80       	ldd	r10, Y+3	; 0x03
     d24:	bc 80       	ldd	r11, Y+4	; 0x04
     d26:	26 e6       	ldi	r18, 0x66	; 102
     d28:	36 e6       	ldi	r19, 0x66	; 102
     d2a:	46 e6       	ldi	r20, 0x66	; 102
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	f8 01       	movw	r30, r16
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	93 d5       	rcall	.+2854   	; 0x1860 <__mulsf3>
     d3a:	6b 01       	movw	r12, r22
     d3c:	7c 01       	movw	r14, r24
     d3e:	2d ec       	ldi	r18, 0xCD	; 205
     d40:	3c ec       	ldi	r19, 0xCC	; 204
     d42:	4c ec       	ldi	r20, 0xCC	; 204
     d44:	5d e3       	ldi	r21, 0x3D	; 61
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	8a d5       	rcall	.+2836   	; 0x1860 <__mulsf3>
     d4c:	9b 01       	movw	r18, r22
     d4e:	ac 01       	movw	r20, r24
     d50:	c7 01       	movw	r24, r14
     d52:	b6 01       	movw	r22, r12
     d54:	ce d3       	rcall	.+1948   	; 0x14f2 <__addsf3>
     d56:	f8 01       	movw	r30, r16
     d58:	60 83       	st	Z, r22
     d5a:	71 83       	std	Z+1, r23	; 0x01
     d5c:	82 83       	std	Z+2, r24	; 0x02
     d5e:	93 83       	std	Z+3, r25	; 0x03
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	9f 90       	pop	r9
     d7e:	8f 90       	pop	r8
     d80:	08 95       	ret

00000d82 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <handle_temp_sensor+0xa>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <handle_temp_sensor+0xc>
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	ad d4       	rcall	.+2394   	; 0x16f4 <__floatunsisf>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 ea       	ldi	r20, 0xA0	; 160
     da0:	50 e4       	ldi	r21, 0x40	; 64
     da2:	5e d5       	rcall	.+2748   	; 0x1860 <__mulsf3>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	59 e3       	ldi	r21, 0x39	; 57
     dac:	59 d5       	rcall	.+2738   	; 0x1860 <__mulsf3>
     dae:	69 83       	std	Y+1, r22	; 0x01
     db0:	7a 83       	std	Y+2, r23	; 0x02
     db2:	8b 83       	std	Y+3, r24	; 0x03
     db4:	9c 83       	std	Y+4, r25	; 0x04
	// 0 -> 3.7V => T = 20*V-22
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit.
	
	if (f_sens_volt <= 3.7)
     db6:	69 81       	ldd	r22, Y+1	; 0x01
     db8:	7a 81       	ldd	r23, Y+2	; 0x02
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	2d ec       	ldi	r18, 0xCD	; 205
     dc0:	3c ec       	ldi	r19, 0xCC	; 204
     dc2:	4c e6       	ldi	r20, 0x6C	; 108
     dc4:	50 e4       	ldi	r21, 0x40	; 64
     dc6:	f9 d3       	rcall	.+2034   	; 0x15ba <__cmpsf2>
     dc8:	18 16       	cp	r1, r24
     dca:	8c f0       	brlt	.+34     	; 0xdee <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     dcc:	69 81       	ldd	r22, Y+1	; 0x01
     dce:	7a 81       	ldd	r23, Y+2	; 0x02
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 ea       	ldi	r20, 0xA0	; 160
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	41 d5       	rcall	.+2690   	; 0x1860 <__mulsf3>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 eb       	ldi	r20, 0xB0	; 176
     de4:	51 e4       	ldi	r21, 0x41	; 65
     de6:	84 d3       	rcall	.+1800   	; 0x14f0 <__subsf3>
     de8:	59 d4       	rcall	.+2226   	; 0x169c <__fixunssfsi>
     dea:	f8 01       	movw	r30, r16
     dec:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     dee:	69 81       	ldd	r22, Y+1	; 0x01
     df0:	7a 81       	ldd	r23, Y+2	; 0x02
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	26 e6       	ldi	r18, 0x66	; 102
     df8:	36 e6       	ldi	r19, 0x66	; 102
     dfa:	46 e9       	ldi	r20, 0x96	; 150
     dfc:	50 e4       	ldi	r21, 0x40	; 64
     dfe:	dd d3       	rcall	.+1978   	; 0x15ba <__cmpsf2>
     e00:	18 16       	cp	r1, r24
     e02:	e4 f0       	brlt	.+56     	; 0xe3c <handle_temp_sensor+0xba>
     e04:	69 81       	ldd	r22, Y+1	; 0x01
     e06:	7a 81       	ldd	r23, Y+2	; 0x02
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	2d ec       	ldi	r18, 0xCD	; 205
     e0e:	3c ec       	ldi	r19, 0xCC	; 204
     e10:	4c e6       	ldi	r20, 0x6C	; 108
     e12:	50 e4       	ldi	r21, 0x40	; 64
     e14:	21 d5       	rcall	.+2626   	; 0x1858 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     e16:	18 16       	cp	r1, r24
     e18:	8c f4       	brge	.+34     	; 0xe3c <handle_temp_sensor+0xba>
     e1a:	69 81       	ldd	r22, Y+1	; 0x01
     e1c:	7a 81       	ldd	r23, Y+2	; 0x02
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4e e5       	ldi	r20, 0x5E	; 94
     e28:	52 e4       	ldi	r21, 0x42	; 66
     e2a:	1a d5       	rcall	.+2612   	; 0x1860 <__mulsf3>
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e8       	ldi	r19, 0x80	; 128
     e30:	4b e1       	ldi	r20, 0x1B	; 27
     e32:	53 e4       	ldi	r21, 0x43	; 67
     e34:	5d d3       	rcall	.+1722   	; 0x14f0 <__subsf3>
     e36:	32 d4       	rcall	.+2148   	; 0x169c <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     e38:	f8 01       	movw	r30, r16
     e3a:	60 83       	st	Z, r22
     e3c:	69 81       	ldd	r22, Y+1	; 0x01
     e3e:	7a 81       	ldd	r23, Y+2	; 0x02
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	26 e6       	ldi	r18, 0x66	; 102
     e46:	36 e6       	ldi	r19, 0x66	; 102
     e48:	46 e9       	ldi	r20, 0x96	; 150
     e4a:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     e4c:	05 d5       	rcall	.+2570   	; 0x1858 <__gesf2>
     e4e:	18 16       	cp	r1, r24
     e50:	8c f4       	brge	.+34     	; 0xe74 <handle_temp_sensor+0xf2>
     e52:	69 81       	ldd	r22, Y+1	; 0x01
     e54:	7a 81       	ldd	r23, Y+2	; 0x02
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	48 e4       	ldi	r20, 0x48	; 72
     e60:	53 e4       	ldi	r21, 0x43	; 67
     e62:	fe d4       	rcall	.+2556   	; 0x1860 <__mulsf3>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	42 e5       	ldi	r20, 0x52	; 82
     e6a:	54 e4       	ldi	r21, 0x44	; 68
     e6c:	41 d3       	rcall	.+1666   	; 0x14f0 <__subsf3>
     e6e:	16 d4       	rcall	.+2092   	; 0x169c <__fixunssfsi>
	}
}
     e70:	f8 01       	movw	r30, r16
     e72:	60 83       	st	Z, r22
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
     e86:	8f 92       	push	r8
     e88:	9f 92       	push	r9
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	ef 92       	push	r14
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
     e9a:	4a 01       	movw	r8, r20
     e9c:	5b 01       	movw	r10, r22
     e9e:	c9 01       	movw	r24, r18
     ea0:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
     ea2:	a5 01       	movw	r20, r10
     ea4:	94 01       	movw	r18, r8
     ea6:	dc d4       	rcall	.+2488   	; 0x1860 <__mulsf3>
     ea8:	4b 01       	movw	r8, r22
     eaa:	5c 01       	movw	r10, r24
     eac:	6e 2d       	mov	r22, r14
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	1f d4       	rcall	.+2110   	; 0x16f4 <__floatunsisf>
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	c5 01       	movw	r24, r10
     ebc:	b4 01       	movw	r22, r8
     ebe:	d0 d4       	rcall	.+2464   	; 0x1860 <__mulsf3>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a e7       	ldi	r20, 0x7A	; 122
     ec6:	54 e4       	ldi	r21, 0x44	; 68
     ec8:	7c d3       	rcall	.+1784   	; 0x15c2 <__divsf3>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	68 81       	ld	r22, Y
     ed0:	79 81       	ldd	r23, Y+1	; 0x01
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	0d d3       	rcall	.+1562   	; 0x14f2 <__addsf3>
     ed8:	68 83       	st	Y, r22
     eda:	79 83       	std	Y+1, r23	; 0x01
     edc:	8a 83       	std	Y+2, r24	; 0x02
     ede:	9b 83       	std	Y+3, r25	; 0x03
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ef 90       	pop	r14
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	08 95       	ret

00000ef4 <Set_ADC_Channel_ext>:
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	88 30       	cpi	r24, 0x08	; 8
     ef8:	91 05       	cpc	r25, r1
     efa:	88 f5       	brcc	.+98     	; 0xf5e <Set_ADC_Channel_ext+0x6a>
     efc:	fc 01       	movw	r30, r24
     efe:	e6 5b       	subi	r30, 0xB6	; 182
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	11 c5       	rjmp	.+2594   	; 0x1926 <__tablejump2__>
     f04:	86 e0       	ldi	r24, 0x06	; 6
     f06:	fb 01       	movw	r30, r22
     f08:	80 83       	st	Z, r24
     f0a:	11 82       	std	Z+1, r1	; 0x01
     f0c:	08 95       	ret
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	fb 01       	movw	r30, r22
     f12:	80 83       	st	Z, r24
     f14:	80 e4       	ldi	r24, 0x40	; 64
     f16:	81 83       	std	Z+1, r24	; 0x01
     f18:	08 95       	ret
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	fb 01       	movw	r30, r22
     f1e:	80 83       	st	Z, r24
     f20:	80 e8       	ldi	r24, 0x80	; 128
     f22:	81 83       	std	Z+1, r24	; 0x01
     f24:	08 95       	ret
     f26:	86 e0       	ldi	r24, 0x06	; 6
     f28:	fb 01       	movw	r30, r22
     f2a:	80 83       	st	Z, r24
     f2c:	80 ec       	ldi	r24, 0xC0	; 192
     f2e:	81 83       	std	Z+1, r24	; 0x01
     f30:	08 95       	ret
     f32:	87 e0       	ldi	r24, 0x07	; 7
     f34:	fb 01       	movw	r30, r22
     f36:	80 83       	st	Z, r24
     f38:	11 82       	std	Z+1, r1	; 0x01
     f3a:	08 95       	ret
     f3c:	87 e0       	ldi	r24, 0x07	; 7
     f3e:	fb 01       	movw	r30, r22
     f40:	80 83       	st	Z, r24
     f42:	80 e4       	ldi	r24, 0x40	; 64
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 95       	ret
     f48:	87 e0       	ldi	r24, 0x07	; 7
     f4a:	fb 01       	movw	r30, r22
     f4c:	80 83       	st	Z, r24
     f4e:	80 e8       	ldi	r24, 0x80	; 128
     f50:	81 83       	std	Z+1, r24	; 0x01
     f52:	08 95       	ret
     f54:	87 e0       	ldi	r24, 0x07	; 7
     f56:	fb 01       	movw	r30, r22
     f58:	80 83       	st	Z, r24
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	81 83       	std	Z+1, r24	; 0x01
     f5e:	08 95       	ret

00000f60 <__vector_18>:
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	0b b6       	in	r0, 0x3b	; 59
     f6c:	0f 92       	push	r0
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	8f 93       	push	r24
     f7a:	9f 93       	push	r25
     f7c:	af 93       	push	r26
     f7e:	bf 93       	push	r27
     f80:	ef 93       	push	r30
     f82:	ff 93       	push	r31
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	1f 92       	push	r1
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     f92:	80 ff       	sbrs	r24, 0
     f94:	47 c0       	rjmp	.+142    	; 0x1024 <__vector_18+0xc4>
     f96:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     f9a:	90 ff       	sbrs	r25, 0
     f9c:	43 c0       	rjmp	.+134    	; 0x1024 <__vector_18+0xc4>
     f9e:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     fa2:	ee ee       	ldi	r30, 0xEE	; 238
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	80 81       	ld	r24, Z
     fac:	8f 7b       	andi	r24, 0xBF	; 191
     fae:	80 83       	st	Z, r24
     fb0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tx_off>
     fb4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <tx_on>
     fb8:	98 17       	cp	r25, r24
     fba:	89 f1       	breq	.+98     	; 0x101e <__vector_18+0xbe>
     fbc:	8f 70       	andi	r24, 0x0F	; 15
     fbe:	2b e0       	ldi	r18, 0x0B	; 11
     fc0:	82 9f       	mul	r24, r18
     fc2:	c0 01       	movw	r24, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	fc 01       	movw	r30, r24
     fc8:	e8 50       	subi	r30, 0x08	; 8
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	20 81       	ld	r18, Z
     fce:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     fd2:	20 81       	ld	r18, Z
     fd4:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     fd8:	21 81       	ldd	r18, Z+1	; 0x01
     fda:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     fde:	23 81       	ldd	r18, Z+3	; 0x03
     fe0:	aa ef       	ldi	r26, 0xFA	; 250
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	2c 93       	st	X, r18
     fe6:	24 81       	ldd	r18, Z+4	; 0x04
     fe8:	2c 93       	st	X, r18
     fea:	25 81       	ldd	r18, Z+5	; 0x05
     fec:	2c 93       	st	X, r18
     fee:	26 81       	ldd	r18, Z+6	; 0x06
     ff0:	2c 93       	st	X, r18
     ff2:	27 81       	ldd	r18, Z+7	; 0x07
     ff4:	2c 93       	st	X, r18
     ff6:	20 85       	ldd	r18, Z+8	; 0x08
     ff8:	2c 93       	st	X, r18
     ffa:	21 85       	ldd	r18, Z+9	; 0x09
     ffc:	2c 93       	st	X, r18
     ffe:	22 85       	ldd	r18, Z+10	; 0x0a
    1000:	2c 93       	st	X, r18
    1002:	fc 01       	movw	r30, r24
    1004:	e6 50       	subi	r30, 0x06	; 6
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	80 81       	ld	r24, Z
    100a:	8f 70       	andi	r24, 0x0F	; 15
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1012:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tx_off>
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <tx_off>
    101c:	7d c0       	rjmp	.+250    	; 0x1118 <__stack+0x19>
    101e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tx_busy>
    1022:	7a c0       	rjmp	.+244    	; 0x1118 <__stack+0x19>
    1024:	81 ff       	sbrs	r24, 1
    1026:	78 c0       	rjmp	.+240    	; 0x1118 <__stack+0x19>
    1028:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    102c:	81 ff       	sbrs	r24, 1
    102e:	74 c0       	rjmp	.+232    	; 0x1118 <__stack+0x19>
    1030:	80 e1       	ldi	r24, 0x10	; 16
    1032:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1036:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rx_on>
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rx_off>
    1042:	29 1b       	sub	r18, r25
    1044:	31 09       	sbc	r19, r1
    1046:	2f 77       	andi	r18, 0x7F	; 127
    1048:	33 27       	eor	r19, r19
    104a:	20 31       	cpi	r18, 0x10	; 16
    104c:	31 05       	cpc	r19, r1
    104e:	0c f0       	brlt	.+2      	; 0x1052 <__vector_18+0xf2>
    1050:	58 c0       	rjmp	.+176    	; 0x1102 <__stack+0x3>
    1052:	e8 2f       	mov	r30, r24
    1054:	ef 70       	andi	r30, 0x0F	; 15
    1056:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    105a:	2e 2f       	mov	r18, r30
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	4b e0       	ldi	r20, 0x0B	; 11
    1060:	e4 9f       	mul	r30, r20
    1062:	f0 01       	movw	r30, r0
    1064:	11 24       	eor	r1, r1
    1066:	e8 5b       	subi	r30, 0xB8	; 184
    1068:	fe 4f       	sbci	r31, 0xFE	; 254
    106a:	9f 70       	andi	r25, 0x0F	; 15
    106c:	42 81       	ldd	r20, Z+2	; 0x02
    106e:	40 7f       	andi	r20, 0xF0	; 240
    1070:	94 2b       	or	r25, r20
    1072:	92 83       	std	Z+2, r25	; 0x02
    1074:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1078:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    107c:	40 7e       	andi	r20, 0xE0	; 224
    107e:	97 70       	andi	r25, 0x07	; 7
    1080:	94 2b       	or	r25, r20
    1082:	90 83       	st	Z, r25
    1084:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	aa ef       	ldi	r26, 0xFA	; 250
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	9c 91       	ld	r25, X
    1090:	93 83       	std	Z+3, r25	; 0x03
    1092:	9c 91       	ld	r25, X
    1094:	94 83       	std	Z+4, r25	; 0x04
    1096:	9c 91       	ld	r25, X
    1098:	95 83       	std	Z+5, r25	; 0x05
    109a:	9c 91       	ld	r25, X
    109c:	96 83       	std	Z+6, r25	; 0x06
    109e:	9c 91       	ld	r25, X
    10a0:	97 83       	std	Z+7, r25	; 0x07
    10a2:	9c 91       	ld	r25, X
    10a4:	90 87       	std	Z+8, r25	; 0x08
    10a6:	9c 91       	ld	r25, X
    10a8:	91 87       	std	Z+9, r25	; 0x09
    10aa:	9c 91       	ld	r25, X
    10ac:	92 87       	std	Z+10, r25	; 0x0a
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_on>
    10b4:	40 81       	ld	r20, Z
    10b6:	42 95       	swap	r20
    10b8:	46 95       	lsr	r20
    10ba:	47 70       	andi	r20, 0x07	; 7
    10bc:	51 81       	ldd	r21, Z+1	; 0x01
    10be:	65 2f       	mov	r22, r21
    10c0:	66 0f       	add	r22, r22
    10c2:	66 0f       	add	r22, r22
    10c4:	66 0f       	add	r22, r22
    10c6:	86 2f       	mov	r24, r22
    10c8:	84 2b       	or	r24, r20
    10ca:	95 2f       	mov	r25, r21
    10cc:	92 95       	swap	r25
    10ce:	96 95       	lsr	r25
    10d0:	97 70       	andi	r25, 0x07	; 7
    10d2:	89 2b       	or	r24, r25
    10d4:	b1 f4       	brne	.+44     	; 0x1102 <__stack+0x3>
    10d6:	8b e0       	ldi	r24, 0x0B	; 11
    10d8:	82 9f       	mul	r24, r18
    10da:	f0 01       	movw	r30, r0
    10dc:	83 9f       	mul	r24, r19
    10de:	f0 0d       	add	r31, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	e8 5b       	subi	r30, 0xB8	; 184
    10e4:	fe 4f       	sbci	r31, 0xFE	; 254
    10e6:	83 81       	ldd	r24, Z+3	; 0x03
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	59 f4       	brne	.+22     	; 0x1102 <__stack+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    10ec:	98 e0       	ldi	r25, 0x08	; 8
    10ee:	88 e1       	ldi	r24, 0x18	; 24
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	a8 95       	wdr
    10f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <__stack+0x1>
    1102:	ee ee       	ldi	r30, 0xEE	; 238
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	80 81       	ld	r24, Z
    110e:	8f 7d       	andi	r24, 0xDF	; 223
    1110:	80 83       	st	Z, r24
    1112:	80 e8       	ldi	r24, 0x80	; 128
    1114:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1118:	0f 90       	pop	r0
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	6f 91       	pop	r22
    112c:	5f 91       	pop	r21
    112e:	4f 91       	pop	r20
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0b be       	out	0x3b, r0	; 59
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <can_init>:
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	e8 ed       	ldi	r30, 0xD8	; 216
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	20 83       	st	Z, r18
    114e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1152:	2c e0       	ldi	r18, 0x0C	; 12
    1154:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1158:	27 e3       	ldi	r18, 0x37	; 55
    115a:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    115e:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    1162:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
    1166:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    116a:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    116e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1172:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1176:	cd ee       	ldi	r28, 0xED	; 237
    1178:	d0 e0       	ldi	r29, 0x00	; 0
    117a:	18 82       	st	Y, r1
    117c:	ae ee       	ldi	r26, 0xEE	; 238
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	1c 92       	st	X, r1
    1182:	20 e1       	ldi	r18, 0x10	; 16
    1184:	28 83       	st	Y, r18
    1186:	1c 92       	st	X, r1
    1188:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
    118c:	28 2f       	mov	r18, r24
    118e:	22 95       	swap	r18
    1190:	22 0f       	add	r18, r18
    1192:	20 7e       	andi	r18, 0xE0	; 224
    1194:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    11a8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    11ac:	86 2f       	mov	r24, r22
    11ae:	82 95       	swap	r24
    11b0:	88 0f       	add	r24, r24
    11b2:	80 7e       	andi	r24, 0xE0	; 224
    11b4:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    11b8:	76 95       	lsr	r23
    11ba:	67 95       	ror	r22
    11bc:	76 95       	lsr	r23
    11be:	67 95       	ror	r22
    11c0:	76 95       	lsr	r23
    11c2:	67 95       	ror	r22
    11c4:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    11c8:	80 e8       	ldi	r24, 0x80	; 128
    11ca:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    11d4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    11d8:	80 eb       	ldi	r24, 0xB0	; 176
    11da:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	80 83       	st	Z, r24
    11e2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <reset>
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <can_read_message_if_new>:
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
    11f2:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <rx_off>
    11f6:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <rx_on>
    11fa:	24 17       	cp	r18, r20
    11fc:	89 f1       	breq	.+98     	; 0x1260 <can_read_message_if_new+0x74>
    11fe:	a4 2f       	mov	r26, r20
    1200:	af 70       	andi	r26, 0x0F	; 15
    1202:	8b e0       	ldi	r24, 0x0B	; 11
    1204:	a8 9f       	mul	r26, r24
    1206:	b0 01       	movw	r22, r0
    1208:	11 24       	eor	r1, r1
    120a:	fb 01       	movw	r30, r22
    120c:	e8 5b       	subi	r30, 0xB8	; 184
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	20 81       	ld	r18, Z
    1212:	22 95       	swap	r18
    1214:	26 95       	lsr	r18
    1216:	27 70       	andi	r18, 0x07	; 7
    1218:	31 81       	ldd	r19, Z+1	; 0x01
    121a:	53 2f       	mov	r21, r19
    121c:	55 0f       	add	r21, r21
    121e:	55 0f       	add	r21, r21
    1220:	55 0f       	add	r21, r21
    1222:	25 2b       	or	r18, r21
    1224:	32 95       	swap	r19
    1226:	36 95       	lsr	r19
    1228:	37 70       	andi	r19, 0x07	; 7
    122a:	28 83       	st	Y, r18
    122c:	39 83       	std	Y+1, r19	; 0x01
    122e:	fb 01       	movw	r30, r22
    1230:	e6 5b       	subi	r30, 0xB6	; 182
    1232:	fe 4f       	sbci	r31, 0xFE	; 254
    1234:	20 81       	ld	r18, Z
    1236:	2f 70       	andi	r18, 0x0F	; 15
    1238:	2a 83       	std	Y+2, r18	; 0x02
    123a:	22 23       	and	r18, r18
    123c:	99 f0       	breq	.+38     	; 0x1264 <can_read_message_if_new+0x78>
    123e:	db 01       	movw	r26, r22
    1240:	a5 5b       	subi	r26, 0xB5	; 181
    1242:	be 4f       	sbci	r27, 0xFE	; 254
    1244:	fe 01       	movw	r30, r28
    1246:	33 96       	adiw	r30, 0x03	; 3
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	2d 5f       	subi	r18, 0xFD	; 253
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	ce 01       	movw	r24, r28
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	2d 91       	ld	r18, X+
    1256:	21 93       	st	Z+, r18
    1258:	e8 17       	cp	r30, r24
    125a:	f9 07       	cpc	r31, r25
    125c:	d9 f7       	brne	.-10     	; 0x1254 <can_read_message_if_new+0x68>
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <can_read_message_if_new+0x78>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	04 c0       	rjmp	.+8      	; 0x126c <can_read_message_if_new+0x80>
    1264:	4f 5f       	subi	r20, 0xFF	; 255
    1266:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <rx_off>
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	08 95       	ret

00001272 <can_send_message>:
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	fc 01       	movw	r30, r24
    1278:	ab ed       	ldi	r26, 0xDB	; 219
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	8c 91       	ld	r24, X
    127e:	8f 77       	andi	r24, 0x7F	; 127
    1280:	8c 93       	st	X, r24
    1282:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <tx_busy>
    1286:	81 11       	cpse	r24, r1
    1288:	27 c0       	rjmp	.+78     	; 0x12d8 <can_send_message+0x66>
    128a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    128e:	80 81       	ld	r24, Z
    1290:	82 95       	swap	r24
    1292:	88 0f       	add	r24, r24
    1294:	80 7e       	andi	r24, 0xE0	; 224
    1296:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	96 95       	lsr	r25
    12a4:	87 95       	ror	r24
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    12ae:	df 01       	movw	r26, r30
    12b0:	13 96       	adiw	r26, 0x03	; 3
    12b2:	9f 01       	movw	r18, r30
    12b4:	25 5f       	subi	r18, 0xF5	; 245
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	ca ef       	ldi	r28, 0xFA	; 250
    12ba:	d0 e0       	ldi	r29, 0x00	; 0
    12bc:	9d 91       	ld	r25, X+
    12be:	98 83       	st	Y, r25
    12c0:	a2 17       	cp	r26, r18
    12c2:	b3 07       	cpc	r27, r19
    12c4:	d9 f7       	brne	.-10     	; 0x12bc <can_send_message+0x4a>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <tx_busy>
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	80 64       	ori	r24, 0x40	; 64
    12d0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	43 c0       	rjmp	.+134    	; 0x135e <can_send_message+0xec>
    12d8:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <tx_on>
    12dc:	82 2f       	mov	r24, r18
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <tx_off>
    12e4:	83 1b       	sub	r24, r19
    12e6:	91 09       	sbc	r25, r1
    12e8:	8f 77       	andi	r24, 0x7F	; 127
    12ea:	99 27       	eor	r25, r25
    12ec:	40 97       	sbiw	r24, 0x10	; 16
    12ee:	b1 f1       	breq	.+108    	; 0x135c <can_send_message+0xea>
    12f0:	a2 2f       	mov	r26, r18
    12f2:	af 70       	andi	r26, 0x0F	; 15
    12f4:	8b e0       	ldi	r24, 0x0B	; 11
    12f6:	a8 9f       	mul	r26, r24
    12f8:	d0 01       	movw	r26, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	ed 01       	movw	r28, r26
    12fe:	c8 50       	subi	r28, 0x08	; 8
    1300:	de 4f       	sbci	r29, 0xFE	; 254
    1302:	80 81       	ld	r24, Z
    1304:	98 2f       	mov	r25, r24
    1306:	92 95       	swap	r25
    1308:	99 0f       	add	r25, r25
    130a:	90 7e       	andi	r25, 0xE0	; 224
    130c:	88 81       	ld	r24, Y
    130e:	8f 71       	andi	r24, 0x1F	; 31
    1310:	89 2b       	or	r24, r25
    1312:	88 83       	st	Y, r24
    1314:	80 81       	ld	r24, Z
    1316:	98 2f       	mov	r25, r24
    1318:	96 95       	lsr	r25
    131a:	96 95       	lsr	r25
    131c:	96 95       	lsr	r25
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	80 7e       	andi	r24, 0xE0	; 224
    1322:	89 2b       	or	r24, r25
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	92 95       	swap	r25
    132a:	99 0f       	add	r25, r25
    132c:	90 7e       	andi	r25, 0xE0	; 224
    132e:	8f 71       	andi	r24, 0x1F	; 31
    1330:	89 2b       	or	r24, r25
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	98 2f       	mov	r25, r24
    1338:	9f 70       	andi	r25, 0x0F	; 15
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	80 7f       	andi	r24, 0xF0	; 240
    133e:	89 2b       	or	r24, r25
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	a5 50       	subi	r26, 0x05	; 5
    1344:	be 4f       	sbci	r27, 0xFE	; 254
    1346:	33 96       	adiw	r30, 0x03	; 3
    1348:	88 e0       	ldi	r24, 0x08	; 8
    134a:	01 90       	ld	r0, Z+
    134c:	0d 92       	st	X+, r0
    134e:	8a 95       	dec	r24
    1350:	e1 f7       	brne	.-8      	; 0x134a <can_send_message+0xd8>
    1352:	2f 5f       	subi	r18, 0xFF	; 255
    1354:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <tx_on>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	01 c0       	rjmp	.+2      	; 0x135e <can_send_message+0xec>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	eb ed       	ldi	r30, 0xDB	; 219
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	90 81       	ld	r25, Z
    1364:	90 68       	ori	r25, 0x80	; 128
    1366:	90 83       	st	Z, r25
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	08 95       	ret

0000136e <pwm_init>:
    136e:	8e b1       	in	r24, 0x0e	; 14
    1370:	87 7e       	andi	r24, 0xE7	; 231
    1372:	8e b9       	out	0x0e, r24	; 14
    1374:	8d b1       	in	r24, 0x0d	; 13
    1376:	88 61       	ori	r24, 0x18	; 24
    1378:	8d b9       	out	0x0d, r24	; 13
    137a:	a1 e9       	ldi	r26, 0x91	; 145
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	8c 91       	ld	r24, X
    1380:	88 61       	ori	r24, 0x18	; 24
    1382:	8c 93       	st	X, r24
    1384:	e0 e9       	ldi	r30, 0x90	; 144
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	82 60       	ori	r24, 0x02	; 2
    138c:	80 83       	st	Z, r24
    138e:	80 81       	ld	r24, Z
    1390:	8e 7f       	andi	r24, 0xFE	; 254
    1392:	80 83       	st	Z, r24
    1394:	80 81       	ld	r24, Z
    1396:	80 68       	ori	r24, 0x80	; 128
    1398:	80 83       	st	Z, r24
    139a:	80 81       	ld	r24, Z
    139c:	8f 7b       	andi	r24, 0xBF	; 191
    139e:	80 83       	st	Z, r24
    13a0:	80 81       	ld	r24, Z
    13a2:	80 62       	ori	r24, 0x20	; 32
    13a4:	80 83       	st	Z, r24
    13a6:	80 81       	ld	r24, Z
    13a8:	80 61       	ori	r24, 0x10	; 16
    13aa:	80 83       	st	Z, r24
    13ac:	8c 91       	ld	r24, X
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	8c 93       	st	X, r24
    13b2:	8c 91       	ld	r24, X
    13b4:	89 7f       	andi	r24, 0xF9	; 249
    13b6:	8c 93       	st	X, r24
    13b8:	e6 e9       	ldi	r30, 0x96	; 150
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	89 e9       	ldi	r24, 0x99	; 153
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	91 83       	std	Z+1, r25	; 0x01
    13c2:	80 83       	st	Z, r24
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	93 d1       	rcall	.+806    	; 0x16f4 <__floatunsisf>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	44 d2       	rcall	.+1160   	; 0x1860 <__mulsf3>
    13d8:	5c d1       	rcall	.+696    	; 0x1692 <__fixsfsi>
    13da:	e8 e9       	ldi	r30, 0x98	; 152
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	71 83       	std	Z+1, r23	; 0x01
    13e0:	60 83       	st	Z, r22
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    13ea:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    13ee:	08 95       	ret

000013f0 <rgbled_turn_off>:
    13f0:	95 b1       	in	r25, 0x05	; 5
    13f2:	89 2b       	or	r24, r25
    13f4:	85 b9       	out	0x05, r24	; 5
    13f6:	08 95       	ret

000013f8 <rgbled_init>:
    13f8:	84 b1       	in	r24, 0x04	; 4
    13fa:	80 6e       	ori	r24, 0xE0	; 224
    13fc:	84 b9       	out	0x04, r24	; 4
    13fe:	80 ee       	ldi	r24, 0xE0	; 224
    1400:	f7 cf       	rjmp	.-18     	; 0x13f0 <rgbled_turn_off>
    1402:	08 95       	ret

00001404 <rgbled_turn_on>:
    1404:	95 b1       	in	r25, 0x05	; 5
    1406:	80 95       	com	r24
    1408:	98 23       	and	r25, r24
    140a:	95 b9       	out	0x05, r25	; 5
    140c:	08 95       	ret

0000140e <spi_init>:
    140e:	94 b1       	in	r25, 0x04	; 4
    1410:	97 60       	ori	r25, 0x07	; 7
    1412:	94 b9       	out	0x04, r25	; 4
    1414:	82 fb       	bst	r24, 2
    1416:	99 27       	eor	r25, r25
    1418:	90 f9       	bld	r25, 0
    141a:	28 2f       	mov	r18, r24
    141c:	22 70       	andi	r18, 0x02	; 2
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	80 65       	ori	r24, 0x50	; 80
    1422:	82 2b       	or	r24, r18
    1424:	8c bd       	out	0x2c, r24	; 44
    1426:	8c b5       	in	r24, 0x2c	; 44
    1428:	83 7f       	andi	r24, 0xF3	; 243
    142a:	8c bd       	out	0x2c, r24	; 44
    142c:	9d bd       	out	0x2d, r25	; 45
    142e:	08 95       	ret

00001430 <spi_trancieve>:
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
    1436:	28 98       	cbi	0x05, 0	; 5
    1438:	41 15       	cp	r20, r1
    143a:	51 05       	cpc	r21, r1
    143c:	c1 f0       	breq	.+48     	; 0x146e <spi_trancieve+0x3e>
    143e:	fb 01       	movw	r30, r22
    1440:	dc 01       	movw	r26, r24
    1442:	46 0f       	add	r20, r22
    1444:	57 1f       	adc	r21, r23
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	20 97       	sbiw	r28, 0x00	; 0
    144a:	11 f0       	breq	.+4      	; 0x1450 <spi_trancieve+0x20>
    144c:	9c 91       	ld	r25, X
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <spi_trancieve+0x22>
    1450:	98 2f       	mov	r25, r24
    1452:	9e bd       	out	0x2e, r25	; 46
    1454:	0d b4       	in	r0, 0x2d	; 45
    1456:	07 fe       	sbrs	r0, 7
    1458:	fd cf       	rjmp	.-6      	; 0x1454 <spi_trancieve+0x24>
    145a:	61 15       	cp	r22, r1
    145c:	71 05       	cpc	r23, r1
    145e:	11 f0       	breq	.+4      	; 0x1464 <spi_trancieve+0x34>
    1460:	9e b5       	in	r25, 0x2e	; 46
    1462:	90 83       	st	Z, r25
    1464:	31 96       	adiw	r30, 0x01	; 1
    1466:	11 96       	adiw	r26, 0x01	; 1
    1468:	e4 17       	cp	r30, r20
    146a:	f5 07       	cpc	r31, r21
    146c:	69 f7       	brne	.-38     	; 0x1448 <spi_trancieve+0x18>
    146e:	21 11       	cpse	r18, r1
    1470:	28 9a       	sbi	0x05, 0	; 5
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <__vector_17>:
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	0b b6       	in	r0, 0x3b	; 59
    1484:	0f 92       	push	r0
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
    149c:	a8 ec       	ldi	r26, 0xC8	; 200
    149e:	b2 e0       	ldi	r27, 0x02	; 2
    14a0:	e8 ea       	ldi	r30, 0xA8	; 168
    14a2:	f2 e0       	ldi	r31, 0x02	; 2
    14a4:	28 ec       	ldi	r18, 0xC8	; 200
    14a6:	32 e0       	ldi	r19, 0x02	; 2
    14a8:	8d 91       	ld	r24, X+
    14aa:	88 23       	and	r24, r24
    14ac:	59 f0       	breq	.+22     	; 0x14c4 <__vector_17+0x4c>
    14ae:	40 81       	ld	r20, Z
    14b0:	51 81       	ldd	r21, Z+1	; 0x01
    14b2:	62 81       	ldd	r22, Z+2	; 0x02
    14b4:	73 81       	ldd	r23, Z+3	; 0x03
    14b6:	50 5e       	subi	r21, 0xE0	; 224
    14b8:	6f 4f       	sbci	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	40 83       	st	Z, r20
    14be:	51 83       	std	Z+1, r21	; 0x01
    14c0:	62 83       	std	Z+2, r22	; 0x02
    14c2:	73 83       	std	Z+3, r23	; 0x03
    14c4:	34 96       	adiw	r30, 0x04	; 4
    14c6:	e2 17       	cp	r30, r18
    14c8:	f3 07       	cpc	r31, r19
    14ca:	71 f7       	brne	.-36     	; 0x14a8 <__vector_17+0x30>
    14cc:	ff 91       	pop	r31
    14ce:	ef 91       	pop	r30
    14d0:	bf 91       	pop	r27
    14d2:	af 91       	pop	r26
    14d4:	8f 91       	pop	r24
    14d6:	7f 91       	pop	r23
    14d8:	6f 91       	pop	r22
    14da:	5f 91       	pop	r21
    14dc:	4f 91       	pop	r20
    14de:	3f 91       	pop	r19
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	0b be       	out	0x3b, r0	; 59
    14e6:	0f 90       	pop	r0
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	0f 90       	pop	r0
    14ec:	1f 90       	pop	r1
    14ee:	18 95       	reti

000014f0 <__subsf3>:
    14f0:	50 58       	subi	r21, 0x80	; 128

000014f2 <__addsf3>:
    14f2:	bb 27       	eor	r27, r27
    14f4:	aa 27       	eor	r26, r26
    14f6:	0e d0       	rcall	.+28     	; 0x1514 <__addsf3x>
    14f8:	75 c1       	rjmp	.+746    	; 0x17e4 <__fp_round>
    14fa:	66 d1       	rcall	.+716    	; 0x17c8 <__fp_pscA>
    14fc:	30 f0       	brcs	.+12     	; 0x150a <__addsf3+0x18>
    14fe:	6b d1       	rcall	.+726    	; 0x17d6 <__fp_pscB>
    1500:	20 f0       	brcs	.+8      	; 0x150a <__addsf3+0x18>
    1502:	31 f4       	brne	.+12     	; 0x1510 <__addsf3+0x1e>
    1504:	9f 3f       	cpi	r25, 0xFF	; 255
    1506:	11 f4       	brne	.+4      	; 0x150c <__addsf3+0x1a>
    1508:	1e f4       	brtc	.+6      	; 0x1510 <__addsf3+0x1e>
    150a:	5b c1       	rjmp	.+694    	; 0x17c2 <__fp_nan>
    150c:	0e f4       	brtc	.+2      	; 0x1510 <__addsf3+0x1e>
    150e:	e0 95       	com	r30
    1510:	e7 fb       	bst	r30, 7
    1512:	51 c1       	rjmp	.+674    	; 0x17b6 <__fp_inf>

00001514 <__addsf3x>:
    1514:	e9 2f       	mov	r30, r25
    1516:	77 d1       	rcall	.+750    	; 0x1806 <__fp_split3>
    1518:	80 f3       	brcs	.-32     	; 0x14fa <__addsf3+0x8>
    151a:	ba 17       	cp	r27, r26
    151c:	62 07       	cpc	r22, r18
    151e:	73 07       	cpc	r23, r19
    1520:	84 07       	cpc	r24, r20
    1522:	95 07       	cpc	r25, r21
    1524:	18 f0       	brcs	.+6      	; 0x152c <__addsf3x+0x18>
    1526:	71 f4       	brne	.+28     	; 0x1544 <__addsf3x+0x30>
    1528:	9e f5       	brtc	.+102    	; 0x1590 <__addsf3x+0x7c>
    152a:	8f c1       	rjmp	.+798    	; 0x184a <__fp_zero>
    152c:	0e f4       	brtc	.+2      	; 0x1530 <__addsf3x+0x1c>
    152e:	e0 95       	com	r30
    1530:	0b 2e       	mov	r0, r27
    1532:	ba 2f       	mov	r27, r26
    1534:	a0 2d       	mov	r26, r0
    1536:	0b 01       	movw	r0, r22
    1538:	b9 01       	movw	r22, r18
    153a:	90 01       	movw	r18, r0
    153c:	0c 01       	movw	r0, r24
    153e:	ca 01       	movw	r24, r20
    1540:	a0 01       	movw	r20, r0
    1542:	11 24       	eor	r1, r1
    1544:	ff 27       	eor	r31, r31
    1546:	59 1b       	sub	r21, r25
    1548:	99 f0       	breq	.+38     	; 0x1570 <__addsf3x+0x5c>
    154a:	59 3f       	cpi	r21, 0xF9	; 249
    154c:	50 f4       	brcc	.+20     	; 0x1562 <__addsf3x+0x4e>
    154e:	50 3e       	cpi	r21, 0xE0	; 224
    1550:	68 f1       	brcs	.+90     	; 0x15ac <__addsf3x+0x98>
    1552:	1a 16       	cp	r1, r26
    1554:	f0 40       	sbci	r31, 0x00	; 0
    1556:	a2 2f       	mov	r26, r18
    1558:	23 2f       	mov	r18, r19
    155a:	34 2f       	mov	r19, r20
    155c:	44 27       	eor	r20, r20
    155e:	58 5f       	subi	r21, 0xF8	; 248
    1560:	f3 cf       	rjmp	.-26     	; 0x1548 <__addsf3x+0x34>
    1562:	46 95       	lsr	r20
    1564:	37 95       	ror	r19
    1566:	27 95       	ror	r18
    1568:	a7 95       	ror	r26
    156a:	f0 40       	sbci	r31, 0x00	; 0
    156c:	53 95       	inc	r21
    156e:	c9 f7       	brne	.-14     	; 0x1562 <__addsf3x+0x4e>
    1570:	7e f4       	brtc	.+30     	; 0x1590 <__addsf3x+0x7c>
    1572:	1f 16       	cp	r1, r31
    1574:	ba 0b       	sbc	r27, r26
    1576:	62 0b       	sbc	r22, r18
    1578:	73 0b       	sbc	r23, r19
    157a:	84 0b       	sbc	r24, r20
    157c:	ba f0       	brmi	.+46     	; 0x15ac <__addsf3x+0x98>
    157e:	91 50       	subi	r25, 0x01	; 1
    1580:	a1 f0       	breq	.+40     	; 0x15aa <__addsf3x+0x96>
    1582:	ff 0f       	add	r31, r31
    1584:	bb 1f       	adc	r27, r27
    1586:	66 1f       	adc	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	88 1f       	adc	r24, r24
    158c:	c2 f7       	brpl	.-16     	; 0x157e <__addsf3x+0x6a>
    158e:	0e c0       	rjmp	.+28     	; 0x15ac <__addsf3x+0x98>
    1590:	ba 0f       	add	r27, r26
    1592:	62 1f       	adc	r22, r18
    1594:	73 1f       	adc	r23, r19
    1596:	84 1f       	adc	r24, r20
    1598:	48 f4       	brcc	.+18     	; 0x15ac <__addsf3x+0x98>
    159a:	87 95       	ror	r24
    159c:	77 95       	ror	r23
    159e:	67 95       	ror	r22
    15a0:	b7 95       	ror	r27
    15a2:	f7 95       	ror	r31
    15a4:	9e 3f       	cpi	r25, 0xFE	; 254
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <__addsf3x+0x96>
    15a8:	b3 cf       	rjmp	.-154    	; 0x1510 <__addsf3+0x1e>
    15aa:	93 95       	inc	r25
    15ac:	88 0f       	add	r24, r24
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <__addsf3x+0x9e>
    15b0:	99 27       	eor	r25, r25
    15b2:	ee 0f       	add	r30, r30
    15b4:	97 95       	ror	r25
    15b6:	87 95       	ror	r24
    15b8:	08 95       	ret

000015ba <__cmpsf2>:
    15ba:	d9 d0       	rcall	.+434    	; 0x176e <__fp_cmp>
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <__cmpsf2+0x6>
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	08 95       	ret

000015c2 <__divsf3>:
    15c2:	0c d0       	rcall	.+24     	; 0x15dc <__divsf3x>
    15c4:	0f c1       	rjmp	.+542    	; 0x17e4 <__fp_round>
    15c6:	07 d1       	rcall	.+526    	; 0x17d6 <__fp_pscB>
    15c8:	40 f0       	brcs	.+16     	; 0x15da <__divsf3+0x18>
    15ca:	fe d0       	rcall	.+508    	; 0x17c8 <__fp_pscA>
    15cc:	30 f0       	brcs	.+12     	; 0x15da <__divsf3+0x18>
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <__divsf3+0x16>
    15d0:	5f 3f       	cpi	r21, 0xFF	; 255
    15d2:	19 f0       	breq	.+6      	; 0x15da <__divsf3+0x18>
    15d4:	f0 c0       	rjmp	.+480    	; 0x17b6 <__fp_inf>
    15d6:	51 11       	cpse	r21, r1
    15d8:	39 c1       	rjmp	.+626    	; 0x184c <__fp_szero>
    15da:	f3 c0       	rjmp	.+486    	; 0x17c2 <__fp_nan>

000015dc <__divsf3x>:
    15dc:	14 d1       	rcall	.+552    	; 0x1806 <__fp_split3>
    15de:	98 f3       	brcs	.-26     	; 0x15c6 <__divsf3+0x4>

000015e0 <__divsf3_pse>:
    15e0:	99 23       	and	r25, r25
    15e2:	c9 f3       	breq	.-14     	; 0x15d6 <__divsf3+0x14>
    15e4:	55 23       	and	r21, r21
    15e6:	b1 f3       	breq	.-20     	; 0x15d4 <__divsf3+0x12>
    15e8:	95 1b       	sub	r25, r21
    15ea:	55 0b       	sbc	r21, r21
    15ec:	bb 27       	eor	r27, r27
    15ee:	aa 27       	eor	r26, r26
    15f0:	62 17       	cp	r22, r18
    15f2:	73 07       	cpc	r23, r19
    15f4:	84 07       	cpc	r24, r20
    15f6:	38 f0       	brcs	.+14     	; 0x1606 <__divsf3_pse+0x26>
    15f8:	9f 5f       	subi	r25, 0xFF	; 255
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	22 0f       	add	r18, r18
    15fe:	33 1f       	adc	r19, r19
    1600:	44 1f       	adc	r20, r20
    1602:	aa 1f       	adc	r26, r26
    1604:	a9 f3       	breq	.-22     	; 0x15f0 <__divsf3_pse+0x10>
    1606:	33 d0       	rcall	.+102    	; 0x166e <__divsf3_pse+0x8e>
    1608:	0e 2e       	mov	r0, r30
    160a:	3a f0       	brmi	.+14     	; 0x161a <__divsf3_pse+0x3a>
    160c:	e0 e8       	ldi	r30, 0x80	; 128
    160e:	30 d0       	rcall	.+96     	; 0x1670 <__divsf3_pse+0x90>
    1610:	91 50       	subi	r25, 0x01	; 1
    1612:	50 40       	sbci	r21, 0x00	; 0
    1614:	e6 95       	lsr	r30
    1616:	00 1c       	adc	r0, r0
    1618:	ca f7       	brpl	.-14     	; 0x160c <__divsf3_pse+0x2c>
    161a:	29 d0       	rcall	.+82     	; 0x166e <__divsf3_pse+0x8e>
    161c:	fe 2f       	mov	r31, r30
    161e:	27 d0       	rcall	.+78     	; 0x166e <__divsf3_pse+0x8e>
    1620:	66 0f       	add	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	88 1f       	adc	r24, r24
    1626:	bb 1f       	adc	r27, r27
    1628:	26 17       	cp	r18, r22
    162a:	37 07       	cpc	r19, r23
    162c:	48 07       	cpc	r20, r24
    162e:	ab 07       	cpc	r26, r27
    1630:	b0 e8       	ldi	r27, 0x80	; 128
    1632:	09 f0       	breq	.+2      	; 0x1636 <__divsf3_pse+0x56>
    1634:	bb 0b       	sbc	r27, r27
    1636:	80 2d       	mov	r24, r0
    1638:	bf 01       	movw	r22, r30
    163a:	ff 27       	eor	r31, r31
    163c:	93 58       	subi	r25, 0x83	; 131
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
    1640:	2a f0       	brmi	.+10     	; 0x164c <__divsf3_pse+0x6c>
    1642:	9e 3f       	cpi	r25, 0xFE	; 254
    1644:	51 05       	cpc	r21, r1
    1646:	68 f0       	brcs	.+26     	; 0x1662 <__divsf3_pse+0x82>
    1648:	b6 c0       	rjmp	.+364    	; 0x17b6 <__fp_inf>
    164a:	00 c1       	rjmp	.+512    	; 0x184c <__fp_szero>
    164c:	5f 3f       	cpi	r21, 0xFF	; 255
    164e:	ec f3       	brlt	.-6      	; 0x164a <__divsf3_pse+0x6a>
    1650:	98 3e       	cpi	r25, 0xE8	; 232
    1652:	dc f3       	brlt	.-10     	; 0x164a <__divsf3_pse+0x6a>
    1654:	86 95       	lsr	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b7 95       	ror	r27
    165c:	f7 95       	ror	r31
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	c9 f7       	brne	.-14     	; 0x1654 <__divsf3_pse+0x74>
    1662:	88 0f       	add	r24, r24
    1664:	91 1d       	adc	r25, r1
    1666:	96 95       	lsr	r25
    1668:	87 95       	ror	r24
    166a:	97 f9       	bld	r25, 7
    166c:	08 95       	ret
    166e:	e1 e0       	ldi	r30, 0x01	; 1
    1670:	66 0f       	add	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	bb 1f       	adc	r27, r27
    1678:	62 17       	cp	r22, r18
    167a:	73 07       	cpc	r23, r19
    167c:	84 07       	cpc	r24, r20
    167e:	ba 07       	cpc	r27, r26
    1680:	20 f0       	brcs	.+8      	; 0x168a <__divsf3_pse+0xaa>
    1682:	62 1b       	sub	r22, r18
    1684:	73 0b       	sbc	r23, r19
    1686:	84 0b       	sbc	r24, r20
    1688:	ba 0b       	sbc	r27, r26
    168a:	ee 1f       	adc	r30, r30
    168c:	88 f7       	brcc	.-30     	; 0x1670 <__divsf3_pse+0x90>
    168e:	e0 95       	com	r30
    1690:	08 95       	ret

00001692 <__fixsfsi>:
    1692:	04 d0       	rcall	.+8      	; 0x169c <__fixunssfsi>
    1694:	68 94       	set
    1696:	b1 11       	cpse	r27, r1
    1698:	d9 c0       	rjmp	.+434    	; 0x184c <__fp_szero>
    169a:	08 95       	ret

0000169c <__fixunssfsi>:
    169c:	bc d0       	rcall	.+376    	; 0x1816 <__fp_splitA>
    169e:	88 f0       	brcs	.+34     	; 0x16c2 <__fixunssfsi+0x26>
    16a0:	9f 57       	subi	r25, 0x7F	; 127
    16a2:	90 f0       	brcs	.+36     	; 0x16c8 <__fixunssfsi+0x2c>
    16a4:	b9 2f       	mov	r27, r25
    16a6:	99 27       	eor	r25, r25
    16a8:	b7 51       	subi	r27, 0x17	; 23
    16aa:	a0 f0       	brcs	.+40     	; 0x16d4 <__fixunssfsi+0x38>
    16ac:	d1 f0       	breq	.+52     	; 0x16e2 <__fixunssfsi+0x46>
    16ae:	66 0f       	add	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	1a f0       	brmi	.+6      	; 0x16be <__fixunssfsi+0x22>
    16b8:	ba 95       	dec	r27
    16ba:	c9 f7       	brne	.-14     	; 0x16ae <__fixunssfsi+0x12>
    16bc:	12 c0       	rjmp	.+36     	; 0x16e2 <__fixunssfsi+0x46>
    16be:	b1 30       	cpi	r27, 0x01	; 1
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <__fixunssfsi+0x46>
    16c2:	c3 d0       	rcall	.+390    	; 0x184a <__fp_zero>
    16c4:	b1 e0       	ldi	r27, 0x01	; 1
    16c6:	08 95       	ret
    16c8:	c0 c0       	rjmp	.+384    	; 0x184a <__fp_zero>
    16ca:	67 2f       	mov	r22, r23
    16cc:	78 2f       	mov	r23, r24
    16ce:	88 27       	eor	r24, r24
    16d0:	b8 5f       	subi	r27, 0xF8	; 248
    16d2:	39 f0       	breq	.+14     	; 0x16e2 <__fixunssfsi+0x46>
    16d4:	b9 3f       	cpi	r27, 0xF9	; 249
    16d6:	cc f3       	brlt	.-14     	; 0x16ca <__fixunssfsi+0x2e>
    16d8:	86 95       	lsr	r24
    16da:	77 95       	ror	r23
    16dc:	67 95       	ror	r22
    16de:	b3 95       	inc	r27
    16e0:	d9 f7       	brne	.-10     	; 0x16d8 <__fixunssfsi+0x3c>
    16e2:	3e f4       	brtc	.+14     	; 0x16f2 <__fixunssfsi+0x56>
    16e4:	90 95       	com	r25
    16e6:	80 95       	com	r24
    16e8:	70 95       	com	r23
    16ea:	61 95       	neg	r22
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	08 95       	ret

000016f4 <__floatunsisf>:
    16f4:	e8 94       	clt
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <__floatsisf+0x12>

000016f8 <__floatsisf>:
    16f8:	97 fb       	bst	r25, 7
    16fa:	3e f4       	brtc	.+14     	; 0x170a <__floatsisf+0x12>
    16fc:	90 95       	com	r25
    16fe:	80 95       	com	r24
    1700:	70 95       	com	r23
    1702:	61 95       	neg	r22
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	99 23       	and	r25, r25
    170c:	a9 f0       	breq	.+42     	; 0x1738 <__floatsisf+0x40>
    170e:	f9 2f       	mov	r31, r25
    1710:	96 e9       	ldi	r25, 0x96	; 150
    1712:	bb 27       	eor	r27, r27
    1714:	93 95       	inc	r25
    1716:	f6 95       	lsr	r31
    1718:	87 95       	ror	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	b7 95       	ror	r27
    1720:	f1 11       	cpse	r31, r1
    1722:	f8 cf       	rjmp	.-16     	; 0x1714 <__floatsisf+0x1c>
    1724:	fa f4       	brpl	.+62     	; 0x1764 <__floatsisf+0x6c>
    1726:	bb 0f       	add	r27, r27
    1728:	11 f4       	brne	.+4      	; 0x172e <__floatsisf+0x36>
    172a:	60 ff       	sbrs	r22, 0
    172c:	1b c0       	rjmp	.+54     	; 0x1764 <__floatsisf+0x6c>
    172e:	6f 5f       	subi	r22, 0xFF	; 255
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	8f 4f       	sbci	r24, 0xFF	; 255
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <__floatsisf+0x6c>
    1738:	88 23       	and	r24, r24
    173a:	11 f0       	breq	.+4      	; 0x1740 <__floatsisf+0x48>
    173c:	96 e9       	ldi	r25, 0x96	; 150
    173e:	11 c0       	rjmp	.+34     	; 0x1762 <__floatsisf+0x6a>
    1740:	77 23       	and	r23, r23
    1742:	21 f0       	breq	.+8      	; 0x174c <__floatsisf+0x54>
    1744:	9e e8       	ldi	r25, 0x8E	; 142
    1746:	87 2f       	mov	r24, r23
    1748:	76 2f       	mov	r23, r22
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <__floatsisf+0x5e>
    174c:	66 23       	and	r22, r22
    174e:	71 f0       	breq	.+28     	; 0x176c <__floatsisf+0x74>
    1750:	96 e8       	ldi	r25, 0x86	; 134
    1752:	86 2f       	mov	r24, r22
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	2a f0       	brmi	.+10     	; 0x1764 <__floatsisf+0x6c>
    175a:	9a 95       	dec	r25
    175c:	66 0f       	add	r22, r22
    175e:	77 1f       	adc	r23, r23
    1760:	88 1f       	adc	r24, r24
    1762:	da f7       	brpl	.-10     	; 0x175a <__floatsisf+0x62>
    1764:	88 0f       	add	r24, r24
    1766:	96 95       	lsr	r25
    1768:	87 95       	ror	r24
    176a:	97 f9       	bld	r25, 7
    176c:	08 95       	ret

0000176e <__fp_cmp>:
    176e:	99 0f       	add	r25, r25
    1770:	00 08       	sbc	r0, r0
    1772:	55 0f       	add	r21, r21
    1774:	aa 0b       	sbc	r26, r26
    1776:	e0 e8       	ldi	r30, 0x80	; 128
    1778:	fe ef       	ldi	r31, 0xFE	; 254
    177a:	16 16       	cp	r1, r22
    177c:	17 06       	cpc	r1, r23
    177e:	e8 07       	cpc	r30, r24
    1780:	f9 07       	cpc	r31, r25
    1782:	c0 f0       	brcs	.+48     	; 0x17b4 <__fp_cmp+0x46>
    1784:	12 16       	cp	r1, r18
    1786:	13 06       	cpc	r1, r19
    1788:	e4 07       	cpc	r30, r20
    178a:	f5 07       	cpc	r31, r21
    178c:	98 f0       	brcs	.+38     	; 0x17b4 <__fp_cmp+0x46>
    178e:	62 1b       	sub	r22, r18
    1790:	73 0b       	sbc	r23, r19
    1792:	84 0b       	sbc	r24, r20
    1794:	95 0b       	sbc	r25, r21
    1796:	39 f4       	brne	.+14     	; 0x17a6 <__fp_cmp+0x38>
    1798:	0a 26       	eor	r0, r26
    179a:	61 f0       	breq	.+24     	; 0x17b4 <__fp_cmp+0x46>
    179c:	23 2b       	or	r18, r19
    179e:	24 2b       	or	r18, r20
    17a0:	25 2b       	or	r18, r21
    17a2:	21 f4       	brne	.+8      	; 0x17ac <__fp_cmp+0x3e>
    17a4:	08 95       	ret
    17a6:	0a 26       	eor	r0, r26
    17a8:	09 f4       	brne	.+2      	; 0x17ac <__fp_cmp+0x3e>
    17aa:	a1 40       	sbci	r26, 0x01	; 1
    17ac:	a6 95       	lsr	r26
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	81 1d       	adc	r24, r1
    17b2:	81 1d       	adc	r24, r1
    17b4:	08 95       	ret

000017b6 <__fp_inf>:
    17b6:	97 f9       	bld	r25, 7
    17b8:	9f 67       	ori	r25, 0x7F	; 127
    17ba:	80 e8       	ldi	r24, 0x80	; 128
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	08 95       	ret

000017c2 <__fp_nan>:
    17c2:	9f ef       	ldi	r25, 0xFF	; 255
    17c4:	80 ec       	ldi	r24, 0xC0	; 192
    17c6:	08 95       	ret

000017c8 <__fp_pscA>:
    17c8:	00 24       	eor	r0, r0
    17ca:	0a 94       	dec	r0
    17cc:	16 16       	cp	r1, r22
    17ce:	17 06       	cpc	r1, r23
    17d0:	18 06       	cpc	r1, r24
    17d2:	09 06       	cpc	r0, r25
    17d4:	08 95       	ret

000017d6 <__fp_pscB>:
    17d6:	00 24       	eor	r0, r0
    17d8:	0a 94       	dec	r0
    17da:	12 16       	cp	r1, r18
    17dc:	13 06       	cpc	r1, r19
    17de:	14 06       	cpc	r1, r20
    17e0:	05 06       	cpc	r0, r21
    17e2:	08 95       	ret

000017e4 <__fp_round>:
    17e4:	09 2e       	mov	r0, r25
    17e6:	03 94       	inc	r0
    17e8:	00 0c       	add	r0, r0
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <__fp_round+0xc>
    17ec:	88 23       	and	r24, r24
    17ee:	52 f0       	brmi	.+20     	; 0x1804 <__fp_round+0x20>
    17f0:	bb 0f       	add	r27, r27
    17f2:	40 f4       	brcc	.+16     	; 0x1804 <__fp_round+0x20>
    17f4:	bf 2b       	or	r27, r31
    17f6:	11 f4       	brne	.+4      	; 0x17fc <__fp_round+0x18>
    17f8:	60 ff       	sbrs	r22, 0
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <__fp_round+0x20>
    17fc:	6f 5f       	subi	r22, 0xFF	; 255
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	8f 4f       	sbci	r24, 0xFF	; 255
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	08 95       	ret

00001806 <__fp_split3>:
    1806:	57 fd       	sbrc	r21, 7
    1808:	90 58       	subi	r25, 0x80	; 128
    180a:	44 0f       	add	r20, r20
    180c:	55 1f       	adc	r21, r21
    180e:	59 f0       	breq	.+22     	; 0x1826 <__fp_splitA+0x10>
    1810:	5f 3f       	cpi	r21, 0xFF	; 255
    1812:	71 f0       	breq	.+28     	; 0x1830 <__fp_splitA+0x1a>
    1814:	47 95       	ror	r20

00001816 <__fp_splitA>:
    1816:	88 0f       	add	r24, r24
    1818:	97 fb       	bst	r25, 7
    181a:	99 1f       	adc	r25, r25
    181c:	61 f0       	breq	.+24     	; 0x1836 <__fp_splitA+0x20>
    181e:	9f 3f       	cpi	r25, 0xFF	; 255
    1820:	79 f0       	breq	.+30     	; 0x1840 <__fp_splitA+0x2a>
    1822:	87 95       	ror	r24
    1824:	08 95       	ret
    1826:	12 16       	cp	r1, r18
    1828:	13 06       	cpc	r1, r19
    182a:	14 06       	cpc	r1, r20
    182c:	55 1f       	adc	r21, r21
    182e:	f2 cf       	rjmp	.-28     	; 0x1814 <__fp_split3+0xe>
    1830:	46 95       	lsr	r20
    1832:	f1 df       	rcall	.-30     	; 0x1816 <__fp_splitA>
    1834:	08 c0       	rjmp	.+16     	; 0x1846 <__fp_splitA+0x30>
    1836:	16 16       	cp	r1, r22
    1838:	17 06       	cpc	r1, r23
    183a:	18 06       	cpc	r1, r24
    183c:	99 1f       	adc	r25, r25
    183e:	f1 cf       	rjmp	.-30     	; 0x1822 <__fp_splitA+0xc>
    1840:	86 95       	lsr	r24
    1842:	71 05       	cpc	r23, r1
    1844:	61 05       	cpc	r22, r1
    1846:	08 94       	sec
    1848:	08 95       	ret

0000184a <__fp_zero>:
    184a:	e8 94       	clt

0000184c <__fp_szero>:
    184c:	bb 27       	eor	r27, r27
    184e:	66 27       	eor	r22, r22
    1850:	77 27       	eor	r23, r23
    1852:	cb 01       	movw	r24, r22
    1854:	97 f9       	bld	r25, 7
    1856:	08 95       	ret

00001858 <__gesf2>:
    1858:	8a df       	rcall	.-236    	; 0x176e <__fp_cmp>
    185a:	08 f4       	brcc	.+2      	; 0x185e <__gesf2+0x6>
    185c:	8f ef       	ldi	r24, 0xFF	; 255
    185e:	08 95       	ret

00001860 <__mulsf3>:
    1860:	0b d0       	rcall	.+22     	; 0x1878 <__mulsf3x>
    1862:	c0 cf       	rjmp	.-128    	; 0x17e4 <__fp_round>
    1864:	b1 df       	rcall	.-158    	; 0x17c8 <__fp_pscA>
    1866:	28 f0       	brcs	.+10     	; 0x1872 <__mulsf3+0x12>
    1868:	b6 df       	rcall	.-148    	; 0x17d6 <__fp_pscB>
    186a:	18 f0       	brcs	.+6      	; 0x1872 <__mulsf3+0x12>
    186c:	95 23       	and	r25, r21
    186e:	09 f0       	breq	.+2      	; 0x1872 <__mulsf3+0x12>
    1870:	a2 cf       	rjmp	.-188    	; 0x17b6 <__fp_inf>
    1872:	a7 cf       	rjmp	.-178    	; 0x17c2 <__fp_nan>
    1874:	11 24       	eor	r1, r1
    1876:	ea cf       	rjmp	.-44     	; 0x184c <__fp_szero>

00001878 <__mulsf3x>:
    1878:	c6 df       	rcall	.-116    	; 0x1806 <__fp_split3>
    187a:	a0 f3       	brcs	.-24     	; 0x1864 <__mulsf3+0x4>

0000187c <__mulsf3_pse>:
    187c:	95 9f       	mul	r25, r21
    187e:	d1 f3       	breq	.-12     	; 0x1874 <__mulsf3+0x14>
    1880:	95 0f       	add	r25, r21
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	55 1f       	adc	r21, r21
    1886:	62 9f       	mul	r22, r18
    1888:	f0 01       	movw	r30, r0
    188a:	72 9f       	mul	r23, r18
    188c:	bb 27       	eor	r27, r27
    188e:	f0 0d       	add	r31, r0
    1890:	b1 1d       	adc	r27, r1
    1892:	63 9f       	mul	r22, r19
    1894:	aa 27       	eor	r26, r26
    1896:	f0 0d       	add	r31, r0
    1898:	b1 1d       	adc	r27, r1
    189a:	aa 1f       	adc	r26, r26
    189c:	64 9f       	mul	r22, r20
    189e:	66 27       	eor	r22, r22
    18a0:	b0 0d       	add	r27, r0
    18a2:	a1 1d       	adc	r26, r1
    18a4:	66 1f       	adc	r22, r22
    18a6:	82 9f       	mul	r24, r18
    18a8:	22 27       	eor	r18, r18
    18aa:	b0 0d       	add	r27, r0
    18ac:	a1 1d       	adc	r26, r1
    18ae:	62 1f       	adc	r22, r18
    18b0:	73 9f       	mul	r23, r19
    18b2:	b0 0d       	add	r27, r0
    18b4:	a1 1d       	adc	r26, r1
    18b6:	62 1f       	adc	r22, r18
    18b8:	83 9f       	mul	r24, r19
    18ba:	a0 0d       	add	r26, r0
    18bc:	61 1d       	adc	r22, r1
    18be:	22 1f       	adc	r18, r18
    18c0:	74 9f       	mul	r23, r20
    18c2:	33 27       	eor	r19, r19
    18c4:	a0 0d       	add	r26, r0
    18c6:	61 1d       	adc	r22, r1
    18c8:	23 1f       	adc	r18, r19
    18ca:	84 9f       	mul	r24, r20
    18cc:	60 0d       	add	r22, r0
    18ce:	21 1d       	adc	r18, r1
    18d0:	82 2f       	mov	r24, r18
    18d2:	76 2f       	mov	r23, r22
    18d4:	6a 2f       	mov	r22, r26
    18d6:	11 24       	eor	r1, r1
    18d8:	9f 57       	subi	r25, 0x7F	; 127
    18da:	50 40       	sbci	r21, 0x00	; 0
    18dc:	8a f0       	brmi	.+34     	; 0x1900 <__mulsf3_pse+0x84>
    18de:	e1 f0       	breq	.+56     	; 0x1918 <__mulsf3_pse+0x9c>
    18e0:	88 23       	and	r24, r24
    18e2:	4a f0       	brmi	.+18     	; 0x18f6 <__mulsf3_pse+0x7a>
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	bb 1f       	adc	r27, r27
    18ea:	66 1f       	adc	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	91 50       	subi	r25, 0x01	; 1
    18f2:	50 40       	sbci	r21, 0x00	; 0
    18f4:	a9 f7       	brne	.-22     	; 0x18e0 <__mulsf3_pse+0x64>
    18f6:	9e 3f       	cpi	r25, 0xFE	; 254
    18f8:	51 05       	cpc	r21, r1
    18fa:	70 f0       	brcs	.+28     	; 0x1918 <__mulsf3_pse+0x9c>
    18fc:	5c cf       	rjmp	.-328    	; 0x17b6 <__fp_inf>
    18fe:	a6 cf       	rjmp	.-180    	; 0x184c <__fp_szero>
    1900:	5f 3f       	cpi	r21, 0xFF	; 255
    1902:	ec f3       	brlt	.-6      	; 0x18fe <__mulsf3_pse+0x82>
    1904:	98 3e       	cpi	r25, 0xE8	; 232
    1906:	dc f3       	brlt	.-10     	; 0x18fe <__mulsf3_pse+0x82>
    1908:	86 95       	lsr	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b7 95       	ror	r27
    1910:	f7 95       	ror	r31
    1912:	e7 95       	ror	r30
    1914:	9f 5f       	subi	r25, 0xFF	; 255
    1916:	c1 f7       	brne	.-16     	; 0x1908 <__mulsf3_pse+0x8c>
    1918:	fe 2b       	or	r31, r30
    191a:	88 0f       	add	r24, r24
    191c:	91 1d       	adc	r25, r1
    191e:	96 95       	lsr	r25
    1920:	87 95       	ror	r24
    1922:	97 f9       	bld	r25, 7
    1924:	08 95       	ret

00001926 <__tablejump2__>:
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	00 24       	eor	r0, r0
    192c:	00 1c       	adc	r0, r0
    192e:	0b be       	out	0x3b, r0	; 59
    1930:	07 90       	elpm	r0, Z+
    1932:	f6 91       	elpm	r31, Z
    1934:	e0 2d       	mov	r30, r0
    1936:	09 94       	ijmp

00001938 <atoi>:
    1938:	fc 01       	movw	r30, r24
    193a:	88 27       	eor	r24, r24
    193c:	99 27       	eor	r25, r25
    193e:	e8 94       	clt
    1940:	21 91       	ld	r18, Z+
    1942:	20 32       	cpi	r18, 0x20	; 32
    1944:	e9 f3       	breq	.-6      	; 0x1940 <atoi+0x8>
    1946:	29 30       	cpi	r18, 0x09	; 9
    1948:	10 f0       	brcs	.+4      	; 0x194e <atoi+0x16>
    194a:	2e 30       	cpi	r18, 0x0E	; 14
    194c:	c8 f3       	brcs	.-14     	; 0x1940 <atoi+0x8>
    194e:	2b 32       	cpi	r18, 0x2B	; 43
    1950:	39 f0       	breq	.+14     	; 0x1960 <atoi+0x28>
    1952:	2d 32       	cpi	r18, 0x2D	; 45
    1954:	31 f4       	brne	.+12     	; 0x1962 <atoi+0x2a>
    1956:	68 94       	set
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <atoi+0x28>
    195a:	0b d0       	rcall	.+22     	; 0x1972 <__mulhi_const_10>
    195c:	82 0f       	add	r24, r18
    195e:	91 1d       	adc	r25, r1
    1960:	21 91       	ld	r18, Z+
    1962:	20 53       	subi	r18, 0x30	; 48
    1964:	2a 30       	cpi	r18, 0x0A	; 10
    1966:	c8 f3       	brcs	.-14     	; 0x195a <atoi+0x22>
    1968:	1e f4       	brtc	.+6      	; 0x1970 <atoi+0x38>
    196a:	90 95       	com	r25
    196c:	81 95       	neg	r24
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	08 95       	ret

00001972 <__mulhi_const_10>:
    1972:	7a e0       	ldi	r23, 0x0A	; 10
    1974:	97 9f       	mul	r25, r23
    1976:	90 2d       	mov	r25, r0
    1978:	87 9f       	mul	r24, r23
    197a:	80 2d       	mov	r24, r0
    197c:	91 0d       	add	r25, r1
    197e:	11 24       	eor	r1, r1
    1980:	08 95       	ret

00001982 <printf>:
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	ae 01       	movw	r20, r28
    198c:	4b 5f       	subi	r20, 0xFB	; 251
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	fa 01       	movw	r30, r20
    1992:	61 91       	ld	r22, Z+
    1994:	71 91       	ld	r23, Z+
    1996:	af 01       	movw	r20, r30
    1998:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <__iob+0x2>
    199c:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <__iob+0x3>
    19a0:	08 d0       	rcall	.+16     	; 0x19b2 <vfprintf>
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <putchar>:
    19a8:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <__iob+0x2>
    19ac:	70 91 71 03 	lds	r23, 0x0371	; 0x800371 <__iob+0x3>
    19b0:	13 c2       	rjmp	.+1062   	; 0x1dd8 <fputc>

000019b2 <vfprintf>:
    19b2:	2f 92       	push	r2
    19b4:	3f 92       	push	r3
    19b6:	4f 92       	push	r4
    19b8:	5f 92       	push	r5
    19ba:	6f 92       	push	r6
    19bc:	7f 92       	push	r7
    19be:	8f 92       	push	r8
    19c0:	9f 92       	push	r9
    19c2:	af 92       	push	r10
    19c4:	bf 92       	push	r11
    19c6:	cf 92       	push	r12
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	2b 97       	sbiw	r28, 0x0b	; 11
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	6c 01       	movw	r12, r24
    19e8:	7b 01       	movw	r14, r22
    19ea:	8a 01       	movw	r16, r20
    19ec:	fc 01       	movw	r30, r24
    19ee:	17 82       	std	Z+7, r1	; 0x07
    19f0:	16 82       	std	Z+6, r1	; 0x06
    19f2:	83 81       	ldd	r24, Z+3	; 0x03
    19f4:	81 ff       	sbrs	r24, 1
    19f6:	bf c1       	rjmp	.+894    	; 0x1d76 <vfprintf+0x3c4>
    19f8:	ce 01       	movw	r24, r28
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	3c 01       	movw	r6, r24
    19fe:	f6 01       	movw	r30, r12
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	f7 01       	movw	r30, r14
    1a04:	93 fd       	sbrc	r25, 3
    1a06:	85 91       	lpm	r24, Z+
    1a08:	93 ff       	sbrs	r25, 3
    1a0a:	81 91       	ld	r24, Z+
    1a0c:	7f 01       	movw	r14, r30
    1a0e:	88 23       	and	r24, r24
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <vfprintf+0x62>
    1a12:	ad c1       	rjmp	.+858    	; 0x1d6e <vfprintf+0x3bc>
    1a14:	85 32       	cpi	r24, 0x25	; 37
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <vfprintf+0x74>
    1a18:	93 fd       	sbrc	r25, 3
    1a1a:	85 91       	lpm	r24, Z+
    1a1c:	93 ff       	sbrs	r25, 3
    1a1e:	81 91       	ld	r24, Z+
    1a20:	7f 01       	movw	r14, r30
    1a22:	85 32       	cpi	r24, 0x25	; 37
    1a24:	21 f4       	brne	.+8      	; 0x1a2e <vfprintf+0x7c>
    1a26:	b6 01       	movw	r22, r12
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	d6 d1       	rcall	.+940    	; 0x1dd8 <fputc>
    1a2c:	e8 cf       	rjmp	.-48     	; 0x19fe <vfprintf+0x4c>
    1a2e:	91 2c       	mov	r9, r1
    1a30:	21 2c       	mov	r2, r1
    1a32:	31 2c       	mov	r3, r1
    1a34:	ff e1       	ldi	r31, 0x1F	; 31
    1a36:	f3 15       	cp	r31, r3
    1a38:	d8 f0       	brcs	.+54     	; 0x1a70 <vfprintf+0xbe>
    1a3a:	8b 32       	cpi	r24, 0x2B	; 43
    1a3c:	79 f0       	breq	.+30     	; 0x1a5c <vfprintf+0xaa>
    1a3e:	38 f4       	brcc	.+14     	; 0x1a4e <vfprintf+0x9c>
    1a40:	80 32       	cpi	r24, 0x20	; 32
    1a42:	79 f0       	breq	.+30     	; 0x1a62 <vfprintf+0xb0>
    1a44:	83 32       	cpi	r24, 0x23	; 35
    1a46:	a1 f4       	brne	.+40     	; 0x1a70 <vfprintf+0xbe>
    1a48:	23 2d       	mov	r18, r3
    1a4a:	20 61       	ori	r18, 0x10	; 16
    1a4c:	1d c0       	rjmp	.+58     	; 0x1a88 <vfprintf+0xd6>
    1a4e:	8d 32       	cpi	r24, 0x2D	; 45
    1a50:	61 f0       	breq	.+24     	; 0x1a6a <vfprintf+0xb8>
    1a52:	80 33       	cpi	r24, 0x30	; 48
    1a54:	69 f4       	brne	.+26     	; 0x1a70 <vfprintf+0xbe>
    1a56:	23 2d       	mov	r18, r3
    1a58:	21 60       	ori	r18, 0x01	; 1
    1a5a:	16 c0       	rjmp	.+44     	; 0x1a88 <vfprintf+0xd6>
    1a5c:	83 2d       	mov	r24, r3
    1a5e:	82 60       	ori	r24, 0x02	; 2
    1a60:	38 2e       	mov	r3, r24
    1a62:	e3 2d       	mov	r30, r3
    1a64:	e4 60       	ori	r30, 0x04	; 4
    1a66:	3e 2e       	mov	r3, r30
    1a68:	2a c0       	rjmp	.+84     	; 0x1abe <vfprintf+0x10c>
    1a6a:	f3 2d       	mov	r31, r3
    1a6c:	f8 60       	ori	r31, 0x08	; 8
    1a6e:	1d c0       	rjmp	.+58     	; 0x1aaa <vfprintf+0xf8>
    1a70:	37 fc       	sbrc	r3, 7
    1a72:	2d c0       	rjmp	.+90     	; 0x1ace <vfprintf+0x11c>
    1a74:	20 ed       	ldi	r18, 0xD0	; 208
    1a76:	28 0f       	add	r18, r24
    1a78:	2a 30       	cpi	r18, 0x0A	; 10
    1a7a:	40 f0       	brcs	.+16     	; 0x1a8c <vfprintf+0xda>
    1a7c:	8e 32       	cpi	r24, 0x2E	; 46
    1a7e:	b9 f4       	brne	.+46     	; 0x1aae <vfprintf+0xfc>
    1a80:	36 fc       	sbrc	r3, 6
    1a82:	75 c1       	rjmp	.+746    	; 0x1d6e <vfprintf+0x3bc>
    1a84:	23 2d       	mov	r18, r3
    1a86:	20 64       	ori	r18, 0x40	; 64
    1a88:	32 2e       	mov	r3, r18
    1a8a:	19 c0       	rjmp	.+50     	; 0x1abe <vfprintf+0x10c>
    1a8c:	36 fe       	sbrs	r3, 6
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <vfprintf+0xea>
    1a90:	8a e0       	ldi	r24, 0x0A	; 10
    1a92:	98 9e       	mul	r9, r24
    1a94:	20 0d       	add	r18, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	92 2e       	mov	r9, r18
    1a9a:	11 c0       	rjmp	.+34     	; 0x1abe <vfprintf+0x10c>
    1a9c:	ea e0       	ldi	r30, 0x0A	; 10
    1a9e:	2e 9e       	mul	r2, r30
    1aa0:	20 0d       	add	r18, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	22 2e       	mov	r2, r18
    1aa6:	f3 2d       	mov	r31, r3
    1aa8:	f0 62       	ori	r31, 0x20	; 32
    1aaa:	3f 2e       	mov	r3, r31
    1aac:	08 c0       	rjmp	.+16     	; 0x1abe <vfprintf+0x10c>
    1aae:	8c 36       	cpi	r24, 0x6C	; 108
    1ab0:	21 f4       	brne	.+8      	; 0x1aba <vfprintf+0x108>
    1ab2:	83 2d       	mov	r24, r3
    1ab4:	80 68       	ori	r24, 0x80	; 128
    1ab6:	38 2e       	mov	r3, r24
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <vfprintf+0x10c>
    1aba:	88 36       	cpi	r24, 0x68	; 104
    1abc:	41 f4       	brne	.+16     	; 0x1ace <vfprintf+0x11c>
    1abe:	f7 01       	movw	r30, r14
    1ac0:	93 fd       	sbrc	r25, 3
    1ac2:	85 91       	lpm	r24, Z+
    1ac4:	93 ff       	sbrs	r25, 3
    1ac6:	81 91       	ld	r24, Z+
    1ac8:	7f 01       	movw	r14, r30
    1aca:	81 11       	cpse	r24, r1
    1acc:	b3 cf       	rjmp	.-154    	; 0x1a34 <vfprintf+0x82>
    1ace:	98 2f       	mov	r25, r24
    1ad0:	9f 7d       	andi	r25, 0xDF	; 223
    1ad2:	95 54       	subi	r25, 0x45	; 69
    1ad4:	93 30       	cpi	r25, 0x03	; 3
    1ad6:	28 f4       	brcc	.+10     	; 0x1ae2 <vfprintf+0x130>
    1ad8:	0c 5f       	subi	r16, 0xFC	; 252
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	9f e3       	ldi	r25, 0x3F	; 63
    1ade:	99 83       	std	Y+1, r25	; 0x01
    1ae0:	0d c0       	rjmp	.+26     	; 0x1afc <vfprintf+0x14a>
    1ae2:	83 36       	cpi	r24, 0x63	; 99
    1ae4:	31 f0       	breq	.+12     	; 0x1af2 <vfprintf+0x140>
    1ae6:	83 37       	cpi	r24, 0x73	; 115
    1ae8:	71 f0       	breq	.+28     	; 0x1b06 <vfprintf+0x154>
    1aea:	83 35       	cpi	r24, 0x53	; 83
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <vfprintf+0x13e>
    1aee:	55 c0       	rjmp	.+170    	; 0x1b9a <vfprintf+0x1e8>
    1af0:	20 c0       	rjmp	.+64     	; 0x1b32 <vfprintf+0x180>
    1af2:	f8 01       	movw	r30, r16
    1af4:	80 81       	ld	r24, Z
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	0e 5f       	subi	r16, 0xFE	; 254
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	88 24       	eor	r8, r8
    1afe:	83 94       	inc	r8
    1b00:	91 2c       	mov	r9, r1
    1b02:	53 01       	movw	r10, r6
    1b04:	12 c0       	rjmp	.+36     	; 0x1b2a <vfprintf+0x178>
    1b06:	28 01       	movw	r4, r16
    1b08:	f2 e0       	ldi	r31, 0x02	; 2
    1b0a:	4f 0e       	add	r4, r31
    1b0c:	51 1c       	adc	r5, r1
    1b0e:	f8 01       	movw	r30, r16
    1b10:	a0 80       	ld	r10, Z
    1b12:	b1 80       	ldd	r11, Z+1	; 0x01
    1b14:	36 fe       	sbrs	r3, 6
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <vfprintf+0x16c>
    1b18:	69 2d       	mov	r22, r9
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <vfprintf+0x170>
    1b1e:	6f ef       	ldi	r22, 0xFF	; 255
    1b20:	7f ef       	ldi	r23, 0xFF	; 255
    1b22:	c5 01       	movw	r24, r10
    1b24:	4e d1       	rcall	.+668    	; 0x1dc2 <strnlen>
    1b26:	4c 01       	movw	r8, r24
    1b28:	82 01       	movw	r16, r4
    1b2a:	f3 2d       	mov	r31, r3
    1b2c:	ff 77       	andi	r31, 0x7F	; 127
    1b2e:	3f 2e       	mov	r3, r31
    1b30:	15 c0       	rjmp	.+42     	; 0x1b5c <vfprintf+0x1aa>
    1b32:	28 01       	movw	r4, r16
    1b34:	22 e0       	ldi	r18, 0x02	; 2
    1b36:	42 0e       	add	r4, r18
    1b38:	51 1c       	adc	r5, r1
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	a0 80       	ld	r10, Z
    1b3e:	b1 80       	ldd	r11, Z+1	; 0x01
    1b40:	36 fe       	sbrs	r3, 6
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <vfprintf+0x198>
    1b44:	69 2d       	mov	r22, r9
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <vfprintf+0x19c>
    1b4a:	6f ef       	ldi	r22, 0xFF	; 255
    1b4c:	7f ef       	ldi	r23, 0xFF	; 255
    1b4e:	c5 01       	movw	r24, r10
    1b50:	2d d1       	rcall	.+602    	; 0x1dac <strnlen_P>
    1b52:	4c 01       	movw	r8, r24
    1b54:	f3 2d       	mov	r31, r3
    1b56:	f0 68       	ori	r31, 0x80	; 128
    1b58:	3f 2e       	mov	r3, r31
    1b5a:	82 01       	movw	r16, r4
    1b5c:	33 fc       	sbrc	r3, 3
    1b5e:	19 c0       	rjmp	.+50     	; 0x1b92 <vfprintf+0x1e0>
    1b60:	82 2d       	mov	r24, r2
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	88 16       	cp	r8, r24
    1b66:	99 06       	cpc	r9, r25
    1b68:	a0 f4       	brcc	.+40     	; 0x1b92 <vfprintf+0x1e0>
    1b6a:	b6 01       	movw	r22, r12
    1b6c:	80 e2       	ldi	r24, 0x20	; 32
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	33 d1       	rcall	.+614    	; 0x1dd8 <fputc>
    1b72:	2a 94       	dec	r2
    1b74:	f5 cf       	rjmp	.-22     	; 0x1b60 <vfprintf+0x1ae>
    1b76:	f5 01       	movw	r30, r10
    1b78:	37 fc       	sbrc	r3, 7
    1b7a:	85 91       	lpm	r24, Z+
    1b7c:	37 fe       	sbrs	r3, 7
    1b7e:	81 91       	ld	r24, Z+
    1b80:	5f 01       	movw	r10, r30
    1b82:	b6 01       	movw	r22, r12
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	28 d1       	rcall	.+592    	; 0x1dd8 <fputc>
    1b88:	21 10       	cpse	r2, r1
    1b8a:	2a 94       	dec	r2
    1b8c:	21 e0       	ldi	r18, 0x01	; 1
    1b8e:	82 1a       	sub	r8, r18
    1b90:	91 08       	sbc	r9, r1
    1b92:	81 14       	cp	r8, r1
    1b94:	91 04       	cpc	r9, r1
    1b96:	79 f7       	brne	.-34     	; 0x1b76 <vfprintf+0x1c4>
    1b98:	e1 c0       	rjmp	.+450    	; 0x1d5c <vfprintf+0x3aa>
    1b9a:	84 36       	cpi	r24, 0x64	; 100
    1b9c:	11 f0       	breq	.+4      	; 0x1ba2 <vfprintf+0x1f0>
    1b9e:	89 36       	cpi	r24, 0x69	; 105
    1ba0:	39 f5       	brne	.+78     	; 0x1bf0 <vfprintf+0x23e>
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	37 fe       	sbrs	r3, 7
    1ba6:	07 c0       	rjmp	.+14     	; 0x1bb6 <vfprintf+0x204>
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	0c 5f       	subi	r16, 0xFC	; 252
    1bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb4:	08 c0       	rjmp	.+16     	; 0x1bc6 <vfprintf+0x214>
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	07 2e       	mov	r0, r23
    1bbc:	00 0c       	add	r0, r0
    1bbe:	88 0b       	sbc	r24, r24
    1bc0:	99 0b       	sbc	r25, r25
    1bc2:	0e 5f       	subi	r16, 0xFE	; 254
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	f3 2d       	mov	r31, r3
    1bc8:	ff 76       	andi	r31, 0x6F	; 111
    1bca:	3f 2e       	mov	r3, r31
    1bcc:	97 ff       	sbrs	r25, 7
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <vfprintf+0x230>
    1bd0:	90 95       	com	r25
    1bd2:	80 95       	com	r24
    1bd4:	70 95       	com	r23
    1bd6:	61 95       	neg	r22
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	8f 4f       	sbci	r24, 0xFF	; 255
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	f0 68       	ori	r31, 0x80	; 128
    1be0:	3f 2e       	mov	r3, r31
    1be2:	2a e0       	ldi	r18, 0x0A	; 10
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	a3 01       	movw	r20, r6
    1be8:	33 d1       	rcall	.+614    	; 0x1e50 <__ultoa_invert>
    1bea:	88 2e       	mov	r8, r24
    1bec:	86 18       	sub	r8, r6
    1bee:	44 c0       	rjmp	.+136    	; 0x1c78 <vfprintf+0x2c6>
    1bf0:	85 37       	cpi	r24, 0x75	; 117
    1bf2:	31 f4       	brne	.+12     	; 0x1c00 <vfprintf+0x24e>
    1bf4:	23 2d       	mov	r18, r3
    1bf6:	2f 7e       	andi	r18, 0xEF	; 239
    1bf8:	b2 2e       	mov	r11, r18
    1bfa:	2a e0       	ldi	r18, 0x0A	; 10
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	25 c0       	rjmp	.+74     	; 0x1c4a <vfprintf+0x298>
    1c00:	93 2d       	mov	r25, r3
    1c02:	99 7f       	andi	r25, 0xF9	; 249
    1c04:	b9 2e       	mov	r11, r25
    1c06:	8f 36       	cpi	r24, 0x6F	; 111
    1c08:	c1 f0       	breq	.+48     	; 0x1c3a <vfprintf+0x288>
    1c0a:	18 f4       	brcc	.+6      	; 0x1c12 <vfprintf+0x260>
    1c0c:	88 35       	cpi	r24, 0x58	; 88
    1c0e:	79 f0       	breq	.+30     	; 0x1c2e <vfprintf+0x27c>
    1c10:	ae c0       	rjmp	.+348    	; 0x1d6e <vfprintf+0x3bc>
    1c12:	80 37       	cpi	r24, 0x70	; 112
    1c14:	19 f0       	breq	.+6      	; 0x1c1c <vfprintf+0x26a>
    1c16:	88 37       	cpi	r24, 0x78	; 120
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <vfprintf+0x270>
    1c1a:	a9 c0       	rjmp	.+338    	; 0x1d6e <vfprintf+0x3bc>
    1c1c:	e9 2f       	mov	r30, r25
    1c1e:	e0 61       	ori	r30, 0x10	; 16
    1c20:	be 2e       	mov	r11, r30
    1c22:	b4 fe       	sbrs	r11, 4
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <vfprintf+0x28e>
    1c26:	fb 2d       	mov	r31, r11
    1c28:	f4 60       	ori	r31, 0x04	; 4
    1c2a:	bf 2e       	mov	r11, r31
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <vfprintf+0x28e>
    1c2e:	34 fe       	sbrs	r3, 4
    1c30:	0a c0       	rjmp	.+20     	; 0x1c46 <vfprintf+0x294>
    1c32:	29 2f       	mov	r18, r25
    1c34:	26 60       	ori	r18, 0x06	; 6
    1c36:	b2 2e       	mov	r11, r18
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0x294>
    1c3a:	28 e0       	ldi	r18, 0x08	; 8
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	05 c0       	rjmp	.+10     	; 0x1c4a <vfprintf+0x298>
    1c40:	20 e1       	ldi	r18, 0x10	; 16
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <vfprintf+0x298>
    1c46:	20 e1       	ldi	r18, 0x10	; 16
    1c48:	32 e0       	ldi	r19, 0x02	; 2
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	b7 fe       	sbrs	r11, 7
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <vfprintf+0x2ac>
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	0c 5f       	subi	r16, 0xFC	; 252
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	06 c0       	rjmp	.+12     	; 0x1c6a <vfprintf+0x2b8>
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 5f       	subi	r16, 0xFE	; 254
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	a3 01       	movw	r20, r6
    1c6c:	f1 d0       	rcall	.+482    	; 0x1e50 <__ultoa_invert>
    1c6e:	88 2e       	mov	r8, r24
    1c70:	86 18       	sub	r8, r6
    1c72:	fb 2d       	mov	r31, r11
    1c74:	ff 77       	andi	r31, 0x7F	; 127
    1c76:	3f 2e       	mov	r3, r31
    1c78:	36 fe       	sbrs	r3, 6
    1c7a:	0d c0       	rjmp	.+26     	; 0x1c96 <vfprintf+0x2e4>
    1c7c:	23 2d       	mov	r18, r3
    1c7e:	2e 7f       	andi	r18, 0xFE	; 254
    1c80:	a2 2e       	mov	r10, r18
    1c82:	89 14       	cp	r8, r9
    1c84:	58 f4       	brcc	.+22     	; 0x1c9c <vfprintf+0x2ea>
    1c86:	34 fe       	sbrs	r3, 4
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <vfprintf+0x2ee>
    1c8a:	32 fc       	sbrc	r3, 2
    1c8c:	09 c0       	rjmp	.+18     	; 0x1ca0 <vfprintf+0x2ee>
    1c8e:	83 2d       	mov	r24, r3
    1c90:	8e 7e       	andi	r24, 0xEE	; 238
    1c92:	a8 2e       	mov	r10, r24
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <vfprintf+0x2ee>
    1c96:	b8 2c       	mov	r11, r8
    1c98:	a3 2c       	mov	r10, r3
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <vfprintf+0x2f0>
    1c9c:	b8 2c       	mov	r11, r8
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <vfprintf+0x2f0>
    1ca0:	b9 2c       	mov	r11, r9
    1ca2:	a4 fe       	sbrs	r10, 4
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <vfprintf+0x312>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e8 0d       	add	r30, r8
    1caa:	f1 1d       	adc	r31, r1
    1cac:	80 81       	ld	r24, Z
    1cae:	80 33       	cpi	r24, 0x30	; 48
    1cb0:	21 f4       	brne	.+8      	; 0x1cba <vfprintf+0x308>
    1cb2:	9a 2d       	mov	r25, r10
    1cb4:	99 7e       	andi	r25, 0xE9	; 233
    1cb6:	a9 2e       	mov	r10, r25
    1cb8:	09 c0       	rjmp	.+18     	; 0x1ccc <vfprintf+0x31a>
    1cba:	a2 fe       	sbrs	r10, 2
    1cbc:	06 c0       	rjmp	.+12     	; 0x1cca <vfprintf+0x318>
    1cbe:	b3 94       	inc	r11
    1cc0:	b3 94       	inc	r11
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <vfprintf+0x31a>
    1cc4:	8a 2d       	mov	r24, r10
    1cc6:	86 78       	andi	r24, 0x86	; 134
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <vfprintf+0x31a>
    1cca:	b3 94       	inc	r11
    1ccc:	a3 fc       	sbrc	r10, 3
    1cce:	10 c0       	rjmp	.+32     	; 0x1cf0 <vfprintf+0x33e>
    1cd0:	a0 fe       	sbrs	r10, 0
    1cd2:	06 c0       	rjmp	.+12     	; 0x1ce0 <vfprintf+0x32e>
    1cd4:	b2 14       	cp	r11, r2
    1cd6:	80 f4       	brcc	.+32     	; 0x1cf8 <vfprintf+0x346>
    1cd8:	28 0c       	add	r2, r8
    1cda:	92 2c       	mov	r9, r2
    1cdc:	9b 18       	sub	r9, r11
    1cde:	0d c0       	rjmp	.+26     	; 0x1cfa <vfprintf+0x348>
    1ce0:	b2 14       	cp	r11, r2
    1ce2:	58 f4       	brcc	.+22     	; 0x1cfa <vfprintf+0x348>
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	76 d0       	rcall	.+236    	; 0x1dd8 <fputc>
    1cec:	b3 94       	inc	r11
    1cee:	f8 cf       	rjmp	.-16     	; 0x1ce0 <vfprintf+0x32e>
    1cf0:	b2 14       	cp	r11, r2
    1cf2:	18 f4       	brcc	.+6      	; 0x1cfa <vfprintf+0x348>
    1cf4:	2b 18       	sub	r2, r11
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x34a>
    1cf8:	98 2c       	mov	r9, r8
    1cfa:	21 2c       	mov	r2, r1
    1cfc:	a4 fe       	sbrs	r10, 4
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <vfprintf+0x36c>
    1d00:	b6 01       	movw	r22, r12
    1d02:	80 e3       	ldi	r24, 0x30	; 48
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	68 d0       	rcall	.+208    	; 0x1dd8 <fputc>
    1d08:	a2 fe       	sbrs	r10, 2
    1d0a:	16 c0       	rjmp	.+44     	; 0x1d38 <vfprintf+0x386>
    1d0c:	a1 fc       	sbrc	r10, 1
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <vfprintf+0x364>
    1d10:	88 e7       	ldi	r24, 0x78	; 120
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <vfprintf+0x368>
    1d16:	88 e5       	ldi	r24, 0x58	; 88
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	b6 01       	movw	r22, r12
    1d1c:	0c c0       	rjmp	.+24     	; 0x1d36 <vfprintf+0x384>
    1d1e:	8a 2d       	mov	r24, r10
    1d20:	86 78       	andi	r24, 0x86	; 134
    1d22:	51 f0       	breq	.+20     	; 0x1d38 <vfprintf+0x386>
    1d24:	a1 fe       	sbrs	r10, 1
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <vfprintf+0x37a>
    1d28:	8b e2       	ldi	r24, 0x2B	; 43
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <vfprintf+0x37c>
    1d2c:	80 e2       	ldi	r24, 0x20	; 32
    1d2e:	a7 fc       	sbrc	r10, 7
    1d30:	8d e2       	ldi	r24, 0x2D	; 45
    1d32:	b6 01       	movw	r22, r12
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	50 d0       	rcall	.+160    	; 0x1dd8 <fputc>
    1d38:	89 14       	cp	r8, r9
    1d3a:	30 f4       	brcc	.+12     	; 0x1d48 <vfprintf+0x396>
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	80 e3       	ldi	r24, 0x30	; 48
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	4a d0       	rcall	.+148    	; 0x1dd8 <fputc>
    1d44:	9a 94       	dec	r9
    1d46:	f8 cf       	rjmp	.-16     	; 0x1d38 <vfprintf+0x386>
    1d48:	8a 94       	dec	r8
    1d4a:	f3 01       	movw	r30, r6
    1d4c:	e8 0d       	add	r30, r8
    1d4e:	f1 1d       	adc	r31, r1
    1d50:	80 81       	ld	r24, Z
    1d52:	b6 01       	movw	r22, r12
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	40 d0       	rcall	.+128    	; 0x1dd8 <fputc>
    1d58:	81 10       	cpse	r8, r1
    1d5a:	f6 cf       	rjmp	.-20     	; 0x1d48 <vfprintf+0x396>
    1d5c:	22 20       	and	r2, r2
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <vfprintf+0x3b0>
    1d60:	4e ce       	rjmp	.-868    	; 0x19fe <vfprintf+0x4c>
    1d62:	b6 01       	movw	r22, r12
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	37 d0       	rcall	.+110    	; 0x1dd8 <fputc>
    1d6a:	2a 94       	dec	r2
    1d6c:	f7 cf       	rjmp	.-18     	; 0x1d5c <vfprintf+0x3aa>
    1d6e:	f6 01       	movw	r30, r12
    1d70:	86 81       	ldd	r24, Z+6	; 0x06
    1d72:	97 81       	ldd	r25, Z+7	; 0x07
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <vfprintf+0x3c8>
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	2b 96       	adiw	r28, 0x0b	; 11
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	9f 90       	pop	r9
    1d9c:	8f 90       	pop	r8
    1d9e:	7f 90       	pop	r7
    1da0:	6f 90       	pop	r6
    1da2:	5f 90       	pop	r5
    1da4:	4f 90       	pop	r4
    1da6:	3f 90       	pop	r3
    1da8:	2f 90       	pop	r2
    1daa:	08 95       	ret

00001dac <strnlen_P>:
    1dac:	fc 01       	movw	r30, r24
    1dae:	05 90       	lpm	r0, Z+
    1db0:	61 50       	subi	r22, 0x01	; 1
    1db2:	70 40       	sbci	r23, 0x00	; 0
    1db4:	01 10       	cpse	r0, r1
    1db6:	d8 f7       	brcc	.-10     	; 0x1dae <strnlen_P+0x2>
    1db8:	80 95       	com	r24
    1dba:	90 95       	com	r25
    1dbc:	8e 0f       	add	r24, r30
    1dbe:	9f 1f       	adc	r25, r31
    1dc0:	08 95       	ret

00001dc2 <strnlen>:
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	61 50       	subi	r22, 0x01	; 1
    1dc6:	70 40       	sbci	r23, 0x00	; 0
    1dc8:	01 90       	ld	r0, Z+
    1dca:	01 10       	cpse	r0, r1
    1dcc:	d8 f7       	brcc	.-10     	; 0x1dc4 <strnlen+0x2>
    1dce:	80 95       	com	r24
    1dd0:	90 95       	com	r25
    1dd2:	8e 0f       	add	r24, r30
    1dd4:	9f 1f       	adc	r25, r31
    1dd6:	08 95       	ret

00001dd8 <fputc>:
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	fb 01       	movw	r30, r22
    1de2:	23 81       	ldd	r18, Z+3	; 0x03
    1de4:	21 fd       	sbrc	r18, 1
    1de6:	03 c0       	rjmp	.+6      	; 0x1dee <fputc+0x16>
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	9f ef       	ldi	r25, 0xFF	; 255
    1dec:	2c c0       	rjmp	.+88     	; 0x1e46 <fputc+0x6e>
    1dee:	22 ff       	sbrs	r18, 2
    1df0:	16 c0       	rjmp	.+44     	; 0x1e1e <fputc+0x46>
    1df2:	46 81       	ldd	r20, Z+6	; 0x06
    1df4:	57 81       	ldd	r21, Z+7	; 0x07
    1df6:	24 81       	ldd	r18, Z+4	; 0x04
    1df8:	35 81       	ldd	r19, Z+5	; 0x05
    1dfa:	42 17       	cp	r20, r18
    1dfc:	53 07       	cpc	r21, r19
    1dfe:	44 f4       	brge	.+16     	; 0x1e10 <fputc+0x38>
    1e00:	a0 81       	ld	r26, Z
    1e02:	b1 81       	ldd	r27, Z+1	; 0x01
    1e04:	9d 01       	movw	r18, r26
    1e06:	2f 5f       	subi	r18, 0xFF	; 255
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	31 83       	std	Z+1, r19	; 0x01
    1e0c:	20 83       	st	Z, r18
    1e0e:	8c 93       	st	X, r24
    1e10:	26 81       	ldd	r18, Z+6	; 0x06
    1e12:	37 81       	ldd	r19, Z+7	; 0x07
    1e14:	2f 5f       	subi	r18, 0xFF	; 255
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	37 83       	std	Z+7, r19	; 0x07
    1e1a:	26 83       	std	Z+6, r18	; 0x06
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <fputc+0x6e>
    1e1e:	8b 01       	movw	r16, r22
    1e20:	ec 01       	movw	r28, r24
    1e22:	fb 01       	movw	r30, r22
    1e24:	00 84       	ldd	r0, Z+8	; 0x08
    1e26:	f1 85       	ldd	r31, Z+9	; 0x09
    1e28:	e0 2d       	mov	r30, r0
    1e2a:	09 95       	icall
    1e2c:	89 2b       	or	r24, r25
    1e2e:	e1 f6       	brne	.-72     	; 0x1de8 <fputc+0x10>
    1e30:	d8 01       	movw	r26, r16
    1e32:	16 96       	adiw	r26, 0x06	; 6
    1e34:	8d 91       	ld	r24, X+
    1e36:	9c 91       	ld	r25, X
    1e38:	17 97       	sbiw	r26, 0x07	; 7
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	17 96       	adiw	r26, 0x07	; 7
    1e3e:	9c 93       	st	X, r25
    1e40:	8e 93       	st	-X, r24
    1e42:	16 97       	sbiw	r26, 0x06	; 6
    1e44:	ce 01       	movw	r24, r28
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	08 95       	ret

00001e50 <__ultoa_invert>:
    1e50:	fa 01       	movw	r30, r20
    1e52:	aa 27       	eor	r26, r26
    1e54:	28 30       	cpi	r18, 0x08	; 8
    1e56:	51 f1       	breq	.+84     	; 0x1eac <__ultoa_invert+0x5c>
    1e58:	20 31       	cpi	r18, 0x10	; 16
    1e5a:	81 f1       	breq	.+96     	; 0x1ebc <__ultoa_invert+0x6c>
    1e5c:	e8 94       	clt
    1e5e:	6f 93       	push	r22
    1e60:	6e 7f       	andi	r22, 0xFE	; 254
    1e62:	6e 5f       	subi	r22, 0xFE	; 254
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	8f 4f       	sbci	r24, 0xFF	; 255
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	af 4f       	sbci	r26, 0xFF	; 255
    1e6c:	b1 e0       	ldi	r27, 0x01	; 1
    1e6e:	3e d0       	rcall	.+124    	; 0x1eec <__ultoa_invert+0x9c>
    1e70:	b4 e0       	ldi	r27, 0x04	; 4
    1e72:	3c d0       	rcall	.+120    	; 0x1eec <__ultoa_invert+0x9c>
    1e74:	67 0f       	add	r22, r23
    1e76:	78 1f       	adc	r23, r24
    1e78:	89 1f       	adc	r24, r25
    1e7a:	9a 1f       	adc	r25, r26
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	68 0f       	add	r22, r24
    1e80:	79 1f       	adc	r23, r25
    1e82:	8a 1f       	adc	r24, r26
    1e84:	91 1d       	adc	r25, r1
    1e86:	a1 1d       	adc	r26, r1
    1e88:	6a 0f       	add	r22, r26
    1e8a:	71 1d       	adc	r23, r1
    1e8c:	81 1d       	adc	r24, r1
    1e8e:	91 1d       	adc	r25, r1
    1e90:	a1 1d       	adc	r26, r1
    1e92:	20 d0       	rcall	.+64     	; 0x1ed4 <__ultoa_invert+0x84>
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <__ultoa_invert+0x48>
    1e96:	68 94       	set
    1e98:	3f 91       	pop	r19
    1e9a:	2a e0       	ldi	r18, 0x0A	; 10
    1e9c:	26 9f       	mul	r18, r22
    1e9e:	11 24       	eor	r1, r1
    1ea0:	30 19       	sub	r19, r0
    1ea2:	30 5d       	subi	r19, 0xD0	; 208
    1ea4:	31 93       	st	Z+, r19
    1ea6:	de f6       	brtc	.-74     	; 0x1e5e <__ultoa_invert+0xe>
    1ea8:	cf 01       	movw	r24, r30
    1eaa:	08 95       	ret
    1eac:	46 2f       	mov	r20, r22
    1eae:	47 70       	andi	r20, 0x07	; 7
    1eb0:	40 5d       	subi	r20, 0xD0	; 208
    1eb2:	41 93       	st	Z+, r20
    1eb4:	b3 e0       	ldi	r27, 0x03	; 3
    1eb6:	0f d0       	rcall	.+30     	; 0x1ed6 <__ultoa_invert+0x86>
    1eb8:	c9 f7       	brne	.-14     	; 0x1eac <__ultoa_invert+0x5c>
    1eba:	f6 cf       	rjmp	.-20     	; 0x1ea8 <__ultoa_invert+0x58>
    1ebc:	46 2f       	mov	r20, r22
    1ebe:	4f 70       	andi	r20, 0x0F	; 15
    1ec0:	40 5d       	subi	r20, 0xD0	; 208
    1ec2:	4a 33       	cpi	r20, 0x3A	; 58
    1ec4:	18 f0       	brcs	.+6      	; 0x1ecc <__ultoa_invert+0x7c>
    1ec6:	49 5d       	subi	r20, 0xD9	; 217
    1ec8:	31 fd       	sbrc	r19, 1
    1eca:	40 52       	subi	r20, 0x20	; 32
    1ecc:	41 93       	st	Z+, r20
    1ece:	02 d0       	rcall	.+4      	; 0x1ed4 <__ultoa_invert+0x84>
    1ed0:	a9 f7       	brne	.-22     	; 0x1ebc <__ultoa_invert+0x6c>
    1ed2:	ea cf       	rjmp	.-44     	; 0x1ea8 <__ultoa_invert+0x58>
    1ed4:	b4 e0       	ldi	r27, 0x04	; 4
    1ed6:	a6 95       	lsr	r26
    1ed8:	97 95       	ror	r25
    1eda:	87 95       	ror	r24
    1edc:	77 95       	ror	r23
    1ede:	67 95       	ror	r22
    1ee0:	ba 95       	dec	r27
    1ee2:	c9 f7       	brne	.-14     	; 0x1ed6 <__ultoa_invert+0x86>
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	61 05       	cpc	r22, r1
    1ee8:	71 05       	cpc	r23, r1
    1eea:	08 95       	ret
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	0a 2e       	mov	r0, r26
    1ef2:	06 94       	lsr	r0
    1ef4:	57 95       	ror	r21
    1ef6:	47 95       	ror	r20
    1ef8:	37 95       	ror	r19
    1efa:	27 95       	ror	r18
    1efc:	ba 95       	dec	r27
    1efe:	c9 f7       	brne	.-14     	; 0x1ef2 <__ultoa_invert+0xa2>
    1f00:	62 0f       	add	r22, r18
    1f02:	73 1f       	adc	r23, r19
    1f04:	84 1f       	adc	r24, r20
    1f06:	95 1f       	adc	r25, r21
    1f08:	a0 1d       	adc	r26, r0
    1f0a:	08 95       	ret

00001f0c <_exit>:
    1f0c:	f8 94       	cli

00001f0e <__stop_program>:
    1f0e:	ff cf       	rjmp	.-2      	; 0x1f0e <__stop_program>
