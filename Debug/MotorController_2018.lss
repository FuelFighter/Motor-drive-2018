
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800100  00001e34  00001ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024a  008003e8  008003e8  000021b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056b8  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a51  00000000  00000000  00007d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000291a  00000000  00000000  000097d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e60  00000000  00000000  0000c0ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001610  00000000  00000000  0000cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cd4  00000000  00000000  0000e55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00012230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_6>
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__vector_12>
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c7       	rjmp	.+3852   	; 0xf4e <__vector_16>
      42:	00 00       	nop
      44:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__vector_17>
      48:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b0 c6       	rjmp	.+3424   	; 0xdb6 <__vector_21>
      56:	00 00       	nop
      58:	90 c6       	rjmp	.+3360   	; 0xd7a <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d3 c6       	rjmp	.+3494   	; 0xe28 <__vector_32>
      82:	00 00       	nop
      84:	b3 c6       	rjmp	.+3430   	; 0xdec <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 09       	sbc	r30, r6
      96:	eb 09       	sbc	r30, r11
      98:	f1 09       	sbc	r31, r1
      9a:	f7 09       	sbc	r31, r7
      9c:	fd 09       	sbc	r31, r13
      9e:	02 0a       	sbc	r0, r18
      a0:	08 0a       	sbc	r0, r24
      a2:	0e 0a       	sbc	r0, r30

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	13 e0       	ldi	r17, 0x03	; 3
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e3       	ldi	r30, 0x34	; 52
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a8 3e       	cpi	r26, 0xE8	; 232
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	26 e0       	ldi	r18, 0x06	; 6
      cc:	a8 ee       	ldi	r26, 0xE8	; 232
      ce:	b3 e0       	ldi	r27, 0x03	; 3
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a2 33       	cpi	r26, 0x32	; 50
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	e8 d6       	rcall	.+3536   	; 0xeac <main>
      dc:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static uint8_t b_saturation = 0;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <f32_Integrator>
      e6:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <f32_Integrator+0x1>
      ea:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <f32_Integrator+0x2>
      ee:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty, ControlType_t ctrlType){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (ctrlType == CURRENT)
     11c:	e1 10       	cpse	r14, r1
     11e:	7f c0       	rjmp	.+254    	; 0x21e <controller+0x12a>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     120:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     124:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     128:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     12c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	4e eb       	ldi	r20, 0xBE	; 190
     136:	52 e4       	ldi	r21, 0x42	; 66
     138:	c7 01       	movw	r24, r14
     13a:	b6 01       	movw	r22, r12
     13c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__gesf2>
     140:	88 23       	and	r24, r24
     142:	54 f4       	brge	.+20     	; 0x158 <controller+0x64>
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	48 e4       	ldi	r20, 0x48	; 72
     14a:	52 e4       	ldi	r21, 0x42	; 66
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__cmpsf2>
     154:	18 16       	cp	r1, r24
     156:	24 f0       	brlt	.+8      	; 0x160 <controller+0x6c>
		{
			b_saturation = 1 ;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <__data_end>
     15e:	02 c0       	rjmp	.+4      	; 0x164 <controller+0x70>
			} else {
			b_saturation = 0;
     160:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__data_end>
		}
		
		f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     164:	a3 01       	movw	r20, r6
     166:	92 01       	movw	r18, r4
     168:	c5 01       	movw	r24, r10
     16a:	b4 01       	movw	r22, r8
     16c:	0e 94 9f 0c 	call	0x193e	; 0x193e <__subsf3>
     170:	6b 01       	movw	r12, r22
     172:	7c 01       	movw	r14, r24
     174:	60 93 e9 03 	sts	0x03E9, r22	; 0x8003e9 <f32_CurrentDelta>
     178:	70 93 ea 03 	sts	0x03EA, r23	; 0x8003ea <f32_CurrentDelta+0x1>
     17c:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <f32_CurrentDelta+0x2>
     180:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <f32_CurrentDelta+0x3>
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     184:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__data_end>
     188:	81 11       	cpse	r24, r1
     18a:	1c c0       	rjmp	.+56     	; 0x1c4 <controller+0xd0>
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     18c:	2a e0       	ldi	r18, 0x0A	; 10
     18e:	37 ed       	ldi	r19, 0xD7	; 215
     190:	43 e2       	ldi	r20, 0x23	; 35
     192:	5c e3       	ldi	r21, 0x3C	; 60
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     19c:	9b 01       	movw	r18, r22
     19e:	ac 01       	movw	r20, r24
     1a0:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <f32_Integrator>
     1a4:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <f32_Integrator+0x1>
     1a8:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <f32_Integrator+0x2>
     1ac:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <f32_Integrator+0x3>
     1b0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__addsf3>
     1b4:	60 93 ed 03 	sts	0x03ED, r22	; 0x8003ed <f32_Integrator>
     1b8:	70 93 ee 03 	sts	0x03EE, r23	; 0x8003ee <f32_Integrator+0x1>
     1bc:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <f32_Integrator+0x2>
     1c0:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c4:	23 e3       	ldi	r18, 0x33	; 51
     1c6:	33 e3       	ldi	r19, 0x33	; 51
     1c8:	43 e7       	ldi	r20, 0x73	; 115
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <f32_Integrator>
     1d0:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <f32_Integrator+0x1>
     1d4:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <f32_Integrator+0x2>
     1d8:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <f32_Integrator+0x3>
     1dc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     1e0:	4b 01       	movw	r8, r22
     1e2:	5c 01       	movw	r10, r24
     1e4:	29 ef       	ldi	r18, 0xF9	; 249
     1e6:	3f e0       	ldi	r19, 0x0F	; 15
     1e8:	49 e7       	ldi	r20, 0x79	; 121
     1ea:	5f e3       	ldi	r21, 0x3F	; 63
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     1f4:	9b 01       	movw	r18, r22
     1f6:	ac 01       	movw	r20, r24
     1f8:	c5 01       	movw	r24, r10
     1fa:	b4 01       	movw	r22, r8
     1fc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__addsf3>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	48 e4       	ldi	r20, 0x48	; 72
     206:	52 e4       	ldi	r21, 0x42	; 66
     208:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__addsf3>
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     21c:	12 c0       	rjmp	.+36     	; 0x242 <controller+0x14e>
	
	}else if (ctrlType == PWM)
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	e8 12       	cpse	r14, r24
     222:	0f c0       	rjmp	.+30     	; 0x242 <controller+0x14e>
	{
		f32_DutyCycleCmd = (float)*u8_duty;
     224:	f8 01       	movw	r30, r16
     226:	60 81       	ld	r22, Z
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     232:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     236:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     242:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     246:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     24a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     24e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4e eb       	ldi	r20, 0xBE	; 190
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__gesf2>
     262:	18 16       	cp	r1, r24
     264:	6c f4       	brge	.+26     	; 0x280 <controller+0x18c>
	{
		f32_DutyCycleCmd = 95;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	ae eb       	ldi	r26, 0xBE	; 190
     26c:	b2 e4       	ldi	r27, 0x42	; 66
     26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     272:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     276:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     27a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     27e:	16 c0       	rjmp	.+44     	; 0x2ac <controller+0x1b8>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	48 e4       	ldi	r20, 0x48	; 72
     286:	52 e4       	ldi	r21, 0x42	; 66
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__cmpsf2>
     290:	88 23       	and	r24, r24
     292:	64 f4       	brge	.+24     	; 0x2ac <controller+0x1b8>
	{
		f32_DutyCycleCmd = 50;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a8 e4       	ldi	r26, 0x48	; 72
     29a:	b2 e4       	ldi	r27, 0x42	; 66
     29c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     2ac:	c6 e9       	ldi	r28, 0x96	; 150
     2ae:	d0 e0       	ldi	r29, 0x00	; 0
     2b0:	e8 80       	ld	r14, Y
     2b2:	f9 80       	ldd	r15, Y+1	; 0x01
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	48 ec       	ldi	r20, 0xC8	; 200
     2ba:	52 e4       	ldi	r21, 0x42	; 66
     2bc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2c0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2cc:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__divsf3>
     2d0:	4b 01       	movw	r8, r22
     2d2:	5c 01       	movw	r10, r24
     2d4:	b7 01       	movw	r22, r14
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c5 01       	movw	r24, r10
     2e4:	b4 01       	movw	r22, r8
     2e6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     2ea:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     2ee:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     2f2:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     2f6:	68 81       	ld	r22, Y
     2f8:	79 81       	ldd	r23, Y+1	; 0x01
     2fa:	09 90       	ld	r0, Y+
     2fc:	d8 81       	ld	r29, Y
     2fe:	c0 2d       	mov	r28, r0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	48 ec       	ldi	r20, 0xC8	; 200
     312:	52 e4       	ldi	r21, 0x42	; 66
     314:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     318:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     31c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     320:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     324:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__divsf3>
     328:	4b 01       	movw	r8, r22
     32a:	5c 01       	movw	r10, r24
     32c:	be 01       	movw	r22, r28
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     342:	9b 01       	movw	r18, r22
     344:	ac 01       	movw	r20, r24
     346:	c7 01       	movw	r24, r14
     348:	b6 01       	movw	r22, r12
     34a:	0e 94 9f 0c 	call	0x193e	; 0x193e <__subsf3>
     34e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     352:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     356:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     35a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     35e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     362:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     366:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     36a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fixunssfsi>
     36e:	f8 01       	movw	r30, r16
     370:	60 83       	st	Z, r22
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	8f 90       	pop	r8
     38a:	7f 90       	pop	r7
     38c:	6f 90       	pop	r6
     38e:	5f 90       	pop	r5
     390:	4f 90       	pop	r4
     392:	08 95       	ret

00000394 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     394:	24 9a       	sbi	0x04, 4	; 4
     396:	08 95       	ret

00000398 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state)
     398:	88 23       	and	r24, r24
     39a:	11 f0       	breq	.+4      	; 0x3a0 <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     39c:	2c 9a       	sbi	0x05, 4	; 5
     39e:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     3a0:	2c 98       	cbi	0x05, 4	; 5
     3a2:	08 95       	ret

000003a4 <SPI_handler_0>:
static uint8_t u8_rxBuffer[3];

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     3aa:	65 ef       	ldi	r22, 0xF5	; 245
     3ac:	73 e0       	ldi	r23, 0x03	; 3
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 de 09 	call	0x13bc	; 0x13bc <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	43 e0       	ldi	r20, 0x03	; 3
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	62 ef       	ldi	r22, 0xF2	; 242
     3bc:	73 e0       	ldi	r23, 0x03	; 3
     3be:	85 ef       	ldi	r24, 0xF5	; 245
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	0e 94 3f 0c 	call	0x187e	; 0x187e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     3c6:	e2 ef       	ldi	r30, 0xF2	; 242
     3c8:	f3 e0       	ldi	r31, 0x03	; 3
     3ca:	61 81       	ldd	r22, Z+1	; 0x01
     3cc:	6f 71       	andi	r22, 0x1F	; 31
     3ce:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg,0);
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	76 2f       	mov	r23, r22
     3d4:	66 27       	eor	r22, r22
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	68 2b       	or	r22, r24
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	b9 d6       	rcall	.+3442   	; 0x1152 <handle_current_sensor>
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     3ec:	65 ef       	ldi	r22, 0xF5	; 245
     3ee:	73 e0       	ldi	r23, 0x03	; 3
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	e4 d7       	rcall	.+4040   	; 0x13bc <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	43 e0       	ldi	r20, 0x03	; 3
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	62 ef       	ldi	r22, 0xF2	; 242
     3fc:	73 e0       	ldi	r23, 0x03	; 3
     3fe:	85 ef       	ldi	r24, 0xF5	; 245
     400:	93 e0       	ldi	r25, 0x03	; 3
     402:	0e 94 3f 0c 	call	0x187e	; 0x187e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     406:	e2 ef       	ldi	r30, 0xF2	; 242
     408:	f3 e0       	ldi	r31, 0x03	; 3
     40a:	61 81       	ldd	r22, Z+1	; 0x01
     40c:	6f 71       	andi	r22, 0x1F	; 31
     40e:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg,1);
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	76 2f       	mov	r23, r22
     414:	66 27       	eor	r22, r22
     416:	82 81       	ldd	r24, Z+2	; 0x02
     418:	68 2b       	or	r22, r24
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	ce 01       	movw	r24, r28
     41e:	99 d6       	rcall	.+3378   	; 0x1152 <handle_current_sensor>
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     42c:	65 ef       	ldi	r22, 0xF5	; 245
     42e:	73 e0       	ldi	r23, 0x03	; 3
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	c4 d7       	rcall	.+3976   	; 0x13bc <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	43 e0       	ldi	r20, 0x03	; 3
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	62 ef       	ldi	r22, 0xF2	; 242
     43c:	73 e0       	ldi	r23, 0x03	; 3
     43e:	85 ef       	ldi	r24, 0xF5	; 245
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	0e 94 3f 0c 	call	0x187e	; 0x187e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     446:	e2 ef       	ldi	r30, 0xF2	; 242
     448:	f3 e0       	ldi	r31, 0x03	; 3
     44a:	61 81       	ldd	r22, Z+1	; 0x01
     44c:	6f 71       	andi	r22, 0x1F	; 31
     44e:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	76 2f       	mov	r23, r22
     454:	66 27       	eor	r22, r22
     456:	82 81       	ldd	r24, Z+2	; 0x02
     458:	68 2b       	or	r22, r24
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     462:	23 e3       	ldi	r18, 0x33	; 51
     464:	33 e3       	ldi	r19, 0x33	; 51
     466:	44 e8       	ldi	r20, 0x84	; 132
     468:	52 e4       	ldi	r21, 0x42	; 66
     46a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__divsf3>
     46e:	24 ea       	ldi	r18, 0xA4	; 164
     470:	30 e7       	ldi	r19, 0x70	; 112
     472:	4d eb       	ldi	r20, 0xBD	; 189
     474:	5e e3       	ldi	r21, 0x3E	; 62
     476:	0e 94 9f 0c 	call	0x193e	; 0x193e <__subsf3>
     47a:	68 83       	st	Y, r22
     47c:	79 83       	std	Y+1, r23	; 0x01
     47e:	8a 83       	std	Y+2, r24	; 0x02
     480:	9b 83       	std	Y+3, r25	; 0x03
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     48e:	65 ef       	ldi	r22, 0xF5	; 245
     490:	73 e0       	ldi	r23, 0x03	; 3
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	93 d7       	rcall	.+3878   	; 0x13bc <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	43 e0       	ldi	r20, 0x03	; 3
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	62 ef       	ldi	r22, 0xF2	; 242
     49e:	73 e0       	ldi	r23, 0x03	; 3
     4a0:	85 ef       	ldi	r24, 0xF5	; 245
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	0e 94 3f 0c 	call	0x187e	; 0x187e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4a8:	e2 ef       	ldi	r30, 0xF2	; 242
     4aa:	f3 e0       	ldi	r31, 0x03	; 3
     4ac:	61 81       	ldd	r22, Z+1	; 0x01
     4ae:	6f 71       	andi	r22, 0x1F	; 31
     4b0:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	76 2f       	mov	r23, r22
     4b6:	66 27       	eor	r22, r22
     4b8:	82 81       	ldd	r24, Z+2	; 0x02
     4ba:	68 2b       	or	r22, r24
     4bc:	ce 01       	movw	r24, r28
     4be:	c5 d6       	rcall	.+3466   	; 0x124a <handle_temp_sensor>
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <handle_can>:

///////////////////////  CAN  /////////////////////////


//receiving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	8c 01       	movw	r16, r24
     4d2:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx) && vals->motor_status != ERR){
     4d4:	cb 01       	movw	r24, r22
     4d6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <can_read_message_if_new>
     4da:	88 23       	and	r24, r24
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <handle_can+0x1a>
     4de:	52 c0       	rjmp	.+164    	; 0x584 <handle_can+0xbe>
     4e0:	f8 01       	movw	r30, r16
     4e2:	f6 88       	ldd	r15, Z+22	; 0x16
     4e4:	f4 e0       	ldi	r31, 0x04	; 4
     4e6:	ff 16       	cp	r15, r31
     4e8:	09 f4       	brne	.+2      	; 0x4ec <handle_can+0x26>
     4ea:	4c c0       	rjmp	.+152    	; 0x584 <handle_can+0xbe>
		switch (rx->id){
     4ec:	88 81       	ld	r24, Y
     4ee:	99 81       	ldd	r25, Y+1	; 0x01
     4f0:	80 33       	cpi	r24, 0x30	; 48
     4f2:	92 40       	sbci	r25, 0x02	; 2
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <handle_can+0x32>
     4f6:	46 c0       	rjmp	.+140    	; 0x584 <handle_can+0xbe>
			case DASHBOARD_CAN_ID	: //receiving can messages from the steering wheel
				
				vals->message_mode = CAN ;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	f8 01       	movw	r30, r16
     4fc:	87 8b       	std	Z+23, r24	; 0x17
				vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ; // resetting to max value each time a message is received.
     4fe:	88 ec       	ldi	r24, 0xC8	; 200
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	95 8b       	std	Z+21, r25	; 0x15
     504:	84 8b       	std	Z+20, r24	; 0x14

				if (rx->data.u8[3] > 10 && (vals->motor_status == IDLE || vals->motor_status == ACCEL))
     506:	6e 81       	ldd	r22, Y+6	; 0x06
     508:	6b 30       	cpi	r22, 0x0B	; 11
     50a:	e0 f0       	brcs	.+56     	; 0x544 <handle_can+0x7e>
     50c:	8f 2d       	mov	r24, r15
     50e:	8d 7f       	andi	r24, 0xFD	; 253
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	c1 f4       	brne	.+48     	; 0x544 <handle_can+0x7e>
				{
					if (vals->ctrl_type == PWM)
     514:	83 8d       	ldd	r24, Z+27	; 0x1b
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	19 f4       	brne	.+6      	; 0x520 <handle_can+0x5a>
					{
						vals->u8_duty_cycle = rx->data.u8[3]+40 ;
     51a:	68 5d       	subi	r22, 0xD8	; 216
     51c:	63 8b       	std	Z+19, r22	; 0x13
     51e:	14 c0       	rjmp	.+40     	; 0x548 <handle_can+0x82>
					}else if (vals->ctrl_type == CURRENT)
     520:	81 11       	cpse	r24, r1
     522:	12 c0       	rjmp	.+36     	; 0x548 <handle_can+0x82>
					{
						vals->i8_throttle_cmd = rx->data.u8[3]/10.0 ;
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatsisf>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e2       	ldi	r20, 0x20	; 32
     534:	51 e4       	ldi	r21, 0x41	; 65
     536:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__divsf3>
     53a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     53e:	f8 01       	movw	r30, r16
     540:	62 8b       	std	Z+18, r22	; 0x12
     542:	02 c0       	rjmp	.+4      	; 0x548 <handle_can+0x82>
					}
					
				} else {
					vals->i8_throttle_cmd = 0;
     544:	f8 01       	movw	r30, r16
     546:	12 8a       	std	Z+18, r1	; 0x12
				}
				
				if (rx->data.u8[2] > 25 && (vals->motor_status == IDLE || vals->motor_status == BRAKE))
     548:	6d 81       	ldd	r22, Y+5	; 0x05
     54a:	6a 31       	cpi	r22, 0x1A	; 26
     54c:	c8 f0       	brcs	.+50     	; 0x580 <handle_can+0xba>
     54e:	8e ef       	ldi	r24, 0xFE	; 254
     550:	8f 0d       	add	r24, r15
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	a8 f4       	brcc	.+42     	; 0x580 <handle_can+0xba>
				{
					vals->i8_throttle_cmd = -rx->data.u8[2]/20.0 ;
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	71 95       	neg	r23
     55a:	61 95       	neg	r22
     55c:	71 09       	sbc	r23, r1
     55e:	07 2e       	mov	r0, r23
     560:	00 0c       	add	r0, r0
     562:	88 0b       	sbc	r24, r24
     564:	99 0b       	sbc	r25, r25
     566:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatsisf>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 ea       	ldi	r20, 0xA0	; 160
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__divsf3>
     576:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     57a:	f8 01       	movw	r30, r16
     57c:	62 8b       	std	Z+18, r22	; 0x12
     57e:	02 c0       	rjmp	.+4      	; 0x584 <handle_can+0xbe>
				}else{
					vals->i8_throttle_cmd = 0;
     580:	f8 01       	movw	r30, r16
     582:	12 8a       	std	Z+18, r1	; 0x12
				}
			break;
		}
	}
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	08 95       	ret

00000590 <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
	
	txFrame.id = MOTOR_CAN_ID;
     59c:	e9 e9       	ldi	r30, 0x99	; 153
     59e:	f5 e0       	ldi	r31, 0x05	; 5
     5a0:	20 e5       	ldi	r18, 0x50	; 80
     5a2:	32 e0       	ldi	r19, 0x02	; 2
     5a4:	31 83       	std	Z+1, r19	; 0x01
     5a6:	20 83       	st	Z, r18
	txFrame.length = 8;
     5a8:	28 e0       	ldi	r18, 0x08	; 8
     5aa:	22 83       	std	Z+2, r18	; 0x02
	
	if(*send){
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 81       	ld	r18, Z
     5b0:	22 23       	and	r18, r18
     5b2:	71 f1       	breq	.+92     	; 0x610 <handle_motor_status_can_msg+0x80>
     5b4:	eb 01       	movw	r28, r22
     5b6:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     5b8:	0f 2e       	mov	r0, r31
     5ba:	f9 e9       	ldi	r31, 0x99	; 153
     5bc:	ef 2e       	mov	r14, r31
     5be:	f5 e0       	ldi	r31, 0x05	; 5
     5c0:	ff 2e       	mov	r15, r31
     5c2:	f0 2d       	mov	r31, r0
     5c4:	8e 89       	ldd	r24, Y+22	; 0x16
     5c6:	f7 01       	movw	r30, r14
     5c8:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = vals->u8_duty_cycle;
     5ca:	8b 89       	ldd	r24, Y+19	; 0x13
     5cc:	84 83       	std	Z+4, r24	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     5ce:	68 81       	ld	r22, Y
     5d0:	79 81       	ldd	r23, Y+1	; 0x01
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	9b 81       	ldd	r25, Y+3	; 0x03
     5d6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fixunssfsi>
     5da:	f7 01       	movw	r30, r14
     5dc:	76 83       	std	Z+6, r23	; 0x06
     5de:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = (uint16_t)(vals->f32_energy*1000) ;
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	4a e7       	ldi	r20, 0x7A	; 122
     5e6:	54 e4       	ldi	r21, 0x44	; 68
     5e8:	6c 85       	ldd	r22, Y+12	; 0x0c
     5ea:	7d 85       	ldd	r23, Y+13	; 0x0d
     5ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     5ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     5f0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     5f4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fixunssfsi>
     5f8:	f7 01       	movw	r30, r14
     5fa:	70 87       	std	Z+8, r23	; 0x08
     5fc:	67 83       	std	Z+7, r22	; 0x07
		txFrame.data.u16[3] = vals->u8_car_speed ;
     5fe:	89 89       	ldd	r24, Y+17	; 0x11
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	92 87       	std	Z+10, r25	; 0x0a
     604:	81 87       	std	Z+9, r24	; 0x09
		//add motor temp
		
		can_send_message(&txFrame);
     606:	c7 01       	movw	r24, r14
     608:	0e 94 9d 0b 	call	0x173a	; 0x173a <can_send_message>
		*send = 0;
     60c:	f8 01       	movw	r30, r16
     60e:	10 82       	st	Z, r1
	}
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret

0000061e <receive_uart>:
///////////////////  UART  ////////////////////

//receiving 
uint8_t u8_uart_welcome = 0;
void receive_uart(ModuleValues_t * vals)
{
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	00 d0       	rcall	.+0      	; 0x62a <receive_uart+0xc>
     62a:	00 d0       	rcall	.+0      	; 0x62c <receive_uart+0xe>
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	ac 01       	movw	r20, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     632:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <rx0_Head>
     636:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <rx0_Tail>
	if(uart_AvailableBytes()!=0){
     63a:	92 1b       	sub	r25, r18
     63c:	9f 71       	andi	r25, 0x1F	; 31
     63e:	09 f4       	brne	.+2      	; 0x642 <receive_uart+0x24>
     640:	aa c0       	rjmp	.+340    	; 0x796 <receive_uart+0x178>
     642:	8a 01       	movw	r16, r20
		
		if (u8_uart_welcome == 2 && vals->message_mode == UART)
     644:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <u8_uart_welcome>
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	09 f0       	breq	.+2      	; 0x64e <receive_uart+0x30>
     64c:	54 c0       	rjmp	.+168    	; 0x6f6 <receive_uart+0xd8>
     64e:	fa 01       	movw	r30, r20
     650:	87 89       	ldd	r24, Z+23	; 0x17
     652:	81 11       	cpse	r24, r1
		{
			volatile int16_t i16_data_received=uart_getint();
     654:	a0 c0       	rjmp	.+320    	; 0x796 <receive_uart+0x178>
     656:	32 d3       	rcall	.+1636   	; 0xcbc <uart0_getint>
			uart_flush();
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	8b 83       	std	Y+3, r24	; 0x03
			
			if (i16_data_received == 11)
     65c:	b4 d2       	rcall	.+1384   	; 0xbc6 <uart0_flush>
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	9c 81       	ldd	r25, Y+4	; 0x04
     662:	0b 97       	sbiw	r24, 0x0b	; 11
			{
				vals->ctrl_type = CURRENT;
     664:	69 f4       	brne	.+26     	; 0x680 <receive_uart+0x62>
     666:	f8 01       	movw	r30, r16
				printf("\nCURRENT control mode activated.\n");
     668:	13 8e       	std	Z+27, r1	; 0x1b
     66a:	8f e2       	ldi	r24, 0x2F	; 47
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				vals->b_send_uart_data = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	f8 01       	movw	r30, r16
				vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     676:	84 8f       	std	Z+28, r24	; 0x1c
     678:	88 ec       	ldi	r24, 0xC8	; 200
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	95 8b       	std	Z+21, r25	; 0x15
			}
			
			if (i16_data_received == 12)
     67e:	84 8b       	std	Z+20, r24	; 0x14
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	9c 81       	ldd	r25, Y+4	; 0x04
     684:	0c 97       	sbiw	r24, 0x0c	; 12
			{
				vals->ctrl_type = PWM;
     686:	71 f4       	brne	.+28     	; 0x6a4 <receive_uart+0x86>
     688:	ff 24       	eor	r15, r15
     68a:	f3 94       	inc	r15
     68c:	f8 01       	movw	r30, r16
				printf("\nPWM control mode activated.\n");
     68e:	f3 8e       	std	Z+27, r15	; 0x1b
     690:	80 e5       	ldi	r24, 0x50	; 80
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				vals->b_send_uart_data = 1;
     698:	f8 01       	movw	r30, r16
				vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     69a:	f4 8e       	std	Z+28, r15	; 0x1c
     69c:	88 ec       	ldi	r24, 0xC8	; 200
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	95 8b       	std	Z+21, r25	; 0x15
			}
			
			if (i16_data_received == 13)
     6a2:	84 8b       	std	Z+20, r24	; 0x14
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	9c 81       	ldd	r25, Y+4	; 0x04
     6a8:	0d 97       	sbiw	r24, 0x0d	; 13
			{
				vals->u16_watchdog = 0;
     6aa:	69 f4       	brne	.+26     	; 0x6c6 <receive_uart+0xa8>
     6ac:	f8 01       	movw	r30, r16
     6ae:	15 8a       	std	Z+21, r1	; 0x15
				printf("\nTurning off.\n");
     6b0:	14 8a       	std	Z+20, r1	; 0x14
     6b2:	8d e6       	ldi	r24, 0x6D	; 109
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				printf("Drivers deactivated.\n");
     6ba:	8b e7       	ldi	r24, 0x7B	; 123
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				vals->b_send_uart_data = 0;
     6c2:	f8 01       	movw	r30, r16
			}
			
			if (vals->ctrl_type == CURRENT)
     6c4:	14 8e       	std	Z+28, r1	; 0x1c
     6c6:	f8 01       	movw	r30, r16
     6c8:	83 8d       	ldd	r24, Z+27	; 0x1b
     6ca:	81 11       	cpse	r24, r1
			{
				if (i16_data_received > -10 && i16_data_received < 10) //limited braking and acceleration at 10A
     6cc:	0e c0       	rjmp	.+28     	; 0x6ea <receive_uart+0xcc>
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	9c 81       	ldd	r25, Y+4	; 0x04
     6d2:	87 3f       	cpi	r24, 0xF7	; 247
     6d4:	9f 4f       	sbci	r25, 0xFF	; 255
     6d6:	7c f0       	brlt	.+30     	; 0x6f6 <receive_uart+0xd8>
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	0a 97       	sbiw	r24, 0x0a	; 10
				{
					vals->i8_throttle_cmd = i16_data_received ;
     6de:	5c f4       	brge	.+22     	; 0x6f6 <receive_uart+0xd8>
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	f8 01       	movw	r30, r16
     6e6:	82 8b       	std	Z+18, r24	; 0x12
				}
				
			}else if (vals->ctrl_type == PWM)
     6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <receive_uart+0xd8>
     6ea:	81 30       	cpi	r24, 0x01	; 1
			{
				vals->u8_duty_cycle = i16_data_received;
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <receive_uart+0xd8>
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	f8 01       	movw	r30, r16
			}
		}
		
		if (u8_uart_welcome == 1)
     6f4:	83 8b       	std	Z+19, r24	; 0x13
     6f6:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <u8_uart_welcome>
		{
			volatile int16_t i16_data_received=uart_getint();
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	c1 f5       	brne	.+112    	; 0x76e <receive_uart+0x150>
     6fe:	de d2       	rcall	.+1468   	; 0xcbc <uart0_getint>
			uart_flush();
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
			if (i16_data_received == 1)
     704:	60 d2       	rcall	.+1216   	; 0xbc6 <uart0_flush>
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	01 97       	sbiw	r24, 0x01	; 1
			{//can ctrl
				printf("\n CAN control mode. sending data.\n");
     70c:	79 f4       	brne	.+30     	; 0x72c <receive_uart+0x10e>
     70e:	80 e9       	ldi	r24, 0x90	; 144
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				vals->b_send_uart_data = 1;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	f8 01       	movw	r30, r16
				u8_uart_welcome = 2;
     71a:	84 8f       	std	Z+28, r24	; 0x1c
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <u8_uart_welcome>
			}
			if (i16_data_received == 2)
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	9a 81       	ldd	r25, Y+2	; 0x02
     726:	02 97       	sbiw	r24, 0x02	; 2
     728:	b1 f5       	brne	.+108    	; 0x796 <receive_uart+0x178>
     72a:	04 c0       	rjmp	.+8      	; 0x734 <receive_uart+0x116>
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	02 97       	sbiw	r24, 0x02	; 2
			{//uart ctrl
				vals->message_mode = UART ;
     732:	e9 f4       	brne	.+58     	; 0x76e <receive_uart+0x150>
     734:	f8 01       	movw	r30, r16
				u8_uart_welcome = 2;
     736:	17 8a       	std	Z+23, r1	; 0x17
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <u8_uart_welcome>
				printf("UART message mode activated.\n\n");
     73e:	82 eb       	ldi	r24, 0xB2	; 178
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				
				printf("for CURRENT control mode, write: 11, followed by a space\n");
     746:	80 ed       	ldi	r24, 0xD0	; 208
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				printf("for PWM control mode, write:     12, followed by a space\n");
     74e:	89 e0       	ldi	r24, 0x09	; 9
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				printf("to turn OFF, write:              13, followed by a space\n\n");
     756:	82 e4       	ldi	r24, 0x42	; 66
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				
				printf("In CURRENT, for acceleration or braking, write the number of Amps (integers, [-10 10]), followed by a space\n\n");
     75e:	8c e7       	ldi	r24, 0x7C	; 124
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
				
				printf("In PWM, write the duty cycle (integers, [5 95]), followed by a space\n");
     766:	89 ee       	ldi	r24, 0xE9	; 233
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
			}
		}
		
		if (u8_uart_welcome == 0)
     76e:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <u8_uart_welcome>
     772:	81 11       	cpse	r24, r1
		{
			//first uart cmd received
			printf("Welcome to the UART interface of motor drive v2.1.\n");
     774:	10 c0       	rjmp	.+32     	; 0x796 <receive_uart+0x178>
     776:	8e e2       	ldi	r24, 0x2E	; 46
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
			printf("To use the CAN bus as control medium, type: 1 followed by a space.\n");
     77e:	81 e6       	ldi	r24, 0x61	; 97
     780:	93 e0       	ldi	r25, 0x03	; 3
			printf("To use the UART as control medium, type:    2 followed by a space.\n");
     782:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
     786:	84 ea       	ldi	r24, 0xA4	; 164
			uart_flush();
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <puts>
			u8_uart_welcome = 1;
     78e:	1b d2       	rcall	.+1078   	; 0xbc6 <uart0_flush>
     790:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     792:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <u8_uart_welcome>
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	08 95       	ret

000007aa <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(ModuleValues_t vals)
{
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
	printf(",");
	printf("%u",vals.u8_duty_cycle);
	printf(",");
	printf("%u",vals.i8_throttle_cmd);
	printf("\n");*/
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(ModuleValues_t vals)
{	
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     7c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	f9 f0       	breq	.+62     	; 0x804 <manage_LEDs+0x4c>
     7c6:	28 f4       	brcc	.+10     	; 0x7d2 <manage_LEDs+0x1a>
     7c8:	88 23       	and	r24, r24
     7ca:	41 f0       	breq	.+16     	; 0x7dc <manage_LEDs+0x24>
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	81 f0       	breq	.+32     	; 0x7f0 <manage_LEDs+0x38>
     7d0:	36 c0       	rjmp	.+108    	; 0x83e <manage_LEDs+0x86>
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	09 f1       	breq	.+66     	; 0x818 <manage_LEDs+0x60>
     7d6:	84 30       	cpi	r24, 0x04	; 4
     7d8:	49 f1       	breq	.+82     	; 0x82c <manage_LEDs+0x74>
     7da:	31 c0       	rjmp	.+98     	; 0x83e <manage_LEDs+0x86>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_off(LED_RED);
     7e2:	80 e2       	ldi	r24, 0x20	; 32
     7e4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     7e8:	80 e8       	ldi	r24, 0x80	; 128
     7ea:	0e 94 25 0c 	call	0x184a	; 0x184a <rgbled_turn_on>
		break ;
     7ee:	27 c0       	rjmp	.+78     	; 0x83e <manage_LEDs+0x86>
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     7f0:	80 e2       	ldi	r24, 0x20	; 32
     7f2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     7fc:	80 e4       	ldi	r24, 0x40	; 64
     7fe:	0e 94 2a 0c 	call	0x1854	; 0x1854 <rgbled_toggle>
		break;
     802:	1d c0       	rjmp	.+58     	; 0x83e <manage_LEDs+0x86>
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     804:	80 e2       	ldi	r24, 0x20	; 32
     806:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     80a:	80 e8       	ldi	r24, 0x80	; 128
     80c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     810:	80 e4       	ldi	r24, 0x40	; 64
     812:	0e 94 2a 0c 	call	0x1854	; 0x1854 <rgbled_toggle>
		break;
     816:	13 c0       	rjmp	.+38     	; 0x83e <manage_LEDs+0x86>
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     818:	80 e2       	ldi	r24, 0x20	; 32
     81a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     824:	80 e4       	ldi	r24, 0x40	; 64
     826:	0e 94 25 0c 	call	0x184a	; 0x184a <rgbled_turn_on>
		break;
     82a:	09 c0       	rjmp	.+18     	; 0x83e <manage_LEDs+0x86>
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     832:	80 e8       	ldi	r24, 0x80	; 128
     834:	0e 94 1b 0c 	call	0x1836	; 0x1836 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     838:	80 e2       	ldi	r24, 0x20	; 32
     83a:	0e 94 25 0c 	call	0x184a	; 0x184a <rgbled_turn_on>
		break;
	}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     844:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     846:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     848:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     84a:	ea e6       	ldi	r30, 0x6A	; 106
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	8c 60       	ori	r24, 0x0C	; 12
     852:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     854:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     856:	ed 9a       	sbi	0x1d, 5	; 29
     858:	08 95       	ret

0000085a <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint16_t u16_period) // period in ms
{
     85a:	8f 92       	push	r8
     85c:	9f 92       	push	r9
     85e:	af 92       	push	r10
     860:	bf 92       	push	r11
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	6c 01       	movw	r12, r24
     87a:	7b 01       	movw	r14, r22
     87c:	8a 01       	movw	r16, r20
	volatile uint8_t u8_new_speed = (uint8_t)(((float)*u16_counter)*D_WHEEL*PI/N_MAG/u16_period); // speed calculated in mm/ms
     87e:	fb 01       	movw	r30, r22
     880:	60 81       	ld	r22, Z
     882:	71 81       	ldd	r23, Z+1	; 0x01
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	4a ef       	ldi	r20, 0xFA	; 250
     892:	53 e4       	ldi	r21, 0x43	; 67
     894:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     898:	23 ec       	ldi	r18, 0xC3	; 195
     89a:	35 ef       	ldi	r19, 0xF5	; 245
     89c:	48 e4       	ldi	r20, 0x48	; 72
     89e:	50 e4       	ldi	r21, 0x40	; 64
     8a0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     8a4:	4b 01       	movw	r8, r22
     8a6:	5c 01       	movw	r10, r24
     8a8:	b8 01       	movw	r22, r16
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	c5 01       	movw	r24, r10
     8b8:	b4 01       	movw	r22, r8
     8ba:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__divsf3>
     8be:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fixunssfsi>
     8c2:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	f6 01       	movw	r30, r12
     8c8:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     8ca:	f7 01       	movw	r30, r14
     8cc:	11 82       	std	Z+1, r1	; 0x01
     8ce:	10 82       	st	Z, r1
}
     8d0:	0f 90       	pop	r0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	08 95       	ret

000008ec <state_handler>:
#define MAX_TEMP 100

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
     8ec:	8f 92       	push	r8
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	ec 01       	movw	r28, r24
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     906:	c8 84       	ldd	r12, Y+8	; 0x08
     908:	d9 84       	ldd	r13, Y+9	; 0x09
     90a:	ea 84       	ldd	r14, Y+10	; 0x0a
     90c:	fb 84       	ldd	r15, Y+11	; 0x0b
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e7       	ldi	r20, 0x70	; 112
     914:	51 e4       	ldi	r21, 0x41	; 65
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__gesf2>
     91e:	88 23       	and	r24, r24
     920:	5c f1       	brlt	.+86     	; 0x978 <state_handler+0x8c>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	48 ec       	ldi	r20, 0xC8	; 200
     928:	52 e4       	ldi	r21, 0x42	; 66
     92a:	c7 01       	movw	r24, r14
     92c:	b6 01       	movw	r22, r12
     92e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__cmpsf2>
     932:	88 23       	and	r24, r24
     934:	0c f4       	brge	.+2      	; 0x938 <state_handler+0x4c>
     936:	c7 c0       	rjmp	.+398    	; 0xac6 <state_handler+0x1da>
     938:	f1 2c       	mov	r15, r1
     93a:	22 c0       	rjmp	.+68     	; 0x980 <state_handler+0x94>
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	4c e5       	ldi	r20, 0x5C	; 92
     942:	52 e4       	ldi	r21, 0x42	; 66
     944:	c7 01       	movw	r24, r14
     946:	b6 01       	movw	r22, r12
     948:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__gesf2>
     94c:	18 16       	cp	r1, r24
     94e:	b4 f4       	brge	.+44     	; 0x97c <state_handler+0x90>
	{
		b_major_fault = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <b_major_fault>
	}
	
	switch(vals->motor_status)
     956:	8e 89       	ldd	r24, Y+22	; 0x16
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	09 f4       	brne	.+2      	; 0x95e <state_handler+0x72>
     95c:	6f c0       	rjmp	.+222    	; 0xa3c <state_handler+0x150>
     95e:	30 f4       	brcc	.+12     	; 0x96c <state_handler+0x80>
     960:	88 23       	and	r24, r24
     962:	f9 f0       	breq	.+62     	; 0x9a2 <state_handler+0xb6>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	09 f4       	brne	.+2      	; 0x96a <state_handler+0x7e>
     968:	4f c0       	rjmp	.+158    	; 0xa08 <state_handler+0x11c>
     96a:	96 c0       	rjmp	.+300    	; 0xa98 <state_handler+0x1ac>
     96c:	83 30       	cpi	r24, 0x03	; 3
     96e:	59 f1       	breq	.+86     	; 0x9c6 <state_handler+0xda>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <state_handler+0x8a>
     974:	87 c0       	rjmp	.+270    	; 0xa84 <state_handler+0x198>
     976:	90 c0       	rjmp	.+288    	; 0xa98 <state_handler+0x1ac>

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     978:	f1 2c       	mov	r15, r1
     97a:	02 c0       	rjmp	.+4      	; 0x980 <state_handler+0x94>
     97c:	ff 24       	eor	r15, r15
     97e:	f3 94       	inc	r15
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
	{
		b_major_fault = 1;
	}
	
	switch(vals->motor_status)
     980:	8e 89       	ldd	r24, Y+22	; 0x16
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	09 f4       	brne	.+2      	; 0x988 <state_handler+0x9c>
     986:	5c c0       	rjmp	.+184    	; 0xa40 <state_handler+0x154>
     988:	30 f4       	brcc	.+12     	; 0x996 <state_handler+0xaa>
     98a:	88 23       	and	r24, r24
     98c:	61 f0       	breq	.+24     	; 0x9a6 <state_handler+0xba>
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	09 f4       	brne	.+2      	; 0x994 <state_handler+0xa8>
     992:	3c c0       	rjmp	.+120    	; 0xa0c <state_handler+0x120>
     994:	83 c0       	rjmp	.+262    	; 0xa9c <state_handler+0x1b0>
     996:	83 30       	cpi	r24, 0x03	; 3
     998:	c1 f0       	breq	.+48     	; 0x9ca <state_handler+0xde>
     99a:	84 30       	cpi	r24, 0x04	; 4
     99c:	09 f4       	brne	.+2      	; 0x9a0 <state_handler+0xb4>
     99e:	68 c0       	rjmp	.+208    	; 0xa70 <state_handler+0x184>
     9a0:	7d c0       	rjmp	.+250    	; 0xa9c <state_handler+0x1b0>

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     9a2:	ff 24       	eor	r15, r15
     9a4:	f3 94       	inc	r15
	
	switch(vals->motor_status)
	{
		case OFF:
			//transition 1, CAN
			if (vals->u16_watchdog > 0 && b_board_powered)
     9a6:	8c 89       	ldd	r24, Y+20	; 0x14
     9a8:	9d 89       	ldd	r25, Y+21	; 0x15
     9aa:	89 2b       	or	r24, r25
     9ac:	21 f0       	breq	.+8      	; 0x9b6 <state_handler+0xca>
     9ae:	ff 20       	and	r15, r15
     9b0:	11 f0       	breq	.+4      	; 0x9b6 <state_handler+0xca>
			{
				vals->motor_status = IDLE;
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	8e 8b       	std	Y+22, r24	; 0x16
			}
			//During
			drivers(0);//drivers shutdown
     9b6:	80 e0       	ldi	r24, 0x00	; 0
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     9b8:	ef dc       	rcall	.-1570   	; 0x398 <drivers>
     9ba:	1a 8e       	std	Y+26, r1	; 0x1a
			vals->i8_throttle_cmd = 0;
     9bc:	92 db       	rcall	.-2268   	; 0xe2 <reset_I>
			vals->u8_duty_cycle = 50;
     9be:	1a 8a       	std	Y+18, r1	; 0x12
     9c0:	82 e3       	ldi	r24, 0x32	; 50
		
		break;
     9c2:	8b 8b       	std	Y+19, r24	; 0x13

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     9c4:	6b c0       	rjmp	.+214    	; 0xa9c <state_handler+0x1b0>
     9c6:	ff 24       	eor	r15, r15
		
		break;
		
		case IDLE: 
			//transition 5
			if (vals->i8_throttle_cmd > 0)
     9c8:	f3 94       	inc	r15
     9ca:	8a 89       	ldd	r24, Y+18	; 0x12
     9cc:	18 16       	cp	r1, r24
			{
				vals->motor_status = ACCEL;
     9ce:	14 f4       	brge	.+4      	; 0x9d4 <state_handler+0xe8>
     9d0:	91 e0       	ldi	r25, 0x01	; 1
			}
			//transition 7
			if (vals->i8_throttle_cmd < 0)
     9d2:	9e 8b       	std	Y+22, r25	; 0x16
     9d4:	88 23       	and	r24, r24
			{
				vals->motor_status = BRAKE;
     9d6:	14 f4       	brge	.+4      	; 0x9dc <state_handler+0xf0>
			}
			drivers(1);//drivers enable
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	8e 8b       	std	Y+22, r24	; 0x16
     9dc:	81 e0       	ldi	r24, 0x01	; 1
			controller(vals->i8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type); //current law running with 0 torque
     9de:	dc dc       	rcall	.-1608   	; 0x398 <drivers>
     9e0:	88 80       	ld	r8, Y
     9e2:	99 80       	ldd	r9, Y+1	; 0x01
     9e4:	aa 80       	ldd	r10, Y+2	; 0x02
     9e6:	bb 80       	ldd	r11, Y+3	; 0x03
     9e8:	6a 89       	ldd	r22, Y+18	; 0x12
     9ea:	06 2e       	mov	r0, r22
     9ec:	00 0c       	add	r0, r0
     9ee:	77 0b       	sbc	r23, r23
     9f0:	88 0b       	sbc	r24, r24
     9f2:	99 0b       	sbc	r25, r25
     9f4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatsisf>
     9f8:	eb 8c       	ldd	r14, Y+27	; 0x1b
     9fa:	8e 01       	movw	r16, r28
     9fc:	0d 5e       	subi	r16, 0xED	; 237
     9fe:	1f 4f       	sbci	r17, 0xFF	; 255
     a00:	a5 01       	movw	r20, r10
     a02:	94 01       	movw	r18, r8
			//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
		break;
     a04:	77 db       	rcall	.-2322   	; 0xf4 <controller>

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a06:	4a c0       	rjmp	.+148    	; 0xa9c <state_handler+0x1b0>
     a08:	ff 24       	eor	r15, r15
			//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
		break;
		
		case ACCEL:
			//transition 6
			if (vals->i8_throttle_cmd == 0)
     a0a:	f3 94       	inc	r15
     a0c:	6a 89       	ldd	r22, Y+18	; 0x12
     a0e:	61 11       	cpse	r22, r1
			{
				vals->motor_status = IDLE;
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <state_handler+0x12a>
     a12:	83 e0       	ldi	r24, 0x03	; 3
			}
			controller(vals->i8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type);
     a14:	8e 8b       	std	Y+22, r24	; 0x16
     a16:	88 80       	ld	r8, Y
     a18:	99 80       	ldd	r9, Y+1	; 0x01
     a1a:	aa 80       	ldd	r10, Y+2	; 0x02
     a1c:	bb 80       	ldd	r11, Y+3	; 0x03
     a1e:	06 2e       	mov	r0, r22
     a20:	00 0c       	add	r0, r0
     a22:	77 0b       	sbc	r23, r23
     a24:	88 0b       	sbc	r24, r24
     a26:	99 0b       	sbc	r25, r25
     a28:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatsisf>
     a2c:	eb 8c       	ldd	r14, Y+27	; 0x1b
     a2e:	8e 01       	movw	r16, r28
     a30:	0d 5e       	subi	r16, 0xED	; 237
     a32:	1f 4f       	sbci	r17, 0xFF	; 255
     a34:	a5 01       	movw	r20, r10
     a36:	94 01       	movw	r18, r8
		break;
     a38:	5d db       	rcall	.-2374   	; 0xf4 <controller>

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a3a:	30 c0       	rjmp	.+96     	; 0xa9c <state_handler+0x1b0>
     a3c:	ff 24       	eor	r15, r15
			controller(vals->i8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type);
		break;
		
		case BRAKE:
			//transition 8
			if (vals->i8_throttle_cmd == 0)
     a3e:	f3 94       	inc	r15
     a40:	6a 89       	ldd	r22, Y+18	; 0x12
     a42:	61 11       	cpse	r22, r1
			{
				vals->motor_status = IDLE;
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <state_handler+0x15e>
     a46:	83 e0       	ldi	r24, 0x03	; 3
			}
			controller(vals->i8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle,vals->ctrl_type); //negative throttle cmd
     a48:	8e 8b       	std	Y+22, r24	; 0x16
     a4a:	88 80       	ld	r8, Y
     a4c:	99 80       	ldd	r9, Y+1	; 0x01
     a4e:	aa 80       	ldd	r10, Y+2	; 0x02
     a50:	bb 80       	ldd	r11, Y+3	; 0x03
     a52:	06 2e       	mov	r0, r22
     a54:	00 0c       	add	r0, r0
     a56:	77 0b       	sbc	r23, r23
     a58:	88 0b       	sbc	r24, r24
     a5a:	99 0b       	sbc	r25, r25
     a5c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatsisf>
     a60:	eb 8c       	ldd	r14, Y+27	; 0x1b
     a62:	8e 01       	movw	r16, r28
     a64:	0d 5e       	subi	r16, 0xED	; 237
     a66:	1f 4f       	sbci	r17, 0xFF	; 255
     a68:	a5 01       	movw	r20, r10
     a6a:	94 01       	movw	r18, r8
		break;
     a6c:	43 db       	rcall	.-2426   	; 0xf4 <controller>
		
		case ERR:
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
     a6e:	16 c0       	rjmp	.+44     	; 0xa9c <state_handler+0x1b0>
     a70:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <b_major_fault>
     a74:	81 11       	cpse	r24, r1
     a76:	08 c0       	rjmp	.+16     	; 0xa88 <state_handler+0x19c>
     a78:	88 89       	ldd	r24, Y+16	; 0x10
			{
				//transition 4
				vals->motor_status = IDLE;
     a7a:	84 36       	cpi	r24, 0x64	; 100

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a7c:	28 f4       	brcc	.+10     	; 0xa88 <state_handler+0x19c>
     a7e:	83 e0       	ldi	r24, 0x03	; 3
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
			{
				//transition 4
				vals->motor_status = IDLE;
			}
			drivers(0);//drivers shutdown
     a80:	8e 8b       	std	Y+22, r24	; 0x16
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <state_handler+0x19c>
     a84:	ff 24       	eor	r15, r15
			vals->b_driver_status = 0;
     a86:	f3 94       	inc	r15
			reset_I(); //reset integrator
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	86 dc       	rcall	.-1780   	; 0x398 <drivers>
			vals->i8_throttle_cmd = 0;
     a8c:	1a 8e       	std	Y+26, r1	; 0x1a
			vals->u8_duty_cycle = 50 ;
     a8e:	29 db       	rcall	.-2478   	; 0xe2 <reset_I>
     a90:	1a 8a       	std	Y+18, r1	; 0x12
		break;	
     a92:	82 e3       	ldi	r24, 0x32	; 50

static uint8_t b_major_fault = 0;

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a94:	8b 8b       	std	Y+19, r24	; 0x13
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <state_handler+0x1b0>
			vals->i8_throttle_cmd = 0;
			vals->u8_duty_cycle = 50 ;
		break;	
	}
	
	if ((vals->motor_status == IDLE || vals->motor_status == ACCEL || vals->motor_status == BRAKE) && (vals->u16_watchdog == 0 || !b_board_powered))
     a98:	ff 24       	eor	r15, r15
     a9a:	f3 94       	inc	r15
     a9c:	8e 89       	ldd	r24, Y+22	; 0x16
     a9e:	81 50       	subi	r24, 0x01	; 1
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	38 f4       	brcc	.+14     	; 0xab2 <state_handler+0x1c6>
     aa4:	8c 89       	ldd	r24, Y+20	; 0x14
     aa6:	9d 89       	ldd	r25, Y+21	; 0x15
     aa8:	89 2b       	or	r24, r25
     aaa:	11 f0       	breq	.+4      	; 0xab0 <state_handler+0x1c4>
	{
		// transition 2
		vals->motor_status = OFF;
     aac:	f1 10       	cpse	r15, r1
	}
	
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <state_handler+0x1c6>
     ab0:	1e 8a       	std	Y+22, r1	; 0x16
     ab2:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <b_major_fault>
     ab6:	81 11       	cpse	r24, r1
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <state_handler+0x1d4>
     aba:	88 89       	ldd	r24, Y+16	; 0x10
	{
		//transition 3
		vals->motor_status = ERR;
     abc:	84 36       	cpi	r24, 0x64	; 100
     abe:	88 f0       	brcs	.+34     	; 0xae2 <state_handler+0x1f6>
	}
     ac0:	84 e0       	ldi	r24, 0x04	; 4

void state_handler(ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     ac2:	8e 8b       	std	Y+22, r24	; 0x16
     ac4:	0e c0       	rjmp	.+28     	; 0xae2 <state_handler+0x1f6>
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	40 e7       	ldi	r20, 0x70	; 112
     acc:	51 e4       	ldi	r21, 0x41	; 65
     ace:	68 81       	ld	r22, Y
     ad0:	79 81       	ldd	r23, Y+1	; 0x01
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	9b 81       	ldd	r25, Y+3	; 0x03
     ad6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__gesf2>
     ada:	88 23       	and	r24, r24
     adc:	0c f0       	brlt	.+2      	; 0xae0 <state_handler+0x1f4>
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		//transition 3
		vals->motor_status = ERR;
	}
     ade:	38 cf       	rjmp	.-400    	; 0x950 <state_handler+0x64>
     ae0:	2d cf       	rjmp	.-422    	; 0x93c <state_handler+0x50>
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	08 95       	ret

00000afc <pwm_init>:

#include "pwm.h"
#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     b00:	8e b1       	in	r24, 0x0e	; 14
     b02:	87 7e       	andi	r24, 0xE7	; 231
     b04:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     b06:	8d b1       	in	r24, 0x0d	; 13
     b08:	88 61       	ori	r24, 0x18	; 24
     b0a:	8d b9       	out	0x0d, r24	; 13
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
		
	}else{//UNIPOLAR
		
		//Timer 3 phase correct pwm, TOP at ICR (mode 10)
		TCCR3B |= (1<<WGM33);
     b0c:	a1 e9       	ldi	r26, 0x91	; 145
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	8c 91       	ld	r24, X
     b12:	80 61       	ori	r24, 0x10	; 16
     b14:	8c 93       	st	X, r24
		TCCR3B &= ~(1<<WGM32);
     b16:	8c 91       	ld	r24, X
     b18:	87 7f       	andi	r24, 0xF7	; 247
     b1a:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     b1c:	e0 e9       	ldi	r30, 0x90	; 144
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	82 60       	ori	r24, 0x02	; 2
     b24:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     b26:	80 81       	ld	r24, Z
     b28:	8e 7f       	andi	r24, 0xFE	; 254
     b2a:	80 83       	st	Z, r24
		
		// Set OC3A on Compare Match when up-counting. clear OC3A on Compare Match when downcounting.
		TCCR3A |= (1<<COM3A1);
     b2c:	80 81       	ld	r24, Z
     b2e:	80 68       	ori	r24, 0x80	; 128
     b30:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     b32:	80 81       	ld	r24, Z
     b34:	8f 7b       	andi	r24, 0xBF	; 191
     b36:	80 83       	st	Z, r24
		
		// Set OC3B on Compare Match when up-counting. Clear OC3B on Compare Match when downcounting.
		TCCR3A |= (1<<COM3B1);
     b38:	80 81       	ld	r24, Z
     b3a:	80 62       	ori	r24, 0x20	; 32
     b3c:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3B0);
     b3e:	80 81       	ld	r24, Z
     b40:	8f 7e       	andi	r24, 0xEF	; 239
     b42:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		TCCR3B |= (1<<CS30);
     b44:	8c 91       	ld	r24, X
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     b4a:	8c 91       	ld	r24, X
     b4c:	89 7f       	andi	r24, 0xF9	; 249
     b4e:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x85; //30kHz = 85
     b50:	c6 e9       	ldi	r28, 0x96	; 150
     b52:	d0 e0       	ldi	r29, 0x00	; 0
     b54:	85 e8       	ldi	r24, 0x85	; 133
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	99 83       	std	Y+1, r25	; 0x01
     b5a:	88 83       	st	Y, r24
		
		//initialising compare registers at Duty cycle 50%
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3
     b5c:	68 81       	ld	r22, Y
     b5e:	79 81       	ldd	r23, Y+1	; 0x01
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	ee d7       	rcall	.+4060   	; 0x1b42 <__floatunsisf>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	5f e3       	ldi	r21, 0x3F	; 63
     b6e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     b72:	b6 d7       	rcall	.+3948   	; 0x1ae0 <__fixsfsi>
     b74:	e8 e9       	ldi	r30, 0x98	; 152
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	71 83       	std	Z+1, r23	; 0x01
     b7a:	60 83       	st	Z, r22
		OCR3B = ICR3-OCR3A ; //PWM_PE4
     b7c:	88 81       	ld	r24, Y
     b7e:	99 81       	ldd	r25, Y+1	; 0x01
     b80:	20 81       	ld	r18, Z
     b82:	31 81       	ldd	r19, Z+1	; 0x01
     b84:	82 1b       	sub	r24, r18
     b86:	93 0b       	sbc	r25, r19
     b88:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     b8c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     b96:	90 91 e7 05 	lds	r25, 0x05E7	; 0x8005e7 <tx0_Head>
     b9a:	9f 5f       	subi	r25, 0xFF	; 255
     b9c:	9f 71       	andi	r25, 0x1F	; 31
     b9e:	20 91 c5 05 	lds	r18, 0x05C5	; 0x8005c5 <tx0_Tail>
     ba2:	92 17       	cp	r25, r18
     ba4:	e1 f3       	breq	.-8      	; 0xb9e <uart0_putc+0x8>
     ba6:	e9 2f       	mov	r30, r25
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	e4 5f       	subi	r30, 0xF4	; 244
     bac:	f9 4f       	sbci	r31, 0xF9	; 249
     bae:	80 83       	st	Z, r24
     bb0:	2f b7       	in	r18, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <tx0_Head>
     bb8:	e1 ec       	ldi	r30, 0xC1	; 193
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	80 62       	ori	r24, 0x20	; 32
     bc0:	80 83       	st	Z, r24
     bc2:	2f bf       	out	0x3f, r18	; 63
     bc4:	08 95       	ret

00000bc6 <uart0_flush>:
     bc6:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <tx0_Tail>
     bca:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <tx0_Head>
     bce:	98 13       	cpse	r25, r24
     bd0:	fa cf       	rjmp	.-12     	; 0xbc6 <uart0_flush>
     bd2:	08 95       	ret

00000bd4 <uart1_putc>:
     bd4:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <tx1_Head>
     bd8:	9f 5f       	subi	r25, 0xFF	; 255
     bda:	9f 71       	andi	r25, 0x1F	; 31
     bdc:	20 91 09 06 	lds	r18, 0x0609	; 0x800609 <tx1_Tail>
     be0:	92 17       	cp	r25, r18
     be2:	e1 f3       	breq	.-8      	; 0xbdc <uart1_putc+0x8>
     be4:	e9 2f       	mov	r30, r25
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	e9 53       	subi	r30, 0x39	; 57
     bea:	fa 4f       	sbci	r31, 0xFA	; 250
     bec:	80 83       	st	Z, r24
     bee:	2f b7       	in	r18, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <tx1_Head>
     bf6:	e9 ec       	ldi	r30, 0xC9	; 201
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 62       	ori	r24, 0x20	; 32
     bfe:	80 83       	st	Z, r24
     c00:	2f bf       	out	0x3f, r18	; 63
     c02:	08 95       	ret

00000c04 <uart_putchar>:
     c04:	cf 93       	push	r28
     c06:	c8 2f       	mov	r28, r24
     c08:	fb 01       	movw	r30, r22
     c0a:	84 85       	ldd	r24, Z+12	; 0x0c
     c0c:	95 85       	ldd	r25, Z+13	; 0x0d
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	39 f0       	breq	.+14     	; 0xc20 <uart_putchar+0x1c>
     c12:	ca 30       	cpi	r28, 0x0A	; 10
     c14:	11 f4       	brne	.+4      	; 0xc1a <uart_putchar+0x16>
     c16:	8d e0       	ldi	r24, 0x0D	; 13
     c18:	be df       	rcall	.-132    	; 0xb96 <uart0_putc>
     c1a:	8c 2f       	mov	r24, r28
     c1c:	bc df       	rcall	.-136    	; 0xb96 <uart0_putc>
     c1e:	06 c0       	rjmp	.+12     	; 0xc2c <uart_putchar+0x28>
     c20:	ca 30       	cpi	r28, 0x0A	; 10
     c22:	11 f4       	brne	.+4      	; 0xc28 <uart_putchar+0x24>
     c24:	8d e0       	ldi	r24, 0x0D	; 13
     c26:	d6 df       	rcall	.-84     	; 0xbd4 <uart1_putc>
     c28:	8c 2f       	mov	r24, r28
     c2a:	d4 df       	rcall	.-88     	; 0xbd4 <uart1_putc>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <uart0_getc>:
     c34:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <rx0_Tail>
     c38:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <rx0_Head>
     c3c:	89 17       	cp	r24, r25
     c3e:	59 f0       	breq	.+22     	; 0xc56 <uart0_getc+0x22>
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	98 2f       	mov	r25, r24
     c44:	9f 71       	andi	r25, 0x1F	; 31
     c46:	e9 2f       	mov	r30, r25
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ec 55       	subi	r30, 0x5C	; 92
     c4c:	fa 4f       	sbci	r31, 0xFA	; 250
     c4e:	80 81       	ld	r24, Z
     c50:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <rx0_Tail>
     c54:	08 95       	ret
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	08 95       	ret

00000c5a <uart0_getlnToFirstWhiteSpace>:
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	7c 01       	movw	r14, r24
     c68:	16 2f       	mov	r17, r22
     c6a:	e4 df       	rcall	.-56     	; 0xc34 <uart0_getc>
     c6c:	f7 01       	movw	r30, r14
     c6e:	80 83       	st	Z, r24
     c70:	81 32       	cpi	r24, 0x21	; 33
     c72:	d8 f3       	brcs	.-10     	; 0xc6a <uart0_getlnToFirstWhiteSpace+0x10>
     c74:	e7 01       	movw	r28, r14
     c76:	21 96       	adiw	r28, 0x01	; 1
     c78:	12 30       	cpi	r17, 0x02	; 2
     c7a:	c1 f0       	breq	.+48     	; 0xcac <uart0_getlnToFirstWhiteSpace+0x52>
     c7c:	13 50       	subi	r17, 0x03	; 3
     c7e:	81 2f       	mov	r24, r17
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	02 96       	adiw	r24, 0x02	; 2
     c84:	87 01       	movw	r16, r14
     c86:	08 0f       	add	r16, r24
     c88:	19 1f       	adc	r17, r25
     c8a:	d4 df       	rcall	.-88     	; 0xc34 <uart0_getc>
     c8c:	88 83       	st	Y, r24
     c8e:	88 23       	and	r24, r24
     c90:	e1 f3       	breq	.-8      	; 0xc8a <uart0_getlnToFirstWhiteSpace+0x30>
     c92:	8d 30       	cpi	r24, 0x0D	; 13
     c94:	21 f4       	brne	.+8      	; 0xc9e <uart0_getlnToFirstWhiteSpace+0x44>
     c96:	ce df       	rcall	.-100    	; 0xc34 <uart0_getc>
     c98:	88 23       	and	r24, r24
     c9a:	e9 f3       	breq	.-6      	; 0xc96 <uart0_getlnToFirstWhiteSpace+0x3c>
     c9c:	07 c0       	rjmp	.+14     	; 0xcac <uart0_getlnToFirstWhiteSpace+0x52>
     c9e:	81 32       	cpi	r24, 0x21	; 33
     ca0:	28 f0       	brcs	.+10     	; 0xcac <uart0_getlnToFirstWhiteSpace+0x52>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	0c 17       	cp	r16, r28
     ca6:	1d 07       	cpc	r17, r29
     ca8:	81 f7       	brne	.-32     	; 0xc8a <uart0_getlnToFirstWhiteSpace+0x30>
     caa:	e8 01       	movw	r28, r16
     cac:	18 82       	st	Y, r1
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	08 95       	ret

00000cbc <uart0_getint>:
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	27 97       	sbiw	r28, 0x07	; 7
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	67 e0       	ldi	r22, 0x07	; 7
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	c1 df       	rcall	.-126    	; 0xc5a <uart0_getlnToFirstWhiteSpace>
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <atoi>
     ce0:	27 96       	adiw	r28, 0x07	; 7
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <uart0_getData>:
     cf2:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <rx0_Tail>
     cf6:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <rx0_Head>
     cfa:	89 17       	cp	r24, r25
     cfc:	61 f0       	breq	.+24     	; 0xd16 <uart0_getData+0x24>
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	8f 71       	andi	r24, 0x1F	; 31
     d02:	e8 2f       	mov	r30, r24
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	ec 55       	subi	r30, 0x5C	; 92
     d08:	fa 4f       	sbci	r31, 0xFA	; 250
     d0a:	90 81       	ld	r25, Z
     d0c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <rx0_Tail>
     d10:	89 2f       	mov	r24, r25
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	08 95       	ret
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	9f ef       	ldi	r25, 0xFF	; 255
     d1a:	08 95       	ret

00000d1c <uart1_getData>:
     d1c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <rx1_Tail>
     d20:	90 91 0a 06 	lds	r25, 0x060A	; 0x80060a <rx1_Head>
     d24:	89 17       	cp	r24, r25
     d26:	61 f0       	breq	.+24     	; 0xd40 <uart1_getData+0x24>
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	8f 71       	andi	r24, 0x1F	; 31
     d2c:	e8 2f       	mov	r30, r24
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	e8 51       	subi	r30, 0x18	; 24
     d32:	fa 4f       	sbci	r31, 0xFA	; 250
     d34:	90 81       	ld	r25, Z
     d36:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <rx1_Tail>
     d3a:	89 2f       	mov	r24, r25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	08 95       	ret
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	9f ef       	ldi	r25, 0xFF	; 255
     d44:	08 95       	ret

00000d46 <uart_getchar>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	fc 01       	movw	r30, r24
     d4c:	84 85       	ldd	r24, Z+12	; 0x0c
     d4e:	95 85       	ldd	r25, Z+13	; 0x0d
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	41 f0       	breq	.+16     	; 0xd64 <uart_getchar+0x1e>
     d54:	ce df       	rcall	.-100    	; 0xcf2 <uart0_getData>
     d56:	ec 01       	movw	r28, r24
     d58:	99 23       	and	r25, r25
     d5a:	e4 f3       	brlt	.-8      	; 0xd54 <uart_getchar+0xe>
     d5c:	1c df       	rcall	.-456    	; 0xb96 <uart0_putc>
     d5e:	ce 01       	movw	r24, r28
     d60:	99 27       	eor	r25, r25
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <uart_getchar+0x2c>
     d64:	db df       	rcall	.-74     	; 0xd1c <uart1_getData>
     d66:	ec 01       	movw	r28, r24
     d68:	99 23       	and	r25, r25
     d6a:	e4 f3       	brlt	.-8      	; 0xd64 <uart_getchar+0x1e>
     d6c:	33 df       	rcall	.-410    	; 0xbd4 <uart1_putc>
     d6e:	ce 01       	movw	r24, r28
     d70:	99 27       	eor	r25, r25
     d72:	99 27       	eor	r25, r25
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     d7a:	0f 93       	push	r16
     d7c:	0f b7       	in	r16, 0x3f	; 63
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	e0 91 c5 05 	lds	r30, 0x05C5	; 0x8005c5 <tx0_Tail>
     d86:	f0 91 e7 05 	lds	r31, 0x05E7	; 0x8005e7 <tx0_Head>
     d8a:	e3 95       	inc	r30
     d8c:	ef 71       	andi	r30, 0x1F	; 31
     d8e:	ef 13       	cpse	r30, r31
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <USART0_TX_CONTINUE>
     d92:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     d96:	ff 7d       	andi	r31, 0xDF	; 223
     d98:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000d9c <USART0_TX_CONTINUE>:
     d9c:	e0 93 c5 05 	sts	0x05C5, r30	; 0x8005c5 <tx0_Tail>
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	e4 5f       	subi	r30, 0xF4	; 244
     da4:	f9 4f       	sbci	r31, 0xF9	; 249
     da6:	e0 81       	ld	r30, Z
     da8:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000dac <USART0_TX_EXIT>:
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	0f bf       	out	0x3f, r16	; 63
     db2:	0f 91       	pop	r16
     db4:	18 95       	reti

00000db6 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     db6:	0f 93       	push	r16
     db8:	0f b7       	in	r16, 0x3f	; 63
     dba:	9f 93       	push	r25
     dbc:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
     dc4:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <rx0_Head>
     dc8:	f0 91 c6 05 	lds	r31, 0x05C6	; 0x8005c6 <rx0_Tail>
     dcc:	e3 95       	inc	r30
     dce:	ef 71       	andi	r30, 0x1F	; 31
     dd0:	fe 17       	cp	r31, r30
     dd2:	31 f0       	breq	.+12     	; 0xde0 <USART0_RX_EXIT>
     dd4:	e0 93 08 06 	sts	0x0608, r30	; 0x800608 <rx0_Head>
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	ec 55       	subi	r30, 0x5C	; 92
     ddc:	fa 4f       	sbci	r31, 0xFA	; 250
     dde:	90 83       	st	Z, r25

00000de0 <USART0_RX_EXIT>:
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	9f 91       	pop	r25
     de6:	0f bf       	out	0x3f, r16	; 63
     de8:	0f 91       	pop	r16
     dea:	18 95       	reti

00000dec <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     dec:	0f 93       	push	r16
     dee:	0f b7       	in	r16, 0x3f	; 63
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	e0 91 09 06 	lds	r30, 0x0609	; 0x800609 <tx1_Tail>
     df8:	f0 91 0b 06 	lds	r31, 0x060B	; 0x80060b <tx1_Head>
     dfc:	e3 95       	inc	r30
     dfe:	ef 71       	andi	r30, 0x1F	; 31
     e00:	ef 13       	cpse	r30, r31
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <USART1_TX_CONTINUE>
     e04:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     e08:	ff 7d       	andi	r31, 0xDF	; 223
     e0a:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000e0e <USART1_TX_CONTINUE>:
     e0e:	e0 93 09 06 	sts	0x0609, r30	; 0x800609 <tx1_Tail>
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	e9 53       	subi	r30, 0x39	; 57
     e16:	fa 4f       	sbci	r31, 0xFA	; 250
     e18:	e0 81       	ld	r30, Z
     e1a:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000e1e <USART1_TX_EXIT>:
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	0f bf       	out	0x3f, r16	; 63
     e24:	0f 91       	pop	r16
     e26:	18 95       	reti

00000e28 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     e28:	0f 93       	push	r16
     e2a:	0f b7       	in	r16, 0x3f	; 63
     e2c:	9f 93       	push	r25
     e2e:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
     e36:	e0 91 0a 06 	lds	r30, 0x060A	; 0x80060a <rx1_Head>
     e3a:	f0 91 c4 05 	lds	r31, 0x05C4	; 0x8005c4 <rx1_Tail>
     e3e:	e3 95       	inc	r30
     e40:	ef 71       	andi	r30, 0x1F	; 31
     e42:	fe 17       	cp	r31, r30
     e44:	31 f0       	breq	.+12     	; 0xe52 <USART1_RX_EXIT>
     e46:	e0 93 0a 06 	sts	0x060A, r30	; 0x80060a <rx1_Head>
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	e8 51       	subi	r30, 0x18	; 24
     e4e:	fa 4f       	sbci	r31, 0xFA	; 250
     e50:	90 83       	st	Z, r25

00000e52 <USART1_RX_EXIT>:
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	9f 91       	pop	r25
     e58:	0f bf       	out	0x3f, r16	; 63
     e5a:	0f 91       	pop	r16
     e5c:	18 95       	reti

00000e5e <timer1_init_ts>:
//for speed
static uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     e5e:	e1 e8       	ldi	r30, 0x81	; 129
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	83 60       	ori	r24, 0x03	; 3
     e66:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     e68:	80 81       	ld	r24, Z
     e6a:	88 60       	ori	r24, 0x08	; 8
     e6c:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     e6e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e72:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     e76:	ef e6       	ldi	r30, 0x6F	; 111
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     e80:	8d e7       	ldi	r24, 0x7D	; 125
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e88:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e8c:	08 95       	ret

00000e8e <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     e8e:	84 b5       	in	r24, 0x24	; 36
     e90:	85 60       	ori	r24, 0x05	; 5
     e92:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     e94:	84 b5       	in	r24, 0x24	; 36
     e96:	88 60       	ori	r24, 0x08	; 8
     e98:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     e9a:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     e9c:	ee e6       	ldi	r30, 0x6E	; 110
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
     ea6:	87 e2       	ldi	r24, 0x27	; 39
     ea8:	87 bd       	out	0x27, r24	; 39
     eaa:	08 95       	ret

00000eac <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
     eac:	f8 94       	cli
     eae:	c7 d4       	rcall	.+2446   	; 0x183e <rgbled_init>
	can_init(0,0);
     eb0:	25 de       	rcall	.-950    	; 0xafc <pwm_init>
     eb2:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     eb4:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
     eba:	a7 d3       	rcall	.+1870   	; 0x160a <can_init>
     ebc:	d0 df       	rcall	.-96     	; 0xe5e <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     ebe:	e7 df       	rcall	.-50     	; 0xe8e <timer0_init_ts>
     ec0:	c1 dc       	rcall	.-1662   	; 0x844 <speed_init>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     ec4:	cb d4       	rcall	.+2454   	; 0x185c <spi_init>
     ec6:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     eca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     ece:	88 e9       	ldi	r24, 0x98	; 152
     ed0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     ed4:	ec e2       	ldi	r30, 0x2C	; 44
     ed6:	f6 e0       	ldi	r31, 0x06	; 6
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	91 e0       	ldi	r25, 0x01	; 1
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     edc:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
     ede:	82 83       	std	Z+2, r24	; 0x02
	
	sei();
	
    while (1){
		
		handle_can(&ComValues, &rxFrame); //receive CAN
     ee0:	91 83       	std	Z+1, r25	; 0x01
     ee2:	80 83       	st	Z, r24
     ee4:	57 da       	rcall	.-2898   	; 0x394 <drivers_init>
     ee6:	78 94       	sei
     ee8:	6e e8       	ldi	r22, 0x8E	; 142
     eea:	75 e0       	ldi	r23, 0x05	; 5
		receive_uart(&ComValues);
     eec:	82 e1       	ldi	r24, 0x12	; 18
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	ea da       	rcall	.-2604   	; 0x4c6 <handle_can>
		
		if (b_send_can)
     ef2:	82 e1       	ldi	r24, 0x12	; 18
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	93 db       	rcall	.-2266   	; 0x61e <receive_uart>
     ef8:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <b_send_can>
		{
			handle_motor_status_can_msg(&b_send_can, &ComValues); //send CAN
     efc:	88 23       	and	r24, r24
     efe:	29 f0       	breq	.+10     	; 0xf0a <main+0x5e>
     f00:	62 e1       	ldi	r22, 0x12	; 18
     f02:	71 e0       	ldi	r23, 0x01	; 1
     f04:	8c ef       	ldi	r24, 0xFC	; 252
		}
		
		if (b_send_uart)
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	43 db       	rcall	.-2426   	; 0x590 <handle_motor_status_can_msg>
     f0a:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <b_send_uart>
		{
			send_uart(ComValues);
     f0e:	88 23       	and	r24, r24
     f10:	59 f3       	breq	.-42     	; 0xee8 <main+0x3c>
     f12:	8d b7       	in	r24, 0x3d	; 61
     f14:	9e b7       	in	r25, 0x3e	; 62
     f16:	4d 97       	sbiw	r24, 0x1d	; 29
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	9e bf       	out	0x3e, r25	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	8d bf       	out	0x3d, r24	; 61
     f22:	ad b7       	in	r26, 0x3d	; 61
     f24:	be b7       	in	r27, 0x3e	; 62
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	8d e1       	ldi	r24, 0x1D	; 29
     f2a:	e2 e1       	ldi	r30, 0x12	; 18
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	01 90       	ld	r0, Z+
     f30:	0d 92       	st	X+, r0
     f32:	8a 95       	dec	r24
			b_send_uart = 0;
     f34:	e1 f7       	brne	.-8      	; 0xf2e <main+0x82>
     f36:	39 dc       	rcall	.-1934   	; 0x7aa <send_uart>
     f38:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <b_send_uart>
     f3c:	8d b7       	in	r24, 0x3d	; 61
     f3e:	9e b7       	in	r25, 0x3e	; 62
     f40:	4d 96       	adiw	r24, 0x1d	; 29
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	9e bf       	out	0x3e, r25	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	8d bf       	out	0x3d, r24	; 61
     f4c:	cd cf       	rjmp	.-102    	; 0xee8 <main+0x3c>

00000f4e <__vector_16>:
		}
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	0b b6       	in	r0, 0x3b	; 59
     f5a:	0f 92       	push	r0
     f5c:	ef 92       	push	r14
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
	
	if (systic_counter_fast == 1) // every 10ms
     f7a:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <systic_counter_fast>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	29 f5       	brne	.+74     	; 0xfcc <__vector_16+0x7e>
	{
		b_send_uart = 1;
     f82:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <b_send_uart>
		if (ComValues.u16_watchdog != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
     f86:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ComValues+0x14>
     f8a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ComValues+0x15>
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	49 f0       	breq	.+18     	; 0xfa4 <__vector_16+0x56>
     f92:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <ComValues+0x17>
     f96:	21 30       	cpi	r18, 0x01	; 1
     f98:	29 f4       	brne	.+10     	; 0xfa4 <__vector_16+0x56>
		{
			ComValues.u16_watchdog -- ;
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ComValues+0x15>
     fa0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ComValues+0x14>
		}
		
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;		
     fa4:	e2 e1       	ldi	r30, 0x12	; 18
     fa6:	f1 e0       	ldi	r31, 0x01	; 1
     fa8:	00 85       	ldd	r16, Z+8	; 0x08
     faa:	11 85       	ldd	r17, Z+9	; 0x09
     fac:	22 85       	ldd	r18, Z+10	; 0x0a
     fae:	33 85       	ldd	r19, Z+11	; 0x0b
     fb0:	44 81       	ldd	r20, Z+4	; 0x04
     fb2:	55 81       	ldd	r21, Z+5	; 0x05
     fb4:	66 81       	ldd	r22, Z+6	; 0x06
     fb6:	77 81       	ldd	r23, Z+7	; 0x07
     fb8:	0f 2e       	mov	r0, r31
     fba:	fa e0       	ldi	r31, 0x0A	; 10
     fbc:	ef 2e       	mov	r14, r31
     fbe:	f0 2d       	mov	r31, r0
     fc0:	8e e1       	ldi	r24, 0x1E	; 30
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	c4 d1       	rcall	.+904    	; 0x134e <handle_joulemeter>
		systic_counter_fast = 0;
     fc6:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <systic_counter_fast>
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <__vector_16+0x84>
	} else {
		systic_counter_fast ++;
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
     fd2:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <systic_counter_slow>
     fd6:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <systic_counter_slow+0x1>
     fda:	84 36       	cpi	r24, 0x64	; 100
     fdc:	91 05       	cpc	r25, r1
     fde:	51 f5       	brne	.+84     	; 0x1034 <__vector_16+0xe6>
	{
		b_send_can = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <b_send_can>
		handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 500.0);
     fe6:	44 ef       	ldi	r20, 0xF4	; 244
     fe8:	51 e0       	ldi	r21, 0x01	; 1
     fea:	68 ef       	ldi	r22, 0xF8	; 248
     fec:	73 e0       	ldi	r23, 0x03	; 3
     fee:	83 e2       	ldi	r24, 0x23	; 35
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	33 dc       	rcall	.-1946   	; 0x85a <handle_speed_sensor>
		manage_LEDs(ComValues); //UM LED according to motor state
     ff4:	8d b7       	in	r24, 0x3d	; 61
     ff6:	9e b7       	in	r25, 0x3e	; 62
     ff8:	4d 97       	sbiw	r24, 0x1d	; 29
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	9e bf       	out	0x3e, r25	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	8d bf       	out	0x3d, r24	; 61
    1004:	ad b7       	in	r26, 0x3d	; 61
    1006:	be b7       	in	r27, 0x3e	; 62
    1008:	11 96       	adiw	r26, 0x01	; 1
    100a:	8d e1       	ldi	r24, 0x1D	; 29
    100c:	e2 e1       	ldi	r30, 0x12	; 18
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	01 90       	ld	r0, Z+
    1012:	0d 92       	st	X+, r0
    1014:	8a 95       	dec	r24
    1016:	e1 f7       	brne	.-8      	; 0x1010 <__vector_16+0xc2>
    1018:	cf db       	rcall	.-2146   	; 0x7b8 <manage_LEDs>
		systic_counter_slow = 0;
    101a:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <systic_counter_slow+0x1>
    101e:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <systic_counter_slow>
    1022:	8d b7       	in	r24, 0x3d	; 61
    1024:	9e b7       	in	r25, 0x3e	; 62
    1026:	4d 96       	adiw	r24, 0x1d	; 29
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	9e bf       	out	0x3e, r25	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	8d bf       	out	0x3d, r24	; 61
    1032:	05 c0       	rjmp	.+10     	; 0x103e <__vector_16+0xf0>
		} else {
		systic_counter_slow ++;
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <systic_counter_slow+0x1>
    103a:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <systic_counter_slow>
	}
	state_handler(&ComValues);
    103e:	82 e1       	ldi	r24, 0x12	; 18
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	54 dc       	rcall	.-1880   	; 0x8ec <state_handler>
}
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ef 90       	pop	r14
    1062:	0f 90       	pop	r0
    1064:	0b be       	out	0x3b, r0	; 59
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	0b b6       	in	r0, 0x3b	; 59
    107c:	0f 92       	push	r0
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
	
	if (u8_SPI_count == 4)
    1096:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_SPI_count>
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	31 f4       	brne	.+12     	; 0x10aa <__vector_12+0x3a>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
    109e:	82 e2       	ldi	r24, 0x22	; 34
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	f2 d9       	rcall	.-3100   	; 0x488 <SPI_handler_4>
		u8_SPI_count = 0 ;
    10a4:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_SPI_count>
    10a8:	12 c0       	rjmp	.+36     	; 0x10ce <__vector_12+0x5e>
	}
	
	if (u8_SPI_count == 3)
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <__vector_12+0x46>
	{
		u8_SPI_count ++ ;
    10ae:	84 e0       	ldi	r24, 0x04	; 4
    10b0:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_SPI_count>
    10b4:	18 c0       	rjmp	.+48     	; 0x10e6 <__vector_12+0x76>
	}
	
	if (u8_SPI_count == 2)
    10b6:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_SPI_count>
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	41 f4       	brne	.+16     	; 0x10ce <__vector_12+0x5e>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
    10be:	8a e1       	ldi	r24, 0x1A	; 26
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	b1 d9       	rcall	.-3230   	; 0x426 <SPI_handler_2>
		u8_SPI_count ++ ;
    10c4:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_SPI_count>
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
    10ce:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_SPI_count>
    10d2:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
    10d4:	41 f4       	brne	.+16     	; 0x10e6 <__vector_12+0x76>
    10d6:	86 e1       	ldi	r24, 0x16	; 22
    10d8:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    10da:	85 d9       	rcall	.-3318   	; 0x3e6 <SPI_handler_1>
    10dc:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_SPI_count>
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
    10e6:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
    10ea:	81 11       	cpse	r24, r1
    10ec:	08 c0       	rjmp	.+16     	; 0x10fe <__vector_12+0x8e>
    10ee:	82 e1       	ldi	r24, 0x12	; 18
    10f0:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    10f2:	58 d9       	rcall	.-3408   	; 0x3a4 <SPI_handler_0>
    10f4:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_SPI_count>
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_SPI_count>
	}
}
    10fe:	ff 91       	pop	r31
    1100:	ef 91       	pop	r30
    1102:	bf 91       	pop	r27
    1104:	af 91       	pop	r26
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	7f 91       	pop	r23
    110c:	6f 91       	pop	r22
    110e:	5f 91       	pop	r21
    1110:	4f 91       	pop	r20
    1112:	3f 91       	pop	r19
    1114:	2f 91       	pop	r18
    1116:	0f 90       	pop	r0
    1118:	0b be       	out	0x3b, r0	; 59
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of the reed switch)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
	u16_speed_count ++ ;
    1132:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <u16_speed_count>
    1136:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <u16_speed_count+0x1>
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <u16_speed_count+0x1>
    1140:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <u16_speed_count>
}
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <handle_current_sensor>:
#define CORRECTION_OFFSET_BAT 1.0
#define CORRECTION_OFFSET_MOT 1.19
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg, uint8_t u8_sensor_num)
{
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	00 d0       	rcall	.+0      	; 0x116c <handle_current_sensor+0x1a>
    116c:	00 d0       	rcall	.+0      	; 0x116e <handle_current_sensor+0x1c>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	8c 01       	movw	r16, r24
    1174:	f4 2e       	mov	r15, r20
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY) ;// /3 because current passes 3x in transducer for more precision.
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	e3 d4       	rcall	.+2502   	; 0x1b42 <__floatunsisf>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 ea       	ldi	r20, 0xA0	; 160
    1182:	50 e4       	ldi	r21, 0x40	; 64
    1184:	94 d5       	rcall	.+2856   	; 0x1cae <__mulsf3>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	59 e3       	ldi	r21, 0x39	; 57
    118e:	8f d5       	rcall	.+2846   	; 0x1cae <__mulsf3>
    1190:	2e ea       	ldi	r18, 0xAE	; 174
    1192:	37 e4       	ldi	r19, 0x47	; 71
    1194:	41 e2       	ldi	r20, 0x21	; 33
    1196:	50 e4       	ldi	r21, 0x40	; 64
    1198:	d2 d3       	rcall	.+1956   	; 0x193e <__subsf3>
    119a:	23 ec       	ldi	r18, 0xC3	; 195
    119c:	34 e6       	ldi	r19, 0x64	; 100
    119e:	4a e2       	ldi	r20, 0x2A	; 42
    11a0:	5d e3       	ldi	r21, 0x3D	; 61
    11a2:	36 d4       	rcall	.+2156   	; 0x1a10 <__divsf3>
    11a4:	69 83       	std	Y+1, r22	; 0x01
    11a6:	7a 83       	std	Y+2, r23	; 0x02
    11a8:	8b 83       	std	Y+3, r24	; 0x03
    11aa:	9c 83       	std	Y+4, r25	; 0x04
	if (u8_sensor_num)
    11ac:	ff 20       	and	r15, r15
    11ae:	71 f0       	breq	.+28     	; 0x11cc <handle_current_sensor+0x7a>
	{//batt
		f_new_current = (f_new_current+CORRECTION_OFFSET_BAT);// correction of offset
    11b0:	69 81       	ldd	r22, Y+1	; 0x01
    11b2:	7a 81       	ldd	r23, Y+2	; 0x02
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e8       	ldi	r20, 0x80	; 128
    11be:	5f e3       	ldi	r21, 0x3F	; 63
    11c0:	bf d3       	rcall	.+1918   	; 0x1940 <__addsf3>
    11c2:	69 83       	std	Y+1, r22	; 0x01
    11c4:	7a 83       	std	Y+2, r23	; 0x02
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    11c8:	9c 83       	std	Y+4, r25	; 0x04
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <handle_current_sensor+0x94>
	}else{
		f_new_current = (f_new_current+CORRECTION_OFFSET_MOT);// correction of offset
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	2c ee       	ldi	r18, 0xEC	; 236
    11d6:	31 e5       	ldi	r19, 0x51	; 81
    11d8:	48 e9       	ldi	r20, 0x98	; 152
    11da:	5f e3       	ldi	r21, 0x3F	; 63
    11dc:	b1 d3       	rcall	.+1890   	; 0x1940 <__addsf3>
    11de:	69 83       	std	Y+1, r22	; 0x01
    11e0:	7a 83       	std	Y+2, r23	; 0x02
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    11e6:	89 80       	ldd	r8, Y+1	; 0x01
    11e8:	9a 80       	ldd	r9, Y+2	; 0x02
    11ea:	ab 80       	ldd	r10, Y+3	; 0x03
    11ec:	bc 80       	ldd	r11, Y+4	; 0x04
    11ee:	26 e6       	ldi	r18, 0x66	; 102
    11f0:	36 e6       	ldi	r19, 0x66	; 102
    11f2:	46 e6       	ldi	r20, 0x66	; 102
    11f4:	5f e3       	ldi	r21, 0x3F	; 63
    11f6:	f8 01       	movw	r30, r16
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	56 d5       	rcall	.+2732   	; 0x1cae <__mulsf3>
    1202:	6b 01       	movw	r12, r22
    1204:	7c 01       	movw	r14, r24
    1206:	2d ec       	ldi	r18, 0xCD	; 205
    1208:	3c ec       	ldi	r19, 0xCC	; 204
    120a:	4c ec       	ldi	r20, 0xCC	; 204
    120c:	5d e3       	ldi	r21, 0x3D	; 61
    120e:	c5 01       	movw	r24, r10
    1210:	b4 01       	movw	r22, r8
    1212:	4d d5       	rcall	.+2714   	; 0x1cae <__mulsf3>
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	c7 01       	movw	r24, r14
    121a:	b6 01       	movw	r22, r12
    121c:	91 d3       	rcall	.+1826   	; 0x1940 <__addsf3>
    121e:	f8 01       	movw	r30, r16
    1220:	60 83       	st	Z, r22
    1222:	71 83       	std	Z+1, r23	; 0x01
    1224:	82 83       	std	Z+2, r24	; 0x02
    1226:	93 83       	std	Z+3, r25	; 0x03
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	bf 90       	pop	r11
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	08 95       	ret

0000124a <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	00 d0       	rcall	.+0      	; 0x1254 <handle_temp_sensor+0xa>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <handle_temp_sensor+0xc>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	70 d4       	rcall	.+2272   	; 0x1b42 <__floatunsisf>
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 ea       	ldi	r20, 0xA0	; 160
    1268:	50 e4       	ldi	r21, 0x40	; 64
    126a:	21 d5       	rcall	.+2626   	; 0x1cae <__mulsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	59 e3       	ldi	r21, 0x39	; 57
    1274:	1c d5       	rcall	.+2616   	; 0x1cae <__mulsf3>
    1276:	69 83       	std	Y+1, r22	; 0x01
    1278:	7a 83       	std	Y+2, r23	; 0x02
    127a:	8b 83       	std	Y+3, r24	; 0x03
    127c:	9c 83       	std	Y+4, r25	; 0x04
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    127e:	69 81       	ldd	r22, Y+1	; 0x01
    1280:	7a 81       	ldd	r23, Y+2	; 0x02
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	2d ec       	ldi	r18, 0xCD	; 205
    1288:	3c ec       	ldi	r19, 0xCC	; 204
    128a:	4c e6       	ldi	r20, 0x6C	; 108
    128c:	50 e4       	ldi	r21, 0x40	; 64
    128e:	bc d3       	rcall	.+1912   	; 0x1a08 <__cmpsf2>
    1290:	18 16       	cp	r1, r24
    1292:	8c f0       	brlt	.+34     	; 0x12b6 <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
    1294:	69 81       	ldd	r22, Y+1	; 0x01
    1296:	7a 81       	ldd	r23, Y+2	; 0x02
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 ea       	ldi	r20, 0xA0	; 160
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	04 d5       	rcall	.+2568   	; 0x1cae <__mulsf3>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 eb       	ldi	r20, 0xB0	; 176
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	47 d3       	rcall	.+1678   	; 0x193e <__subsf3>
    12b0:	1c d4       	rcall	.+2104   	; 0x1aea <__fixunssfsi>
    12b2:	f8 01       	movw	r30, r16
    12b4:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    12b6:	69 81       	ldd	r22, Y+1	; 0x01
    12b8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	26 e6       	ldi	r18, 0x66	; 102
    12c0:	36 e6       	ldi	r19, 0x66	; 102
    12c2:	46 e9       	ldi	r20, 0x96	; 150
    12c4:	50 e4       	ldi	r21, 0x40	; 64
    12c6:	a0 d3       	rcall	.+1856   	; 0x1a08 <__cmpsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	e4 f0       	brlt	.+56     	; 0x1304 <handle_temp_sensor+0xba>
    12cc:	69 81       	ldd	r22, Y+1	; 0x01
    12ce:	7a 81       	ldd	r23, Y+2	; 0x02
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	2d ec       	ldi	r18, 0xCD	; 205
    12d6:	3c ec       	ldi	r19, 0xCC	; 204
    12d8:	4c e6       	ldi	r20, 0x6C	; 108
    12da:	50 e4       	ldi	r21, 0x40	; 64
    12dc:	e4 d4       	rcall	.+2504   	; 0x1ca6 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    12de:	18 16       	cp	r1, r24
    12e0:	8c f4       	brge	.+34     	; 0x1304 <handle_temp_sensor+0xba>
    12e2:	69 81       	ldd	r22, Y+1	; 0x01
    12e4:	7a 81       	ldd	r23, Y+2	; 0x02
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4e e5       	ldi	r20, 0x5E	; 94
    12f0:	52 e4       	ldi	r21, 0x42	; 66
    12f2:	dd d4       	rcall	.+2490   	; 0x1cae <__mulsf3>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e8       	ldi	r19, 0x80	; 128
    12f8:	4b e1       	ldi	r20, 0x1B	; 27
    12fa:	53 e4       	ldi	r21, 0x43	; 67
    12fc:	20 d3       	rcall	.+1600   	; 0x193e <__subsf3>
    12fe:	f5 d3       	rcall	.+2026   	; 0x1aea <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
    1300:	f8 01       	movw	r30, r16
    1302:	60 83       	st	Z, r22
    1304:	69 81       	ldd	r22, Y+1	; 0x01
    1306:	7a 81       	ldd	r23, Y+2	; 0x02
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	26 e6       	ldi	r18, 0x66	; 102
    130e:	36 e6       	ldi	r19, 0x66	; 102
    1310:	46 e9       	ldi	r20, 0x96	; 150
    1312:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
    1314:	c8 d4       	rcall	.+2448   	; 0x1ca6 <__gesf2>
    1316:	18 16       	cp	r1, r24
    1318:	8c f4       	brge	.+34     	; 0x133c <handle_temp_sensor+0xf2>
    131a:	69 81       	ldd	r22, Y+1	; 0x01
    131c:	7a 81       	ldd	r23, Y+2	; 0x02
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	48 e4       	ldi	r20, 0x48	; 72
    1328:	53 e4       	ldi	r21, 0x43	; 67
    132a:	c1 d4       	rcall	.+2434   	; 0x1cae <__mulsf3>
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	42 e5       	ldi	r20, 0x52	; 82
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	04 d3       	rcall	.+1544   	; 0x193e <__subsf3>
    1336:	d9 d3       	rcall	.+1970   	; 0x1aea <__fixunssfsi>
	}
}
    1338:	f8 01       	movw	r30, r16
    133a:	60 83       	st	Z, r22
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	ef 92       	push	r14
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
    1362:	4a 01       	movw	r8, r20
    1364:	5b 01       	movw	r10, r22
    1366:	c9 01       	movw	r24, r18
    1368:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    136a:	a5 01       	movw	r20, r10
    136c:	94 01       	movw	r18, r8
    136e:	9f d4       	rcall	.+2366   	; 0x1cae <__mulsf3>
    1370:	4b 01       	movw	r8, r22
    1372:	5c 01       	movw	r10, r24
    1374:	6e 2d       	mov	r22, r14
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	e2 d3       	rcall	.+1988   	; 0x1b42 <__floatunsisf>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	c5 01       	movw	r24, r10
    1384:	b4 01       	movw	r22, r8
    1386:	93 d4       	rcall	.+2342   	; 0x1cae <__mulsf3>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4a e7       	ldi	r20, 0x7A	; 122
    138e:	54 e4       	ldi	r21, 0x44	; 68
    1390:	3f d3       	rcall	.+1662   	; 0x1a10 <__divsf3>
    1392:	9b 01       	movw	r18, r22
    1394:	ac 01       	movw	r20, r24
    1396:	68 81       	ld	r22, Y
    1398:	79 81       	ldd	r23, Y+1	; 0x01
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	9b 81       	ldd	r25, Y+3	; 0x03
    139e:	d0 d2       	rcall	.+1440   	; 0x1940 <__addsf3>
    13a0:	68 83       	st	Y, r22
    13a2:	79 83       	std	Y+1, r23	; 0x01
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	9b 83       	std	Y+3, r25	; 0x03
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ef 90       	pop	r14
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	08 95       	ret

000013bc <Set_ADC_Channel_ext>:
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
}

void Set_ADC_Channel_ext(uint8_t u8_CHn, uint8_t * u8_ADC_tx) //for MCP3208 external ADC
{
	switch(u8_CHn)
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	88 30       	cpi	r24, 0x08	; 8
    13c0:	91 05       	cpc	r25, r1
    13c2:	88 f5       	brcc	.+98     	; 0x1426 <Set_ADC_Channel_ext+0x6a>
    13c4:	fc 01       	movw	r30, r24
    13c6:	e6 5b       	subi	r30, 0xB6	; 182
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	d4 c4       	rjmp	.+2472   	; 0x1d74 <__tablejump2__>
	{
		case 0 :
			u8_ADC_tx[0] = 0b00000110 ;
    13cc:	86 e0       	ldi	r24, 0x06	; 6
    13ce:	fb 01       	movw	r30, r22
    13d0:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b00 ;
    13d2:	11 82       	std	Z+1, r1	; 0x01
		break;
    13d4:	08 95       	ret
		
		case 1 :
			u8_ADC_tx[0] = 0b00000110 ;
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	fb 01       	movw	r30, r22
    13da:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b01 << 6 ;
    13dc:	80 e4       	ldi	r24, 0x40	; 64
    13de:	81 83       	std	Z+1, r24	; 0x01
		break;
    13e0:	08 95       	ret
		
		case 2 :
			u8_ADC_tx[0] = 0b00000110 ;
    13e2:	86 e0       	ldi	r24, 0x06	; 6
    13e4:	fb 01       	movw	r30, r22
    13e6:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b10 << 6 ;
    13e8:	80 e8       	ldi	r24, 0x80	; 128
    13ea:	81 83       	std	Z+1, r24	; 0x01
		break;
    13ec:	08 95       	ret
		
		case 3 :
		u8_ADC_tx[0] = 0b00000110 ;
    13ee:	86 e0       	ldi	r24, 0x06	; 6
    13f0:	fb 01       	movw	r30, r22
    13f2:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    13f4:	80 ec       	ldi	r24, 0xC0	; 192
    13f6:	81 83       	std	Z+1, r24	; 0x01
		break;
    13f8:	08 95       	ret
		
		case 4 :
		u8_ADC_tx[0] = 0b00000111 ;
    13fa:	87 e0       	ldi	r24, 0x07	; 7
    13fc:	fb 01       	movw	r30, r22
    13fe:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b00 << 6 ;
    1400:	11 82       	std	Z+1, r1	; 0x01
		break;
    1402:	08 95       	ret
		
		case 5 :
		u8_ADC_tx[0] = 0b00000111 ;
    1404:	87 e0       	ldi	r24, 0x07	; 7
    1406:	fb 01       	movw	r30, r22
    1408:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b01 << 6 ;
    140a:	80 e4       	ldi	r24, 0x40	; 64
    140c:	81 83       	std	Z+1, r24	; 0x01
		break;
    140e:	08 95       	ret
		
		case 6 :
		u8_ADC_tx[0] = 0b00000111 ;
    1410:	87 e0       	ldi	r24, 0x07	; 7
    1412:	fb 01       	movw	r30, r22
    1414:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b10 << 6 ;
    1416:	80 e8       	ldi	r24, 0x80	; 128
    1418:	81 83       	std	Z+1, r24	; 0x01
		break;
    141a:	08 95       	ret
		
		case 7 :
		u8_ADC_tx[0] = 0b00000111 ;
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	fb 01       	movw	r30, r22
    1420:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    1422:	80 ec       	ldi	r24, 0xC0	; 192
    1424:	81 83       	std	Z+1, r24	; 0x01
    1426:	08 95       	ret

00001428 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	0f 92       	push	r0
    1430:	11 24       	eor	r1, r1
    1432:	0b b6       	in	r0, 0x3b	; 59
    1434:	0f 92       	push	r0
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	8f 93       	push	r24
    1442:	9f 93       	push	r25
    1444:	af 93       	push	r26
    1446:	bf 93       	push	r27
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	1f 92       	push	r1
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    1456:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    145a:	80 ff       	sbrs	r24, 0
    145c:	47 c0       	rjmp	.+142    	; 0x14ec <__vector_18+0xc4>
    145e:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1462:	90 ff       	sbrs	r25, 0
    1464:	43 c0       	rjmp	.+134    	; 0x14ec <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    1466:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    146a:	ee ee       	ldi	r30, 0xEE	; 238
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    1472:	80 81       	ld	r24, Z
    1474:	8f 7b       	andi	r24, 0xBF	; 191
    1476:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    1478:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <tx_off>
    147c:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <tx_on>
    1480:	98 17       	cp	r25, r24
    1482:	89 f1       	breq	.+98     	; 0x14e6 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    1484:	8f 70       	andi	r24, 0x0F	; 15
    1486:	2b e0       	ldi	r18, 0x0B	; 11
    1488:	82 9f       	mul	r24, r18
    148a:	c0 01       	movw	r24, r0
    148c:	11 24       	eor	r1, r1
    148e:	fc 01       	movw	r30, r24
    1490:	ea 54       	subi	r30, 0x4A	; 74
    1492:	fb 4f       	sbci	r31, 0xFB	; 251
    1494:	20 81       	ld	r18, Z
    1496:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    149a:	20 81       	ld	r18, Z
    149c:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    14a0:	21 81       	ldd	r18, Z+1	; 0x01
    14a2:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    14a6:	23 81       	ldd	r18, Z+3	; 0x03
    14a8:	aa ef       	ldi	r26, 0xFA	; 250
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    14ae:	24 81       	ldd	r18, Z+4	; 0x04
    14b0:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    14b2:	25 81       	ldd	r18, Z+5	; 0x05
    14b4:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    14b6:	26 81       	ldd	r18, Z+6	; 0x06
    14b8:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    14ba:	27 81       	ldd	r18, Z+7	; 0x07
    14bc:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    14be:	20 85       	ldd	r18, Z+8	; 0x08
    14c0:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    14c2:	21 85       	ldd	r18, Z+9	; 0x09
    14c4:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    14c6:	22 85       	ldd	r18, Z+10	; 0x0a
    14c8:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    14ca:	fc 01       	movw	r30, r24
    14cc:	e8 54       	subi	r30, 0x48	; 72
    14ce:	fb 4f       	sbci	r31, 0xFB	; 251
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 70       	andi	r24, 0x0F	; 15
    14d4:	80 64       	ori	r24, 0x40	; 64
    14d6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    14da:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <tx_off>
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <tx_off>
    14e4:	7d c0       	rjmp	.+250    	; 0x15e0 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    14e6:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <tx_busy>
    14ea:	7a c0       	rjmp	.+244    	; 0x15e0 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    14ec:	81 ff       	sbrs	r24, 1
    14ee:	78 c0       	rjmp	.+240    	; 0x15e0 <__vector_18+0x1b8>
    14f0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    14f4:	81 ff       	sbrs	r24, 1
    14f6:	74 c0       	rjmp	.+232    	; 0x15e0 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    14f8:	80 e1       	ldi	r24, 0x10	; 16
    14fa:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    14fe:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <rx_on>
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <rx_off>
    150a:	29 1b       	sub	r18, r25
    150c:	31 09       	sbc	r19, r1
    150e:	2f 77       	andi	r18, 0x7F	; 127
    1510:	33 27       	eor	r19, r19
    1512:	20 31       	cpi	r18, 0x10	; 16
    1514:	31 05       	cpc	r19, r1
    1516:	0c f0       	brlt	.+2      	; 0x151a <__vector_18+0xf2>
    1518:	58 c0       	rjmp	.+176    	; 0x15ca <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    151a:	e8 2f       	mov	r30, r24
    151c:	ef 70       	andi	r30, 0x0F	; 15
    151e:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1522:	2e 2f       	mov	r18, r30
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4b e0       	ldi	r20, 0x0B	; 11
    1528:	e4 9f       	mul	r30, r20
    152a:	f0 01       	movw	r30, r0
    152c:	11 24       	eor	r1, r1
    152e:	ea 5f       	subi	r30, 0xFA	; 250
    1530:	fb 4f       	sbci	r31, 0xFB	; 251
    1532:	9f 70       	andi	r25, 0x0F	; 15
    1534:	42 81       	ldd	r20, Z+2	; 0x02
    1536:	40 7f       	andi	r20, 0xF0	; 240
    1538:	94 2b       	or	r25, r20
    153a:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    153c:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1540:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1544:	40 7e       	andi	r20, 0xE0	; 224
    1546:	97 70       	andi	r25, 0x07	; 7
    1548:	94 2b       	or	r25, r20
    154a:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    154c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1550:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    1552:	aa ef       	ldi	r26, 0xFA	; 250
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	9c 91       	ld	r25, X
    1558:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    155a:	9c 91       	ld	r25, X
    155c:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    155e:	9c 91       	ld	r25, X
    1560:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    1562:	9c 91       	ld	r25, X
    1564:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    1566:	9c 91       	ld	r25, X
    1568:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    156a:	9c 91       	ld	r25, X
    156c:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    156e:	9c 91       	ld	r25, X
    1570:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    1572:	9c 91       	ld	r25, X
    1574:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    157c:	40 81       	ld	r20, Z
    157e:	42 95       	swap	r20
    1580:	46 95       	lsr	r20
    1582:	47 70       	andi	r20, 0x07	; 7
    1584:	51 81       	ldd	r21, Z+1	; 0x01
    1586:	65 2f       	mov	r22, r21
    1588:	66 0f       	add	r22, r22
    158a:	66 0f       	add	r22, r22
    158c:	66 0f       	add	r22, r22
    158e:	86 2f       	mov	r24, r22
    1590:	84 2b       	or	r24, r20
    1592:	95 2f       	mov	r25, r21
    1594:	92 95       	swap	r25
    1596:	96 95       	lsr	r25
    1598:	97 70       	andi	r25, 0x07	; 7
    159a:	89 2b       	or	r24, r25
    159c:	b1 f4       	brne	.+44     	; 0x15ca <__vector_18+0x1a2>
    159e:	8b e0       	ldi	r24, 0x0B	; 11
    15a0:	82 9f       	mul	r24, r18
    15a2:	f0 01       	movw	r30, r0
    15a4:	83 9f       	mul	r24, r19
    15a6:	f0 0d       	add	r31, r0
    15a8:	11 24       	eor	r1, r1
    15aa:	ea 5f       	subi	r30, 0xFA	; 250
    15ac:	fb 4f       	sbci	r31, 0xFB	; 251
    15ae:	83 81       	ldd	r24, Z+3	; 0x03
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	59 f4       	brne	.+22     	; 0x15ca <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    15b4:	98 e0       	ldi	r25, 0x08	; 8
    15b6:	88 e1       	ldi	r24, 0x18	; 24
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	a8 95       	wdr
    15be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    15c8:	ff cf       	rjmp	.-2      	; 0x15c8 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    15ca:	ee ee       	ldi	r30, 0xEE	; 238
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    15d2:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    15d4:	80 81       	ld	r24, Z
    15d6:	8f 7d       	andi	r24, 0xDF	; 223
    15d8:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    15da:	80 e8       	ldi	r24, 0x80	; 128
    15dc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    160e:	e8 ed       	ldi	r30, 0xD8	; 216
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	21 e0       	ldi	r18, 0x01	; 1
    1614:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    1616:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    161a:	2c e0       	ldi	r18, 0x0C	; 12
    161c:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    1620:	27 e3       	ldi	r18, 0x37	; 55
    1622:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    1626:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    162a:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    162e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1632:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    1636:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    163a:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    163e:	cd ee       	ldi	r28, 0xED	; 237
    1640:	d0 e0       	ldi	r29, 0x00	; 0
    1642:	18 82       	st	Y, r1
	CANSTMOB = 0;
    1644:	ae ee       	ldi	r26, 0xEE	; 238
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    164a:	20 e1       	ldi	r18, 0x10	; 16
    164c:	28 83       	st	Y, r18
	CANSTMOB = 0;
    164e:	1c 92       	st	X, r1
	CANIDM4 = 0;
    1650:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    1654:	28 2f       	mov	r18, r24
    1656:	22 95       	swap	r18
    1658:	22 0f       	add	r18, r18
    165a:	20 7e       	andi	r18, 0xE0	; 224
    165c:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	96 95       	lsr	r25
    1666:	87 95       	ror	r24
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    1670:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    1674:	86 2f       	mov	r24, r22
    1676:	82 95       	swap	r24
    1678:	88 0f       	add	r24, r24
    167a:	80 7e       	andi	r24, 0xE0	; 224
    167c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    1680:	76 95       	lsr	r23
    1682:	67 95       	ror	r22
    1684:	76 95       	lsr	r23
    1686:	67 95       	ror	r22
    1688:	76 95       	lsr	r23
    168a:	67 95       	ror	r22
    168c:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    1690:	80 e8       	ldi	r24, 0x80	; 128
    1692:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    169c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    16a0:	80 eb       	ldi	r24, 0xB0	; 176
    16a2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	80 83       	st	Z, r24

	reset = 0;
    16aa:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <reset>
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    16ba:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <rx_off>
    16be:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <rx_on>
    16c2:	24 17       	cp	r18, r20
    16c4:	89 f1       	breq	.+98     	; 0x1728 <can_read_message_if_new+0x74>
    16c6:	a4 2f       	mov	r26, r20
    16c8:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    16ca:	8b e0       	ldi	r24, 0x0B	; 11
    16cc:	a8 9f       	mul	r26, r24
    16ce:	b0 01       	movw	r22, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	fb 01       	movw	r30, r22
    16d4:	ea 5f       	subi	r30, 0xFA	; 250
    16d6:	fb 4f       	sbci	r31, 0xFB	; 251
    16d8:	20 81       	ld	r18, Z
    16da:	22 95       	swap	r18
    16dc:	26 95       	lsr	r18
    16de:	27 70       	andi	r18, 0x07	; 7
    16e0:	31 81       	ldd	r19, Z+1	; 0x01
    16e2:	53 2f       	mov	r21, r19
    16e4:	55 0f       	add	r21, r21
    16e6:	55 0f       	add	r21, r21
    16e8:	55 0f       	add	r21, r21
    16ea:	25 2b       	or	r18, r21
    16ec:	32 95       	swap	r19
    16ee:	36 95       	lsr	r19
    16f0:	37 70       	andi	r19, 0x07	; 7
    16f2:	28 83       	st	Y, r18
    16f4:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    16f6:	fb 01       	movw	r30, r22
    16f8:	e8 5f       	subi	r30, 0xF8	; 248
    16fa:	fb 4f       	sbci	r31, 0xFB	; 251
    16fc:	20 81       	ld	r18, Z
    16fe:	2f 70       	andi	r18, 0x0F	; 15
    1700:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    1702:	22 23       	and	r18, r18
    1704:	99 f0       	breq	.+38     	; 0x172c <can_read_message_if_new+0x78>
    1706:	db 01       	movw	r26, r22
    1708:	a7 5f       	subi	r26, 0xF7	; 247
    170a:	bb 4f       	sbci	r27, 0xFB	; 251
    170c:	fe 01       	movw	r30, r28
    170e:	33 96       	adiw	r30, 0x03	; 3
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	2d 5f       	subi	r18, 0xFD	; 253
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	ce 01       	movw	r24, r28
    1718:	82 0f       	add	r24, r18
    171a:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    171c:	2d 91       	ld	r18, X+
    171e:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    1720:	e8 17       	cp	r30, r24
    1722:	f9 07       	cpc	r31, r25
    1724:	d9 f7       	brne	.-10     	; 0x171c <can_read_message_if_new+0x68>
    1726:	02 c0       	rjmp	.+4      	; 0x172c <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    172c:	4f 5f       	subi	r20, 0xFF	; 255
    172e:	40 93 02 04 	sts	0x0402, r20	; 0x800402 <rx_off>
	}

	return true;
    1732:	81 e0       	ldi	r24, 0x01	; 1
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    1740:	ab ed       	ldi	r26, 0xDB	; 219
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	8c 91       	ld	r24, X
    1746:	8f 77       	andi	r24, 0x7F	; 127
    1748:	8c 93       	st	X, r24

	if (!tx_busy) {
    174a:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <tx_busy>
    174e:	81 11       	cpse	r24, r1
    1750:	27 c0       	rjmp	.+78     	; 0x17a0 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    1752:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    1756:	80 81       	ld	r24, Z
    1758:	82 95       	swap	r24
    175a:	88 0f       	add	r24, r24
    175c:	80 7e       	andi	r24, 0xE0	; 224
    175e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	96 95       	lsr	r25
    1768:	87 95       	ror	r24
    176a:	96 95       	lsr	r25
    176c:	87 95       	ror	r24
    176e:	96 95       	lsr	r25
    1770:	87 95       	ror	r24
    1772:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1776:	df 01       	movw	r26, r30
    1778:	13 96       	adiw	r26, 0x03	; 3
    177a:	9f 01       	movw	r18, r30
    177c:	25 5f       	subi	r18, 0xF5	; 245
    177e:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1780:	ca ef       	ldi	r28, 0xFA	; 250
    1782:	d0 e0       	ldi	r29, 0x00	; 0
    1784:	9d 91       	ld	r25, X+
    1786:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1788:	a2 17       	cp	r26, r18
    178a:	b3 07       	cpc	r27, r19
    178c:	d9 f7       	brne	.-10     	; 0x1784 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	80 64       	ori	r24, 0x40	; 64
    1798:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	43 c0       	rjmp	.+134    	; 0x1826 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    17a0:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <tx_on>
    17a4:	82 2f       	mov	r24, r18
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <tx_off>
    17ac:	83 1b       	sub	r24, r19
    17ae:	91 09       	sbc	r25, r1
    17b0:	8f 77       	andi	r24, 0x7F	; 127
    17b2:	99 27       	eor	r25, r25
    17b4:	40 97       	sbiw	r24, 0x10	; 16
    17b6:	b1 f1       	breq	.+108    	; 0x1824 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    17b8:	a2 2f       	mov	r26, r18
    17ba:	af 70       	andi	r26, 0x0F	; 15
    17bc:	8b e0       	ldi	r24, 0x0B	; 11
    17be:	a8 9f       	mul	r26, r24
    17c0:	d0 01       	movw	r26, r0
    17c2:	11 24       	eor	r1, r1
    17c4:	ed 01       	movw	r28, r26
    17c6:	ca 54       	subi	r28, 0x4A	; 74
    17c8:	db 4f       	sbci	r29, 0xFB	; 251
    17ca:	80 81       	ld	r24, Z
    17cc:	98 2f       	mov	r25, r24
    17ce:	92 95       	swap	r25
    17d0:	99 0f       	add	r25, r25
    17d2:	90 7e       	andi	r25, 0xE0	; 224
    17d4:	88 81       	ld	r24, Y
    17d6:	8f 71       	andi	r24, 0x1F	; 31
    17d8:	89 2b       	or	r24, r25
    17da:	88 83       	st	Y, r24
    17dc:	80 81       	ld	r24, Z
    17de:	98 2f       	mov	r25, r24
    17e0:	96 95       	lsr	r25
    17e2:	96 95       	lsr	r25
    17e4:	96 95       	lsr	r25
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	80 7e       	andi	r24, 0xE0	; 224
    17ea:	89 2b       	or	r24, r25
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	91 81       	ldd	r25, Z+1	; 0x01
    17f0:	92 95       	swap	r25
    17f2:	99 0f       	add	r25, r25
    17f4:	90 7e       	andi	r25, 0xE0	; 224
    17f6:	8f 71       	andi	r24, 0x1F	; 31
    17f8:	89 2b       	or	r24, r25
    17fa:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	98 2f       	mov	r25, r24
    1800:	9f 70       	andi	r25, 0x0F	; 15
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	80 7f       	andi	r24, 0xF0	; 240
    1806:	89 2b       	or	r24, r25
    1808:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    180a:	a7 54       	subi	r26, 0x47	; 71
    180c:	bb 4f       	sbci	r27, 0xFB	; 251
    180e:	33 96       	adiw	r30, 0x03	; 3
    1810:	88 e0       	ldi	r24, 0x08	; 8
    1812:	01 90       	ld	r0, Z+
    1814:	0d 92       	st	X+, r0
    1816:	8a 95       	dec	r24
    1818:	e1 f7       	brne	.-8      	; 0x1812 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    181a:	2f 5f       	subi	r18, 0xFF	; 255
    181c:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <tx_on>
		result = true;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    1824:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1826:	eb ed       	ldi	r30, 0xDB	; 219
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	90 81       	ld	r25, Z
    182c:	90 68       	ori	r25, 0x80	; 128
    182e:	90 83       	st	Z, r25

	return result;
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <rgbled_turn_off>:
    1836:	95 b1       	in	r25, 0x05	; 5
    1838:	89 2b       	or	r24, r25
    183a:	85 b9       	out	0x05, r24	; 5
    183c:	08 95       	ret

0000183e <rgbled_init>:
    183e:	84 b1       	in	r24, 0x04	; 4
    1840:	80 6e       	ori	r24, 0xE0	; 224
    1842:	84 b9       	out	0x04, r24	; 4
    1844:	80 ee       	ldi	r24, 0xE0	; 224
    1846:	f7 cf       	rjmp	.-18     	; 0x1836 <rgbled_turn_off>
    1848:	08 95       	ret

0000184a <rgbled_turn_on>:
    184a:	95 b1       	in	r25, 0x05	; 5
    184c:	80 95       	com	r24
    184e:	98 23       	and	r25, r24
    1850:	95 b9       	out	0x05, r25	; 5
    1852:	08 95       	ret

00001854 <rgbled_toggle>:
    1854:	95 b1       	in	r25, 0x05	; 5
    1856:	89 27       	eor	r24, r25
    1858:	85 b9       	out	0x05, r24	; 5
    185a:	08 95       	ret

0000185c <spi_init>:
    185c:	94 b1       	in	r25, 0x04	; 4
    185e:	97 60       	ori	r25, 0x07	; 7
    1860:	94 b9       	out	0x04, r25	; 4
    1862:	82 fb       	bst	r24, 2
    1864:	99 27       	eor	r25, r25
    1866:	90 f9       	bld	r25, 0
    1868:	28 2f       	mov	r18, r24
    186a:	22 70       	andi	r18, 0x02	; 2
    186c:	81 70       	andi	r24, 0x01	; 1
    186e:	80 65       	ori	r24, 0x50	; 80
    1870:	82 2b       	or	r24, r18
    1872:	8c bd       	out	0x2c, r24	; 44
    1874:	8c b5       	in	r24, 0x2c	; 44
    1876:	83 7f       	andi	r24, 0xF3	; 243
    1878:	8c bd       	out	0x2c, r24	; 44
    187a:	9d bd       	out	0x2d, r25	; 45
    187c:	08 95       	ret

0000187e <spi_trancieve>:
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	ec 01       	movw	r28, r24
    1884:	28 98       	cbi	0x05, 0	; 5
    1886:	41 15       	cp	r20, r1
    1888:	51 05       	cpc	r21, r1
    188a:	c1 f0       	breq	.+48     	; 0x18bc <spi_trancieve+0x3e>
    188c:	fb 01       	movw	r30, r22
    188e:	dc 01       	movw	r26, r24
    1890:	46 0f       	add	r20, r22
    1892:	57 1f       	adc	r21, r23
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	20 97       	sbiw	r28, 0x00	; 0
    1898:	11 f0       	breq	.+4      	; 0x189e <spi_trancieve+0x20>
    189a:	9c 91       	ld	r25, X
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <spi_trancieve+0x22>
    189e:	98 2f       	mov	r25, r24
    18a0:	9e bd       	out	0x2e, r25	; 46
    18a2:	0d b4       	in	r0, 0x2d	; 45
    18a4:	07 fe       	sbrs	r0, 7
    18a6:	fd cf       	rjmp	.-6      	; 0x18a2 <spi_trancieve+0x24>
    18a8:	61 15       	cp	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <spi_trancieve+0x34>
    18ae:	9e b5       	in	r25, 0x2e	; 46
    18b0:	90 83       	st	Z, r25
    18b2:	31 96       	adiw	r30, 0x01	; 1
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	e4 17       	cp	r30, r20
    18b8:	f5 07       	cpc	r31, r21
    18ba:	69 f7       	brne	.-38     	; 0x1896 <spi_trancieve+0x18>
    18bc:	21 11       	cpse	r18, r1
    18be:	28 9a       	sbi	0x05, 0	; 5
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <__vector_17>:
    18c6:	1f 92       	push	r1
    18c8:	0f 92       	push	r0
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	0f 92       	push	r0
    18ce:	11 24       	eor	r1, r1
    18d0:	0b b6       	in	r0, 0x3b	; 59
    18d2:	0f 92       	push	r0
    18d4:	2f 93       	push	r18
    18d6:	3f 93       	push	r19
    18d8:	4f 93       	push	r20
    18da:	5f 93       	push	r21
    18dc:	6f 93       	push	r22
    18de:	7f 93       	push	r23
    18e0:	8f 93       	push	r24
    18e2:	af 93       	push	r26
    18e4:	bf 93       	push	r27
    18e6:	ef 93       	push	r30
    18e8:	ff 93       	push	r31
    18ea:	a6 e8       	ldi	r26, 0x86	; 134
    18ec:	b5 e0       	ldi	r27, 0x05	; 5
    18ee:	e6 e6       	ldi	r30, 0x66	; 102
    18f0:	f5 e0       	ldi	r31, 0x05	; 5
    18f2:	26 e8       	ldi	r18, 0x86	; 134
    18f4:	35 e0       	ldi	r19, 0x05	; 5
    18f6:	8d 91       	ld	r24, X+
    18f8:	88 23       	and	r24, r24
    18fa:	59 f0       	breq	.+22     	; 0x1912 <__vector_17+0x4c>
    18fc:	40 81       	ld	r20, Z
    18fe:	51 81       	ldd	r21, Z+1	; 0x01
    1900:	62 81       	ldd	r22, Z+2	; 0x02
    1902:	73 81       	ldd	r23, Z+3	; 0x03
    1904:	50 5e       	subi	r21, 0xE0	; 224
    1906:	6f 4f       	sbci	r22, 0xFF	; 255
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	40 83       	st	Z, r20
    190c:	51 83       	std	Z+1, r21	; 0x01
    190e:	62 83       	std	Z+2, r22	; 0x02
    1910:	73 83       	std	Z+3, r23	; 0x03
    1912:	34 96       	adiw	r30, 0x04	; 4
    1914:	e2 17       	cp	r30, r18
    1916:	f3 07       	cpc	r31, r19
    1918:	71 f7       	brne	.-36     	; 0x18f6 <__vector_17+0x30>
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	8f 91       	pop	r24
    1924:	7f 91       	pop	r23
    1926:	6f 91       	pop	r22
    1928:	5f 91       	pop	r21
    192a:	4f 91       	pop	r20
    192c:	3f 91       	pop	r19
    192e:	2f 91       	pop	r18
    1930:	0f 90       	pop	r0
    1932:	0b be       	out	0x3b, r0	; 59
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <__subsf3>:
    193e:	50 58       	subi	r21, 0x80	; 128

00001940 <__addsf3>:
    1940:	bb 27       	eor	r27, r27
    1942:	aa 27       	eor	r26, r26
    1944:	0e d0       	rcall	.+28     	; 0x1962 <__addsf3x>
    1946:	75 c1       	rjmp	.+746    	; 0x1c32 <__fp_round>
    1948:	66 d1       	rcall	.+716    	; 0x1c16 <__fp_pscA>
    194a:	30 f0       	brcs	.+12     	; 0x1958 <__addsf3+0x18>
    194c:	6b d1       	rcall	.+726    	; 0x1c24 <__fp_pscB>
    194e:	20 f0       	brcs	.+8      	; 0x1958 <__addsf3+0x18>
    1950:	31 f4       	brne	.+12     	; 0x195e <__addsf3+0x1e>
    1952:	9f 3f       	cpi	r25, 0xFF	; 255
    1954:	11 f4       	brne	.+4      	; 0x195a <__addsf3+0x1a>
    1956:	1e f4       	brtc	.+6      	; 0x195e <__addsf3+0x1e>
    1958:	5b c1       	rjmp	.+694    	; 0x1c10 <__fp_nan>
    195a:	0e f4       	brtc	.+2      	; 0x195e <__addsf3+0x1e>
    195c:	e0 95       	com	r30
    195e:	e7 fb       	bst	r30, 7
    1960:	51 c1       	rjmp	.+674    	; 0x1c04 <__fp_inf>

00001962 <__addsf3x>:
    1962:	e9 2f       	mov	r30, r25
    1964:	77 d1       	rcall	.+750    	; 0x1c54 <__fp_split3>
    1966:	80 f3       	brcs	.-32     	; 0x1948 <__addsf3+0x8>
    1968:	ba 17       	cp	r27, r26
    196a:	62 07       	cpc	r22, r18
    196c:	73 07       	cpc	r23, r19
    196e:	84 07       	cpc	r24, r20
    1970:	95 07       	cpc	r25, r21
    1972:	18 f0       	brcs	.+6      	; 0x197a <__addsf3x+0x18>
    1974:	71 f4       	brne	.+28     	; 0x1992 <__addsf3x+0x30>
    1976:	9e f5       	brtc	.+102    	; 0x19de <__addsf3x+0x7c>
    1978:	8f c1       	rjmp	.+798    	; 0x1c98 <__fp_zero>
    197a:	0e f4       	brtc	.+2      	; 0x197e <__addsf3x+0x1c>
    197c:	e0 95       	com	r30
    197e:	0b 2e       	mov	r0, r27
    1980:	ba 2f       	mov	r27, r26
    1982:	a0 2d       	mov	r26, r0
    1984:	0b 01       	movw	r0, r22
    1986:	b9 01       	movw	r22, r18
    1988:	90 01       	movw	r18, r0
    198a:	0c 01       	movw	r0, r24
    198c:	ca 01       	movw	r24, r20
    198e:	a0 01       	movw	r20, r0
    1990:	11 24       	eor	r1, r1
    1992:	ff 27       	eor	r31, r31
    1994:	59 1b       	sub	r21, r25
    1996:	99 f0       	breq	.+38     	; 0x19be <__addsf3x+0x5c>
    1998:	59 3f       	cpi	r21, 0xF9	; 249
    199a:	50 f4       	brcc	.+20     	; 0x19b0 <__addsf3x+0x4e>
    199c:	50 3e       	cpi	r21, 0xE0	; 224
    199e:	68 f1       	brcs	.+90     	; 0x19fa <__addsf3x+0x98>
    19a0:	1a 16       	cp	r1, r26
    19a2:	f0 40       	sbci	r31, 0x00	; 0
    19a4:	a2 2f       	mov	r26, r18
    19a6:	23 2f       	mov	r18, r19
    19a8:	34 2f       	mov	r19, r20
    19aa:	44 27       	eor	r20, r20
    19ac:	58 5f       	subi	r21, 0xF8	; 248
    19ae:	f3 cf       	rjmp	.-26     	; 0x1996 <__addsf3x+0x34>
    19b0:	46 95       	lsr	r20
    19b2:	37 95       	ror	r19
    19b4:	27 95       	ror	r18
    19b6:	a7 95       	ror	r26
    19b8:	f0 40       	sbci	r31, 0x00	; 0
    19ba:	53 95       	inc	r21
    19bc:	c9 f7       	brne	.-14     	; 0x19b0 <__addsf3x+0x4e>
    19be:	7e f4       	brtc	.+30     	; 0x19de <__addsf3x+0x7c>
    19c0:	1f 16       	cp	r1, r31
    19c2:	ba 0b       	sbc	r27, r26
    19c4:	62 0b       	sbc	r22, r18
    19c6:	73 0b       	sbc	r23, r19
    19c8:	84 0b       	sbc	r24, r20
    19ca:	ba f0       	brmi	.+46     	; 0x19fa <__addsf3x+0x98>
    19cc:	91 50       	subi	r25, 0x01	; 1
    19ce:	a1 f0       	breq	.+40     	; 0x19f8 <__addsf3x+0x96>
    19d0:	ff 0f       	add	r31, r31
    19d2:	bb 1f       	adc	r27, r27
    19d4:	66 1f       	adc	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	c2 f7       	brpl	.-16     	; 0x19cc <__addsf3x+0x6a>
    19dc:	0e c0       	rjmp	.+28     	; 0x19fa <__addsf3x+0x98>
    19de:	ba 0f       	add	r27, r26
    19e0:	62 1f       	adc	r22, r18
    19e2:	73 1f       	adc	r23, r19
    19e4:	84 1f       	adc	r24, r20
    19e6:	48 f4       	brcc	.+18     	; 0x19fa <__addsf3x+0x98>
    19e8:	87 95       	ror	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	b7 95       	ror	r27
    19f0:	f7 95       	ror	r31
    19f2:	9e 3f       	cpi	r25, 0xFE	; 254
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <__addsf3x+0x96>
    19f6:	b3 cf       	rjmp	.-154    	; 0x195e <__addsf3+0x1e>
    19f8:	93 95       	inc	r25
    19fa:	88 0f       	add	r24, r24
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <__addsf3x+0x9e>
    19fe:	99 27       	eor	r25, r25
    1a00:	ee 0f       	add	r30, r30
    1a02:	97 95       	ror	r25
    1a04:	87 95       	ror	r24
    1a06:	08 95       	ret

00001a08 <__cmpsf2>:
    1a08:	d9 d0       	rcall	.+434    	; 0x1bbc <__fp_cmp>
    1a0a:	08 f4       	brcc	.+2      	; 0x1a0e <__cmpsf2+0x6>
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	08 95       	ret

00001a10 <__divsf3>:
    1a10:	0c d0       	rcall	.+24     	; 0x1a2a <__divsf3x>
    1a12:	0f c1       	rjmp	.+542    	; 0x1c32 <__fp_round>
    1a14:	07 d1       	rcall	.+526    	; 0x1c24 <__fp_pscB>
    1a16:	40 f0       	brcs	.+16     	; 0x1a28 <__divsf3+0x18>
    1a18:	fe d0       	rcall	.+508    	; 0x1c16 <__fp_pscA>
    1a1a:	30 f0       	brcs	.+12     	; 0x1a28 <__divsf3+0x18>
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <__divsf3+0x16>
    1a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a20:	19 f0       	breq	.+6      	; 0x1a28 <__divsf3+0x18>
    1a22:	f0 c0       	rjmp	.+480    	; 0x1c04 <__fp_inf>
    1a24:	51 11       	cpse	r21, r1
    1a26:	39 c1       	rjmp	.+626    	; 0x1c9a <__fp_szero>
    1a28:	f3 c0       	rjmp	.+486    	; 0x1c10 <__fp_nan>

00001a2a <__divsf3x>:
    1a2a:	14 d1       	rcall	.+552    	; 0x1c54 <__fp_split3>
    1a2c:	98 f3       	brcs	.-26     	; 0x1a14 <__divsf3+0x4>

00001a2e <__divsf3_pse>:
    1a2e:	99 23       	and	r25, r25
    1a30:	c9 f3       	breq	.-14     	; 0x1a24 <__divsf3+0x14>
    1a32:	55 23       	and	r21, r21
    1a34:	b1 f3       	breq	.-20     	; 0x1a22 <__divsf3+0x12>
    1a36:	95 1b       	sub	r25, r21
    1a38:	55 0b       	sbc	r21, r21
    1a3a:	bb 27       	eor	r27, r27
    1a3c:	aa 27       	eor	r26, r26
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	38 f0       	brcs	.+14     	; 0x1a54 <__divsf3_pse+0x26>
    1a46:	9f 5f       	subi	r25, 0xFF	; 255
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4a:	22 0f       	add	r18, r18
    1a4c:	33 1f       	adc	r19, r19
    1a4e:	44 1f       	adc	r20, r20
    1a50:	aa 1f       	adc	r26, r26
    1a52:	a9 f3       	breq	.-22     	; 0x1a3e <__divsf3_pse+0x10>
    1a54:	33 d0       	rcall	.+102    	; 0x1abc <__divsf3_pse+0x8e>
    1a56:	0e 2e       	mov	r0, r30
    1a58:	3a f0       	brmi	.+14     	; 0x1a68 <__divsf3_pse+0x3a>
    1a5a:	e0 e8       	ldi	r30, 0x80	; 128
    1a5c:	30 d0       	rcall	.+96     	; 0x1abe <__divsf3_pse+0x90>
    1a5e:	91 50       	subi	r25, 0x01	; 1
    1a60:	50 40       	sbci	r21, 0x00	; 0
    1a62:	e6 95       	lsr	r30
    1a64:	00 1c       	adc	r0, r0
    1a66:	ca f7       	brpl	.-14     	; 0x1a5a <__divsf3_pse+0x2c>
    1a68:	29 d0       	rcall	.+82     	; 0x1abc <__divsf3_pse+0x8e>
    1a6a:	fe 2f       	mov	r31, r30
    1a6c:	27 d0       	rcall	.+78     	; 0x1abc <__divsf3_pse+0x8e>
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	bb 1f       	adc	r27, r27
    1a76:	26 17       	cp	r18, r22
    1a78:	37 07       	cpc	r19, r23
    1a7a:	48 07       	cpc	r20, r24
    1a7c:	ab 07       	cpc	r26, r27
    1a7e:	b0 e8       	ldi	r27, 0x80	; 128
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <__divsf3_pse+0x56>
    1a82:	bb 0b       	sbc	r27, r27
    1a84:	80 2d       	mov	r24, r0
    1a86:	bf 01       	movw	r22, r30
    1a88:	ff 27       	eor	r31, r31
    1a8a:	93 58       	subi	r25, 0x83	; 131
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8e:	2a f0       	brmi	.+10     	; 0x1a9a <__divsf3_pse+0x6c>
    1a90:	9e 3f       	cpi	r25, 0xFE	; 254
    1a92:	51 05       	cpc	r21, r1
    1a94:	68 f0       	brcs	.+26     	; 0x1ab0 <__divsf3_pse+0x82>
    1a96:	b6 c0       	rjmp	.+364    	; 0x1c04 <__fp_inf>
    1a98:	00 c1       	rjmp	.+512    	; 0x1c9a <__fp_szero>
    1a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9c:	ec f3       	brlt	.-6      	; 0x1a98 <__divsf3_pse+0x6a>
    1a9e:	98 3e       	cpi	r25, 0xE8	; 232
    1aa0:	dc f3       	brlt	.-10     	; 0x1a98 <__divsf3_pse+0x6a>
    1aa2:	86 95       	lsr	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b7 95       	ror	r27
    1aaa:	f7 95       	ror	r31
    1aac:	9f 5f       	subi	r25, 0xFF	; 255
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__divsf3_pse+0x74>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	91 1d       	adc	r25, r1
    1ab4:	96 95       	lsr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	97 f9       	bld	r25, 7
    1aba:	08 95       	ret
    1abc:	e1 e0       	ldi	r30, 0x01	; 1
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	62 17       	cp	r22, r18
    1ac8:	73 07       	cpc	r23, r19
    1aca:	84 07       	cpc	r24, r20
    1acc:	ba 07       	cpc	r27, r26
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <__divsf3_pse+0xaa>
    1ad0:	62 1b       	sub	r22, r18
    1ad2:	73 0b       	sbc	r23, r19
    1ad4:	84 0b       	sbc	r24, r20
    1ad6:	ba 0b       	sbc	r27, r26
    1ad8:	ee 1f       	adc	r30, r30
    1ada:	88 f7       	brcc	.-30     	; 0x1abe <__divsf3_pse+0x90>
    1adc:	e0 95       	com	r30
    1ade:	08 95       	ret

00001ae0 <__fixsfsi>:
    1ae0:	04 d0       	rcall	.+8      	; 0x1aea <__fixunssfsi>
    1ae2:	68 94       	set
    1ae4:	b1 11       	cpse	r27, r1
    1ae6:	d9 c0       	rjmp	.+434    	; 0x1c9a <__fp_szero>
    1ae8:	08 95       	ret

00001aea <__fixunssfsi>:
    1aea:	bc d0       	rcall	.+376    	; 0x1c64 <__fp_splitA>
    1aec:	88 f0       	brcs	.+34     	; 0x1b10 <__fixunssfsi+0x26>
    1aee:	9f 57       	subi	r25, 0x7F	; 127
    1af0:	90 f0       	brcs	.+36     	; 0x1b16 <__fixunssfsi+0x2c>
    1af2:	b9 2f       	mov	r27, r25
    1af4:	99 27       	eor	r25, r25
    1af6:	b7 51       	subi	r27, 0x17	; 23
    1af8:	a0 f0       	brcs	.+40     	; 0x1b22 <__fixunssfsi+0x38>
    1afa:	d1 f0       	breq	.+52     	; 0x1b30 <__fixunssfsi+0x46>
    1afc:	66 0f       	add	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	1a f0       	brmi	.+6      	; 0x1b0c <__fixunssfsi+0x22>
    1b06:	ba 95       	dec	r27
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__fixunssfsi+0x12>
    1b0a:	12 c0       	rjmp	.+36     	; 0x1b30 <__fixunssfsi+0x46>
    1b0c:	b1 30       	cpi	r27, 0x01	; 1
    1b0e:	81 f0       	breq	.+32     	; 0x1b30 <__fixunssfsi+0x46>
    1b10:	c3 d0       	rcall	.+390    	; 0x1c98 <__fp_zero>
    1b12:	b1 e0       	ldi	r27, 0x01	; 1
    1b14:	08 95       	ret
    1b16:	c0 c0       	rjmp	.+384    	; 0x1c98 <__fp_zero>
    1b18:	67 2f       	mov	r22, r23
    1b1a:	78 2f       	mov	r23, r24
    1b1c:	88 27       	eor	r24, r24
    1b1e:	b8 5f       	subi	r27, 0xF8	; 248
    1b20:	39 f0       	breq	.+14     	; 0x1b30 <__fixunssfsi+0x46>
    1b22:	b9 3f       	cpi	r27, 0xF9	; 249
    1b24:	cc f3       	brlt	.-14     	; 0x1b18 <__fixunssfsi+0x2e>
    1b26:	86 95       	lsr	r24
    1b28:	77 95       	ror	r23
    1b2a:	67 95       	ror	r22
    1b2c:	b3 95       	inc	r27
    1b2e:	d9 f7       	brne	.-10     	; 0x1b26 <__fixunssfsi+0x3c>
    1b30:	3e f4       	brtc	.+14     	; 0x1b40 <__fixunssfsi+0x56>
    1b32:	90 95       	com	r25
    1b34:	80 95       	com	r24
    1b36:	70 95       	com	r23
    1b38:	61 95       	neg	r22
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <__floatunsisf>:
    1b42:	e8 94       	clt
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <__floatsisf+0x12>

00001b46 <__floatsisf>:
    1b46:	97 fb       	bst	r25, 7
    1b48:	3e f4       	brtc	.+14     	; 0x1b58 <__floatsisf+0x12>
    1b4a:	90 95       	com	r25
    1b4c:	80 95       	com	r24
    1b4e:	70 95       	com	r23
    1b50:	61 95       	neg	r22
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	8f 4f       	sbci	r24, 0xFF	; 255
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	99 23       	and	r25, r25
    1b5a:	a9 f0       	breq	.+42     	; 0x1b86 <__floatsisf+0x40>
    1b5c:	f9 2f       	mov	r31, r25
    1b5e:	96 e9       	ldi	r25, 0x96	; 150
    1b60:	bb 27       	eor	r27, r27
    1b62:	93 95       	inc	r25
    1b64:	f6 95       	lsr	r31
    1b66:	87 95       	ror	r24
    1b68:	77 95       	ror	r23
    1b6a:	67 95       	ror	r22
    1b6c:	b7 95       	ror	r27
    1b6e:	f1 11       	cpse	r31, r1
    1b70:	f8 cf       	rjmp	.-16     	; 0x1b62 <__floatsisf+0x1c>
    1b72:	fa f4       	brpl	.+62     	; 0x1bb2 <__floatsisf+0x6c>
    1b74:	bb 0f       	add	r27, r27
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <__floatsisf+0x36>
    1b78:	60 ff       	sbrs	r22, 0
    1b7a:	1b c0       	rjmp	.+54     	; 0x1bb2 <__floatsisf+0x6c>
    1b7c:	6f 5f       	subi	r22, 0xFF	; 255
    1b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b80:	8f 4f       	sbci	r24, 0xFF	; 255
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	16 c0       	rjmp	.+44     	; 0x1bb2 <__floatsisf+0x6c>
    1b86:	88 23       	and	r24, r24
    1b88:	11 f0       	breq	.+4      	; 0x1b8e <__floatsisf+0x48>
    1b8a:	96 e9       	ldi	r25, 0x96	; 150
    1b8c:	11 c0       	rjmp	.+34     	; 0x1bb0 <__floatsisf+0x6a>
    1b8e:	77 23       	and	r23, r23
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <__floatsisf+0x54>
    1b92:	9e e8       	ldi	r25, 0x8E	; 142
    1b94:	87 2f       	mov	r24, r23
    1b96:	76 2f       	mov	r23, r22
    1b98:	05 c0       	rjmp	.+10     	; 0x1ba4 <__floatsisf+0x5e>
    1b9a:	66 23       	and	r22, r22
    1b9c:	71 f0       	breq	.+28     	; 0x1bba <__floatsisf+0x74>
    1b9e:	96 e8       	ldi	r25, 0x86	; 134
    1ba0:	86 2f       	mov	r24, r22
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	2a f0       	brmi	.+10     	; 0x1bb2 <__floatsisf+0x6c>
    1ba8:	9a 95       	dec	r25
    1baa:	66 0f       	add	r22, r22
    1bac:	77 1f       	adc	r23, r23
    1bae:	88 1f       	adc	r24, r24
    1bb0:	da f7       	brpl	.-10     	; 0x1ba8 <__floatsisf+0x62>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	96 95       	lsr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	97 f9       	bld	r25, 7
    1bba:	08 95       	ret

00001bbc <__fp_cmp>:
    1bbc:	99 0f       	add	r25, r25
    1bbe:	00 08       	sbc	r0, r0
    1bc0:	55 0f       	add	r21, r21
    1bc2:	aa 0b       	sbc	r26, r26
    1bc4:	e0 e8       	ldi	r30, 0x80	; 128
    1bc6:	fe ef       	ldi	r31, 0xFE	; 254
    1bc8:	16 16       	cp	r1, r22
    1bca:	17 06       	cpc	r1, r23
    1bcc:	e8 07       	cpc	r30, r24
    1bce:	f9 07       	cpc	r31, r25
    1bd0:	c0 f0       	brcs	.+48     	; 0x1c02 <__fp_cmp+0x46>
    1bd2:	12 16       	cp	r1, r18
    1bd4:	13 06       	cpc	r1, r19
    1bd6:	e4 07       	cpc	r30, r20
    1bd8:	f5 07       	cpc	r31, r21
    1bda:	98 f0       	brcs	.+38     	; 0x1c02 <__fp_cmp+0x46>
    1bdc:	62 1b       	sub	r22, r18
    1bde:	73 0b       	sbc	r23, r19
    1be0:	84 0b       	sbc	r24, r20
    1be2:	95 0b       	sbc	r25, r21
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <__fp_cmp+0x38>
    1be6:	0a 26       	eor	r0, r26
    1be8:	61 f0       	breq	.+24     	; 0x1c02 <__fp_cmp+0x46>
    1bea:	23 2b       	or	r18, r19
    1bec:	24 2b       	or	r18, r20
    1bee:	25 2b       	or	r18, r21
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <__fp_cmp+0x3e>
    1bf2:	08 95       	ret
    1bf4:	0a 26       	eor	r0, r26
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <__fp_cmp+0x3e>
    1bf8:	a1 40       	sbci	r26, 0x01	; 1
    1bfa:	a6 95       	lsr	r26
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	81 1d       	adc	r24, r1
    1c00:	81 1d       	adc	r24, r1
    1c02:	08 95       	ret

00001c04 <__fp_inf>:
    1c04:	97 f9       	bld	r25, 7
    1c06:	9f 67       	ori	r25, 0x7F	; 127
    1c08:	80 e8       	ldi	r24, 0x80	; 128
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	08 95       	ret

00001c10 <__fp_nan>:
    1c10:	9f ef       	ldi	r25, 0xFF	; 255
    1c12:	80 ec       	ldi	r24, 0xC0	; 192
    1c14:	08 95       	ret

00001c16 <__fp_pscA>:
    1c16:	00 24       	eor	r0, r0
    1c18:	0a 94       	dec	r0
    1c1a:	16 16       	cp	r1, r22
    1c1c:	17 06       	cpc	r1, r23
    1c1e:	18 06       	cpc	r1, r24
    1c20:	09 06       	cpc	r0, r25
    1c22:	08 95       	ret

00001c24 <__fp_pscB>:
    1c24:	00 24       	eor	r0, r0
    1c26:	0a 94       	dec	r0
    1c28:	12 16       	cp	r1, r18
    1c2a:	13 06       	cpc	r1, r19
    1c2c:	14 06       	cpc	r1, r20
    1c2e:	05 06       	cpc	r0, r21
    1c30:	08 95       	ret

00001c32 <__fp_round>:
    1c32:	09 2e       	mov	r0, r25
    1c34:	03 94       	inc	r0
    1c36:	00 0c       	add	r0, r0
    1c38:	11 f4       	brne	.+4      	; 0x1c3e <__fp_round+0xc>
    1c3a:	88 23       	and	r24, r24
    1c3c:	52 f0       	brmi	.+20     	; 0x1c52 <__fp_round+0x20>
    1c3e:	bb 0f       	add	r27, r27
    1c40:	40 f4       	brcc	.+16     	; 0x1c52 <__fp_round+0x20>
    1c42:	bf 2b       	or	r27, r31
    1c44:	11 f4       	brne	.+4      	; 0x1c4a <__fp_round+0x18>
    1c46:	60 ff       	sbrs	r22, 0
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <__fp_round+0x20>
    1c4a:	6f 5f       	subi	r22, 0xFF	; 255
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c50:	9f 4f       	sbci	r25, 0xFF	; 255
    1c52:	08 95       	ret

00001c54 <__fp_split3>:
    1c54:	57 fd       	sbrc	r21, 7
    1c56:	90 58       	subi	r25, 0x80	; 128
    1c58:	44 0f       	add	r20, r20
    1c5a:	55 1f       	adc	r21, r21
    1c5c:	59 f0       	breq	.+22     	; 0x1c74 <__fp_splitA+0x10>
    1c5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c60:	71 f0       	breq	.+28     	; 0x1c7e <__fp_splitA+0x1a>
    1c62:	47 95       	ror	r20

00001c64 <__fp_splitA>:
    1c64:	88 0f       	add	r24, r24
    1c66:	97 fb       	bst	r25, 7
    1c68:	99 1f       	adc	r25, r25
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <__fp_splitA+0x20>
    1c6c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c6e:	79 f0       	breq	.+30     	; 0x1c8e <__fp_splitA+0x2a>
    1c70:	87 95       	ror	r24
    1c72:	08 95       	ret
    1c74:	12 16       	cp	r1, r18
    1c76:	13 06       	cpc	r1, r19
    1c78:	14 06       	cpc	r1, r20
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	f2 cf       	rjmp	.-28     	; 0x1c62 <__fp_split3+0xe>
    1c7e:	46 95       	lsr	r20
    1c80:	f1 df       	rcall	.-30     	; 0x1c64 <__fp_splitA>
    1c82:	08 c0       	rjmp	.+16     	; 0x1c94 <__fp_splitA+0x30>
    1c84:	16 16       	cp	r1, r22
    1c86:	17 06       	cpc	r1, r23
    1c88:	18 06       	cpc	r1, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	f1 cf       	rjmp	.-30     	; 0x1c70 <__fp_splitA+0xc>
    1c8e:	86 95       	lsr	r24
    1c90:	71 05       	cpc	r23, r1
    1c92:	61 05       	cpc	r22, r1
    1c94:	08 94       	sec
    1c96:	08 95       	ret

00001c98 <__fp_zero>:
    1c98:	e8 94       	clt

00001c9a <__fp_szero>:
    1c9a:	bb 27       	eor	r27, r27
    1c9c:	66 27       	eor	r22, r22
    1c9e:	77 27       	eor	r23, r23
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	97 f9       	bld	r25, 7
    1ca4:	08 95       	ret

00001ca6 <__gesf2>:
    1ca6:	8a df       	rcall	.-236    	; 0x1bbc <__fp_cmp>
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <__gesf2+0x6>
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	08 95       	ret

00001cae <__mulsf3>:
    1cae:	0b d0       	rcall	.+22     	; 0x1cc6 <__mulsf3x>
    1cb0:	c0 cf       	rjmp	.-128    	; 0x1c32 <__fp_round>
    1cb2:	b1 df       	rcall	.-158    	; 0x1c16 <__fp_pscA>
    1cb4:	28 f0       	brcs	.+10     	; 0x1cc0 <__mulsf3+0x12>
    1cb6:	b6 df       	rcall	.-148    	; 0x1c24 <__fp_pscB>
    1cb8:	18 f0       	brcs	.+6      	; 0x1cc0 <__mulsf3+0x12>
    1cba:	95 23       	and	r25, r21
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <__mulsf3+0x12>
    1cbe:	a2 cf       	rjmp	.-188    	; 0x1c04 <__fp_inf>
    1cc0:	a7 cf       	rjmp	.-178    	; 0x1c10 <__fp_nan>
    1cc2:	11 24       	eor	r1, r1
    1cc4:	ea cf       	rjmp	.-44     	; 0x1c9a <__fp_szero>

00001cc6 <__mulsf3x>:
    1cc6:	c6 df       	rcall	.-116    	; 0x1c54 <__fp_split3>
    1cc8:	a0 f3       	brcs	.-24     	; 0x1cb2 <__mulsf3+0x4>

00001cca <__mulsf3_pse>:
    1cca:	95 9f       	mul	r25, r21
    1ccc:	d1 f3       	breq	.-12     	; 0x1cc2 <__mulsf3+0x14>
    1cce:	95 0f       	add	r25, r21
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	55 1f       	adc	r21, r21
    1cd4:	62 9f       	mul	r22, r18
    1cd6:	f0 01       	movw	r30, r0
    1cd8:	72 9f       	mul	r23, r18
    1cda:	bb 27       	eor	r27, r27
    1cdc:	f0 0d       	add	r31, r0
    1cde:	b1 1d       	adc	r27, r1
    1ce0:	63 9f       	mul	r22, r19
    1ce2:	aa 27       	eor	r26, r26
    1ce4:	f0 0d       	add	r31, r0
    1ce6:	b1 1d       	adc	r27, r1
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	64 9f       	mul	r22, r20
    1cec:	66 27       	eor	r22, r22
    1cee:	b0 0d       	add	r27, r0
    1cf0:	a1 1d       	adc	r26, r1
    1cf2:	66 1f       	adc	r22, r22
    1cf4:	82 9f       	mul	r24, r18
    1cf6:	22 27       	eor	r18, r18
    1cf8:	b0 0d       	add	r27, r0
    1cfa:	a1 1d       	adc	r26, r1
    1cfc:	62 1f       	adc	r22, r18
    1cfe:	73 9f       	mul	r23, r19
    1d00:	b0 0d       	add	r27, r0
    1d02:	a1 1d       	adc	r26, r1
    1d04:	62 1f       	adc	r22, r18
    1d06:	83 9f       	mul	r24, r19
    1d08:	a0 0d       	add	r26, r0
    1d0a:	61 1d       	adc	r22, r1
    1d0c:	22 1f       	adc	r18, r18
    1d0e:	74 9f       	mul	r23, r20
    1d10:	33 27       	eor	r19, r19
    1d12:	a0 0d       	add	r26, r0
    1d14:	61 1d       	adc	r22, r1
    1d16:	23 1f       	adc	r18, r19
    1d18:	84 9f       	mul	r24, r20
    1d1a:	60 0d       	add	r22, r0
    1d1c:	21 1d       	adc	r18, r1
    1d1e:	82 2f       	mov	r24, r18
    1d20:	76 2f       	mov	r23, r22
    1d22:	6a 2f       	mov	r22, r26
    1d24:	11 24       	eor	r1, r1
    1d26:	9f 57       	subi	r25, 0x7F	; 127
    1d28:	50 40       	sbci	r21, 0x00	; 0
    1d2a:	8a f0       	brmi	.+34     	; 0x1d4e <__mulsf3_pse+0x84>
    1d2c:	e1 f0       	breq	.+56     	; 0x1d66 <__mulsf3_pse+0x9c>
    1d2e:	88 23       	and	r24, r24
    1d30:	4a f0       	brmi	.+18     	; 0x1d44 <__mulsf3_pse+0x7a>
    1d32:	ee 0f       	add	r30, r30
    1d34:	ff 1f       	adc	r31, r31
    1d36:	bb 1f       	adc	r27, r27
    1d38:	66 1f       	adc	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	91 50       	subi	r25, 0x01	; 1
    1d40:	50 40       	sbci	r21, 0x00	; 0
    1d42:	a9 f7       	brne	.-22     	; 0x1d2e <__mulsf3_pse+0x64>
    1d44:	9e 3f       	cpi	r25, 0xFE	; 254
    1d46:	51 05       	cpc	r21, r1
    1d48:	70 f0       	brcs	.+28     	; 0x1d66 <__mulsf3_pse+0x9c>
    1d4a:	5c cf       	rjmp	.-328    	; 0x1c04 <__fp_inf>
    1d4c:	a6 cf       	rjmp	.-180    	; 0x1c9a <__fp_szero>
    1d4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d50:	ec f3       	brlt	.-6      	; 0x1d4c <__mulsf3_pse+0x82>
    1d52:	98 3e       	cpi	r25, 0xE8	; 232
    1d54:	dc f3       	brlt	.-10     	; 0x1d4c <__mulsf3_pse+0x82>
    1d56:	86 95       	lsr	r24
    1d58:	77 95       	ror	r23
    1d5a:	67 95       	ror	r22
    1d5c:	b7 95       	ror	r27
    1d5e:	f7 95       	ror	r31
    1d60:	e7 95       	ror	r30
    1d62:	9f 5f       	subi	r25, 0xFF	; 255
    1d64:	c1 f7       	brne	.-16     	; 0x1d56 <__mulsf3_pse+0x8c>
    1d66:	fe 2b       	or	r31, r30
    1d68:	88 0f       	add	r24, r24
    1d6a:	91 1d       	adc	r25, r1
    1d6c:	96 95       	lsr	r25
    1d6e:	87 95       	ror	r24
    1d70:	97 f9       	bld	r25, 7
    1d72:	08 95       	ret

00001d74 <__tablejump2__>:
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	00 24       	eor	r0, r0
    1d7a:	00 1c       	adc	r0, r0
    1d7c:	0b be       	out	0x3b, r0	; 59
    1d7e:	07 90       	elpm	r0, Z+
    1d80:	f6 91       	elpm	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	09 94       	ijmp

00001d86 <atoi>:
    1d86:	fc 01       	movw	r30, r24
    1d88:	88 27       	eor	r24, r24
    1d8a:	99 27       	eor	r25, r25
    1d8c:	e8 94       	clt
    1d8e:	21 91       	ld	r18, Z+
    1d90:	20 32       	cpi	r18, 0x20	; 32
    1d92:	e9 f3       	breq	.-6      	; 0x1d8e <atoi+0x8>
    1d94:	29 30       	cpi	r18, 0x09	; 9
    1d96:	10 f0       	brcs	.+4      	; 0x1d9c <atoi+0x16>
    1d98:	2e 30       	cpi	r18, 0x0E	; 14
    1d9a:	c8 f3       	brcs	.-14     	; 0x1d8e <atoi+0x8>
    1d9c:	2b 32       	cpi	r18, 0x2B	; 43
    1d9e:	39 f0       	breq	.+14     	; 0x1dae <atoi+0x28>
    1da0:	2d 32       	cpi	r18, 0x2D	; 45
    1da2:	31 f4       	brne	.+12     	; 0x1db0 <atoi+0x2a>
    1da4:	68 94       	set
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <atoi+0x28>
    1da8:	0b d0       	rcall	.+22     	; 0x1dc0 <__mulhi_const_10>
    1daa:	82 0f       	add	r24, r18
    1dac:	91 1d       	adc	r25, r1
    1dae:	21 91       	ld	r18, Z+
    1db0:	20 53       	subi	r18, 0x30	; 48
    1db2:	2a 30       	cpi	r18, 0x0A	; 10
    1db4:	c8 f3       	brcs	.-14     	; 0x1da8 <atoi+0x22>
    1db6:	1e f4       	brtc	.+6      	; 0x1dbe <atoi+0x38>
    1db8:	90 95       	com	r25
    1dba:	81 95       	neg	r24
    1dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbe:	08 95       	ret

00001dc0 <__mulhi_const_10>:
    1dc0:	7a e0       	ldi	r23, 0x0A	; 10
    1dc2:	97 9f       	mul	r25, r23
    1dc4:	90 2d       	mov	r25, r0
    1dc6:	87 9f       	mul	r24, r23
    1dc8:	80 2d       	mov	r24, r0
    1dca:	91 0d       	add	r25, r1
    1dcc:	11 24       	eor	r1, r1
    1dce:	08 95       	ret

00001dd0 <puts>:
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <__iob+0x2>
    1ddc:	f0 91 2f 06 	lds	r31, 0x062F	; 0x80062f <__iob+0x3>
    1de0:	23 81       	ldd	r18, Z+3	; 0x03
    1de2:	21 ff       	sbrs	r18, 1
    1de4:	1b c0       	rjmp	.+54     	; 0x1e1c <puts+0x4c>
    1de6:	8c 01       	movw	r16, r24
    1de8:	d0 e0       	ldi	r29, 0x00	; 0
    1dea:	c0 e0       	ldi	r28, 0x00	; 0
    1dec:	f8 01       	movw	r30, r16
    1dee:	81 91       	ld	r24, Z+
    1df0:	8f 01       	movw	r16, r30
    1df2:	60 91 2e 06 	lds	r22, 0x062E	; 0x80062e <__iob+0x2>
    1df6:	70 91 2f 06 	lds	r23, 0x062F	; 0x80062f <__iob+0x3>
    1dfa:	db 01       	movw	r26, r22
    1dfc:	18 96       	adiw	r26, 0x08	; 8
    1dfe:	ed 91       	ld	r30, X+
    1e00:	fc 91       	ld	r31, X
    1e02:	19 97       	sbiw	r26, 0x09	; 9
    1e04:	88 23       	and	r24, r24
    1e06:	31 f0       	breq	.+12     	; 0x1e14 <puts+0x44>
    1e08:	09 95       	icall
    1e0a:	89 2b       	or	r24, r25
    1e0c:	79 f3       	breq	.-34     	; 0x1dec <puts+0x1c>
    1e0e:	df ef       	ldi	r29, 0xFF	; 255
    1e10:	cf ef       	ldi	r28, 0xFF	; 255
    1e12:	ec cf       	rjmp	.-40     	; 0x1dec <puts+0x1c>
    1e14:	8a e0       	ldi	r24, 0x0A	; 10
    1e16:	09 95       	icall
    1e18:	89 2b       	or	r24, r25
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <puts+0x52>
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <puts+0x56>
    1e22:	8d 2f       	mov	r24, r29
    1e24:	9c 2f       	mov	r25, r28
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <_exit>:
    1e30:	f8 94       	cli

00001e32 <__stop_program>:
    1e32:	ff cf       	rjmp	.-2      	; 0x1e32 <__stop_program>
