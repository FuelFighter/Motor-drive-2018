
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000025fe  00002692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000260  0080013e  0080013e  000026d0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005afc  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b11  00000000  00000000  00008728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b88  00000000  00000000  0000a239  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eb8  00000000  00000000  0000cdc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001695  00000000  00000000  0000dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e28  00000000  00000000  0000f311  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00013139  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_6>
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_12>
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_16>
      44:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_17>
      48:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	70 c7       	rjmp	.+3808   	; 0xf36 <__vector_21>
      56:	00 00       	nop
      58:	50 c7       	rjmp	.+3744   	; 0xefa <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	93 c7       	rjmp	.+3878   	; 0xfa8 <__vector_32>
      82:	00 00       	nop
      84:	73 c7       	rjmp	.+3814   	; 0xf6c <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	2b 0b       	sbc	r18, r27
      96:	30 0b       	sbc	r19, r16
      98:	36 0b       	sbc	r19, r22
      9a:	3c 0b       	sbc	r19, r28
      9c:	42 0b       	sbc	r20, r18
      9e:	47 0b       	sbc	r20, r23
      a0:	4d 0b       	sbc	r20, r29
      a2:	53 0b       	sbc	r21, r19

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee ef       	ldi	r30, 0xFE	; 254
      b8:	f5 e2       	ldi	r31, 0x25	; 37
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	ae 33       	cpi	r26, 0x3E	; 62
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	ae e3       	ldi	r26, 0x3E	; 62
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ae 39       	cpi	r26, 0x9E	; 158
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	a8 d7       	rcall	.+3920   	; 0x102c <main>
      dc:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static float f32_Integrator = 0.0 ;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <f32_Integrator>
      e6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <f32_Integrator+0x1>
      ea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <f32_Integrator+0x2>
      ee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <set_I>:
}

void set_I(uint8_t duty)
{
	f32_Integrator = (duty-50.0)/Ki;
      f4:	68 2f       	mov	r22, r24
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__floatsisf>
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	48 e4       	ldi	r20, 0x48	; 72
     106:	52 e4       	ldi	r21, 0x42	; 66
     108:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__subsf3>
     10c:	23 e3       	ldi	r18, 0x33	; 51
     10e:	33 e3       	ldi	r19, 0x33	; 51
     110:	43 ec       	ldi	r20, 0xC3	; 195
     112:	51 e4       	ldi	r21, 0x41	; 65
     114:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     118:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <f32_Integrator>
     11c:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <f32_Integrator+0x1>
     120:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <f32_Integrator+0x2>
     124:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <f32_Integrator+0x3>
     128:	08 95       	ret

0000012a <controller>:
}

void controller(volatile ModuleValues_t *vals){
     12a:	8f 92       	push	r8
     12c:	9f 92       	push	r9
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ec 01       	movw	r28, r24
	static float f32_DutyCycleCmd = 50.0 ;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	int8_t i8_throttle_cmd = 0;
	
	if (vals->motor_status == BRAKE)
     144:	8c 8d       	ldd	r24, Y+28	; 0x1c
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	21 f4       	brne	.+8      	; 0x152 <controller+0x28>
	{
		i8_throttle_cmd = -(int8_t)vals->u8_brake_cmd ;
     14a:	6e 89       	ldd	r22, Y+22	; 0x16
     14c:	16 2f       	mov	r17, r22
     14e:	11 95       	neg	r17
     150:	01 c0       	rjmp	.+2      	; 0x154 <controller+0x2a>
void controller(volatile ModuleValues_t *vals){
	
	static float f32_DutyCycleCmd = 50.0 ;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	int8_t i8_throttle_cmd = 0;
     152:	10 e0       	ldi	r17, 0x00	; 0
	
	if (vals->motor_status == BRAKE)
	{
		i8_throttle_cmd = -(int8_t)vals->u8_brake_cmd ;
	}
	if (vals->motor_status == ACCEL)
     154:	8c 8d       	ldd	r24, Y+28	; 0x1c
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	09 f4       	brne	.+2      	; 0x15c <controller+0x32>
	{
		i8_throttle_cmd = vals->u8_accel_cmd ;
     15a:	1d 89       	ldd	r17, Y+21	; 0x15
	}
	
	if (vals->ctrl_type == CURRENT)
     15c:	89 a1       	ldd	r24, Y+33	; 0x21
     15e:	81 11       	cpse	r24, r1
     160:	8b c0       	rjmp	.+278    	; 0x278 <controller+0x14e>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     162:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     166:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     16a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     16e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	4e eb       	ldi	r20, 0xBE	; 190
     178:	52 e4       	ldi	r21, 0x42	; 66
     17a:	c7 01       	movw	r24, r14
     17c:	b6 01       	movw	r22, r12
     17e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__gesf2>
     182:	88 23       	and	r24, r24
     184:	54 f4       	brge	.+20     	; 0x19a <controller+0x70>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	48 e4       	ldi	r20, 0x48	; 72
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	c7 01       	movw	r24, r14
     190:	b6 01       	movw	r22, r12
     192:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__cmpsf2>
     196:	18 16       	cp	r1, r24
     198:	ac f0       	brlt	.+42     	; 0x1c4 <controller+0x9a>
		{
			b_saturation = 1 ;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
		} else {
			b_saturation = 0;
		}
		
		f32_CurrentDelta = ((float)(i8_throttle_cmd)-vals->f32_motor_current)	;
     1a0:	c8 80       	ld	r12, Y
     1a2:	d9 80       	ldd	r13, Y+1	; 0x01
     1a4:	ea 80       	ldd	r14, Y+2	; 0x02
     1a6:	fb 80       	ldd	r15, Y+3	; 0x03
     1a8:	61 2f       	mov	r22, r17
     1aa:	11 0f       	add	r17, r17
     1ac:	77 0b       	sbc	r23, r23
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__floatsisf>
     1b6:	a7 01       	movw	r20, r14
     1b8:	96 01       	movw	r18, r12
     1ba:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__subsf3>
     1be:	6b 01       	movw	r12, r22
     1c0:	7c 01       	movw	r14, r24
     1c2:	2d c0       	rjmp	.+90     	; 0x21e <controller+0xf4>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
		{
			b_saturation = 1 ;
		} else {
			b_saturation = 0;
     1c4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		}
		
		f32_CurrentDelta = ((float)(i8_throttle_cmd)-vals->f32_motor_current)	;
     1c8:	c8 80       	ld	r12, Y
     1ca:	d9 80       	ldd	r13, Y+1	; 0x01
     1cc:	ea 80       	ldd	r14, Y+2	; 0x02
     1ce:	fb 80       	ldd	r15, Y+3	; 0x03
     1d0:	61 2f       	mov	r22, r17
     1d2:	11 0f       	add	r17, r17
     1d4:	77 0b       	sbc	r23, r23
     1d6:	88 0b       	sbc	r24, r24
     1d8:	99 0b       	sbc	r25, r25
     1da:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__floatsisf>
     1de:	a7 01       	movw	r20, r14
     1e0:	96 01       	movw	r18, r12
     1e2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__subsf3>
     1e6:	6b 01       	movw	r12, r22
     1e8:	7c 01       	movw	r14, r24
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     1ea:	2a e0       	ldi	r18, 0x0A	; 10
     1ec:	37 ed       	ldi	r19, 0xD7	; 215
     1ee:	43 ea       	ldi	r20, 0xA3	; 163
     1f0:	5b e3       	ldi	r21, 0x3B	; 59
     1f2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     1f6:	9b 01       	movw	r18, r22
     1f8:	ac 01       	movw	r20, r24
     1fa:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <f32_Integrator>
     1fe:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <f32_Integrator+0x1>
     202:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <f32_Integrator+0x2>
     206:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <f32_Integrator+0x3>
     20a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__addsf3>
     20e:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <f32_Integrator>
     212:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <f32_Integrator+0x1>
     216:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <f32_Integrator+0x2>
     21a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     21e:	23 e3       	ldi	r18, 0x33	; 51
     220:	33 e3       	ldi	r19, 0x33	; 51
     222:	43 ec       	ldi	r20, 0xC3	; 195
     224:	51 e4       	ldi	r21, 0x41	; 65
     226:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <f32_Integrator>
     22a:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <f32_Integrator+0x1>
     22e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <f32_Integrator+0x2>
     232:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <f32_Integrator+0x3>
     236:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     23a:	4b 01       	movw	r8, r22
     23c:	5c 01       	movw	r10, r24
     23e:	29 e6       	ldi	r18, 0x69	; 105
     240:	3f e6       	ldi	r19, 0x6F	; 111
     242:	40 ed       	ldi	r20, 0xD0	; 208
     244:	5e e3       	ldi	r21, 0x3E	; 62
     246:	c7 01       	movw	r24, r14
     248:	b6 01       	movw	r22, r12
     24a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     24e:	9b 01       	movw	r18, r22
     250:	ac 01       	movw	r20, r24
     252:	c5 01       	movw	r24, r10
     254:	b4 01       	movw	r22, r8
     256:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__addsf3>
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	48 e4       	ldi	r20, 0x48	; 72
     260:	52 e4       	ldi	r21, 0x42	; 66
     262:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__addsf3>
     266:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     26a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     272:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     276:	19 c0       	rjmp	.+50     	; 0x2aa <controller+0x180>
	
	}else if (vals->ctrl_type == PWM)
     278:	89 a1       	ldd	r24, Y+33	; 0x21
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	b1 f4       	brne	.+44     	; 0x2aa <controller+0x180>
	{
		f32_DutyCycleCmd = (float)(vals->u8_duty_cycle);
     27e:	6f 89       	ldd	r22, Y+23	; 0x17
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     28a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     28e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     292:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     296:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		if (vals->f32_motor_current > 0.5)
     29a:	88 81       	ld	r24, Y
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	aa 81       	ldd	r26, Y+2	; 0x02
     2a0:	bb 81       	ldd	r27, Y+3	; 0x03
		{
			//f32_DutyCycleCmd -- ;
		}
		if (vals->f32_motor_current < -0.5)
     2a2:	88 81       	ld	r24, Y
     2a4:	99 81       	ldd	r25, Y+1	; 0x01
     2a6:	aa 81       	ldd	r26, Y+2	; 0x02
     2a8:	bb 81       	ldd	r27, Y+3	; 0x03
		}
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     2aa:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     2ae:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     2b2:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     2b6:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	4e eb       	ldi	r20, 0xBE	; 190
     2c0:	52 e4       	ldi	r21, 0x42	; 66
     2c2:	c7 01       	movw	r24, r14
     2c4:	b6 01       	movw	r22, r12
     2c6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__gesf2>
     2ca:	18 16       	cp	r1, r24
     2cc:	6c f4       	brge	.+26     	; 0x2e8 <controller+0x1be>
	{
		f32_DutyCycleCmd = 95;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	ae eb       	ldi	r26, 0xBE	; 190
     2d4:	b2 e4       	ldi	r27, 0x42	; 66
     2d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     2e6:	16 c0       	rjmp	.+44     	; 0x314 <controller+0x1ea>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	48 e4       	ldi	r20, 0x48	; 72
     2ee:	52 e4       	ldi	r21, 0x42	; 66
     2f0:	c7 01       	movw	r24, r14
     2f2:	b6 01       	movw	r22, r12
     2f4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__cmpsf2>
     2f8:	88 23       	and	r24, r24
     2fa:	64 f4       	brge	.+24     	; 0x314 <controller+0x1ea>
	{
		f32_DutyCycleCmd = 50;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	a8 e4       	ldi	r26, 0x48	; 72
     302:	b2 e4       	ldi	r27, 0x42	; 66
     304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     308:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     30c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     310:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     314:	06 e9       	ldi	r16, 0x96	; 150
     316:	10 e0       	ldi	r17, 0x00	; 0
     318:	f8 01       	movw	r30, r16
     31a:	e0 80       	ld	r14, Z
     31c:	f1 80       	ldd	r15, Z+1	; 0x01
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	48 ec       	ldi	r20, 0xC8	; 200
     324:	52 e4       	ldi	r21, 0x42	; 66
     326:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     32a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     32e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     332:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     336:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     33a:	4b 01       	movw	r8, r22
     33c:	5c 01       	movw	r10, r24
     33e:	b7 01       	movw	r22, r14
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     348:	9b 01       	movw	r18, r22
     34a:	ac 01       	movw	r20, r24
     34c:	c5 01       	movw	r24, r10
     34e:	b4 01       	movw	r22, r8
     350:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     354:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixsfsi>
     358:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     35c:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     360:	f8 01       	movw	r30, r16
     362:	60 81       	ld	r22, Z
     364:	71 81       	ldd	r23, Z+1	; 0x01
     366:	00 81       	ld	r16, Z
     368:	11 81       	ldd	r17, Z+1	; 0x01
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     372:	6b 01       	movw	r12, r22
     374:	7c 01       	movw	r14, r24
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	48 ec       	ldi	r20, 0xC8	; 200
     37c:	52 e4       	ldi	r21, 0x42	; 66
     37e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     382:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     386:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     38a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     38e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     392:	4b 01       	movw	r8, r22
     394:	5c 01       	movw	r10, r24
     396:	b8 01       	movw	r22, r16
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     3ac:	9b 01       	movw	r18, r22
     3ae:	ac 01       	movw	r20, r24
     3b0:	c7 01       	movw	r24, r14
     3b2:	b6 01       	movw	r22, r12
     3b4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__subsf3>
     3b8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixsfsi>
     3bc:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     3c0:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	vals->u8_duty_cycle = (uint8_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     3c4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     3c8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     3cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     3d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     3d4:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     3d8:	6f 8b       	std	Y+23, r22	; 0x17

}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	bf 90       	pop	r11
     3ec:	af 90       	pop	r10
     3ee:	9f 90       	pop	r9
     3f0:	8f 90       	pop	r8
     3f2:	08 95       	ret

000003f4 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     3f4:	24 9a       	sbi	0x04, 4	; 4
     3f6:	08 95       	ret

000003f8 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state == 1)
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		PORTB |= (1 << PB4) ;
     3fc:	2c 9a       	sbi	0x05, 4	; 5
     3fe:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     400:	2c 98       	cbi	0x05, 4	; 5
     402:	08 95       	ret

00000404 <SPI_handler_0>:
		}else if (vals->ctrl_type == PWM)
		{
			vals->u8_duty_cycle = i16_data_received;
		}
	}
}
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
     40a:	66 e4       	ldi	r22, 0x46	; 70
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 23 0b 	call	0x1646	; 0x1646 <Set_ADC_Channel_ext>
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	43 e0       	ldi	r20, 0x03	; 3
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	63 e4       	ldi	r22, 0x43	; 67
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	86 e4       	ldi	r24, 0x46	; 70
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <spi_trancieve>
     426:	e3 e4       	ldi	r30, 0x43	; 67
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	61 81       	ldd	r22, Z+1	; 0x01
     42c:	6f 71       	andi	r22, 0x1F	; 31
     42e:	61 83       	std	Z+1, r22	; 0x01
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	76 2f       	mov	r23, r22
     434:	66 27       	eor	r22, r22
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	68 2b       	or	r22, r24
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	ce 01       	movw	r24, r28
     43e:	c2 d7       	rcall	.+3972   	; 0x13c4 <handle_current_sensor>
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <SPI_handler_1>:
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	ec 01       	movw	r28, r24
     44c:	66 e4       	ldi	r22, 0x46	; 70
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 23 0b 	call	0x1646	; 0x1646 <Set_ADC_Channel_ext>
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	43 e0       	ldi	r20, 0x03	; 3
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	63 e4       	ldi	r22, 0x43	; 67
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	86 e4       	ldi	r24, 0x46	; 70
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <spi_trancieve>
     468:	e3 e4       	ldi	r30, 0x43	; 67
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	61 81       	ldd	r22, Z+1	; 0x01
     46e:	6f 71       	andi	r22, 0x1F	; 31
     470:	61 83       	std	Z+1, r22	; 0x01
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	76 2f       	mov	r23, r22
     476:	66 27       	eor	r22, r22
     478:	82 81       	ldd	r24, Z+2	; 0x02
     47a:	68 2b       	or	r22, r24
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	ce 01       	movw	r24, r28
     480:	a1 d7       	rcall	.+3906   	; 0x13c4 <handle_current_sensor>
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <SPI_handler_2>:
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec 01       	movw	r28, r24
     48e:	66 e4       	ldi	r22, 0x46	; 70
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 23 0b 	call	0x1646	; 0x1646 <Set_ADC_Channel_ext>
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	43 e0       	ldi	r20, 0x03	; 3
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	63 e4       	ldi	r22, 0x43	; 67
     4a0:	71 e0       	ldi	r23, 0x01	; 1
     4a2:	86 e4       	ldi	r24, 0x46	; 70
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <spi_trancieve>
     4aa:	e3 e4       	ldi	r30, 0x43	; 67
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	61 81       	ldd	r22, Z+1	; 0x01
     4b0:	6f 71       	andi	r22, 0x1F	; 31
     4b2:	61 83       	std	Z+1, r22	; 0x01
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	76 2f       	mov	r23, r22
     4b8:	66 27       	eor	r22, r22
     4ba:	82 81       	ldd	r24, Z+2	; 0x02
     4bc:	68 2b       	or	r22, r24
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	49 e8       	ldi	r20, 0x89	; 137
     4cc:	52 e4       	ldi	r21, 0x42	; 66
     4ce:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	a9 01       	movw	r20, r18
     4d8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__addsf3>
     4dc:	68 83       	st	Y, r22
     4de:	79 83       	std	Y+1, r23	; 0x01
     4e0:	8a 83       	std	Y+2, r24	; 0x02
     4e2:	9b 83       	std	Y+3, r25	; 0x03
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <SPI_handler_4>:
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
     4f0:	66 e4       	ldi	r22, 0x46	; 70
     4f2:	71 e0       	ldi	r23, 0x01	; 1
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	0e 94 23 0b 	call	0x1646	; 0x1646 <Set_ADC_Channel_ext>
     4fa:	21 e0       	ldi	r18, 0x01	; 1
     4fc:	43 e0       	ldi	r20, 0x03	; 3
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	63 e4       	ldi	r22, 0x43	; 67
     502:	71 e0       	ldi	r23, 0x01	; 1
     504:	86 e4       	ldi	r24, 0x46	; 70
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <spi_trancieve>
     50c:	e3 e4       	ldi	r30, 0x43	; 67
     50e:	f1 e0       	ldi	r31, 0x01	; 1
     510:	61 81       	ldd	r22, Z+1	; 0x01
     512:	6f 71       	andi	r22, 0x1F	; 31
     514:	61 83       	std	Z+1, r22	; 0x01
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	76 2f       	mov	r23, r22
     51a:	66 27       	eor	r22, r22
     51c:	82 81       	ldd	r24, Z+2	; 0x02
     51e:	68 2b       	or	r22, r24
     520:	ce 01       	movw	r24, r28
     522:	cb d7       	rcall	.+3990   	; 0x14ba <handle_temp_sensor>
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <handle_can>:
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	8c 01       	movw	r16, r24
     534:	eb 01       	movw	r28, r22
     536:	cb 01       	movw	r24, r22
     538:	0e 94 9f 0c 	call	0x193e	; 0x193e <can_read_message_if_new>
     53c:	88 23       	and	r24, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <handle_can+0x18>
     540:	49 c0       	rjmp	.+146    	; 0x5d4 <handle_can+0xaa>
     542:	f8 01       	movw	r30, r16
     544:	84 8d       	ldd	r24, Z+28	; 0x1c
     546:	84 30       	cpi	r24, 0x04	; 4
     548:	09 f4       	brne	.+2      	; 0x54c <handle_can+0x22>
     54a:	44 c0       	rjmp	.+136    	; 0x5d4 <handle_can+0xaa>
     54c:	88 81       	ld	r24, Y
     54e:	99 81       	ldd	r25, Y+1	; 0x01
     550:	80 32       	cpi	r24, 0x20	; 32
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	9f 07       	cpc	r25, r31
     556:	a9 f1       	breq	.+106    	; 0x5c2 <handle_can+0x98>
     558:	80 33       	cpi	r24, 0x30	; 48
     55a:	92 40       	sbci	r25, 0x02	; 2
     55c:	d9 f5       	brne	.+118    	; 0x5d4 <handle_can+0xaa>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	f8 01       	movw	r30, r16
     562:	85 8f       	std	Z+29, r24	; 0x1d
     564:	11 a2       	std	Z+33, r1	; 0x21
     566:	82 e3       	ldi	r24, 0x32	; 50
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	91 8f       	std	Z+25, r25	; 0x19
     56c:	80 8f       	std	Z+24, r24	; 0x18
     56e:	8e 81       	ldd	r24, Y+6	; 0x06
     570:	8b 30       	cpi	r24, 0x0B	; 11
     572:	60 f0       	brcs	.+24     	; 0x58c <handle_can+0x62>
     574:	9d ec       	ldi	r25, 0xCD	; 205
     576:	89 9f       	mul	r24, r25
     578:	81 2d       	mov	r24, r1
     57a:	11 24       	eor	r1, r1
     57c:	86 95       	lsr	r24
     57e:	86 95       	lsr	r24
     580:	86 95       	lsr	r24
     582:	85 8b       	std	Z+21, r24	; 0x15
     584:	8e e1       	ldi	r24, 0x1E	; 30
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	93 8f       	std	Z+27, r25	; 0x1b
     58a:	82 8f       	std	Z+26, r24	; 0x1a
     58c:	8d 81       	ldd	r24, Y+5	; 0x05
     58e:	8c 31       	cpi	r24, 0x1C	; 28
     590:	80 f0       	brcs	.+32     	; 0x5b2 <handle_can+0x88>
     592:	9d ec       	ldi	r25, 0xCD	; 205
     594:	89 9f       	mul	r24, r25
     596:	81 2d       	mov	r24, r1
     598:	11 24       	eor	r1, r1
     59a:	86 95       	lsr	r24
     59c:	86 95       	lsr	r24
     59e:	86 95       	lsr	r24
     5a0:	f8 01       	movw	r30, r16
     5a2:	86 8b       	std	Z+22, r24	; 0x16
     5a4:	8e e1       	ldi	r24, 0x1E	; 30
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	93 8f       	std	Z+27, r25	; 0x1b
     5aa:	82 8f       	std	Z+26, r24	; 0x1a
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	8c 31       	cpi	r24, 0x1C	; 28
     5b0:	10 f4       	brcc	.+4      	; 0x5b6 <handle_can+0x8c>
     5b2:	f8 01       	movw	r30, r16
     5b4:	16 8a       	std	Z+22, r1	; 0x16
     5b6:	8e 81       	ldd	r24, Y+6	; 0x06
     5b8:	8b 30       	cpi	r24, 0x0B	; 11
     5ba:	60 f4       	brcc	.+24     	; 0x5d4 <handle_can+0xaa>
     5bc:	f8 01       	movw	r30, r16
     5be:	15 8a       	std	Z+21, r1	; 0x15
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <handle_can+0xaa>
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	f8 01       	movw	r30, r16
     5c6:	82 a3       	std	Z+34, r24	; 0x22
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	94 8b       	std	Z+20, r25	; 0x14
     5ce:	83 8b       	std	Z+19, r24	; 0x13
     5d0:	8d 81       	ldd	r24, Y+5	; 0x05
     5d2:	86 8f       	std	Z+30, r24	; 0x1e
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <handle_motor_status_can_msg>:
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	05 e0       	ldi	r16, 0x05	; 5
     5ec:	13 e0       	ldi	r17, 0x03	; 3
     5ee:	80 e5       	ldi	r24, 0x50	; 80
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	f8 01       	movw	r30, r16
     5f4:	91 83       	std	Z+1, r25	; 0x01
     5f6:	80 83       	st	Z, r24
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	82 83       	std	Z+2, r24	; 0x02
     5fc:	8b a1       	ldd	r24, Y+35	; 0x23
     5fe:	83 83       	std	Z+3, r24	; 0x03
     600:	6f 81       	ldd	r22, Y+7	; 0x07
     602:	78 85       	ldd	r23, Y+8	; 0x08
     604:	89 85       	ldd	r24, Y+9	; 0x09
     606:	9a 85       	ldd	r25, Y+10	; 0x0a
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e2       	ldi	r20, 0x20	; 32
     60e:	51 e4       	ldi	r21, 0x41	; 65
     610:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     614:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixsfsi>
     618:	f8 01       	movw	r30, r16
     61a:	64 83       	std	Z+4, r22	; 0x04
     61c:	6f 85       	ldd	r22, Y+15	; 0x0f
     61e:	78 89       	ldd	r23, Y+16	; 0x10
     620:	89 89       	ldd	r24, Y+17	; 0x11
     622:	9a 89       	ldd	r25, Y+18	; 0x12
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e2       	ldi	r20, 0x20	; 32
     62a:	51 e4       	ldi	r21, 0x41	; 65
     62c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     630:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     634:	f8 01       	movw	r30, r16
     636:	76 83       	std	Z+6, r23	; 0x06
     638:	65 83       	std	Z+5, r22	; 0x05
     63a:	6b 89       	ldd	r22, Y+19	; 0x13
     63c:	7c 89       	ldd	r23, Y+20	; 0x14
     63e:	8d 89       	ldd	r24, Y+21	; 0x15
     640:	9e 89       	ldd	r25, Y+22	; 0x16
     642:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixsfsi>
     646:	07 2e       	mov	r0, r23
     648:	00 0c       	add	r0, r0
     64a:	88 0b       	sbc	r24, r24
     64c:	99 0b       	sbc	r25, r25
     64e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__floatsisf>
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	48 ec       	ldi	r20, 0xC8	; 200
     658:	52 e4       	ldi	r21, 0x42	; 66
     65a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     65e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixsfsi>
     662:	9b 01       	movw	r18, r22
     664:	77 23       	and	r23, r23
     666:	24 f4       	brge	.+8      	; 0x670 <handle_motor_status_can_msg+0x92>
     668:	22 27       	eor	r18, r18
     66a:	33 27       	eor	r19, r19
     66c:	26 1b       	sub	r18, r22
     66e:	37 0b       	sbc	r19, r23
     670:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <txFrame+0x8>
     674:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <txFrame+0x7>
     678:	68 8d       	ldd	r22, Y+24	; 0x18
     67a:	79 8d       	ldd	r23, Y+25	; 0x19
     67c:	05 e0       	ldi	r16, 0x05	; 5
     67e:	13 e0       	ldi	r17, 0x03	; 3
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     688:	26 e6       	ldi	r18, 0x66	; 102
     68a:	36 e6       	ldi	r19, 0x66	; 102
     68c:	46 e6       	ldi	r20, 0x66	; 102
     68e:	50 e4       	ldi	r21, 0x40	; 64
     690:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	5f e3       	ldi	r21, 0x3F	; 63
     69c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     6a0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     6a4:	f8 01       	movw	r30, r16
     6a6:	61 87       	std	Z+9, r22	; 0x09
     6a8:	8f 89       	ldd	r24, Y+23	; 0x17
     6aa:	82 87       	std	Z+10, r24	; 0x0a
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <can_send_message>
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <handle_clutch_cmd_can_msg>:
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	ea ef       	ldi	r30, 0xFA	; 250
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	81 e5       	ldi	r24, 0x51	; 81
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	91 83       	std	Z+1, r25	; 0x01
     6ce:	80 83       	st	Z, r24
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	82 83       	std	Z+2, r24	; 0x02
     6d4:	8c a1       	ldd	r24, Y+36	; 0x24
     6d6:	83 83       	std	Z+3, r24	; 0x03
     6d8:	cf 01       	movw	r24, r30
     6da:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <can_send_message>
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(volatile ModuleValues_t vals)
{
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
	//printf("%i,%i,%u,%u,%u,%u,%i",(int16_t)(vals.f32_motor_current*1000),(int16_t)(vals.f32_batt_current*1000),(uint16_t)(vals.f32_batt_volt*1000),vals.u8_car_speed,vals.u8_duty_cycle,vals.u8_motor_temp,vals.i8_throttle_cmd);
	printf("\r\n");
     6f4:	85 e3       	ldi	r24, 0x35	; 53
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 20 10 	call	0x2040	; 0x2040 <puts>
	printf(" ctrl mode (0:Cur, 1:PWM) : %u",vals.ctrl_type);
	printf(",");
	printf(" motor mode : %u",vals.motor_status);
	*/
	
	printf("%i",(int16_t)(vals.f32_motor_current*1000));
     6fc:	69 85       	ldd	r22, Y+9	; 0x09
     6fe:	7a 85       	ldd	r23, Y+10	; 0x0a
     700:	8b 85       	ldd	r24, Y+11	; 0x0b
     702:	9c 85       	ldd	r25, Y+12	; 0x0c
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	4a e7       	ldi	r20, 0x7A	; 122
     70a:	54 e4       	ldi	r21, 0x44	; 68
     70c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     710:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixsfsi>
     714:	7f 93       	push	r23
     716:	6f 93       	push	r22
     718:	0f 2e       	mov	r0, r31
     71a:	f7 e3       	ldi	r31, 0x37	; 55
     71c:	ef 2e       	mov	r14, r31
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	ff 2e       	mov	r15, r31
     722:	f0 2d       	mov	r31, r0
     724:	ff 92       	push	r15
     726:	ef 92       	push	r14
     728:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
	printf(",");
     72c:	8c e2       	ldi	r24, 0x2C	; 44
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 1b 10 	call	0x2036	; 0x2036 <putchar>
	printf("%u",vals.u8_duty_cycle);
     734:	88 a1       	ldd	r24, Y+32	; 0x20
     736:	1f 92       	push	r1
     738:	8f 93       	push	r24
     73a:	0a e3       	ldi	r16, 0x3A	; 58
     73c:	11 e0       	ldi	r17, 0x01	; 1
     73e:	1f 93       	push	r17
     740:	0f 93       	push	r16
     742:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
	printf(",");
     746:	8c e2       	ldi	r24, 0x2C	; 44
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 1b 10 	call	0x2036	; 0x2036 <putchar>
	printf("%u",vals.u8_accel_cmd*1000);
     74e:	4e 8d       	ldd	r20, Y+30	; 0x1e
     750:	28 ee       	ldi	r18, 0xE8	; 232
     752:	33 e0       	ldi	r19, 0x03	; 3
     754:	42 9f       	mul	r20, r18
     756:	c0 01       	movw	r24, r0
     758:	43 9f       	mul	r20, r19
     75a:	90 0d       	add	r25, r0
     75c:	11 24       	eor	r1, r1
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	1f 93       	push	r17
     764:	0f 93       	push	r16
     766:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
	printf(",");
     76a:	8c e2       	ldi	r24, 0x2C	; 44
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 1b 10 	call	0x2036	; 0x2036 <putchar>
	printf("%u",(uint16_t)(vals.u16_car_speed*360.0));	// vehicle speed in m/h
     772:	6a 8d       	ldd	r22, Y+26	; 0x1a
     774:	7b 8d       	ldd	r23, Y+27	; 0x1b
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	44 eb       	ldi	r20, 0xB4	; 180
     784:	53 e4       	ldi	r21, 0x43	; 67
     786:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     78a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     78e:	7f 93       	push	r23
     790:	6f 93       	push	r22
     792:	1f 93       	push	r17
     794:	0f 93       	push	r16
     796:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
	printf(",");
     79a:	8c e2       	ldi	r24, 0x2C	; 44
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 1b 10 	call	0x2036	; 0x2036 <putchar>
	//printf("%u",(uint16_t)(vals.u16_motor_speed/4.29));
	printf("%u",(uint16_t)(vals.u16_motor_speed*5.03));	// vehicle speed in m/h = rpm*18/375/60*2*pi*0.556/2*3.6
     7a2:	6c 8d       	ldd	r22, Y+28	; 0x1c
     7a4:	7d 8d       	ldd	r23, Y+29	; 0x1d
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     7ae:	23 ec       	ldi	r18, 0xC3	; 195
     7b0:	35 ef       	ldi	r19, 0xF5	; 245
     7b2:	40 ea       	ldi	r20, 0xA0	; 160
     7b4:	50 e4       	ldi	r21, 0x40	; 64
     7b6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     7ba:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     7be:	7f 93       	push	r23
     7c0:	6f 93       	push	r22
     7c2:	1f 93       	push	r17
     7c4:	0f 93       	push	r16
     7c6:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
	printf(",");
     7ca:	8c e2       	ldi	r24, 0x2C	; 44
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 1b 10 	call	0x2036	; 0x2036 <putchar>
	printf("%u",(uint16_t)(vals.f32_batt_volt*10));
     7d2:	69 89       	ldd	r22, Y+17	; 0x11
     7d4:	7a 89       	ldd	r23, Y+18	; 0x12
     7d6:	8b 89       	ldd	r24, Y+19	; 0x13
     7d8:	9c 89       	ldd	r25, Y+20	; 0x14
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e2       	ldi	r20, 0x20	; 32
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     7e6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     7ea:	7f 93       	push	r23
     7ec:	6f 93       	push	r22
     7ee:	1f 93       	push	r17
     7f0:	0f 93       	push	r16
     7f2:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
	printf(",");
     7f6:	8c e2       	ldi	r24, 0x2C	; 44
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 1b 10 	call	0x2036	; 0x2036 <putchar>
	printf("%i",(int16_t)(vals.f32_batt_current*1000));
     7fe:	6d 85       	ldd	r22, Y+13	; 0x0d
     800:	7e 85       	ldd	r23, Y+14	; 0x0e
     802:	8f 85       	ldd	r24, Y+15	; 0x0f
     804:	98 89       	ldd	r25, Y+16	; 0x10
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	4a e7       	ldi	r20, 0x7A	; 122
     80c:	54 e4       	ldi	r21, 0x44	; 68
     80e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     812:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixsfsi>
     816:	7f 93       	push	r23
     818:	6f 93       	push	r22
     81a:	ff 92       	push	r15
     81c:	ef 92       	push	r14
     81e:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
	
}
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	08 95       	ret

0000083a <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(volatile ModuleValues_t vals)
{	
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     842:	89 a1       	ldd	r24, Y+33	; 0x21
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	91 f1       	breq	.+100    	; 0x8ac <manage_LEDs+0x72>
     848:	28 f4       	brcc	.+10     	; 0x854 <manage_LEDs+0x1a>
     84a:	88 23       	and	r24, r24
     84c:	49 f0       	breq	.+18     	; 0x860 <manage_LEDs+0x26>
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	19 f1       	breq	.+70     	; 0x898 <manage_LEDs+0x5e>
     852:	49 c0       	rjmp	.+146    	; 0x8e6 <manage_LEDs+0xac>
     854:	84 30       	cpi	r24, 0x04	; 4
     856:	f1 f1       	breq	.+124    	; 0x8d4 <manage_LEDs+0x9a>
     858:	98 f1       	brcs	.+102    	; 0x8c0 <manage_LEDs+0x86>
     85a:	85 30       	cpi	r24, 0x05	; 5
     85c:	99 f0       	breq	.+38     	; 0x884 <manage_LEDs+0x4a>
     85e:	43 c0       	rjmp	.+134    	; 0x8e6 <manage_LEDs+0xac>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     860:	80 e4       	ldi	r24, 0x40	; 64
     862:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <rgbled_turn_on>
			if (vals.u16_watchdog_can == 0) //no can messages
     86c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     86e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     870:	89 2b       	or	r24, r25
     872:	21 f4       	brne	.+8      	; 0x87c <manage_LEDs+0x42>
			{
				rgbled_turn_on(LED_RED);
     874:	80 e2       	ldi	r24, 0x20	; 32
     876:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <rgbled_turn_on>
     87a:	35 c0       	rjmp	.+106    	; 0x8e6 <manage_LEDs+0xac>
			}else{
				rgbled_turn_off(LED_RED);
     87c:	80 e2       	ldi	r24, 0x20	; 32
     87e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
     882:	31 c0       	rjmp	.+98     	; 0x8e6 <manage_LEDs+0xac>
			}
		break ;
		
		case ENGAGE :
			rgbled_turn_off(LED_RED);
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <rgbled_turn_on>
			rgbled_turn_on(LED_BLUE);
     890:	80 e8       	ldi	r24, 0x80	; 128
     892:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <rgbled_turn_on>
		break ;
     896:	27 c0       	rjmp	.+78     	; 0x8e6 <manage_LEDs+0xac>
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     898:	80 e2       	ldi	r24, 0x20	; 32
     89a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     89e:	80 e8       	ldi	r24, 0x80	; 128
     8a0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     8a4:	80 e4       	ldi	r24, 0x40	; 64
     8a6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <rgbled_toggle>
		break;
     8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <manage_LEDs+0xac>
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     8ac:	80 e2       	ldi	r24, 0x20	; 32
     8ae:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8b2:	80 e8       	ldi	r24, 0x80	; 128
     8b4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     8b8:	80 e4       	ldi	r24, 0x40	; 64
     8ba:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <rgbled_toggle>
		break;
     8be:	13 c0       	rjmp	.+38     	; 0x8e6 <manage_LEDs+0xac>
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     8c0:	80 e2       	ldi	r24, 0x20	; 32
     8c2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8c6:	80 e8       	ldi	r24, 0x80	; 128
     8c8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     8cc:	80 e4       	ldi	r24, 0x40	; 64
     8ce:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <rgbled_turn_on>
		break;
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <manage_LEDs+0xac>
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     8d4:	80 e4       	ldi	r24, 0x40	; 64
     8d6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8da:	80 e8       	ldi	r24, 0x80	; 128
     8dc:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     8e0:	80 e2       	ldi	r24, 0x20	; 32
     8e2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <rgbled_turn_on>
		break;
	}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <speed_init>:
static uint16_t u16_speed_array [4];

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     8ec:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up
     8ee:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     8f0:	ed 98       	cbi	0x1d, 5	; 29
	#ifdef SPEED_SENSOR_REED
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
	#endif
	
	#ifdef SPEED_SENSOR_HALL
	EICRB |= (1<<ISC50); // interrupt on rising and falling edge
     8f2:	ea e6       	ldi	r30, 0x6A	; 106
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	84 60       	ori	r24, 0x04	; 4
     8fa:	80 83       	st	Z, r24
	#endif
		
	EIFR |= (1<<INTF5) ; // clear flag
     8fc:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     8fe:	ed 9a       	sbi	0x1d, 5	; 29
     900:	08 95       	ret

00000902 <handle_speed_sensor>:
		u16_speed_array[n] = 0;
	}
}

void handle_speed_sensor(volatile uint16_t *u16_speed, volatile uint16_t *u16_counter) // period in 1ms
{
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
	//uint8_t u8_new_speed = (uint8_t)(DISTANCE/(*u16_counter); // speed calculated in mm/ms
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	//static uint8_t u8_array_pointer_old = 0;
	//static uint8_t u8_array_pointer_new = 1;
	
	if (*u16_counter > 6)
     90a:	fb 01       	movw	r30, r22
     90c:	20 81       	ld	r18, Z
     90e:	31 81       	ldd	r19, Z+1	; 0x01
     910:	27 30       	cpi	r18, 0x07	; 7
     912:	31 05       	cpc	r19, r1
     914:	b8 f0       	brcs	.+46     	; 0x944 <handle_speed_sensor+0x42>
     916:	eb 01       	movw	r28, r22
     918:	8c 01       	movw	r16, r24
		}
		if (u8_array_pointer_old == 5)
		{
			u8_array_pointer_old = 0;
		}*/
		*u16_speed = (uint16_t)(f32_speed_ratio/((float)*u16_counter));
     91a:	60 81       	ld	r22, Z
     91c:	71 81       	ldd	r23, Z+1	; 0x01
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	76 e7       	ldi	r23, 0x76	; 118
     92e:	88 e8       	ldi	r24, 0x88	; 136
     930:	96 e4       	ldi	r25, 0x46	; 70
     932:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     936:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     93a:	f8 01       	movw	r30, r16
     93c:	71 83       	std	Z+1, r23	; 0x01
     93e:	60 83       	st	Z, r22
		//printf("\r%u %u\n", *u16_speed, *u16_counter);
		*u16_counter = 0 ;
     940:	19 82       	std	Y+1, r1	; 0x01
     942:	18 82       	st	Y, r1
	}	
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <compute_synch_duty>:

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
     94e:	cf 92       	push	r12
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	1f 92       	push	r1
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	69 01       	movw	r12, r18
     964:	7a 01       	movw	r14, r20
	uint8_t Duty = 50 ;
	if (gear == GEAR1)//gear powertrain
     966:	61 30       	cpi	r22, 0x01	; 1
     968:	19 f5       	brne	.+70     	; 0x9b0 <compute_synch_duty+0x62>
	{
		Duty = (speed_10ms*DUTY_CALC1/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5
     96a:	69 81       	ldd	r22, Y+1	; 0x01
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__floatsisf>
     976:	29 e3       	ldi	r18, 0x39	; 57
     978:	3d e2       	ldi	r19, 0x2D	; 45
     97a:	4a e7       	ldi	r20, 0x7A	; 122
     97c:	5e e3       	ldi	r21, 0x3E	; 62
     97e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     982:	a7 01       	movw	r20, r14
     984:	96 01       	movw	r18, r12
     986:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	48 ec       	ldi	r20, 0xC8	; 200
     990:	52 e4       	ldi	r21, 0x42	; 66
     992:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	48 e4       	ldi	r20, 0x48	; 72
     99c:	52 e4       	ldi	r21, 0x42	; 66
     99e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__addsf3>
     9a2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     9a6:	86 2f       	mov	r24, r22
		if (Duty == 50)
     9a8:	62 33       	cpi	r22, 0x32	; 50
     9aa:	29 f5       	brne	.+74     	; 0x9f6 <compute_synch_duty+0xa8>
		{
			Duty = 52 ;
     9ac:	84 e3       	ldi	r24, 0x34	; 52
     9ae:	23 c0       	rjmp	.+70     	; 0x9f6 <compute_synch_duty+0xa8>
		}		
	}
	if (gear == GEAR2)//for belt powertrain
     9b0:	62 30       	cpi	r22, 0x02	; 2
     9b2:	01 f5       	brne	.+64     	; 0x9f4 <compute_synch_duty+0xa6>
	{
		Duty = (speed_10ms*DUTY_CALC2/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
     9b4:	69 81       	ldd	r22, Y+1	; 0x01
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__floatsisf>
     9c0:	22 e0       	ldi	r18, 0x02	; 2
     9c2:	3b e7       	ldi	r19, 0x7B	; 123
     9c4:	40 e5       	ldi	r20, 0x50	; 80
     9c6:	5e e3       	ldi	r21, 0x3E	; 62
     9c8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     9cc:	a7 01       	movw	r20, r14
     9ce:	96 01       	movw	r18, r12
     9d0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divsf3>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	48 ec       	ldi	r20, 0xC8	; 200
     9da:	52 e4       	ldi	r21, 0x42	; 66
     9dc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	48 e4       	ldi	r20, 0x48	; 72
     9e6:	52 e4       	ldi	r21, 0x42	; 66
     9e8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__addsf3>
     9ec:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fixunssfsi>
     9f0:	86 2f       	mov	r24, r22
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <compute_synch_duty+0xa8>
	}	
}

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
	uint8_t Duty = 50 ;
     9f4:	82 e3       	ldi	r24, 0x32	; 50
	if (gear == GEAR2)//for belt powertrain
	{
		Duty = (speed_10ms*DUTY_CALC2/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
	}
	return Duty ;
}
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <state_handler>:
static uint8_t fault_count = 0;
static uint16_t fault_timeout = 0;
static uint8_t fault_clear_count = 0;

void state_handler(volatile ModuleValues_t * vals)
{
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a10:	68 85       	ldd	r22, Y+8	; 0x08
     a12:	79 85       	ldd	r23, Y+9	; 0x09
     a14:	8a 85       	ldd	r24, Y+10	; 0x0a
     a16:	9b 85       	ldd	r25, Y+11	; 0x0b
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e7       	ldi	r20, 0x70	; 112
     a1e:	51 e4       	ldi	r21, 0x41	; 65
     a20:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__gesf2>
     a24:	88 23       	and	r24, r24
     a26:	d4 f1       	brlt	.+116    	; 0xa9c <state_handler+0x96>
     a28:	68 85       	ldd	r22, Y+8	; 0x08
     a2a:	79 85       	ldd	r23, Y+9	; 0x09
     a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	48 ec       	ldi	r20, 0xC8	; 200
     a36:	52 e4       	ldi	r21, 0x42	; 66
     a38:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__cmpsf2>
     a3c:	88 23       	and	r24, r24
     a3e:	0c f4       	brge	.+2      	; 0xa42 <state_handler+0x3c>
     a40:	45 c1       	rjmp	.+650    	; 0xccc <state_handler+0x2c6>
     a42:	10 e0       	ldi	r17, 0x00	; 0
     a44:	30 c0       	rjmp	.+96     	; 0xaa6 <state_handler+0xa0>
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP|| vals->f32_motor_current <= -MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     a46:	68 81       	ld	r22, Y
     a48:	79 81       	ldd	r23, Y+1	; 0x01
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	9b 81       	ldd	r25, Y+3	; 0x03
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e7       	ldi	r20, 0x70	; 112
     a54:	51 ec       	ldi	r21, 0xC1	; 193
     a56:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__cmpsf2>
     a5a:	18 16       	cp	r1, r24
     a5c:	64 f4       	brge	.+24     	; 0xa76 <state_handler+0x70>
     a5e:	68 85       	ldd	r22, Y+8	; 0x08
     a60:	79 85       	ldd	r23, Y+9	; 0x09
     a62:	8a 85       	ldd	r24, Y+10	; 0x0a
     a64:	9b 85       	ldd	r25, Y+11	; 0x0b
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	4c e5       	ldi	r20, 0x5C	; 92
     a6c:	52 e4       	ldi	r21, 0x42	; 66
     a6e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__gesf2>
     a72:	18 16       	cp	r1, r24
     a74:	ac f4       	brge	.+42     	; 0xaa0 <state_handler+0x9a>
	{
		fault_count ++ ;
     a76:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <fault_count>
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <fault_count>
		if (fault_count == 3)
     a80:	83 30       	cpi	r24, 0x03	; 3
     a82:	81 f4       	brne	.+32     	; 0xaa4 <state_handler+0x9e>
		{
			b_major_fault = 1;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <b_major_fault>
			fault_timeout = 600 ;
			fault_clear_count ++;
     a8a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <fault_clear_count>
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <fault_clear_count>
		}
	}
	if (fault_timeout > 0)
     a94:	88 e5       	ldi	r24, 0x58	; 88
     a96:	92 e0       	ldi	r25, 0x02	; 2
static uint16_t fault_timeout = 0;
static uint8_t fault_clear_count = 0;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a98:	11 e0       	ldi	r17, 0x01	; 1
     a9a:	0b c0       	rjmp	.+22     	; 0xab2 <state_handler+0xac>
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <state_handler+0xa0>
     aa0:	11 e0       	ldi	r17, 0x01	; 1
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <state_handler+0xa0>
     aa4:	11 e0       	ldi	r17, 0x01	; 1
			b_major_fault = 1;
			fault_timeout = 600 ;
			fault_clear_count ++;
		}
	}
	if (fault_timeout > 0)
     aa6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <fault_timeout>
     aaa:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <fault_timeout+0x1>
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	c1 f0       	breq	.+48     	; 0xae2 <state_handler+0xdc>
	{
		fault_timeout -- ;
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <fault_timeout+0x1>
     ab8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <fault_timeout>
	}else if(b_major_fault && fault_clear_count < 3){
		b_major_fault = 0;
	}

	switch(vals->motor_status)
     abc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	09 f4       	brne	.+2      	; 0xac4 <state_handler+0xbe>
     ac2:	b1 c0       	rjmp	.+354    	; 0xc26 <state_handler+0x220>
     ac4:	30 f4       	brcc	.+12     	; 0xad2 <state_handler+0xcc>
     ac6:	88 23       	and	r24, r24
     ac8:	c9 f0       	breq	.+50     	; 0xafc <state_handler+0xf6>
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	09 f4       	brne	.+2      	; 0xad0 <state_handler+0xca>
     ace:	86 c0       	rjmp	.+268    	; 0xbdc <state_handler+0x1d6>
     ad0:	e0 c0       	rjmp	.+448    	; 0xc92 <state_handler+0x28c>
     ad2:	84 30       	cpi	r24, 0x04	; 4
     ad4:	09 f4       	brne	.+2      	; 0xad8 <state_handler+0xd2>
     ad6:	cb c0       	rjmp	.+406    	; 0xc6e <state_handler+0x268>
     ad8:	18 f1       	brcs	.+70     	; 0xb20 <state_handler+0x11a>
     ada:	85 30       	cpi	r24, 0x05	; 5
     adc:	09 f4       	brne	.+2      	; 0xae0 <state_handler+0xda>
     ade:	45 c0       	rjmp	.+138    	; 0xb6a <state_handler+0x164>
     ae0:	d8 c0       	rjmp	.+432    	; 0xc92 <state_handler+0x28c>
		}
	}
	if (fault_timeout > 0)
	{
		fault_timeout -- ;
	}else if(b_major_fault && fault_clear_count < 3){
     ae2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <b_major_fault>
     ae6:	88 23       	and	r24, r24
     ae8:	09 f4       	brne	.+2      	; 0xaec <state_handler+0xe6>
     aea:	fe c0       	rjmp	.+508    	; 0xce8 <state_handler+0x2e2>
     aec:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <fault_clear_count>
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <state_handler+0xf0>
     af4:	0e c1       	rjmp	.+540    	; 0xd12 <state_handler+0x30c>
		b_major_fault = 0;
     af6:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <b_major_fault>
     afa:	f6 c0       	rjmp	.+492    	; 0xce8 <state_handler+0x2e2>

	switch(vals->motor_status)
	{
		case OFF:
			//transition 1
			if (vals->u16_watchdog_can > 0 && b_board_powered)
     afc:	88 8d       	ldd	r24, Y+24	; 0x18
     afe:	99 8d       	ldd	r25, Y+25	; 0x19
     b00:	89 2b       	or	r24, r25
     b02:	21 f0       	breq	.+8      	; 0xb0c <state_handler+0x106>
     b04:	11 23       	and	r17, r17
     b06:	11 f0       	breq	.+4      	; 0xb0c <state_handler+0x106>
			{
				vals->motor_status = IDLE;
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			//During
			drivers(0);//drivers shutdown
     b0c:	80 e0       	ldi	r24, 0x00	; 0
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     b0e:	74 dc       	rcall	.-1816   	; 0x3f8 <drivers>
     b10:	18 a2       	std	Y+32, r1	; 0x20
			vals->u8_brake_cmd = 0;
     b12:	e7 da       	rcall	.-2610   	; 0xe2 <reset_I>
			vals->u8_accel_cmd = 0;
     b14:	1e 8a       	std	Y+22, r1	; 0x16
			vals->u8_duty_cycle = 50;
     b16:	1d 8a       	std	Y+21, r1	; 0x15
     b18:	82 e3       	ldi	r24, 0x32	; 50
			vals->gear_required = NEUTRAL ;
     b1a:	8f 8b       	std	Y+23, r24	; 0x17
		
		break;
     b1c:	1f 8e       	std	Y+31, r1	; 0x1f
		
		case IDLE: 
		
			if (vals->pwtrain_type == BELT)
     b1e:	b9 c0       	rjmp	.+370    	; 0xc92 <state_handler+0x28c>
     b20:	8a a1       	ldd	r24, Y+34	; 0x22
			{
				controller(vals);
     b22:	81 11       	cpse	r24, r1
     b24:	0c c0       	rjmp	.+24     	; 0xb3e <state_handler+0x138>
     b26:	ce 01       	movw	r24, r28
				//drivers(0); //disable
				//reset_I();
				//vals->u8_duty_cycle = 50 ;
				
				//transition 7
				if (vals->u8_brake_cmd > 0)
     b28:	00 db       	rcall	.-2560   	; 0x12a <controller>
     b2a:	8e 89       	ldd	r24, Y+22	; 0x16
     b2c:	88 23       	and	r24, r24
				{
					//vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, GEAR2, vals->f32_batt_volt) ; //Setting duty
					//set_I(vals->u8_duty_cycle) ; //set integrator
					vals->motor_status = BRAKE;
     b2e:	11 f0       	breq	.+4      	; 0xb34 <state_handler+0x12e>
     b30:	82 e0       	ldi	r24, 0x02	; 2
				}
				//transition 5
				if (vals->u8_accel_cmd > 0)
     b32:	8c 8f       	std	Y+28, r24	; 0x1c
     b34:	8d 89       	ldd	r24, Y+21	; 0x15
     b36:	88 23       	and	r24, r24
				{
					//vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, GEAR2, vals->f32_batt_volt) ; //Setting duty
					//set_I(vals->u8_duty_cycle) ; //set integrator
					vals->motor_status = ACCEL;
     b38:	11 f0       	breq	.+4      	; 0xb3e <state_handler+0x138>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
			
			if (vals->pwtrain_type == GEAR)
     b3c:	8c 8f       	std	Y+28, r24	; 0x1c
     b3e:	8a a1       	ldd	r24, Y+34	; 0x22
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	09 f0       	breq	.+2      	; 0xb46 <state_handler+0x140>
			{
				//transition 5
				if ((vals->u8_accel_cmd > 0 || vals->u8_brake_cmd > 0) && vals->gear_status == NEUTRAL)
     b44:	a6 c0       	rjmp	.+332    	; 0xc92 <state_handler+0x28c>
     b46:	8d 89       	ldd	r24, Y+21	; 0x15
     b48:	81 11       	cpse	r24, r1
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <state_handler+0x14c>
     b4c:	8e 89       	ldd	r24, Y+22	; 0x16
     b4e:	88 23       	and	r24, r24
     b50:	29 f0       	breq	.+10     	; 0xb5c <state_handler+0x156>
     b52:	8e 8d       	ldd	r24, Y+30	; 0x1e
				{
					vals->motor_status = ENGAGE;
				}
				drivers(0); //disable
     b54:	81 11       	cpse	r24, r1
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <state_handler+0x156>
				vals->gear_required = NEUTRAL ;
     b58:	85 e0       	ldi	r24, 0x05	; 5
				reset_I();
     b5a:	8c 8f       	std	Y+28, r24	; 0x1c
     b5c:	80 e0       	ldi	r24, 0x00	; 0
				vals->u8_duty_cycle = 50 ;
     b5e:	4c dc       	rcall	.-1896   	; 0x3f8 <drivers>
     b60:	1f 8e       	std	Y+31, r1	; 0x1f
     b62:	bf da       	rcall	.-2690   	; 0xe2 <reset_I>
			}
			
		break;
		
		case ENGAGE: // /!\ TODO : with the two gears, all turning motion has to be inverted for the inner gear.
			vals->gear_required = GEAR1;
     b64:	82 e3       	ldi	r24, 0x32	; 50
     b66:	8f 8b       	std	Y+23, r24	; 0x17
			vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, vals->gear_required, vals->f32_batt_volt) ; //Setting duty
     b68:	94 c0       	rjmp	.+296    	; 0xc92 <state_handler+0x28c>
     b6a:	01 e0       	ldi	r16, 0x01	; 1
     b6c:	0f 8f       	std	Y+31, r16	; 0x1f
     b6e:	28 85       	ldd	r18, Y+8	; 0x08
     b70:	39 85       	ldd	r19, Y+9	; 0x09
     b72:	4a 85       	ldd	r20, Y+10	; 0x0a
     b74:	5b 85       	ldd	r21, Y+11	; 0x0b
			set_I(vals->u8_duty_cycle) ; //set integrator
     b76:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b78:	89 89       	ldd	r24, Y+17	; 0x11
			save_ctrl_type = vals->ctrl_type ; // PWM type ctrl is needed only for the engagement process. The mode will be reverted to previous in ACCEL and BRAKE modes
     b7a:	9a 89       	ldd	r25, Y+18	; 0x12
			vals->ctrl_type = PWM ;
     b7c:	e8 de       	rcall	.-560    	; 0x94e <compute_synch_duty>
			controller(vals) ; //speed up motor to synch speed
     b7e:	8f 8b       	std	Y+23, r24	; 0x17
     b80:	8f 89       	ldd	r24, Y+23	; 0x17
     b82:	b8 da       	rcall	.-2704   	; 0xf4 <set_I>
			drivers(1);
     b84:	89 a1       	ldd	r24, Y+33	; 0x21
     b86:	09 a3       	std	Y+33, r16	; 0x21
     b88:	ce 01       	movw	r24, r28
			//transition 9, GEAR
			if (vals->u8_brake_cmd > 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     b8a:	cf da       	rcall	.-2658   	; 0x12a <controller>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	34 dc       	rcall	.-1944   	; 0x3f8 <drivers>
     b90:	8e 89       	ldd	r24, Y+22	; 0x16
     b92:	88 23       	and	r24, r24
     b94:	49 f0       	breq	.+18     	; 0xba8 <state_handler+0x1a2>
     b96:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b9a:	98 13       	cpse	r25, r24
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <state_handler+0x1a2>
			{
				vals->motor_status = BRAKE;
     b9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ba0:	88 23       	and	r24, r24
			}
			//transition 10, GEAR
			if (vals->u8_accel_cmd > 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     ba2:	11 f0       	breq	.+4      	; 0xba8 <state_handler+0x1a2>
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	8c 8f       	std	Y+28, r24	; 0x1c
     ba8:	8d 89       	ldd	r24, Y+21	; 0x15
     baa:	88 23       	and	r24, r24
     bac:	49 f0       	breq	.+18     	; 0xbc0 <state_handler+0x1ba>
     bae:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bb2:	98 13       	cpse	r25, r24
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <state_handler+0x1ba>
			{
				vals->motor_status = ACCEL;
     bb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bb8:	88 23       	and	r24, r24
			}
			//transition 11, GEAR
			if (vals->u8_accel_cmd == 0 && vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     bba:	11 f0       	breq	.+4      	; 0xbc0 <state_handler+0x1ba>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	8c 8f       	std	Y+28, r24	; 0x1c
     bc0:	8d 89       	ldd	r24, Y+21	; 0x15
     bc2:	81 11       	cpse	r24, r1
     bc4:	66 c0       	rjmp	.+204    	; 0xc92 <state_handler+0x28c>
     bc6:	8e 89       	ldd	r24, Y+22	; 0x16
     bc8:	81 11       	cpse	r24, r1
     bca:	63 c0       	rjmp	.+198    	; 0xc92 <state_handler+0x28c>
     bcc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bce:	9b 8d       	ldd	r25, Y+27	; 0x1b
			{
				vals->motor_status = IDLE;
     bd0:	89 2b       	or	r24, r25
			}
		break;
		
		case ACCEL:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 10)
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <state_handler+0x1d0>
     bd4:	5e c0       	rjmp	.+188    	; 0xc92 <state_handler+0x28c>
     bd6:	83 e0       	ldi	r24, 0x03	; 3
			{
				vals->u8_accel_cmd = 0;
     bd8:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			
			//vals->ctrl_type = save_ctrl_type ;
			vals->ctrl_type = CURRENT;
     bda:	5b c0       	rjmp	.+182    	; 0xc92 <state_handler+0x28c>
			controller(vals);
     bdc:	88 8d       	ldd	r24, Y+24	; 0x18
     bde:	99 8d       	ldd	r25, Y+25	; 0x19
     be0:	89 97       	sbiw	r24, 0x29	; 41
			drivers(1);
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <state_handler+0x1e0>
     be4:	1d 8a       	std	Y+21, r1	; 0x15
     be6:	19 a2       	std	Y+33, r1	; 0x21
			//transition 6
			if (vals->u8_accel_cmd == 0 && vals->u16_watchdog_throttle == 0)
     be8:	ce 01       	movw	r24, r28
     bea:	9f da       	rcall	.-2754   	; 0x12a <controller>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	04 dc       	rcall	.-2040   	; 0x3f8 <drivers>
     bf0:	8d 89       	ldd	r24, Y+21	; 0x15
     bf2:	81 11       	cpse	r24, r1
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <state_handler+0x1fc>
			{
				vals->motor_status = IDLE;
     bf6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bf8:	9b 8d       	ldd	r25, Y+27	; 0x1b
			}
			//transition 12, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     bfa:	89 2b       	or	r24, r25
     bfc:	11 f4       	brne	.+4      	; 0xc02 <state_handler+0x1fc>
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	8c 8f       	std	Y+28, r24	; 0x1c
     c02:	8a a1       	ldd	r24, Y+34	; 0x22
     c04:	81 30       	cpi	r24, 0x01	; 1
			{
				vals->motor_status = ENGAGE;
     c06:	29 f4       	brne	.+10     	; 0xc12 <state_handler+0x20c>
     c08:	8e 8d       	ldd	r24, Y+30	; 0x1e
			}
			//transition 14
			if (vals->u8_brake_cmd > 0 && vals->u8_accel_cmd == 0)
     c0a:	81 11       	cpse	r24, r1
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <state_handler+0x20c>
     c0e:	85 e0       	ldi	r24, 0x05	; 5
     c10:	8c 8f       	std	Y+28, r24	; 0x1c
     c12:	8e 89       	ldd	r24, Y+22	; 0x16
     c14:	88 23       	and	r24, r24
			{
				vals->motor_status = BRAKE;
     c16:	09 f4       	brne	.+2      	; 0xc1a <state_handler+0x214>
     c18:	3c c0       	rjmp	.+120    	; 0xc92 <state_handler+0x28c>
			}
		break;
		
		case BRAKE:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 10)
     c1a:	8d 89       	ldd	r24, Y+21	; 0x15
     c1c:	81 11       	cpse	r24, r1
     c1e:	39 c0       	rjmp	.+114    	; 0xc92 <state_handler+0x28c>
     c20:	82 e0       	ldi	r24, 0x02	; 2
			{
				vals->u8_brake_cmd = 0;
     c22:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			//vals->ctrl_type = save_ctrl_type ;
			vals->ctrl_type = CURRENT ;
     c24:	36 c0       	rjmp	.+108    	; 0xc92 <state_handler+0x28c>
			controller(vals); //negative throttle cmd
     c26:	88 8d       	ldd	r24, Y+24	; 0x18
     c28:	99 8d       	ldd	r25, Y+25	; 0x19
     c2a:	89 97       	sbiw	r24, 0x29	; 41
			drivers(1);
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <state_handler+0x22a>
     c2e:	1e 8a       	std	Y+22, r1	; 0x16
     c30:	19 a2       	std	Y+33, r1	; 0x21
			//transition 8
			if (vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     c32:	ce 01       	movw	r24, r28
     c34:	7a da       	rcall	.-2828   	; 0x12a <controller>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	df db       	rcall	.-2114   	; 0x3f8 <drivers>
     c3a:	8e 89       	ldd	r24, Y+22	; 0x16
     c3c:	81 11       	cpse	r24, r1
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <state_handler+0x246>
			{
				vals->motor_status = IDLE;
     c40:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c42:	9b 8d       	ldd	r25, Y+27	; 0x1b
			}
			//transition 13, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     c44:	89 2b       	or	r24, r25
     c46:	11 f4       	brne	.+4      	; 0xc4c <state_handler+0x246>
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	8c 8f       	std	Y+28, r24	; 0x1c
     c4c:	8a a1       	ldd	r24, Y+34	; 0x22
     c4e:	81 30       	cpi	r24, 0x01	; 1
			{
				vals->motor_status = ENGAGE;
     c50:	29 f4       	brne	.+10     	; 0xc5c <state_handler+0x256>
     c52:	8e 8d       	ldd	r24, Y+30	; 0x1e
			}
			//transition 15
			if (vals->u8_brake_cmd == 0 && vals->u8_accel_cmd > 0)
     c54:	81 11       	cpse	r24, r1
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <state_handler+0x256>
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	8c 8f       	std	Y+28, r24	; 0x1c
     c5c:	8e 89       	ldd	r24, Y+22	; 0x16
			{
				vals->motor_status = ACCEL;
     c5e:	81 11       	cpse	r24, r1
			}
		break;
		
		case ERR:
			//transition 4
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
     c60:	18 c0       	rjmp	.+48     	; 0xc92 <state_handler+0x28c>
     c62:	8d 89       	ldd	r24, Y+21	; 0x15
     c64:	88 23       	and	r24, r24
     c66:	a9 f0       	breq	.+42     	; 0xc92 <state_handler+0x28c>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	8c 8f       	std	Y+28, r24	; 0x1c
			{
				vals->motor_status = IDLE;
     c6c:	12 c0       	rjmp	.+36     	; 0xc92 <state_handler+0x28c>
     c6e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <b_major_fault>
			}
			drivers(0);//drivers shutdown
     c72:	81 11       	cpse	r24, r1
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <state_handler+0x27a>
			vals->b_driver_status = 0;
     c76:	88 89       	ldd	r24, Y+16	; 0x10
			vals->gear_required = NEUTRAL;
     c78:	84 36       	cpi	r24, 0x64	; 100
			reset_I(); //reset integrator
     c7a:	10 f4       	brcc	.+4      	; 0xc80 <state_handler+0x27a>
     c7c:	83 e0       	ldi	r24, 0x03	; 3
			vals->u8_brake_cmd = 0;
     c7e:	8c 8f       	std	Y+28, r24	; 0x1c
			vals->u8_accel_cmd = 0;
     c80:	80 e0       	ldi	r24, 0x00	; 0
			vals->u8_duty_cycle = 50;
     c82:	ba db       	rcall	.-2188   	; 0x3f8 <drivers>
     c84:	18 a2       	std	Y+32, r1	; 0x20
		break;	
	}
	
	if ((vals->motor_status == IDLE || vals->motor_status == ACCEL || vals->motor_status == BRAKE || vals->motor_status == ENGAGE) && (vals->u16_watchdog_can == 0 || !b_board_powered))
     c86:	1f 8e       	std	Y+31, r1	; 0x1f
     c88:	2c da       	rcall	.-2984   	; 0xe2 <reset_I>
     c8a:	1e 8a       	std	Y+22, r1	; 0x16
     c8c:	1d 8a       	std	Y+21, r1	; 0x15
     c8e:	82 e3       	ldi	r24, 0x32	; 50
     c90:	8f 8b       	std	Y+23, r24	; 0x17
     c92:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	49 f0       	breq	.+18     	; 0xcaa <state_handler+0x2a4>
     c98:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	31 f0       	breq	.+12     	; 0xcaa <state_handler+0x2a4>
     c9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	19 f0       	breq	.+6      	; 0xcaa <state_handler+0x2a4>
     ca4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ca6:	85 30       	cpi	r24, 0x05	; 5
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <state_handler+0x2b2>
	{
		// transition 2
		vals->motor_status = OFF;
     caa:	88 8d       	ldd	r24, Y+24	; 0x18
	}
	
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
     cac:	99 8d       	ldd	r25, Y+25	; 0x19
     cae:	89 2b       	or	r24, r25
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <state_handler+0x2b0>
     cb2:	11 11       	cpse	r17, r1
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <state_handler+0x2b2>
     cb6:	1c 8e       	std	Y+28, r1	; 0x1c
     cb8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <b_major_fault>
	{
		//transition 3
		vals->motor_status = ERR;
     cbc:	81 11       	cpse	r24, r1
	}
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <state_handler+0x2c0>

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP|| vals->f32_motor_current <= -MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     cc0:	88 89       	ldd	r24, Y+16	; 0x10
     cc2:	84 36       	cpi	r24, 0x64	; 100
     cc4:	d8 f1       	brcs	.+118    	; 0xd3c <state_handler+0x336>
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	8c 8f       	std	Y+28, r24	; 0x1c
     cca:	38 c0       	rjmp	.+112    	; 0xd3c <state_handler+0x336>
     ccc:	68 81       	ld	r22, Y
     cce:	79 81       	ldd	r23, Y+1	; 0x01
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e7       	ldi	r20, 0x70	; 112
     cda:	51 e4       	ldi	r21, 0x41	; 65
		fault_timeout -- ;
	}else if(b_major_fault && fault_clear_count < 3){
		b_major_fault = 0;
	}

	switch(vals->motor_status)
     cdc:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__gesf2>
     ce0:	88 23       	and	r24, r24
     ce2:	0c f0       	brlt	.+2      	; 0xce6 <state_handler+0x2e0>
     ce4:	c8 ce       	rjmp	.-624    	; 0xa76 <state_handler+0x70>
     ce6:	af ce       	rjmp	.-674    	; 0xa46 <state_handler+0x40>
     ce8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	09 f4       	brne	.+2      	; 0xcf0 <state_handler+0x2ea>
     cee:	9b cf       	rjmp	.-202    	; 0xc26 <state_handler+0x220>
     cf0:	38 f4       	brcc	.+14     	; 0xd00 <state_handler+0x2fa>
     cf2:	88 23       	and	r24, r24
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <state_handler+0x2f2>
     cf6:	02 cf       	rjmp	.-508    	; 0xafc <state_handler+0xf6>
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <state_handler+0x2f8>
     cfc:	6f cf       	rjmp	.-290    	; 0xbdc <state_handler+0x1d6>
     cfe:	c9 cf       	rjmp	.-110    	; 0xc92 <state_handler+0x28c>
     d00:	84 30       	cpi	r24, 0x04	; 4
     d02:	09 f4       	brne	.+2      	; 0xd06 <state_handler+0x300>
     d04:	b8 cf       	rjmp	.-144    	; 0xc76 <state_handler+0x270>
     d06:	08 f4       	brcc	.+2      	; 0xd0a <state_handler+0x304>
     d08:	0b cf       	rjmp	.-490    	; 0xb20 <state_handler+0x11a>
     d0a:	85 30       	cpi	r24, 0x05	; 5
     d0c:	09 f4       	brne	.+2      	; 0xd10 <state_handler+0x30a>
     d0e:	2d cf       	rjmp	.-422    	; 0xb6a <state_handler+0x164>
     d10:	c0 cf       	rjmp	.-128    	; 0xc92 <state_handler+0x28c>
     d12:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	09 f4       	brne	.+2      	; 0xd1a <state_handler+0x314>
     d18:	86 cf       	rjmp	.-244    	; 0xc26 <state_handler+0x220>
     d1a:	38 f4       	brcc	.+14     	; 0xd2a <state_handler+0x324>
     d1c:	88 23       	and	r24, r24
     d1e:	09 f4       	brne	.+2      	; 0xd22 <state_handler+0x31c>
     d20:	ed ce       	rjmp	.-550    	; 0xafc <state_handler+0xf6>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	09 f4       	brne	.+2      	; 0xd28 <state_handler+0x322>
     d26:	5a cf       	rjmp	.-332    	; 0xbdc <state_handler+0x1d6>
     d28:	b4 cf       	rjmp	.-152    	; 0xc92 <state_handler+0x28c>
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	09 f4       	brne	.+2      	; 0xd30 <state_handler+0x32a>
     d2e:	a8 cf       	rjmp	.-176    	; 0xc80 <state_handler+0x27a>
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		//transition 3
		vals->motor_status = ERR;
	}
     d30:	08 f4       	brcc	.+2      	; 0xd34 <state_handler+0x32e>
     d32:	f6 ce       	rjmp	.-532    	; 0xb20 <state_handler+0x11a>
     d34:	85 30       	cpi	r24, 0x05	; 5
     d36:	09 f4       	brne	.+2      	; 0xd3a <state_handler+0x334>
     d38:	18 cf       	rjmp	.-464    	; 0xb6a <state_handler+0x164>
     d3a:	ab cf       	rjmp	.-170    	; 0xc92 <state_handler+0x28c>
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <pwm_init>:

#include "pwm.h"
#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     d4a:	8e b1       	in	r24, 0x0e	; 14
     d4c:	87 7e       	andi	r24, 0xE7	; 231
     d4e:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     d50:	8d b1       	in	r24, 0x0d	; 13
     d52:	88 61       	ori	r24, 0x18	; 24
     d54:	8d b9       	out	0x0d, r24	; 13
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
		
	}else{//UNIPOLAR
		
		//Timer 3 phase correct pwm, TOP at ICR (mode 10)
		TCCR3B |= (1<<WGM33);
     d56:	a1 e9       	ldi	r26, 0x91	; 145
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	8c 91       	ld	r24, X
     d5c:	80 61       	ori	r24, 0x10	; 16
     d5e:	8c 93       	st	X, r24
		TCCR3B &= ~(1<<WGM32);
     d60:	8c 91       	ld	r24, X
     d62:	87 7f       	andi	r24, 0xF7	; 247
     d64:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     d66:	e0 e9       	ldi	r30, 0x90	; 144
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     d70:	80 81       	ld	r24, Z
     d72:	8e 7f       	andi	r24, 0xFE	; 254
     d74:	80 83       	st	Z, r24
		
		// Set OC3A on Compare Match when up-counting. clear OC3A on Compare Match when downcounting.
		TCCR3A |= (1<<COM3A1);
     d76:	80 81       	ld	r24, Z
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 7b       	andi	r24, 0xBF	; 191
     d80:	80 83       	st	Z, r24
		
		// Set OC3B on Compare Match when up-counting. Clear OC3B on Compare Match when downcounting.
		TCCR3A |= (1<<COM3B1);
     d82:	80 81       	ld	r24, Z
     d84:	80 62       	ori	r24, 0x20	; 32
     d86:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3B0);
     d88:	80 81       	ld	r24, Z
     d8a:	8f 7e       	andi	r24, 0xEF	; 239
     d8c:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		TCCR3B |= (1<<CS30);
     d8e:	8c 91       	ld	r24, X
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     d94:	8c 91       	ld	r24, X
     d96:	89 7f       	andi	r24, 0xF9	; 249
     d98:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x85; //30kHz  0x85, 20kHz : 0x100
     d9a:	c6 e9       	ldi	r28, 0x96	; 150
     d9c:	d0 e0       	ldi	r29, 0x00	; 0
     d9e:	85 e8       	ldi	r24, 0x85	; 133
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	99 83       	std	Y+1, r25	; 0x01
     da4:	88 83       	st	Y, r24
		
		//initialising compare registers at Duty cycle 50%
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3
     da6:	68 81       	ld	r22, Y
     da8:	79 81       	ldd	r23, Y+1	; 0x01
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__floatunsisf>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__mulsf3>
     dbe:	d5 d7       	rcall	.+4010   	; 0x1d6a <__fixsfsi>
     dc0:	e8 e9       	ldi	r30, 0x98	; 152
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	71 83       	std	Z+1, r23	; 0x01
     dc6:	60 83       	st	Z, r22
		OCR3B = ICR3-OCR3A ; //PWM_PE4
     dc8:	88 81       	ld	r24, Y
     dca:	99 81       	ldd	r25, Y+1	; 0x01
     dcc:	20 81       	ld	r18, Z
     dce:	31 81       	ldd	r19, Z+1	; 0x01
     dd0:	82 1b       	sub	r24, r18
     dd2:	93 0b       	sbc	r25, r19
     dd4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     dd8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     de2:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <tx0_Head>
     de6:	9f 5f       	subi	r25, 0xFF	; 255
     de8:	9f 71       	andi	r25, 0x1F	; 31
     dea:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <tx0_Tail>
     dee:	92 17       	cp	r25, r18
     df0:	e1 f3       	breq	.-8      	; 0xdea <uart0_putc+0x8>
     df2:	e9 2f       	mov	r30, r25
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	e8 58       	subi	r30, 0x88	; 136
     df8:	fc 4f       	sbci	r31, 0xFC	; 252
     dfa:	80 83       	st	Z, r24
     dfc:	2f b7       	in	r18, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <tx0_Head>
     e04:	e1 ec       	ldi	r30, 0xC1	; 193
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 62       	ori	r24, 0x20	; 32
     e0c:	80 83       	st	Z, r24
     e0e:	2f bf       	out	0x3f, r18	; 63
     e10:	08 95       	ret

00000e12 <uart1_putc>:
     e12:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <tx1_Head>
     e16:	9f 5f       	subi	r25, 0xFF	; 255
     e18:	9f 71       	andi	r25, 0x1F	; 31
     e1a:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <tx1_Tail>
     e1e:	92 17       	cp	r25, r18
     e20:	e1 f3       	breq	.-8      	; 0xe1a <uart1_putc+0x8>
     e22:	e9 2f       	mov	r30, r25
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	ed 5c       	subi	r30, 0xCD	; 205
     e28:	fc 4f       	sbci	r31, 0xFC	; 252
     e2a:	80 83       	st	Z, r24
     e2c:	2f b7       	in	r18, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <tx1_Head>
     e34:	e9 ec       	ldi	r30, 0xC9	; 201
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 62       	ori	r24, 0x20	; 32
     e3c:	80 83       	st	Z, r24
     e3e:	2f bf       	out	0x3f, r18	; 63
     e40:	08 95       	ret

00000e42 <uart_putchar>:
     e42:	cf 93       	push	r28
     e44:	c8 2f       	mov	r28, r24
     e46:	fb 01       	movw	r30, r22
     e48:	84 85       	ldd	r24, Z+12	; 0x0c
     e4a:	95 85       	ldd	r25, Z+13	; 0x0d
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	39 f0       	breq	.+14     	; 0xe5e <uart_putchar+0x1c>
     e50:	ca 30       	cpi	r28, 0x0A	; 10
     e52:	11 f4       	brne	.+4      	; 0xe58 <uart_putchar+0x16>
     e54:	8d e0       	ldi	r24, 0x0D	; 13
     e56:	c5 df       	rcall	.-118    	; 0xde2 <uart0_putc>
     e58:	8c 2f       	mov	r24, r28
     e5a:	c3 df       	rcall	.-122    	; 0xde2 <uart0_putc>
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <uart_putchar+0x28>
     e5e:	ca 30       	cpi	r28, 0x0A	; 10
     e60:	11 f4       	brne	.+4      	; 0xe66 <uart_putchar+0x24>
     e62:	8d e0       	ldi	r24, 0x0D	; 13
     e64:	d6 df       	rcall	.-84     	; 0xe12 <uart1_putc>
     e66:	8c 2f       	mov	r24, r28
     e68:	d4 df       	rcall	.-88     	; 0xe12 <uart1_putc>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <uart0_getData>:
     e72:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <rx0_Tail>
     e76:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <rx0_Head>
     e7a:	89 17       	cp	r24, r25
     e7c:	61 f0       	breq	.+24     	; 0xe96 <uart0_getData+0x24>
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	8f 71       	andi	r24, 0x1F	; 31
     e82:	e8 2f       	mov	r30, r24
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	e0 5f       	subi	r30, 0xF0	; 240
     e88:	fc 4f       	sbci	r31, 0xFC	; 252
     e8a:	90 81       	ld	r25, Z
     e8c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <rx0_Tail>
     e90:	89 2f       	mov	r24, r25
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	08 95       	ret
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	08 95       	ret

00000e9c <uart1_getData>:
     e9c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <rx1_Tail>
     ea0:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <rx1_Head>
     ea4:	89 17       	cp	r24, r25
     ea6:	61 f0       	breq	.+24     	; 0xec0 <uart1_getData+0x24>
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	8f 71       	andi	r24, 0x1F	; 31
     eac:	e8 2f       	mov	r30, r24
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	ec 5a       	subi	r30, 0xAC	; 172
     eb2:	fc 4f       	sbci	r31, 0xFC	; 252
     eb4:	90 81       	ld	r25, Z
     eb6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <rx1_Tail>
     eba:	89 2f       	mov	r24, r25
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	08 95       	ret
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	9f ef       	ldi	r25, 0xFF	; 255
     ec4:	08 95       	ret

00000ec6 <uart_getchar>:
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	fc 01       	movw	r30, r24
     ecc:	84 85       	ldd	r24, Z+12	; 0x0c
     ece:	95 85       	ldd	r25, Z+13	; 0x0d
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	41 f0       	breq	.+16     	; 0xee4 <uart_getchar+0x1e>
     ed4:	ce df       	rcall	.-100    	; 0xe72 <uart0_getData>
     ed6:	ec 01       	movw	r28, r24
     ed8:	99 23       	and	r25, r25
     eda:	e4 f3       	brlt	.-8      	; 0xed4 <uart_getchar+0xe>
     edc:	82 df       	rcall	.-252    	; 0xde2 <uart0_putc>
     ede:	ce 01       	movw	r24, r28
     ee0:	99 27       	eor	r25, r25
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <uart_getchar+0x2c>
     ee4:	db df       	rcall	.-74     	; 0xe9c <uart1_getData>
     ee6:	ec 01       	movw	r28, r24
     ee8:	99 23       	and	r25, r25
     eea:	e4 f3       	brlt	.-8      	; 0xee4 <uart_getchar+0x1e>
     eec:	92 df       	rcall	.-220    	; 0xe12 <uart1_putc>
     eee:	ce 01       	movw	r24, r28
     ef0:	99 27       	eor	r25, r25
     ef2:	99 27       	eor	r25, r25
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     efa:	0f 93       	push	r16
     efc:	0f b7       	in	r16, 0x3f	; 63
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <tx0_Tail>
     f06:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <tx0_Head>
     f0a:	e3 95       	inc	r30
     f0c:	ef 71       	andi	r30, 0x1F	; 31
     f0e:	ef 13       	cpse	r30, r31
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <USART0_TX_CONTINUE>
     f12:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f16:	ff 7d       	andi	r31, 0xDF	; 223
     f18:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000f1c <USART0_TX_CONTINUE>:
     f1c:	e0 93 31 03 	sts	0x0331, r30	; 0x800331 <tx0_Tail>
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	e8 58       	subi	r30, 0x88	; 136
     f24:	fc 4f       	sbci	r31, 0xFC	; 252
     f26:	e0 81       	ld	r30, Z
     f28:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000f2c <USART0_TX_EXIT>:
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	0f bf       	out	0x3f, r16	; 63
     f32:	0f 91       	pop	r16
     f34:	18 95       	reti

00000f36 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f36:	0f 93       	push	r16
     f38:	0f b7       	in	r16, 0x3f	; 63
     f3a:	9f 93       	push	r25
     f3c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <rx0_Head>
     f48:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <rx0_Tail>
     f4c:	e3 95       	inc	r30
     f4e:	ef 71       	andi	r30, 0x1F	; 31
     f50:	fe 17       	cp	r31, r30
     f52:	31 f0       	breq	.+12     	; 0xf60 <USART0_RX_EXIT>
     f54:	e0 93 74 03 	sts	0x0374, r30	; 0x800374 <rx0_Head>
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	e0 5f       	subi	r30, 0xF0	; 240
     f5c:	fc 4f       	sbci	r31, 0xFC	; 252
     f5e:	90 83       	st	Z, r25

00000f60 <USART0_RX_EXIT>:
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	9f 91       	pop	r25
     f66:	0f bf       	out	0x3f, r16	; 63
     f68:	0f 91       	pop	r16
     f6a:	18 95       	reti

00000f6c <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f6c:	0f 93       	push	r16
     f6e:	0f b7       	in	r16, 0x3f	; 63
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
     f74:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <tx1_Tail>
     f78:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <tx1_Head>
     f7c:	e3 95       	inc	r30
     f7e:	ef 71       	andi	r30, 0x1F	; 31
     f80:	ef 13       	cpse	r30, r31
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <USART1_TX_CONTINUE>
     f84:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     f88:	ff 7d       	andi	r31, 0xDF	; 223
     f8a:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000f8e <USART1_TX_CONTINUE>:
     f8e:	e0 93 75 03 	sts	0x0375, r30	; 0x800375 <tx1_Tail>
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	ed 5c       	subi	r30, 0xCD	; 205
     f96:	fc 4f       	sbci	r31, 0xFC	; 252
     f98:	e0 81       	ld	r30, Z
     f9a:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000f9e <USART1_TX_EXIT>:
     f9e:	ff 91       	pop	r31
     fa0:	ef 91       	pop	r30
     fa2:	0f bf       	out	0x3f, r16	; 63
     fa4:	0f 91       	pop	r16
     fa6:	18 95       	reti

00000fa8 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     fa8:	0f 93       	push	r16
     faa:	0f b7       	in	r16, 0x3f	; 63
     fac:	9f 93       	push	r25
     fae:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
     fb6:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <rx1_Head>
     fba:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <rx1_Tail>
     fbe:	e3 95       	inc	r30
     fc0:	ef 71       	andi	r30, 0x1F	; 31
     fc2:	fe 17       	cp	r31, r30
     fc4:	31 f0       	breq	.+12     	; 0xfd2 <USART1_RX_EXIT>
     fc6:	e0 93 76 03 	sts	0x0376, r30	; 0x800376 <rx1_Head>
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ec 5a       	subi	r30, 0xAC	; 172
     fce:	fc 4f       	sbci	r31, 0xFC	; 252
     fd0:	90 83       	st	Z, r25

00000fd2 <USART1_RX_EXIT>:
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	9f 91       	pop	r25
     fd8:	0f bf       	out	0x3f, r16	; 63
     fda:	0f 91       	pop	r16
     fdc:	18 95       	reti

00000fde <timer1_init_ts>:
//for speed
volatile uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     fde:	e1 e8       	ldi	r30, 0x81	; 129
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	83 60       	ori	r24, 0x03	; 3
     fe6:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     fe8:	80 81       	ld	r24, Z
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     fee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ff2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     ff6:	ef e6       	ldi	r30, 0x6F	; 111
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	82 60       	ori	r24, 0x02	; 2
     ffe:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
    1000:	8d e7       	ldi	r24, 0x7D	; 125
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1008:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    100c:	08 95       	ret

0000100e <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
    100e:	84 b5       	in	r24, 0x24	; 36
    1010:	85 60       	ori	r24, 0x05	; 5
    1012:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
    1014:	84 b5       	in	r24, 0x24	; 36
    1016:	88 60       	ori	r24, 0x08	; 8
    1018:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
    101a:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
    101c:	ee e6       	ldi	r30, 0x6E	; 110
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
    1026:	87 e2       	ldi	r24, 0x27	; 39
    1028:	87 bd       	out	0x27, r24	; 39
    102a:	08 95       	ret

0000102c <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
    102c:	f8 94       	cli
    102e:	4c d5       	rcall	.+2712   	; 0x1ac8 <rgbled_init>
	can_init(0,0);
    1030:	8a de       	rcall	.-748    	; 0xd46 <pwm_init>
    1032:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
    1034:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
    103a:	2c d4       	rcall	.+2136   	; 0x1894 <can_init>
    103c:	d0 df       	rcall	.-96     	; 0xfde <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
    103e:	e7 df       	rcall	.-50     	; 0x100e <timer0_init_ts>
    1040:	55 dc       	rcall	.-1878   	; 0x8ec <speed_init>
    1042:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
    1044:	50 d5       	rcall	.+2720   	; 0x1ae6 <spi_init>
    1046:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
    104a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
    104e:	88 e9       	ldi	r24, 0x98	; 152
    1050:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
    1054:	e8 e9       	ldi	r30, 0x98	; 152
    1056:	f3 e0       	ldi	r31, 0x03	; 3
    1058:	84 e0       	ldi	r24, 0x04	; 4
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
    105e:	82 83       	std	Z+2, r24	; 0x02
	drivers(0);
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
	sei();
    1064:	c7 d9       	rcall	.-3186   	; 0x3f4 <drivers_init>
			{
				handle_motor_status_can_msg(ComValues); //send motor status on CAN
				b_select_can_msg = 0;
			}else{
				handle_clutch_cmd_can_msg(ComValues); // send clutch command on CAN
				b_select_can_msg = 1;
    1066:	80 e0       	ldi	r24, 0x00	; 0
	drivers(0);
	sei();
	
    while (1){
		
		handle_can(&ComValues, &rxFrame); //receive CAN
    1068:	c7 d9       	rcall	.-3186   	; 0x3f8 <drivers>
    106a:	78 94       	sei
    106c:	c1 e0       	ldi	r28, 0x01	; 1
    106e:	64 ee       	ldi	r22, 0xE4	; 228
    1070:	72 e0       	ldi	r23, 0x02	; 2
    1072:	82 e1       	ldi	r24, 0x12	; 18
		//receive_uart(&ComValues);
		
		if (b_send_can)
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	59 da       	rcall	.-2894   	; 0x52a <handle_can>
    1078:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <b_send_can>
    107c:	88 23       	and	r24, r24
		{
			if (b_select_can_msg)// sending one or the other
    107e:	09 f4       	brne	.+2      	; 0x1082 <main+0x56>
    1080:	41 c0       	rjmp	.+130    	; 0x1104 <__stack+0x5>
    1082:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <b_select_can_msg>
			{
				handle_motor_status_can_msg(ComValues); //send motor status on CAN
    1086:	88 23       	and	r24, r24
    1088:	f1 f0       	breq	.+60     	; 0x10c6 <main+0x9a>
    108a:	8d b7       	in	r24, 0x3d	; 61
    108c:	9e b7       	in	r25, 0x3e	; 62
    108e:	83 97       	sbiw	r24, 0x23	; 35
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	9e bf       	out	0x3e, r25	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	8d bf       	out	0x3d, r24	; 61
    109a:	ad b7       	in	r26, 0x3d	; 61
    109c:	be b7       	in	r27, 0x3e	; 62
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	83 e2       	ldi	r24, 0x23	; 35
    10a2:	e2 e1       	ldi	r30, 0x12	; 18
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	01 90       	ld	r0, Z+
    10a8:	0d 92       	st	X+, r0
    10aa:	8a 95       	dec	r24
				b_select_can_msg = 0;
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <main+0x7a>
    10ae:	97 da       	rcall	.-2770   	; 0x5de <handle_motor_status_can_msg>
    10b0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <b_select_can_msg>
    10b4:	8d b7       	in	r24, 0x3d	; 61
    10b6:	9e b7       	in	r25, 0x3e	; 62
    10b8:	83 96       	adiw	r24, 0x23	; 35
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	9e bf       	out	0x3e, r25	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
			}else{
				handle_clutch_cmd_can_msg(ComValues); // send clutch command on CAN
    10c2:	8d bf       	out	0x3d, r24	; 61
    10c4:	1d c0       	rjmp	.+58     	; 0x1100 <__stack+0x1>
    10c6:	8d b7       	in	r24, 0x3d	; 61
    10c8:	9e b7       	in	r25, 0x3e	; 62
    10ca:	83 97       	sbiw	r24, 0x23	; 35
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	9e bf       	out	0x3e, r25	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	8d bf       	out	0x3d, r24	; 61
    10d6:	ad b7       	in	r26, 0x3d	; 61
    10d8:	be b7       	in	r27, 0x3e	; 62
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	83 e2       	ldi	r24, 0x23	; 35
    10de:	e2 e1       	ldi	r30, 0x12	; 18
    10e0:	f1 e0       	ldi	r31, 0x01	; 1
    10e2:	01 90       	ld	r0, Z+
    10e4:	0d 92       	st	X+, r0
    10e6:	8a 95       	dec	r24
				b_select_can_msg = 1;
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <main+0xb6>
    10ea:	e8 da       	rcall	.-2608   	; 0x6bc <handle_clutch_cmd_can_msg>
    10ec:	c0 93 51 01 	sts	0x0151, r28	; 0x800151 <b_select_can_msg>
    10f0:	8d b7       	in	r24, 0x3d	; 61
    10f2:	9e b7       	in	r25, 0x3e	; 62
    10f4:	83 96       	adiw	r24, 0x23	; 35
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	9e bf       	out	0x3e, r25	; 62
			}
			b_send_can = 0;
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	8d bf       	out	0x3d, r24	; 61
		}
		
		if (b_send_uart)
    1100:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <b_send_can>
    1104:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <b_send_uart>
    1108:	88 23       	and	r24, r24
		{
			send_uart(ComValues);
    110a:	09 f4       	brne	.+2      	; 0x110e <__stack+0xf>
    110c:	b0 cf       	rjmp	.-160    	; 0x106e <main+0x42>
    110e:	8d b7       	in	r24, 0x3d	; 61
    1110:	9e b7       	in	r25, 0x3e	; 62
    1112:	83 97       	sbiw	r24, 0x23	; 35
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	9e bf       	out	0x3e, r25	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	8d bf       	out	0x3d, r24	; 61
    111e:	ad b7       	in	r26, 0x3d	; 61
    1120:	be b7       	in	r27, 0x3e	; 62
    1122:	11 96       	adiw	r26, 0x01	; 1
    1124:	83 e2       	ldi	r24, 0x23	; 35
    1126:	e2 e1       	ldi	r30, 0x12	; 18
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	01 90       	ld	r0, Z+
    112c:	0d 92       	st	X+, r0
    112e:	8a 95       	dec	r24
			b_send_uart = 0;
    1130:	e1 f7       	brne	.-8      	; 0x112a <__stack+0x2b>
    1132:	d8 da       	rcall	.-2640   	; 0x6e4 <send_uart>
    1134:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <b_send_uart>
    1138:	8d b7       	in	r24, 0x3d	; 61
    113a:	9e b7       	in	r25, 0x3e	; 62
    113c:	83 96       	adiw	r24, 0x23	; 35
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	9e bf       	out	0x3e, r25	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	8d bf       	out	0x3d, r24	; 61
    1148:	92 cf       	rjmp	.-220    	; 0x106e <main+0x42>

0000114a <__vector_16>:
		}
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	0b b6       	in	r0, 0x3b	; 59
    1156:	0f 92       	push	r0
    1158:	ef 92       	push	r14
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
	state_handler(&ComValues);
    1176:	82 e1       	ldi	r24, 0x12	; 18
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	45 dc       	rcall	.-1910   	; 0xa06 <state_handler>
	if (systic_counter_fast == 7) // every 41ms
    117c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <systic_counter_fast>
    1180:	87 30       	cpi	r24, 0x07	; 7
    1182:	09 f0       	breq	.+2      	; 0x1186 <__vector_16+0x3c>
    1184:	44 c0       	rjmp	.+136    	; 0x120e <__vector_16+0xc4>
	{
		b_send_can = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <b_send_can>
		b_send_uart = 1;
    118c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <b_send_uart>
		if (ComValues.u16_watchdog_can != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    1190:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ComValues+0x18>
    1194:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ComValues+0x19>
    1198:	89 2b       	or	r24, r25
    119a:	59 f0       	breq	.+22     	; 0x11b2 <__vector_16+0x68>
    119c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ComValues+0x1d>
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	39 f4       	brne	.+14     	; 0x11b2 <__vector_16+0x68>
		{
			ComValues.u16_watchdog_can -- ;
    11a4:	e2 e1       	ldi	r30, 0x12	; 18
    11a6:	f1 e0       	ldi	r31, 0x01	; 1
    11a8:	80 8d       	ldd	r24, Z+24	; 0x18
    11aa:	91 8d       	ldd	r25, Z+25	; 0x19
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	91 8f       	std	Z+25, r25	; 0x19
    11b0:	80 8f       	std	Z+24, r24	; 0x18
		}
		
		if (ComValues.u16_watchdog_throttle != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    11b2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ComValues+0x1a>
    11b6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ComValues+0x1b>
    11ba:	89 2b       	or	r24, r25
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <__vector_16+0x8c>
    11be:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ComValues+0x1d>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	41 f4       	brne	.+16     	; 0x11d6 <__vector_16+0x8c>
		{
			ComValues.u16_watchdog_throttle -- ;
    11c6:	e2 e1       	ldi	r30, 0x12	; 18
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    11cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	93 8f       	std	Z+27, r25	; 0x1b
    11d2:	82 8f       	std	Z+26, r24	; 0x1a
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <__vector_16+0x9c>
		}else if (ComValues.message_mode == UART)
    11d6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ComValues+0x1d>
    11da:	81 11       	cpse	r24, r1
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <__vector_16+0x9c>
		{
			ComValues.u16_watchdog_throttle = 0;
    11de:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ComValues+0x1b>
    11e2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ComValues+0x1a>
		}
		
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 41) ;		
    11e6:	e2 e1       	ldi	r30, 0x12	; 18
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	00 85       	ldd	r16, Z+8	; 0x08
    11ec:	11 85       	ldd	r17, Z+9	; 0x09
    11ee:	22 85       	ldd	r18, Z+10	; 0x0a
    11f0:	33 85       	ldd	r19, Z+11	; 0x0b
    11f2:	44 81       	ldd	r20, Z+4	; 0x04
    11f4:	55 81       	ldd	r21, Z+5	; 0x05
    11f6:	66 81       	ldd	r22, Z+6	; 0x06
    11f8:	77 81       	ldd	r23, Z+7	; 0x07
    11fa:	0f 2e       	mov	r0, r31
    11fc:	f9 e2       	ldi	r31, 0x29	; 41
    11fe:	ef 2e       	mov	r14, r31
    1200:	f0 2d       	mov	r31, r0
    1202:	8e e1       	ldi	r24, 0x1E	; 30
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	c2 d1       	rcall	.+900    	; 0x158c <handle_joulemeter>
		systic_counter_fast = 0;
    1208:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <systic_counter_fast>
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <__vector_16+0xca>
	} else {
		systic_counter_fast ++;
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
    1214:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <systic_counter_slow>
    1218:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <systic_counter_slow+0x1>
    121c:	84 36       	cpi	r24, 0x64	; 100
    121e:	91 05       	cpc	r25, r1
    1220:	01 f5       	brne	.+64     	; 0x1262 <__vector_16+0x118>
	{
		manage_LEDs(ComValues); //UM LED according to motor state
    1222:	8d b7       	in	r24, 0x3d	; 61
    1224:	9e b7       	in	r25, 0x3e	; 62
    1226:	83 97       	sbiw	r24, 0x23	; 35
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	9e bf       	out	0x3e, r25	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	8d bf       	out	0x3d, r24	; 61
    1232:	ad b7       	in	r26, 0x3d	; 61
    1234:	be b7       	in	r27, 0x3e	; 62
    1236:	11 96       	adiw	r26, 0x01	; 1
    1238:	83 e2       	ldi	r24, 0x23	; 35
    123a:	e2 e1       	ldi	r30, 0x12	; 18
    123c:	f1 e0       	ldi	r31, 0x01	; 1
    123e:	01 90       	ld	r0, Z+
    1240:	0d 92       	st	X+, r0
    1242:	8a 95       	dec	r24
    1244:	e1 f7       	brne	.-8      	; 0x123e <__vector_16+0xf4>
    1246:	f9 da       	rcall	.-2574   	; 0x83a <manage_LEDs>
		systic_counter_slow = 0;
    1248:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <systic_counter_slow+0x1>
    124c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <systic_counter_slow>
    1250:	8d b7       	in	r24, 0x3d	; 61
    1252:	9e b7       	in	r25, 0x3e	; 62
    1254:	83 96       	adiw	r24, 0x23	; 35
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	9e bf       	out	0x3e, r25	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	8d bf       	out	0x3d, r24	; 61
    1260:	05 c0       	rjmp	.+10     	; 0x126c <__vector_16+0x122>
		} else {
		systic_counter_slow ++;
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <systic_counter_slow+0x1>
    1268:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <systic_counter_slow>
	}
}
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ef 90       	pop	r14
    128a:	0f 90       	pop	r0
    128c:	0b be       	out	0x3b, r0	; 59
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	0f 90       	pop	r0
    1294:	1f 90       	pop	r1
    1296:	18 95       	reti

00001298 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	0b b6       	in	r0, 0x3b	; 59
    12a4:	0f 92       	push	r0
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
	
	if (u16_speed_count < 2000 ) //after 3s with no magnet, speed = 0
    12be:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16_speed_count>
    12c2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16_speed_count+0x1>
    12c6:	80 3d       	cpi	r24, 0xD0	; 208
    12c8:	97 40       	sbci	r25, 0x07	; 7
    12ca:	50 f4       	brcc	.+20     	; 0x12e0 <__vector_12+0x48>
	{
		u16_speed_count ++ ;
    12cc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16_speed_count>
    12d0:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16_speed_count+0x1>
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <u16_speed_count+0x1>
    12da:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u16_speed_count>
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <__vector_12+0x58>
	} else
	{
		ComValues.u16_car_speed = 0;
    12e0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ComValues+0x12>
    12e4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ComValues+0x11>
		u16_speed_count = 0;
    12e8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u16_speed_count+0x1>
    12ec:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u16_speed_count>
	}
	
	if (u8_SPI_count == 3)
    12f0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	31 f4       	brne	.+12     	; 0x1304 <__vector_12+0x6c>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
    12f8:	82 e2       	ldi	r24, 0x22	; 34
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	f6 d8       	rcall	.-3604   	; 0x4ea <SPI_handler_4>
		u8_SPI_count = 0 ;
    12fe:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u8_SPI_count>
    1302:	16 c0       	rjmp	.+44     	; 0x1330 <__vector_12+0x98>
	}
	
	if (u8_SPI_count == 2)
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	41 f4       	brne	.+16     	; 0x1318 <__vector_12+0x80>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
    1308:	8a e1       	ldi	r24, 0x1A	; 26
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	bd d8       	rcall	.-3718   	; 0x488 <SPI_handler_2>
		u8_SPI_count ++ ;
    130e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
    1318:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    131c:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
    131e:	41 f4       	brne	.+16     	; 0x1330 <__vector_12+0x98>
    1320:	86 e1       	ldi	r24, 0x16	; 22
    1322:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    1324:	90 d8       	rcall	.-3808   	; 0x446 <SPI_handler_1>
    1326:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
    1330:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
    1334:	81 11       	cpse	r24, r1
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <__vector_12+0xb0>
    1338:	82 e1       	ldi	r24, 0x12	; 18
    133a:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    133c:	63 d8       	rcall	.-3898   	; 0x404 <SPI_handler_0>
    133e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8_SPI_count>
	}
}
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0b be       	out	0x3b, r0	; 59
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of the reed switch)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	0b b6       	in	r0, 0x3b	; 59
    137a:	0f 92       	push	r0
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
	//rgbled_toggle(LED_GREEN);
	handle_speed_sensor(&ComValues.u16_car_speed, &u16_speed_count);
    1394:	6d e4       	ldi	r22, 0x4D	; 77
    1396:	71 e0       	ldi	r23, 0x01	; 1
    1398:	83 e2       	ldi	r24, 0x23	; 35
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	b2 da       	rcall	.-2716   	; 0x902 <handle_speed_sensor>
}
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0b be       	out	0x3b, r0	; 59
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <handle_current_sensor>:

#include "sensors.h"
#include <avr/io.h>

void handle_current_sensor(volatile float *f32_current, uint16_t u16_ADC_reg, uint8_t u8_sensor_num)
{
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	00 d0       	rcall	.+0      	; 0x13de <handle_current_sensor+0x1a>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <handle_current_sensor+0x1c>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8c 01       	movw	r16, r24
    13e6:	f4 2e       	mov	r15, r20
	volatile float f_new_current = ((((volatile float)u16_ADC_reg*5.0/4096.0) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY) ;// /3 because current passes 3x in transducer for more precision.
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	ef d4       	rcall	.+2526   	; 0x1dcc <__floatunsisf>
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 ea       	ldi	r20, 0xA0	; 160
    13f4:	50 e4       	ldi	r21, 0x40	; 64
    13f6:	a0 d5       	rcall	.+2880   	; 0x1f38 <__mulsf3>
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e8       	ldi	r20, 0x80	; 128
    13fe:	59 e3       	ldi	r21, 0x39	; 57
    1400:	9b d5       	rcall	.+2870   	; 0x1f38 <__mulsf3>
    1402:	2e ea       	ldi	r18, 0xAE	; 174
    1404:	37 e4       	ldi	r19, 0x47	; 71
    1406:	41 e2       	ldi	r20, 0x21	; 33
    1408:	50 e4       	ldi	r21, 0x40	; 64
    140a:	de d3       	rcall	.+1980   	; 0x1bc8 <__subsf3>
    140c:	23 ec       	ldi	r18, 0xC3	; 195
    140e:	34 e6       	ldi	r19, 0x64	; 100
    1410:	4a e2       	ldi	r20, 0x2A	; 42
    1412:	5d e3       	ldi	r21, 0x3D	; 61
    1414:	42 d4       	rcall	.+2180   	; 0x1c9a <__divsf3>
    1416:	69 83       	std	Y+1, r22	; 0x01
    1418:	7a 83       	std	Y+2, r23	; 0x02
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	9c 83       	std	Y+4, r25	; 0x04
	if (u8_sensor_num)
    141e:	ff 20       	and	r15, r15
    1420:	71 f0       	breq	.+28     	; 0x143e <handle_current_sensor+0x7a>
	{//batt
		f_new_current = (f_new_current+CORRECTION_OFFSET_BAT);// correction of offset
    1422:	69 81       	ldd	r22, Y+1	; 0x01
    1424:	7a 81       	ldd	r23, Y+2	; 0x02
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	2d ec       	ldi	r18, 0xCD	; 205
    142c:	3c ec       	ldi	r19, 0xCC	; 204
    142e:	4c e4       	ldi	r20, 0x4C	; 76
    1430:	5e e3       	ldi	r21, 0x3E	; 62
    1432:	ca d3       	rcall	.+1940   	; 0x1bc8 <__subsf3>
    1434:	69 83       	std	Y+1, r22	; 0x01
    1436:	7a 83       	std	Y+2, r23	; 0x02
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	0c c0       	rjmp	.+24     	; 0x1456 <handle_current_sensor+0x92>
	}else{
		f_new_current = (f_new_current+CORRECTION_OFFSET_MOT);// correction of offset
    143e:	69 81       	ldd	r22, Y+1	; 0x01
    1440:	7a 81       	ldd	r23, Y+2	; 0x02
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	a9 01       	movw	r20, r18
    144c:	be d3       	rcall	.+1916   	; 0x1bca <__addsf3>
    144e:	69 83       	std	Y+1, r22	; 0x01
    1450:	7a 83       	std	Y+2, r23	; 0x02
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    1456:	f8 01       	movw	r30, r16
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	89 80       	ldd	r8, Y+1	; 0x01
    1462:	9a 80       	ldd	r9, Y+2	; 0x02
    1464:	ab 80       	ldd	r10, Y+3	; 0x03
    1466:	bc 80       	ldd	r11, Y+4	; 0x04
    1468:	26 e6       	ldi	r18, 0x66	; 102
    146a:	36 e6       	ldi	r19, 0x66	; 102
    146c:	46 e6       	ldi	r20, 0x66	; 102
    146e:	5f e3       	ldi	r21, 0x3F	; 63
    1470:	63 d5       	rcall	.+2758   	; 0x1f38 <__mulsf3>
    1472:	6b 01       	movw	r12, r22
    1474:	7c 01       	movw	r14, r24
    1476:	2d ec       	ldi	r18, 0xCD	; 205
    1478:	3c ec       	ldi	r19, 0xCC	; 204
    147a:	4c ec       	ldi	r20, 0xCC	; 204
    147c:	5d e3       	ldi	r21, 0x3D	; 61
    147e:	c5 01       	movw	r24, r10
    1480:	b4 01       	movw	r22, r8
    1482:	5a d5       	rcall	.+2740   	; 0x1f38 <__mulsf3>
    1484:	9b 01       	movw	r18, r22
    1486:	ac 01       	movw	r20, r24
    1488:	c7 01       	movw	r24, r14
    148a:	b6 01       	movw	r22, r12
    148c:	9e d3       	rcall	.+1852   	; 0x1bca <__addsf3>
    148e:	f8 01       	movw	r30, r16
    1490:	60 83       	st	Z, r22
    1492:	71 83       	std	Z+1, r23	; 0x01
    1494:	82 83       	std	Z+2, r24	; 0x02
    1496:	93 83       	std	Z+3, r25	; 0x03
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	bf 90       	pop	r11
    14b2:	af 90       	pop	r10
    14b4:	9f 90       	pop	r9
    14b6:	8f 90       	pop	r8
    14b8:	08 95       	ret

000014ba <handle_temp_sensor>:

void handle_temp_sensor(volatile uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    14ba:	cf 92       	push	r12
    14bc:	df 92       	push	r13
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	ec 01       	movw	r28, r24
	float f_sens_volt = ((float)u16_ADC_reg*5.0/4096.0);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	7f d4       	rcall	.+2302   	; 0x1dcc <__floatunsisf>
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 ea       	ldi	r20, 0xA0	; 160
    14d4:	50 e4       	ldi	r21, 0x40	; 64
    14d6:	30 d5       	rcall	.+2656   	; 0x1f38 <__mulsf3>
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	59 e3       	ldi	r21, 0x39	; 57
    14e0:	2b d5       	rcall	.+2646   	; 0x1f38 <__mulsf3>
    14e2:	6b 01       	movw	r12, r22
    14e4:	7c 01       	movw	r14, r24
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    14e6:	2d ec       	ldi	r18, 0xCD	; 205
    14e8:	3c ec       	ldi	r19, 0xCC	; 204
    14ea:	4c e6       	ldi	r20, 0x6C	; 108
    14ec:	50 e4       	ldi	r21, 0x40	; 64
    14ee:	d1 d3       	rcall	.+1954   	; 0x1c92 <__cmpsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	74 f0       	brlt	.+28     	; 0x1510 <handle_temp_sensor+0x56>
	{
		*u8_temp = (uint8_t)(20.0*f_sens_volt-22.0);
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 ea       	ldi	r20, 0xA0	; 160
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	c7 01       	movw	r24, r14
    14fe:	b6 01       	movw	r22, r12
    1500:	1b d5       	rcall	.+2614   	; 0x1f38 <__mulsf3>
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 eb       	ldi	r20, 0xB0	; 176
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	5e d3       	rcall	.+1724   	; 0x1bc8 <__subsf3>
    150c:	33 d4       	rcall	.+2150   	; 0x1d74 <__fixunssfsi>
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    150e:	68 83       	st	Y, r22
    1510:	26 e6       	ldi	r18, 0x66	; 102
    1512:	36 e6       	ldi	r19, 0x66	; 102
    1514:	46 e9       	ldi	r20, 0x96	; 150
    1516:	50 e4       	ldi	r21, 0x40	; 64
    1518:	c7 01       	movw	r24, r14
    151a:	b6 01       	movw	r22, r12
    151c:	ba d3       	rcall	.+1908   	; 0x1c92 <__cmpsf2>
    151e:	18 16       	cp	r1, r24
    1520:	bc f0       	brlt	.+46     	; 0x1550 <handle_temp_sensor+0x96>
    1522:	2d ec       	ldi	r18, 0xCD	; 205
    1524:	3c ec       	ldi	r19, 0xCC	; 204
    1526:	4c e6       	ldi	r20, 0x6C	; 108
    1528:	50 e4       	ldi	r21, 0x40	; 64
    152a:	c7 01       	movw	r24, r14
    152c:	b6 01       	movw	r22, r12
    152e:	00 d5       	rcall	.+2560   	; 0x1f30 <__gesf2>
    1530:	18 16       	cp	r1, r24
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    1532:	74 f4       	brge	.+28     	; 0x1550 <handle_temp_sensor+0x96>
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4e e5       	ldi	r20, 0x5E	; 94
    153a:	52 e4       	ldi	r21, 0x42	; 66
    153c:	c7 01       	movw	r24, r14
    153e:	b6 01       	movw	r22, r12
    1540:	fb d4       	rcall	.+2550   	; 0x1f38 <__mulsf3>
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e8       	ldi	r19, 0x80	; 128
    1546:	4b e1       	ldi	r20, 0x1B	; 27
    1548:	53 e4       	ldi	r21, 0x43	; 67
    154a:	3e d3       	rcall	.+1660   	; 0x1bc8 <__subsf3>
    154c:	13 d4       	rcall	.+2086   	; 0x1d74 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
    154e:	68 83       	st	Y, r22
    1550:	26 e6       	ldi	r18, 0x66	; 102
    1552:	36 e6       	ldi	r19, 0x66	; 102
    1554:	46 e9       	ldi	r20, 0x96	; 150
    1556:	50 e4       	ldi	r21, 0x40	; 64
    1558:	c7 01       	movw	r24, r14
    155a:	b6 01       	movw	r22, r12
	{
		*u8_temp = (uint8_t)(200.0*f_sens_volt-840.0);
    155c:	e9 d4       	rcall	.+2514   	; 0x1f30 <__gesf2>
    155e:	18 16       	cp	r1, r24
    1560:	74 f4       	brge	.+28     	; 0x157e <handle_temp_sensor+0xc4>
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	48 e4       	ldi	r20, 0x48	; 72
    1568:	53 e4       	ldi	r21, 0x43	; 67
    156a:	c7 01       	movw	r24, r14
    156c:	b6 01       	movw	r22, r12
    156e:	e4 d4       	rcall	.+2504   	; 0x1f38 <__mulsf3>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	42 e5       	ldi	r20, 0x52	; 82
    1576:	54 e4       	ldi	r21, 0x44	; 68
    1578:	27 d3       	rcall	.+1614   	; 0x1bc8 <__subsf3>
    157a:	fc d3       	rcall	.+2040   	; 0x1d74 <__fixunssfsi>
    157c:	68 83       	st	Y, r22
	}
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	08 95       	ret

0000158c <handle_joulemeter>:

void handle_joulemeter(volatile float *f32_energy, volatile float f32_bat_current, volatile float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    158c:	4f 92       	push	r4
    158e:	5f 92       	push	r5
    1590:	6f 92       	push	r6
    1592:	7f 92       	push	r7
    1594:	8f 92       	push	r8
    1596:	9f 92       	push	r9
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	cf 92       	push	r12
    159e:	df 92       	push	r13
    15a0:	ef 92       	push	r14
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	28 97       	sbiw	r28, 0x08	; 8
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	6c 01       	movw	r12, r24
    15bc:	49 83       	std	Y+1, r20	; 0x01
    15be:	5a 83       	std	Y+2, r21	; 0x02
    15c0:	6b 83       	std	Y+3, r22	; 0x03
    15c2:	7c 83       	std	Y+4, r23	; 0x04
    15c4:	0d 83       	std	Y+5, r16	; 0x05
    15c6:	1e 83       	std	Y+6, r17	; 0x06
    15c8:	2f 83       	std	Y+7, r18	; 0x07
    15ca:	38 87       	std	Y+8, r19	; 0x08
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    15cc:	6d 81       	ldd	r22, Y+5	; 0x05
    15ce:	7e 81       	ldd	r23, Y+6	; 0x06
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	29 81       	ldd	r18, Y+1	; 0x01
    15d6:	3a 81       	ldd	r19, Y+2	; 0x02
    15d8:	4b 81       	ldd	r20, Y+3	; 0x03
    15da:	5c 81       	ldd	r21, Y+4	; 0x04
    15dc:	f6 01       	movw	r30, r12
    15de:	80 80       	ld	r8, Z
    15e0:	91 80       	ldd	r9, Z+1	; 0x01
    15e2:	a2 80       	ldd	r10, Z+2	; 0x02
    15e4:	b3 80       	ldd	r11, Z+3	; 0x03
    15e6:	a8 d4       	rcall	.+2384   	; 0x1f38 <__mulsf3>
    15e8:	2b 01       	movw	r4, r22
    15ea:	3c 01       	movw	r6, r24
    15ec:	6e 2d       	mov	r22, r14
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	eb d3       	rcall	.+2006   	; 0x1dcc <__floatunsisf>
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	c3 01       	movw	r24, r6
    15fc:	b2 01       	movw	r22, r4
    15fe:	9c d4       	rcall	.+2360   	; 0x1f38 <__mulsf3>
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a e7       	ldi	r20, 0x7A	; 122
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	48 d3       	rcall	.+1680   	; 0x1c9a <__divsf3>
    160a:	a5 01       	movw	r20, r10
    160c:	94 01       	movw	r18, r8
    160e:	dd d2       	rcall	.+1466   	; 0x1bca <__addsf3>
    1610:	f6 01       	movw	r30, r12
    1612:	60 83       	st	Z, r22
    1614:	71 83       	std	Z+1, r23	; 0x01
    1616:	82 83       	std	Z+2, r24	; 0x02
    1618:	93 83       	std	Z+3, r25	; 0x03
    161a:	28 96       	adiw	r28, 0x08	; 8
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ef 90       	pop	r14
    1630:	df 90       	pop	r13
    1632:	cf 90       	pop	r12
    1634:	bf 90       	pop	r11
    1636:	af 90       	pop	r10
    1638:	9f 90       	pop	r9
    163a:	8f 90       	pop	r8
    163c:	7f 90       	pop	r7
    163e:	6f 90       	pop	r6
    1640:	5f 90       	pop	r5
    1642:	4f 90       	pop	r4
    1644:	08 95       	ret

00001646 <Set_ADC_Channel_ext>:
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
}

void Set_ADC_Channel_ext(uint8_t u8_CHn, uint8_t * u8_ADC_tx) //for MCP3208 external ADC
{
	switch(u8_CHn)
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	88 30       	cpi	r24, 0x08	; 8
    164a:	91 05       	cpc	r25, r1
    164c:	88 f5       	brcc	.+98     	; 0x16b0 <Set_ADC_Channel_ext+0x6a>
    164e:	fc 01       	movw	r30, r24
    1650:	e6 5b       	subi	r30, 0xB6	; 182
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	d4 c4       	rjmp	.+2472   	; 0x1ffe <__tablejump2__>
	{
		case 0 :
			u8_ADC_tx[0] = 0b00000110 ;
    1656:	86 e0       	ldi	r24, 0x06	; 6
    1658:	fb 01       	movw	r30, r22
    165a:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b00 ;
    165c:	11 82       	std	Z+1, r1	; 0x01
		break;
    165e:	08 95       	ret
		
		case 1 :
			u8_ADC_tx[0] = 0b00000110 ;
    1660:	86 e0       	ldi	r24, 0x06	; 6
    1662:	fb 01       	movw	r30, r22
    1664:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b01 << 6 ;
    1666:	80 e4       	ldi	r24, 0x40	; 64
    1668:	81 83       	std	Z+1, r24	; 0x01
		break;
    166a:	08 95       	ret
		
		case 2 :
			u8_ADC_tx[0] = 0b00000110 ;
    166c:	86 e0       	ldi	r24, 0x06	; 6
    166e:	fb 01       	movw	r30, r22
    1670:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b10 << 6 ;
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	81 83       	std	Z+1, r24	; 0x01
		break;
    1676:	08 95       	ret
		
		case 3 :
		u8_ADC_tx[0] = 0b00000110 ;
    1678:	86 e0       	ldi	r24, 0x06	; 6
    167a:	fb 01       	movw	r30, r22
    167c:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    167e:	80 ec       	ldi	r24, 0xC0	; 192
    1680:	81 83       	std	Z+1, r24	; 0x01
		break;
    1682:	08 95       	ret
		
		case 4 :
		u8_ADC_tx[0] = 0b00000111 ;
    1684:	87 e0       	ldi	r24, 0x07	; 7
    1686:	fb 01       	movw	r30, r22
    1688:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b00 << 6 ;
    168a:	11 82       	std	Z+1, r1	; 0x01
		break;
    168c:	08 95       	ret
		
		case 5 :
		u8_ADC_tx[0] = 0b00000111 ;
    168e:	87 e0       	ldi	r24, 0x07	; 7
    1690:	fb 01       	movw	r30, r22
    1692:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b01 << 6 ;
    1694:	80 e4       	ldi	r24, 0x40	; 64
    1696:	81 83       	std	Z+1, r24	; 0x01
		break;
    1698:	08 95       	ret
		
		case 6 :
		u8_ADC_tx[0] = 0b00000111 ;
    169a:	87 e0       	ldi	r24, 0x07	; 7
    169c:	fb 01       	movw	r30, r22
    169e:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b10 << 6 ;
    16a0:	80 e8       	ldi	r24, 0x80	; 128
    16a2:	81 83       	std	Z+1, r24	; 0x01
		break;
    16a4:	08 95       	ret
		
		case 7 :
		u8_ADC_tx[0] = 0b00000111 ;
    16a6:	87 e0       	ldi	r24, 0x07	; 7
    16a8:	fb 01       	movw	r30, r22
    16aa:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    16ac:	80 ec       	ldi	r24, 0xC0	; 192
    16ae:	81 83       	std	Z+1, r24	; 0x01
    16b0:	08 95       	ret

000016b2 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	0b b6       	in	r0, 0x3b	; 59
    16be:	0f 92       	push	r0
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	8f 93       	push	r24
    16cc:	9f 93       	push	r25
    16ce:	af 93       	push	r26
    16d0:	bf 93       	push	r27
    16d2:	ef 93       	push	r30
    16d4:	ff 93       	push	r31
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	1f 92       	push	r1
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    16e0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    16e4:	80 ff       	sbrs	r24, 0
    16e6:	47 c0       	rjmp	.+142    	; 0x1776 <__vector_18+0xc4>
    16e8:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    16ec:	90 ff       	sbrs	r25, 0
    16ee:	43 c0       	rjmp	.+134    	; 0x1776 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    16f0:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    16f4:	ee ee       	ldi	r30, 0xEE	; 238
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    16fc:	80 81       	ld	r24, Z
    16fe:	8f 7b       	andi	r24, 0xBF	; 191
    1700:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    1702:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <tx_off>
    1706:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <tx_on>
    170a:	98 17       	cp	r25, r24
    170c:	89 f1       	breq	.+98     	; 0x1770 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    170e:	8f 70       	andi	r24, 0x0F	; 15
    1710:	2b e0       	ldi	r18, 0x0B	; 11
    1712:	82 9f       	mul	r24, r18
    1714:	c0 01       	movw	r24, r0
    1716:	11 24       	eor	r1, r1
    1718:	fc 01       	movw	r30, r24
    171a:	e4 5f       	subi	r30, 0xF4	; 244
    171c:	fd 4f       	sbci	r31, 0xFD	; 253
    171e:	20 81       	ld	r18, Z
    1720:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    1724:	20 81       	ld	r18, Z
    1726:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    172a:	21 81       	ldd	r18, Z+1	; 0x01
    172c:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    1730:	23 81       	ldd	r18, Z+3	; 0x03
    1732:	aa ef       	ldi	r26, 0xFA	; 250
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    1738:	24 81       	ldd	r18, Z+4	; 0x04
    173a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    173c:	25 81       	ldd	r18, Z+5	; 0x05
    173e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    1740:	26 81       	ldd	r18, Z+6	; 0x06
    1742:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    1744:	27 81       	ldd	r18, Z+7	; 0x07
    1746:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    1748:	20 85       	ldd	r18, Z+8	; 0x08
    174a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    174c:	21 85       	ldd	r18, Z+9	; 0x09
    174e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    1750:	22 85       	ldd	r18, Z+10	; 0x0a
    1752:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    1754:	fc 01       	movw	r30, r24
    1756:	e2 5f       	subi	r30, 0xF2	; 242
    1758:	fd 4f       	sbci	r31, 0xFD	; 253
    175a:	80 81       	ld	r24, Z
    175c:	8f 70       	andi	r24, 0x0F	; 15
    175e:	80 64       	ori	r24, 0x40	; 64
    1760:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    1764:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <tx_off>
    1768:	8f 5f       	subi	r24, 0xFF	; 255
    176a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <tx_off>
    176e:	7d c0       	rjmp	.+250    	; 0x186a <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    1770:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_busy>
    1774:	7a c0       	rjmp	.+244    	; 0x186a <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    1776:	81 ff       	sbrs	r24, 1
    1778:	78 c0       	rjmp	.+240    	; 0x186a <__vector_18+0x1b8>
    177a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    177e:	81 ff       	sbrs	r24, 1
    1780:	74 c0       	rjmp	.+232    	; 0x186a <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    1782:	80 e1       	ldi	r24, 0x10	; 16
    1784:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    1788:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_on>
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <rx_off>
    1794:	29 1b       	sub	r18, r25
    1796:	31 09       	sbc	r19, r1
    1798:	2f 77       	andi	r18, 0x7F	; 127
    179a:	33 27       	eor	r19, r19
    179c:	20 31       	cpi	r18, 0x10	; 16
    179e:	31 05       	cpc	r19, r1
    17a0:	0c f0       	brlt	.+2      	; 0x17a4 <__vector_18+0xf2>
    17a2:	58 c0       	rjmp	.+176    	; 0x1854 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    17a4:	e8 2f       	mov	r30, r24
    17a6:	ef 70       	andi	r30, 0x0F	; 15
    17a8:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    17ac:	2e 2f       	mov	r18, r30
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4b e0       	ldi	r20, 0x0B	; 11
    17b2:	e4 9f       	mul	r30, r20
    17b4:	f0 01       	movw	r30, r0
    17b6:	11 24       	eor	r1, r1
    17b8:	e4 5a       	subi	r30, 0xA4	; 164
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	9f 70       	andi	r25, 0x0F	; 15
    17be:	42 81       	ldd	r20, Z+2	; 0x02
    17c0:	40 7f       	andi	r20, 0xF0	; 240
    17c2:	94 2b       	or	r25, r20
    17c4:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    17c6:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17ca:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    17ce:	40 7e       	andi	r20, 0xE0	; 224
    17d0:	97 70       	andi	r25, 0x07	; 7
    17d2:	94 2b       	or	r25, r20
    17d4:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    17d6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17da:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    17dc:	aa ef       	ldi	r26, 0xFA	; 250
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	9c 91       	ld	r25, X
    17e2:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    17e4:	9c 91       	ld	r25, X
    17e6:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    17e8:	9c 91       	ld	r25, X
    17ea:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    17ec:	9c 91       	ld	r25, X
    17ee:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    17f0:	9c 91       	ld	r25, X
    17f2:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    17f4:	9c 91       	ld	r25, X
    17f6:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    17f8:	9c 91       	ld	r25, X
    17fa:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    17fc:	9c 91       	ld	r25, X
    17fe:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    1806:	40 81       	ld	r20, Z
    1808:	42 95       	swap	r20
    180a:	46 95       	lsr	r20
    180c:	47 70       	andi	r20, 0x07	; 7
    180e:	51 81       	ldd	r21, Z+1	; 0x01
    1810:	65 2f       	mov	r22, r21
    1812:	66 0f       	add	r22, r22
    1814:	66 0f       	add	r22, r22
    1816:	66 0f       	add	r22, r22
    1818:	86 2f       	mov	r24, r22
    181a:	84 2b       	or	r24, r20
    181c:	95 2f       	mov	r25, r21
    181e:	92 95       	swap	r25
    1820:	96 95       	lsr	r25
    1822:	97 70       	andi	r25, 0x07	; 7
    1824:	89 2b       	or	r24, r25
    1826:	b1 f4       	brne	.+44     	; 0x1854 <__vector_18+0x1a2>
    1828:	8b e0       	ldi	r24, 0x0B	; 11
    182a:	82 9f       	mul	r24, r18
    182c:	f0 01       	movw	r30, r0
    182e:	83 9f       	mul	r24, r19
    1830:	f0 0d       	add	r31, r0
    1832:	11 24       	eor	r1, r1
    1834:	e4 5a       	subi	r30, 0xA4	; 164
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	83 81       	ldd	r24, Z+3	; 0x03
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	59 f4       	brne	.+22     	; 0x1854 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    183e:	98 e0       	ldi	r25, 0x08	; 8
    1840:	88 e1       	ldi	r24, 0x18	; 24
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	a8 95       	wdr
    1848:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1852:	ff cf       	rjmp	.-2      	; 0x1852 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    1854:	ee ee       	ldi	r30, 0xEE	; 238
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    185c:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    185e:	80 81       	ld	r24, Z
    1860:	8f 7d       	andi	r24, 0xDF	; 223
    1862:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    1864:	80 e8       	ldi	r24, 0x80	; 128
    1866:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	ff 91       	pop	r31
    1872:	ef 91       	pop	r30
    1874:	bf 91       	pop	r27
    1876:	af 91       	pop	r26
    1878:	9f 91       	pop	r25
    187a:	8f 91       	pop	r24
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0b be       	out	0x3b, r0	; 59
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    1898:	e8 ed       	ldi	r30, 0xD8	; 216
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	21 e0       	ldi	r18, 0x01	; 1
    189e:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    18a0:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    18a4:	2c e0       	ldi	r18, 0x0C	; 12
    18a6:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    18aa:	27 e3       	ldi	r18, 0x37	; 55
    18ac:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    18b0:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    18b4:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    18b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18bc:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    18c0:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    18c4:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    18c8:	cd ee       	ldi	r28, 0xED	; 237
    18ca:	d0 e0       	ldi	r29, 0x00	; 0
    18cc:	18 82       	st	Y, r1
	CANSTMOB = 0;
    18ce:	ae ee       	ldi	r26, 0xEE	; 238
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    18d4:	20 e1       	ldi	r18, 0x10	; 16
    18d6:	28 83       	st	Y, r18
	CANSTMOB = 0;
    18d8:	1c 92       	st	X, r1
	CANIDM4 = 0;
    18da:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    18de:	28 2f       	mov	r18, r24
    18e0:	22 95       	swap	r18
    18e2:	22 0f       	add	r18, r18
    18e4:	20 7e       	andi	r18, 0xE0	; 224
    18e6:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    18ea:	96 95       	lsr	r25
    18ec:	87 95       	ror	r24
    18ee:	96 95       	lsr	r25
    18f0:	87 95       	ror	r24
    18f2:	96 95       	lsr	r25
    18f4:	87 95       	ror	r24
    18f6:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    18fa:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    18fe:	86 2f       	mov	r24, r22
    1900:	82 95       	swap	r24
    1902:	88 0f       	add	r24, r24
    1904:	80 7e       	andi	r24, 0xE0	; 224
    1906:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    190a:	76 95       	lsr	r23
    190c:	67 95       	ror	r22
    190e:	76 95       	lsr	r23
    1910:	67 95       	ror	r22
    1912:	76 95       	lsr	r23
    1914:	67 95       	ror	r22
    1916:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    191a:	80 e8       	ldi	r24, 0x80	; 128
    191c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    1926:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    192a:	80 eb       	ldi	r24, 0xB0	; 176
    192c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	80 83       	st	Z, r24

	reset = 0;
    1934:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <reset>
}
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	08 95       	ret

0000193e <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1944:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <rx_off>
    1948:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <rx_on>
    194c:	24 17       	cp	r18, r20
    194e:	89 f1       	breq	.+98     	; 0x19b2 <can_read_message_if_new+0x74>
    1950:	a4 2f       	mov	r26, r20
    1952:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    1954:	8b e0       	ldi	r24, 0x0B	; 11
    1956:	a8 9f       	mul	r26, r24
    1958:	b0 01       	movw	r22, r0
    195a:	11 24       	eor	r1, r1
    195c:	fb 01       	movw	r30, r22
    195e:	e4 5a       	subi	r30, 0xA4	; 164
    1960:	fe 4f       	sbci	r31, 0xFE	; 254
    1962:	20 81       	ld	r18, Z
    1964:	22 95       	swap	r18
    1966:	26 95       	lsr	r18
    1968:	27 70       	andi	r18, 0x07	; 7
    196a:	31 81       	ldd	r19, Z+1	; 0x01
    196c:	53 2f       	mov	r21, r19
    196e:	55 0f       	add	r21, r21
    1970:	55 0f       	add	r21, r21
    1972:	55 0f       	add	r21, r21
    1974:	25 2b       	or	r18, r21
    1976:	32 95       	swap	r19
    1978:	36 95       	lsr	r19
    197a:	37 70       	andi	r19, 0x07	; 7
    197c:	28 83       	st	Y, r18
    197e:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1980:	fb 01       	movw	r30, r22
    1982:	e2 5a       	subi	r30, 0xA2	; 162
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	20 81       	ld	r18, Z
    1988:	2f 70       	andi	r18, 0x0F	; 15
    198a:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    198c:	22 23       	and	r18, r18
    198e:	99 f0       	breq	.+38     	; 0x19b6 <can_read_message_if_new+0x78>
    1990:	db 01       	movw	r26, r22
    1992:	a1 5a       	subi	r26, 0xA1	; 161
    1994:	be 4f       	sbci	r27, 0xFE	; 254
    1996:	fe 01       	movw	r30, r28
    1998:	33 96       	adiw	r30, 0x03	; 3
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	2d 5f       	subi	r18, 0xFD	; 253
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	ce 01       	movw	r24, r28
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    19a6:	2d 91       	ld	r18, X+
    19a8:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    19aa:	e8 17       	cp	r30, r24
    19ac:	f9 07       	cpc	r31, r25
    19ae:	d9 f7       	brne	.-10     	; 0x19a6 <can_read_message_if_new+0x68>
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    19b6:	4f 5f       	subi	r20, 0xFF	; 255
    19b8:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <rx_off>
	}

	return true;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
}
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    19ca:	ab ed       	ldi	r26, 0xDB	; 219
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	8c 91       	ld	r24, X
    19d0:	8f 77       	andi	r24, 0x7F	; 127
    19d2:	8c 93       	st	X, r24

	if (!tx_busy) {
    19d4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tx_busy>
    19d8:	81 11       	cpse	r24, r1
    19da:	27 c0       	rjmp	.+78     	; 0x1a2a <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    19dc:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    19e0:	80 81       	ld	r24, Z
    19e2:	82 95       	swap	r24
    19e4:	88 0f       	add	r24, r24
    19e6:	80 7e       	andi	r24, 0xE0	; 224
    19e8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	96 95       	lsr	r25
    19f2:	87 95       	ror	r24
    19f4:	96 95       	lsr	r25
    19f6:	87 95       	ror	r24
    19f8:	96 95       	lsr	r25
    19fa:	87 95       	ror	r24
    19fc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1a00:	df 01       	movw	r26, r30
    1a02:	13 96       	adiw	r26, 0x03	; 3
    1a04:	9f 01       	movw	r18, r30
    1a06:	25 5f       	subi	r18, 0xF5	; 245
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1a0a:	ca ef       	ldi	r28, 0xFA	; 250
    1a0c:	d0 e0       	ldi	r29, 0x00	; 0
    1a0e:	9d 91       	ld	r25, X+
    1a10:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1a12:	a2 17       	cp	r26, r18
    1a14:	b3 07       	cpc	r27, r19
    1a16:	d9 f7       	brne	.-10     	; 0x1a0e <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	80 64       	ori	r24, 0x40	; 64
    1a22:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	43 c0       	rjmp	.+134    	; 0x1ab0 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1a2a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <tx_on>
    1a2e:	82 2f       	mov	r24, r18
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <tx_off>
    1a36:	83 1b       	sub	r24, r19
    1a38:	91 09       	sbc	r25, r1
    1a3a:	8f 77       	andi	r24, 0x7F	; 127
    1a3c:	99 27       	eor	r25, r25
    1a3e:	40 97       	sbiw	r24, 0x10	; 16
    1a40:	b1 f1       	breq	.+108    	; 0x1aae <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1a42:	a2 2f       	mov	r26, r18
    1a44:	af 70       	andi	r26, 0x0F	; 15
    1a46:	8b e0       	ldi	r24, 0x0B	; 11
    1a48:	a8 9f       	mul	r26, r24
    1a4a:	d0 01       	movw	r26, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	ed 01       	movw	r28, r26
    1a50:	c4 5f       	subi	r28, 0xF4	; 244
    1a52:	dd 4f       	sbci	r29, 0xFD	; 253
    1a54:	80 81       	ld	r24, Z
    1a56:	98 2f       	mov	r25, r24
    1a58:	92 95       	swap	r25
    1a5a:	99 0f       	add	r25, r25
    1a5c:	90 7e       	andi	r25, 0xE0	; 224
    1a5e:	88 81       	ld	r24, Y
    1a60:	8f 71       	andi	r24, 0x1F	; 31
    1a62:	89 2b       	or	r24, r25
    1a64:	88 83       	st	Y, r24
    1a66:	80 81       	ld	r24, Z
    1a68:	98 2f       	mov	r25, r24
    1a6a:	96 95       	lsr	r25
    1a6c:	96 95       	lsr	r25
    1a6e:	96 95       	lsr	r25
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	80 7e       	andi	r24, 0xE0	; 224
    1a74:	89 2b       	or	r24, r25
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	92 95       	swap	r25
    1a7c:	99 0f       	add	r25, r25
    1a7e:	90 7e       	andi	r25, 0xE0	; 224
    1a80:	8f 71       	andi	r24, 0x1F	; 31
    1a82:	89 2b       	or	r24, r25
    1a84:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	98 2f       	mov	r25, r24
    1a8a:	9f 70       	andi	r25, 0x0F	; 15
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	80 7f       	andi	r24, 0xF0	; 240
    1a90:	89 2b       	or	r24, r25
    1a92:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1a94:	a1 5f       	subi	r26, 0xF1	; 241
    1a96:	bd 4f       	sbci	r27, 0xFD	; 253
    1a98:	33 96       	adiw	r30, 0x03	; 3
    1a9a:	88 e0       	ldi	r24, 0x08	; 8
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	0d 92       	st	X+, r0
    1aa0:	8a 95       	dec	r24
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    1aa4:	2f 5f       	subi	r18, 0xFF	; 255
    1aa6:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <tx_on>
		result = true;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    1aae:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1ab0:	eb ed       	ldi	r30, 0xDB	; 219
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	90 81       	ld	r25, Z
    1ab6:	90 68       	ori	r25, 0x80	; 128
    1ab8:	90 83       	st	Z, r25

	return result;
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
    1ac0:	95 b1       	in	r25, 0x05	; 5
    1ac2:	89 2b       	or	r24, r25
    1ac4:	85 b9       	out	0x05, r24	; 5
    1ac6:	08 95       	ret

00001ac8 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
    1ac8:	84 b1       	in	r24, 0x04	; 4
    1aca:	80 6e       	ori	r24, 0xE0	; 224
    1acc:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
    1ace:	80 ee       	ldi	r24, 0xE0	; 224
    1ad0:	f7 cf       	rjmp	.-18     	; 0x1ac0 <rgbled_turn_off>
    1ad2:	08 95       	ret

00001ad4 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
    1ad4:	95 b1       	in	r25, 0x05	; 5
    1ad6:	80 95       	com	r24
    1ad8:	98 23       	and	r25, r24
    1ada:	95 b9       	out	0x05, r25	; 5
    1adc:	08 95       	ret

00001ade <rgbled_toggle>:
}

void rgbled_toggle(RgbLedColor_t color) {
	PORTB ^= color;
    1ade:	95 b1       	in	r25, 0x05	; 5
    1ae0:	89 27       	eor	r24, r25
    1ae2:	85 b9       	out	0x05, r24	; 5
    1ae4:	08 95       	ret

00001ae6 <spi_init>:
#define PIN_SCK PB1
#define PIN_SS PB0

void spi_init(spi_prescale_t clock_prescale) {
	// Set MOSI, SS, and SCK output, all others input
	DDR_SPI |= (1 << PIN_MOSI) | (1 << PIN_SCK) | (1 << PIN_SS);
    1ae6:	94 b1       	in	r25, 0x04	; 4
    1ae8:	97 60       	ori	r25, 0x07	; 7
    1aea:	94 b9       	out	0x04, r25	; 4
	
	uint8_t SPI2X_val = (uint8_t)((clock_prescale >> 2) & 0b001);
    1aec:	82 fb       	bst	r24, 2
    1aee:	99 27       	eor	r25, r25
    1af0:	90 f9       	bld	r25, 0
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0) | (1 << CPOL) | (1 << CPHA);
	SPSR = (SPI2X_val << SPI2X);
*/

	// Enable SPI, Master, selected prescaling, mode 0 (CPOL = CPHA = 0)
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0);
    1af2:	28 2f       	mov	r18, r24
    1af4:	22 70       	andi	r18, 0x02	; 2
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	80 65       	ori	r24, 0x50	; 80
    1afa:	82 2b       	or	r24, r18
    1afc:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA));
    1afe:	8c b5       	in	r24, 0x2c	; 44
    1b00:	83 7f       	andi	r24, 0xF3	; 243
    1b02:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPI2X_val << SPI2X);
    1b04:	9d bd       	out	0x2d, r25	; 45
    1b06:	08 95       	ret

00001b08 <spi_trancieve>:

}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	ec 01       	movw	r28, r24
	PORTB &= ~(1 << PIN_SS);
    1b0e:	28 98       	cbi	0x05, 0	; 5

	for (size_t i = 0; i < length; i++) {
    1b10:	41 15       	cp	r20, r1
    1b12:	51 05       	cpc	r21, r1
    1b14:	c1 f0       	breq	.+48     	; 0x1b46 <spi_trancieve+0x3e>
    1b16:	fb 01       	movw	r30, r22
    1b18:	dc 01       	movw	r26, r24
    1b1a:	46 0f       	add	r20, r22
    1b1c:	57 1f       	adc	r21, r23
		SPDR = (tx_buffer != NULL) ? tx_buffer[i] : 0xFF;
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	20 97       	sbiw	r28, 0x00	; 0
    1b22:	11 f0       	breq	.+4      	; 0x1b28 <spi_trancieve+0x20>
    1b24:	9c 91       	ld	r25, X
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <spi_trancieve+0x22>
    1b28:	98 2f       	mov	r25, r24
    1b2a:	9e bd       	out	0x2e, r25	; 46

		while(!(SPSR & (1 << SPIF)));
    1b2c:	0d b4       	in	r0, 0x2d	; 45
    1b2e:	07 fe       	sbrs	r0, 7
    1b30:	fd cf       	rjmp	.-6      	; 0x1b2c <spi_trancieve+0x24>
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
    1b32:	61 15       	cp	r22, r1
    1b34:	71 05       	cpc	r23, r1
    1b36:	11 f0       	breq	.+4      	; 0x1b3c <spi_trancieve+0x34>
    1b38:	9e b5       	in	r25, 0x2e	; 46
    1b3a:	90 83       	st	Z, r25
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
	PORTB &= ~(1 << PIN_SS);

	for (size_t i = 0; i < length; i++) {
    1b40:	e4 17       	cp	r30, r20
    1b42:	f5 07       	cpc	r31, r21
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <spi_trancieve+0x18>
		while(!(SPSR & (1 << SPIF)));
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
	}

	if (last_in_transmission) {
    1b46:	21 11       	cpse	r18, r1
		PORTB |= (1 << PIN_SS);
    1b48:	28 9a       	sbi	0x05, 0	; 5
	}
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	0b b6       	in	r0, 0x3b	; 59
    1b5c:	0f 92       	push	r0
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	af 93       	push	r26
    1b6e:	bf 93       	push	r27
    1b70:	ef 93       	push	r30
    1b72:	ff 93       	push	r31
    1b74:	ac ed       	ldi	r26, 0xDC	; 220
    1b76:	b2 e0       	ldi	r27, 0x02	; 2
    1b78:	ec eb       	ldi	r30, 0xBC	; 188
    1b7a:	f2 e0       	ldi	r31, 0x02	; 2
    1b7c:	2c ed       	ldi	r18, 0xDC	; 220
    1b7e:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
    1b80:	8d 91       	ld	r24, X+
    1b82:	88 23       	and	r24, r24
    1b84:	59 f0       	breq	.+22     	; 0x1b9c <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
    1b86:	40 81       	ld	r20, Z
    1b88:	51 81       	ldd	r21, Z+1	; 0x01
    1b8a:	62 81       	ldd	r22, Z+2	; 0x02
    1b8c:	73 81       	ldd	r23, Z+3	; 0x03
    1b8e:	50 5e       	subi	r21, 0xE0	; 224
    1b90:	6f 4f       	sbci	r22, 0xFF	; 255
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	40 83       	st	Z, r20
    1b96:	51 83       	std	Z+1, r21	; 0x01
    1b98:	62 83       	std	Z+2, r22	; 0x02
    1b9a:	73 83       	std	Z+3, r23	; 0x03
    1b9c:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
    1b9e:	e2 17       	cp	r30, r18
    1ba0:	f3 07       	cpc	r31, r19
    1ba2:	71 f7       	brne	.-36     	; 0x1b80 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
    1ba4:	ff 91       	pop	r31
    1ba6:	ef 91       	pop	r30
    1ba8:	bf 91       	pop	r27
    1baa:	af 91       	pop	r26
    1bac:	8f 91       	pop	r24
    1bae:	7f 91       	pop	r23
    1bb0:	6f 91       	pop	r22
    1bb2:	5f 91       	pop	r21
    1bb4:	4f 91       	pop	r20
    1bb6:	3f 91       	pop	r19
    1bb8:	2f 91       	pop	r18
    1bba:	0f 90       	pop	r0
    1bbc:	0b be       	out	0x3b, r0	; 59
    1bbe:	0f 90       	pop	r0
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	0f 90       	pop	r0
    1bc4:	1f 90       	pop	r1
    1bc6:	18 95       	reti

00001bc8 <__subsf3>:
    1bc8:	50 58       	subi	r21, 0x80	; 128

00001bca <__addsf3>:
    1bca:	bb 27       	eor	r27, r27
    1bcc:	aa 27       	eor	r26, r26
    1bce:	0e d0       	rcall	.+28     	; 0x1bec <__addsf3x>
    1bd0:	75 c1       	rjmp	.+746    	; 0x1ebc <__fp_round>
    1bd2:	66 d1       	rcall	.+716    	; 0x1ea0 <__fp_pscA>
    1bd4:	30 f0       	brcs	.+12     	; 0x1be2 <__addsf3+0x18>
    1bd6:	6b d1       	rcall	.+726    	; 0x1eae <__fp_pscB>
    1bd8:	20 f0       	brcs	.+8      	; 0x1be2 <__addsf3+0x18>
    1bda:	31 f4       	brne	.+12     	; 0x1be8 <__addsf3+0x1e>
    1bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1bde:	11 f4       	brne	.+4      	; 0x1be4 <__addsf3+0x1a>
    1be0:	1e f4       	brtc	.+6      	; 0x1be8 <__addsf3+0x1e>
    1be2:	5b c1       	rjmp	.+694    	; 0x1e9a <__fp_nan>
    1be4:	0e f4       	brtc	.+2      	; 0x1be8 <__addsf3+0x1e>
    1be6:	e0 95       	com	r30
    1be8:	e7 fb       	bst	r30, 7
    1bea:	51 c1       	rjmp	.+674    	; 0x1e8e <__fp_inf>

00001bec <__addsf3x>:
    1bec:	e9 2f       	mov	r30, r25
    1bee:	77 d1       	rcall	.+750    	; 0x1ede <__fp_split3>
    1bf0:	80 f3       	brcs	.-32     	; 0x1bd2 <__addsf3+0x8>
    1bf2:	ba 17       	cp	r27, r26
    1bf4:	62 07       	cpc	r22, r18
    1bf6:	73 07       	cpc	r23, r19
    1bf8:	84 07       	cpc	r24, r20
    1bfa:	95 07       	cpc	r25, r21
    1bfc:	18 f0       	brcs	.+6      	; 0x1c04 <__addsf3x+0x18>
    1bfe:	71 f4       	brne	.+28     	; 0x1c1c <__addsf3x+0x30>
    1c00:	9e f5       	brtc	.+102    	; 0x1c68 <__addsf3x+0x7c>
    1c02:	8f c1       	rjmp	.+798    	; 0x1f22 <__fp_zero>
    1c04:	0e f4       	brtc	.+2      	; 0x1c08 <__addsf3x+0x1c>
    1c06:	e0 95       	com	r30
    1c08:	0b 2e       	mov	r0, r27
    1c0a:	ba 2f       	mov	r27, r26
    1c0c:	a0 2d       	mov	r26, r0
    1c0e:	0b 01       	movw	r0, r22
    1c10:	b9 01       	movw	r22, r18
    1c12:	90 01       	movw	r18, r0
    1c14:	0c 01       	movw	r0, r24
    1c16:	ca 01       	movw	r24, r20
    1c18:	a0 01       	movw	r20, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	ff 27       	eor	r31, r31
    1c1e:	59 1b       	sub	r21, r25
    1c20:	99 f0       	breq	.+38     	; 0x1c48 <__addsf3x+0x5c>
    1c22:	59 3f       	cpi	r21, 0xF9	; 249
    1c24:	50 f4       	brcc	.+20     	; 0x1c3a <__addsf3x+0x4e>
    1c26:	50 3e       	cpi	r21, 0xE0	; 224
    1c28:	68 f1       	brcs	.+90     	; 0x1c84 <__addsf3x+0x98>
    1c2a:	1a 16       	cp	r1, r26
    1c2c:	f0 40       	sbci	r31, 0x00	; 0
    1c2e:	a2 2f       	mov	r26, r18
    1c30:	23 2f       	mov	r18, r19
    1c32:	34 2f       	mov	r19, r20
    1c34:	44 27       	eor	r20, r20
    1c36:	58 5f       	subi	r21, 0xF8	; 248
    1c38:	f3 cf       	rjmp	.-26     	; 0x1c20 <__addsf3x+0x34>
    1c3a:	46 95       	lsr	r20
    1c3c:	37 95       	ror	r19
    1c3e:	27 95       	ror	r18
    1c40:	a7 95       	ror	r26
    1c42:	f0 40       	sbci	r31, 0x00	; 0
    1c44:	53 95       	inc	r21
    1c46:	c9 f7       	brne	.-14     	; 0x1c3a <__addsf3x+0x4e>
    1c48:	7e f4       	brtc	.+30     	; 0x1c68 <__addsf3x+0x7c>
    1c4a:	1f 16       	cp	r1, r31
    1c4c:	ba 0b       	sbc	r27, r26
    1c4e:	62 0b       	sbc	r22, r18
    1c50:	73 0b       	sbc	r23, r19
    1c52:	84 0b       	sbc	r24, r20
    1c54:	ba f0       	brmi	.+46     	; 0x1c84 <__addsf3x+0x98>
    1c56:	91 50       	subi	r25, 0x01	; 1
    1c58:	a1 f0       	breq	.+40     	; 0x1c82 <__addsf3x+0x96>
    1c5a:	ff 0f       	add	r31, r31
    1c5c:	bb 1f       	adc	r27, r27
    1c5e:	66 1f       	adc	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	88 1f       	adc	r24, r24
    1c64:	c2 f7       	brpl	.-16     	; 0x1c56 <__addsf3x+0x6a>
    1c66:	0e c0       	rjmp	.+28     	; 0x1c84 <__addsf3x+0x98>
    1c68:	ba 0f       	add	r27, r26
    1c6a:	62 1f       	adc	r22, r18
    1c6c:	73 1f       	adc	r23, r19
    1c6e:	84 1f       	adc	r24, r20
    1c70:	48 f4       	brcc	.+18     	; 0x1c84 <__addsf3x+0x98>
    1c72:	87 95       	ror	r24
    1c74:	77 95       	ror	r23
    1c76:	67 95       	ror	r22
    1c78:	b7 95       	ror	r27
    1c7a:	f7 95       	ror	r31
    1c7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <__addsf3x+0x96>
    1c80:	b3 cf       	rjmp	.-154    	; 0x1be8 <__addsf3+0x1e>
    1c82:	93 95       	inc	r25
    1c84:	88 0f       	add	r24, r24
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <__addsf3x+0x9e>
    1c88:	99 27       	eor	r25, r25
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	97 95       	ror	r25
    1c8e:	87 95       	ror	r24
    1c90:	08 95       	ret

00001c92 <__cmpsf2>:
    1c92:	d9 d0       	rcall	.+434    	; 0x1e46 <__fp_cmp>
    1c94:	08 f4       	brcc	.+2      	; 0x1c98 <__cmpsf2+0x6>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	08 95       	ret

00001c9a <__divsf3>:
    1c9a:	0c d0       	rcall	.+24     	; 0x1cb4 <__divsf3x>
    1c9c:	0f c1       	rjmp	.+542    	; 0x1ebc <__fp_round>
    1c9e:	07 d1       	rcall	.+526    	; 0x1eae <__fp_pscB>
    1ca0:	40 f0       	brcs	.+16     	; 0x1cb2 <__divsf3+0x18>
    1ca2:	fe d0       	rcall	.+508    	; 0x1ea0 <__fp_pscA>
    1ca4:	30 f0       	brcs	.+12     	; 0x1cb2 <__divsf3+0x18>
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <__divsf3+0x16>
    1ca8:	5f 3f       	cpi	r21, 0xFF	; 255
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <__divsf3+0x18>
    1cac:	f0 c0       	rjmp	.+480    	; 0x1e8e <__fp_inf>
    1cae:	51 11       	cpse	r21, r1
    1cb0:	39 c1       	rjmp	.+626    	; 0x1f24 <__fp_szero>
    1cb2:	f3 c0       	rjmp	.+486    	; 0x1e9a <__fp_nan>

00001cb4 <__divsf3x>:
    1cb4:	14 d1       	rcall	.+552    	; 0x1ede <__fp_split3>
    1cb6:	98 f3       	brcs	.-26     	; 0x1c9e <__divsf3+0x4>

00001cb8 <__divsf3_pse>:
    1cb8:	99 23       	and	r25, r25
    1cba:	c9 f3       	breq	.-14     	; 0x1cae <__divsf3+0x14>
    1cbc:	55 23       	and	r21, r21
    1cbe:	b1 f3       	breq	.-20     	; 0x1cac <__divsf3+0x12>
    1cc0:	95 1b       	sub	r25, r21
    1cc2:	55 0b       	sbc	r21, r21
    1cc4:	bb 27       	eor	r27, r27
    1cc6:	aa 27       	eor	r26, r26
    1cc8:	62 17       	cp	r22, r18
    1cca:	73 07       	cpc	r23, r19
    1ccc:	84 07       	cpc	r24, r20
    1cce:	38 f0       	brcs	.+14     	; 0x1cde <__divsf3_pse+0x26>
    1cd0:	9f 5f       	subi	r25, 0xFF	; 255
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	44 1f       	adc	r20, r20
    1cda:	aa 1f       	adc	r26, r26
    1cdc:	a9 f3       	breq	.-22     	; 0x1cc8 <__divsf3_pse+0x10>
    1cde:	33 d0       	rcall	.+102    	; 0x1d46 <__divsf3_pse+0x8e>
    1ce0:	0e 2e       	mov	r0, r30
    1ce2:	3a f0       	brmi	.+14     	; 0x1cf2 <__divsf3_pse+0x3a>
    1ce4:	e0 e8       	ldi	r30, 0x80	; 128
    1ce6:	30 d0       	rcall	.+96     	; 0x1d48 <__divsf3_pse+0x90>
    1ce8:	91 50       	subi	r25, 0x01	; 1
    1cea:	50 40       	sbci	r21, 0x00	; 0
    1cec:	e6 95       	lsr	r30
    1cee:	00 1c       	adc	r0, r0
    1cf0:	ca f7       	brpl	.-14     	; 0x1ce4 <__divsf3_pse+0x2c>
    1cf2:	29 d0       	rcall	.+82     	; 0x1d46 <__divsf3_pse+0x8e>
    1cf4:	fe 2f       	mov	r31, r30
    1cf6:	27 d0       	rcall	.+78     	; 0x1d46 <__divsf3_pse+0x8e>
    1cf8:	66 0f       	add	r22, r22
    1cfa:	77 1f       	adc	r23, r23
    1cfc:	88 1f       	adc	r24, r24
    1cfe:	bb 1f       	adc	r27, r27
    1d00:	26 17       	cp	r18, r22
    1d02:	37 07       	cpc	r19, r23
    1d04:	48 07       	cpc	r20, r24
    1d06:	ab 07       	cpc	r26, r27
    1d08:	b0 e8       	ldi	r27, 0x80	; 128
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <__divsf3_pse+0x56>
    1d0c:	bb 0b       	sbc	r27, r27
    1d0e:	80 2d       	mov	r24, r0
    1d10:	bf 01       	movw	r22, r30
    1d12:	ff 27       	eor	r31, r31
    1d14:	93 58       	subi	r25, 0x83	; 131
    1d16:	5f 4f       	sbci	r21, 0xFF	; 255
    1d18:	2a f0       	brmi	.+10     	; 0x1d24 <__divsf3_pse+0x6c>
    1d1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d1c:	51 05       	cpc	r21, r1
    1d1e:	68 f0       	brcs	.+26     	; 0x1d3a <__divsf3_pse+0x82>
    1d20:	b6 c0       	rjmp	.+364    	; 0x1e8e <__fp_inf>
    1d22:	00 c1       	rjmp	.+512    	; 0x1f24 <__fp_szero>
    1d24:	5f 3f       	cpi	r21, 0xFF	; 255
    1d26:	ec f3       	brlt	.-6      	; 0x1d22 <__divsf3_pse+0x6a>
    1d28:	98 3e       	cpi	r25, 0xE8	; 232
    1d2a:	dc f3       	brlt	.-10     	; 0x1d22 <__divsf3_pse+0x6a>
    1d2c:	86 95       	lsr	r24
    1d2e:	77 95       	ror	r23
    1d30:	67 95       	ror	r22
    1d32:	b7 95       	ror	r27
    1d34:	f7 95       	ror	r31
    1d36:	9f 5f       	subi	r25, 0xFF	; 255
    1d38:	c9 f7       	brne	.-14     	; 0x1d2c <__divsf3_pse+0x74>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	91 1d       	adc	r25, r1
    1d3e:	96 95       	lsr	r25
    1d40:	87 95       	ror	r24
    1d42:	97 f9       	bld	r25, 7
    1d44:	08 95       	ret
    1d46:	e1 e0       	ldi	r30, 0x01	; 1
    1d48:	66 0f       	add	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	bb 1f       	adc	r27, r27
    1d50:	62 17       	cp	r22, r18
    1d52:	73 07       	cpc	r23, r19
    1d54:	84 07       	cpc	r24, r20
    1d56:	ba 07       	cpc	r27, r26
    1d58:	20 f0       	brcs	.+8      	; 0x1d62 <__divsf3_pse+0xaa>
    1d5a:	62 1b       	sub	r22, r18
    1d5c:	73 0b       	sbc	r23, r19
    1d5e:	84 0b       	sbc	r24, r20
    1d60:	ba 0b       	sbc	r27, r26
    1d62:	ee 1f       	adc	r30, r30
    1d64:	88 f7       	brcc	.-30     	; 0x1d48 <__divsf3_pse+0x90>
    1d66:	e0 95       	com	r30
    1d68:	08 95       	ret

00001d6a <__fixsfsi>:
    1d6a:	04 d0       	rcall	.+8      	; 0x1d74 <__fixunssfsi>
    1d6c:	68 94       	set
    1d6e:	b1 11       	cpse	r27, r1
    1d70:	d9 c0       	rjmp	.+434    	; 0x1f24 <__fp_szero>
    1d72:	08 95       	ret

00001d74 <__fixunssfsi>:
    1d74:	bc d0       	rcall	.+376    	; 0x1eee <__fp_splitA>
    1d76:	88 f0       	brcs	.+34     	; 0x1d9a <__fixunssfsi+0x26>
    1d78:	9f 57       	subi	r25, 0x7F	; 127
    1d7a:	90 f0       	brcs	.+36     	; 0x1da0 <__fixunssfsi+0x2c>
    1d7c:	b9 2f       	mov	r27, r25
    1d7e:	99 27       	eor	r25, r25
    1d80:	b7 51       	subi	r27, 0x17	; 23
    1d82:	a0 f0       	brcs	.+40     	; 0x1dac <__fixunssfsi+0x38>
    1d84:	d1 f0       	breq	.+52     	; 0x1dba <__fixunssfsi+0x46>
    1d86:	66 0f       	add	r22, r22
    1d88:	77 1f       	adc	r23, r23
    1d8a:	88 1f       	adc	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	1a f0       	brmi	.+6      	; 0x1d96 <__fixunssfsi+0x22>
    1d90:	ba 95       	dec	r27
    1d92:	c9 f7       	brne	.-14     	; 0x1d86 <__fixunssfsi+0x12>
    1d94:	12 c0       	rjmp	.+36     	; 0x1dba <__fixunssfsi+0x46>
    1d96:	b1 30       	cpi	r27, 0x01	; 1
    1d98:	81 f0       	breq	.+32     	; 0x1dba <__fixunssfsi+0x46>
    1d9a:	c3 d0       	rcall	.+390    	; 0x1f22 <__fp_zero>
    1d9c:	b1 e0       	ldi	r27, 0x01	; 1
    1d9e:	08 95       	ret
    1da0:	c0 c0       	rjmp	.+384    	; 0x1f22 <__fp_zero>
    1da2:	67 2f       	mov	r22, r23
    1da4:	78 2f       	mov	r23, r24
    1da6:	88 27       	eor	r24, r24
    1da8:	b8 5f       	subi	r27, 0xF8	; 248
    1daa:	39 f0       	breq	.+14     	; 0x1dba <__fixunssfsi+0x46>
    1dac:	b9 3f       	cpi	r27, 0xF9	; 249
    1dae:	cc f3       	brlt	.-14     	; 0x1da2 <__fixunssfsi+0x2e>
    1db0:	86 95       	lsr	r24
    1db2:	77 95       	ror	r23
    1db4:	67 95       	ror	r22
    1db6:	b3 95       	inc	r27
    1db8:	d9 f7       	brne	.-10     	; 0x1db0 <__fixunssfsi+0x3c>
    1dba:	3e f4       	brtc	.+14     	; 0x1dca <__fixunssfsi+0x56>
    1dbc:	90 95       	com	r25
    1dbe:	80 95       	com	r24
    1dc0:	70 95       	com	r23
    1dc2:	61 95       	neg	r22
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	08 95       	ret

00001dcc <__floatunsisf>:
    1dcc:	e8 94       	clt
    1dce:	09 c0       	rjmp	.+18     	; 0x1de2 <__floatsisf+0x12>

00001dd0 <__floatsisf>:
    1dd0:	97 fb       	bst	r25, 7
    1dd2:	3e f4       	brtc	.+14     	; 0x1de2 <__floatsisf+0x12>
    1dd4:	90 95       	com	r25
    1dd6:	80 95       	com	r24
    1dd8:	70 95       	com	r23
    1dda:	61 95       	neg	r22
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	8f 4f       	sbci	r24, 0xFF	; 255
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	99 23       	and	r25, r25
    1de4:	a9 f0       	breq	.+42     	; 0x1e10 <__floatsisf+0x40>
    1de6:	f9 2f       	mov	r31, r25
    1de8:	96 e9       	ldi	r25, 0x96	; 150
    1dea:	bb 27       	eor	r27, r27
    1dec:	93 95       	inc	r25
    1dee:	f6 95       	lsr	r31
    1df0:	87 95       	ror	r24
    1df2:	77 95       	ror	r23
    1df4:	67 95       	ror	r22
    1df6:	b7 95       	ror	r27
    1df8:	f1 11       	cpse	r31, r1
    1dfa:	f8 cf       	rjmp	.-16     	; 0x1dec <__floatsisf+0x1c>
    1dfc:	fa f4       	brpl	.+62     	; 0x1e3c <__floatsisf+0x6c>
    1dfe:	bb 0f       	add	r27, r27
    1e00:	11 f4       	brne	.+4      	; 0x1e06 <__floatsisf+0x36>
    1e02:	60 ff       	sbrs	r22, 0
    1e04:	1b c0       	rjmp	.+54     	; 0x1e3c <__floatsisf+0x6c>
    1e06:	6f 5f       	subi	r22, 0xFF	; 255
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	16 c0       	rjmp	.+44     	; 0x1e3c <__floatsisf+0x6c>
    1e10:	88 23       	and	r24, r24
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <__floatsisf+0x48>
    1e14:	96 e9       	ldi	r25, 0x96	; 150
    1e16:	11 c0       	rjmp	.+34     	; 0x1e3a <__floatsisf+0x6a>
    1e18:	77 23       	and	r23, r23
    1e1a:	21 f0       	breq	.+8      	; 0x1e24 <__floatsisf+0x54>
    1e1c:	9e e8       	ldi	r25, 0x8E	; 142
    1e1e:	87 2f       	mov	r24, r23
    1e20:	76 2f       	mov	r23, r22
    1e22:	05 c0       	rjmp	.+10     	; 0x1e2e <__floatsisf+0x5e>
    1e24:	66 23       	and	r22, r22
    1e26:	71 f0       	breq	.+28     	; 0x1e44 <__floatsisf+0x74>
    1e28:	96 e8       	ldi	r25, 0x86	; 134
    1e2a:	86 2f       	mov	r24, r22
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	2a f0       	brmi	.+10     	; 0x1e3c <__floatsisf+0x6c>
    1e32:	9a 95       	dec	r25
    1e34:	66 0f       	add	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	88 1f       	adc	r24, r24
    1e3a:	da f7       	brpl	.-10     	; 0x1e32 <__floatsisf+0x62>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	96 95       	lsr	r25
    1e40:	87 95       	ror	r24
    1e42:	97 f9       	bld	r25, 7
    1e44:	08 95       	ret

00001e46 <__fp_cmp>:
    1e46:	99 0f       	add	r25, r25
    1e48:	00 08       	sbc	r0, r0
    1e4a:	55 0f       	add	r21, r21
    1e4c:	aa 0b       	sbc	r26, r26
    1e4e:	e0 e8       	ldi	r30, 0x80	; 128
    1e50:	fe ef       	ldi	r31, 0xFE	; 254
    1e52:	16 16       	cp	r1, r22
    1e54:	17 06       	cpc	r1, r23
    1e56:	e8 07       	cpc	r30, r24
    1e58:	f9 07       	cpc	r31, r25
    1e5a:	c0 f0       	brcs	.+48     	; 0x1e8c <__fp_cmp+0x46>
    1e5c:	12 16       	cp	r1, r18
    1e5e:	13 06       	cpc	r1, r19
    1e60:	e4 07       	cpc	r30, r20
    1e62:	f5 07       	cpc	r31, r21
    1e64:	98 f0       	brcs	.+38     	; 0x1e8c <__fp_cmp+0x46>
    1e66:	62 1b       	sub	r22, r18
    1e68:	73 0b       	sbc	r23, r19
    1e6a:	84 0b       	sbc	r24, r20
    1e6c:	95 0b       	sbc	r25, r21
    1e6e:	39 f4       	brne	.+14     	; 0x1e7e <__fp_cmp+0x38>
    1e70:	0a 26       	eor	r0, r26
    1e72:	61 f0       	breq	.+24     	; 0x1e8c <__fp_cmp+0x46>
    1e74:	23 2b       	or	r18, r19
    1e76:	24 2b       	or	r18, r20
    1e78:	25 2b       	or	r18, r21
    1e7a:	21 f4       	brne	.+8      	; 0x1e84 <__fp_cmp+0x3e>
    1e7c:	08 95       	ret
    1e7e:	0a 26       	eor	r0, r26
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <__fp_cmp+0x3e>
    1e82:	a1 40       	sbci	r26, 0x01	; 1
    1e84:	a6 95       	lsr	r26
    1e86:	8f ef       	ldi	r24, 0xFF	; 255
    1e88:	81 1d       	adc	r24, r1
    1e8a:	81 1d       	adc	r24, r1
    1e8c:	08 95       	ret

00001e8e <__fp_inf>:
    1e8e:	97 f9       	bld	r25, 7
    1e90:	9f 67       	ori	r25, 0x7F	; 127
    1e92:	80 e8       	ldi	r24, 0x80	; 128
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	08 95       	ret

00001e9a <__fp_nan>:
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	80 ec       	ldi	r24, 0xC0	; 192
    1e9e:	08 95       	ret

00001ea0 <__fp_pscA>:
    1ea0:	00 24       	eor	r0, r0
    1ea2:	0a 94       	dec	r0
    1ea4:	16 16       	cp	r1, r22
    1ea6:	17 06       	cpc	r1, r23
    1ea8:	18 06       	cpc	r1, r24
    1eaa:	09 06       	cpc	r0, r25
    1eac:	08 95       	ret

00001eae <__fp_pscB>:
    1eae:	00 24       	eor	r0, r0
    1eb0:	0a 94       	dec	r0
    1eb2:	12 16       	cp	r1, r18
    1eb4:	13 06       	cpc	r1, r19
    1eb6:	14 06       	cpc	r1, r20
    1eb8:	05 06       	cpc	r0, r21
    1eba:	08 95       	ret

00001ebc <__fp_round>:
    1ebc:	09 2e       	mov	r0, r25
    1ebe:	03 94       	inc	r0
    1ec0:	00 0c       	add	r0, r0
    1ec2:	11 f4       	brne	.+4      	; 0x1ec8 <__fp_round+0xc>
    1ec4:	88 23       	and	r24, r24
    1ec6:	52 f0       	brmi	.+20     	; 0x1edc <__fp_round+0x20>
    1ec8:	bb 0f       	add	r27, r27
    1eca:	40 f4       	brcc	.+16     	; 0x1edc <__fp_round+0x20>
    1ecc:	bf 2b       	or	r27, r31
    1ece:	11 f4       	brne	.+4      	; 0x1ed4 <__fp_round+0x18>
    1ed0:	60 ff       	sbrs	r22, 0
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <__fp_round+0x20>
    1ed4:	6f 5f       	subi	r22, 0xFF	; 255
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	08 95       	ret

00001ede <__fp_split3>:
    1ede:	57 fd       	sbrc	r21, 7
    1ee0:	90 58       	subi	r25, 0x80	; 128
    1ee2:	44 0f       	add	r20, r20
    1ee4:	55 1f       	adc	r21, r21
    1ee6:	59 f0       	breq	.+22     	; 0x1efe <__fp_splitA+0x10>
    1ee8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eea:	71 f0       	breq	.+28     	; 0x1f08 <__fp_splitA+0x1a>
    1eec:	47 95       	ror	r20

00001eee <__fp_splitA>:
    1eee:	88 0f       	add	r24, r24
    1ef0:	97 fb       	bst	r25, 7
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <__fp_splitA+0x20>
    1ef6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef8:	79 f0       	breq	.+30     	; 0x1f18 <__fp_splitA+0x2a>
    1efa:	87 95       	ror	r24
    1efc:	08 95       	ret
    1efe:	12 16       	cp	r1, r18
    1f00:	13 06       	cpc	r1, r19
    1f02:	14 06       	cpc	r1, r20
    1f04:	55 1f       	adc	r21, r21
    1f06:	f2 cf       	rjmp	.-28     	; 0x1eec <__fp_split3+0xe>
    1f08:	46 95       	lsr	r20
    1f0a:	f1 df       	rcall	.-30     	; 0x1eee <__fp_splitA>
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <__fp_splitA+0x30>
    1f0e:	16 16       	cp	r1, r22
    1f10:	17 06       	cpc	r1, r23
    1f12:	18 06       	cpc	r1, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	f1 cf       	rjmp	.-30     	; 0x1efa <__fp_splitA+0xc>
    1f18:	86 95       	lsr	r24
    1f1a:	71 05       	cpc	r23, r1
    1f1c:	61 05       	cpc	r22, r1
    1f1e:	08 94       	sec
    1f20:	08 95       	ret

00001f22 <__fp_zero>:
    1f22:	e8 94       	clt

00001f24 <__fp_szero>:
    1f24:	bb 27       	eor	r27, r27
    1f26:	66 27       	eor	r22, r22
    1f28:	77 27       	eor	r23, r23
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	97 f9       	bld	r25, 7
    1f2e:	08 95       	ret

00001f30 <__gesf2>:
    1f30:	8a df       	rcall	.-236    	; 0x1e46 <__fp_cmp>
    1f32:	08 f4       	brcc	.+2      	; 0x1f36 <__gesf2+0x6>
    1f34:	8f ef       	ldi	r24, 0xFF	; 255
    1f36:	08 95       	ret

00001f38 <__mulsf3>:
    1f38:	0b d0       	rcall	.+22     	; 0x1f50 <__mulsf3x>
    1f3a:	c0 cf       	rjmp	.-128    	; 0x1ebc <__fp_round>
    1f3c:	b1 df       	rcall	.-158    	; 0x1ea0 <__fp_pscA>
    1f3e:	28 f0       	brcs	.+10     	; 0x1f4a <__mulsf3+0x12>
    1f40:	b6 df       	rcall	.-148    	; 0x1eae <__fp_pscB>
    1f42:	18 f0       	brcs	.+6      	; 0x1f4a <__mulsf3+0x12>
    1f44:	95 23       	and	r25, r21
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <__mulsf3+0x12>
    1f48:	a2 cf       	rjmp	.-188    	; 0x1e8e <__fp_inf>
    1f4a:	a7 cf       	rjmp	.-178    	; 0x1e9a <__fp_nan>
    1f4c:	11 24       	eor	r1, r1
    1f4e:	ea cf       	rjmp	.-44     	; 0x1f24 <__fp_szero>

00001f50 <__mulsf3x>:
    1f50:	c6 df       	rcall	.-116    	; 0x1ede <__fp_split3>
    1f52:	a0 f3       	brcs	.-24     	; 0x1f3c <__mulsf3+0x4>

00001f54 <__mulsf3_pse>:
    1f54:	95 9f       	mul	r25, r21
    1f56:	d1 f3       	breq	.-12     	; 0x1f4c <__mulsf3+0x14>
    1f58:	95 0f       	add	r25, r21
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	55 1f       	adc	r21, r21
    1f5e:	62 9f       	mul	r22, r18
    1f60:	f0 01       	movw	r30, r0
    1f62:	72 9f       	mul	r23, r18
    1f64:	bb 27       	eor	r27, r27
    1f66:	f0 0d       	add	r31, r0
    1f68:	b1 1d       	adc	r27, r1
    1f6a:	63 9f       	mul	r22, r19
    1f6c:	aa 27       	eor	r26, r26
    1f6e:	f0 0d       	add	r31, r0
    1f70:	b1 1d       	adc	r27, r1
    1f72:	aa 1f       	adc	r26, r26
    1f74:	64 9f       	mul	r22, r20
    1f76:	66 27       	eor	r22, r22
    1f78:	b0 0d       	add	r27, r0
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	66 1f       	adc	r22, r22
    1f7e:	82 9f       	mul	r24, r18
    1f80:	22 27       	eor	r18, r18
    1f82:	b0 0d       	add	r27, r0
    1f84:	a1 1d       	adc	r26, r1
    1f86:	62 1f       	adc	r22, r18
    1f88:	73 9f       	mul	r23, r19
    1f8a:	b0 0d       	add	r27, r0
    1f8c:	a1 1d       	adc	r26, r1
    1f8e:	62 1f       	adc	r22, r18
    1f90:	83 9f       	mul	r24, r19
    1f92:	a0 0d       	add	r26, r0
    1f94:	61 1d       	adc	r22, r1
    1f96:	22 1f       	adc	r18, r18
    1f98:	74 9f       	mul	r23, r20
    1f9a:	33 27       	eor	r19, r19
    1f9c:	a0 0d       	add	r26, r0
    1f9e:	61 1d       	adc	r22, r1
    1fa0:	23 1f       	adc	r18, r19
    1fa2:	84 9f       	mul	r24, r20
    1fa4:	60 0d       	add	r22, r0
    1fa6:	21 1d       	adc	r18, r1
    1fa8:	82 2f       	mov	r24, r18
    1faa:	76 2f       	mov	r23, r22
    1fac:	6a 2f       	mov	r22, r26
    1fae:	11 24       	eor	r1, r1
    1fb0:	9f 57       	subi	r25, 0x7F	; 127
    1fb2:	50 40       	sbci	r21, 0x00	; 0
    1fb4:	8a f0       	brmi	.+34     	; 0x1fd8 <__mulsf3_pse+0x84>
    1fb6:	e1 f0       	breq	.+56     	; 0x1ff0 <__mulsf3_pse+0x9c>
    1fb8:	88 23       	and	r24, r24
    1fba:	4a f0       	brmi	.+18     	; 0x1fce <__mulsf3_pse+0x7a>
    1fbc:	ee 0f       	add	r30, r30
    1fbe:	ff 1f       	adc	r31, r31
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	66 1f       	adc	r22, r22
    1fc4:	77 1f       	adc	r23, r23
    1fc6:	88 1f       	adc	r24, r24
    1fc8:	91 50       	subi	r25, 0x01	; 1
    1fca:	50 40       	sbci	r21, 0x00	; 0
    1fcc:	a9 f7       	brne	.-22     	; 0x1fb8 <__mulsf3_pse+0x64>
    1fce:	9e 3f       	cpi	r25, 0xFE	; 254
    1fd0:	51 05       	cpc	r21, r1
    1fd2:	70 f0       	brcs	.+28     	; 0x1ff0 <__mulsf3_pse+0x9c>
    1fd4:	5c cf       	rjmp	.-328    	; 0x1e8e <__fp_inf>
    1fd6:	a6 cf       	rjmp	.-180    	; 0x1f24 <__fp_szero>
    1fd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fda:	ec f3       	brlt	.-6      	; 0x1fd6 <__mulsf3_pse+0x82>
    1fdc:	98 3e       	cpi	r25, 0xE8	; 232
    1fde:	dc f3       	brlt	.-10     	; 0x1fd6 <__mulsf3_pse+0x82>
    1fe0:	86 95       	lsr	r24
    1fe2:	77 95       	ror	r23
    1fe4:	67 95       	ror	r22
    1fe6:	b7 95       	ror	r27
    1fe8:	f7 95       	ror	r31
    1fea:	e7 95       	ror	r30
    1fec:	9f 5f       	subi	r25, 0xFF	; 255
    1fee:	c1 f7       	brne	.-16     	; 0x1fe0 <__mulsf3_pse+0x8c>
    1ff0:	fe 2b       	or	r31, r30
    1ff2:	88 0f       	add	r24, r24
    1ff4:	91 1d       	adc	r25, r1
    1ff6:	96 95       	lsr	r25
    1ff8:	87 95       	ror	r24
    1ffa:	97 f9       	bld	r25, 7
    1ffc:	08 95       	ret

00001ffe <__tablejump2__>:
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	00 24       	eor	r0, r0
    2004:	00 1c       	adc	r0, r0
    2006:	0b be       	out	0x3b, r0	; 59
    2008:	07 90       	elpm	r0, Z+
    200a:	f6 91       	elpm	r31, Z
    200c:	e0 2d       	mov	r30, r0
    200e:	09 94       	ijmp

00002010 <printf>:
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	ae 01       	movw	r20, r28
    201a:	4b 5f       	subi	r20, 0xFB	; 251
    201c:	5f 4f       	sbci	r21, 0xFF	; 255
    201e:	fa 01       	movw	r30, r20
    2020:	61 91       	ld	r22, Z+
    2022:	71 91       	ld	r23, Z+
    2024:	af 01       	movw	r20, r30
    2026:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__iob+0x2>
    202a:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__iob+0x3>
    202e:	38 d0       	rcall	.+112    	; 0x20a0 <vfprintf>
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <putchar>:
    2036:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <__iob+0x2>
    203a:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <__iob+0x3>
    203e:	43 c2       	rjmp	.+1158   	; 0x24c6 <fputc>

00002040 <puts>:
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <__iob+0x2>
    204c:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <__iob+0x3>
    2050:	23 81       	ldd	r18, Z+3	; 0x03
    2052:	21 ff       	sbrs	r18, 1
    2054:	1b c0       	rjmp	.+54     	; 0x208c <puts+0x4c>
    2056:	8c 01       	movw	r16, r24
    2058:	d0 e0       	ldi	r29, 0x00	; 0
    205a:	c0 e0       	ldi	r28, 0x00	; 0
    205c:	f8 01       	movw	r30, r16
    205e:	81 91       	ld	r24, Z+
    2060:	8f 01       	movw	r16, r30
    2062:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <__iob+0x2>
    2066:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <__iob+0x3>
    206a:	db 01       	movw	r26, r22
    206c:	18 96       	adiw	r26, 0x08	; 8
    206e:	ed 91       	ld	r30, X+
    2070:	fc 91       	ld	r31, X
    2072:	19 97       	sbiw	r26, 0x09	; 9
    2074:	88 23       	and	r24, r24
    2076:	31 f0       	breq	.+12     	; 0x2084 <puts+0x44>
    2078:	09 95       	icall
    207a:	89 2b       	or	r24, r25
    207c:	79 f3       	breq	.-34     	; 0x205c <puts+0x1c>
    207e:	df ef       	ldi	r29, 0xFF	; 255
    2080:	cf ef       	ldi	r28, 0xFF	; 255
    2082:	ec cf       	rjmp	.-40     	; 0x205c <puts+0x1c>
    2084:	8a e0       	ldi	r24, 0x0A	; 10
    2086:	09 95       	icall
    2088:	89 2b       	or	r24, r25
    208a:	19 f0       	breq	.+6      	; 0x2092 <puts+0x52>
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <puts+0x56>
    2092:	8d 2f       	mov	r24, r29
    2094:	9c 2f       	mov	r25, r28
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	08 95       	ret

000020a0 <vfprintf>:
    20a0:	2f 92       	push	r2
    20a2:	3f 92       	push	r3
    20a4:	4f 92       	push	r4
    20a6:	5f 92       	push	r5
    20a8:	6f 92       	push	r6
    20aa:	7f 92       	push	r7
    20ac:	8f 92       	push	r8
    20ae:	9f 92       	push	r9
    20b0:	af 92       	push	r10
    20b2:	bf 92       	push	r11
    20b4:	cf 92       	push	r12
    20b6:	df 92       	push	r13
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	2b 97       	sbiw	r28, 0x0b	; 11
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	6c 01       	movw	r12, r24
    20d6:	7b 01       	movw	r14, r22
    20d8:	8a 01       	movw	r16, r20
    20da:	fc 01       	movw	r30, r24
    20dc:	17 82       	std	Z+7, r1	; 0x07
    20de:	16 82       	std	Z+6, r1	; 0x06
    20e0:	83 81       	ldd	r24, Z+3	; 0x03
    20e2:	81 ff       	sbrs	r24, 1
    20e4:	bf c1       	rjmp	.+894    	; 0x2464 <vfprintf+0x3c4>
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	3c 01       	movw	r6, r24
    20ec:	f6 01       	movw	r30, r12
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	f7 01       	movw	r30, r14
    20f2:	93 fd       	sbrc	r25, 3
    20f4:	85 91       	lpm	r24, Z+
    20f6:	93 ff       	sbrs	r25, 3
    20f8:	81 91       	ld	r24, Z+
    20fa:	7f 01       	movw	r14, r30
    20fc:	88 23       	and	r24, r24
    20fe:	09 f4       	brne	.+2      	; 0x2102 <vfprintf+0x62>
    2100:	ad c1       	rjmp	.+858    	; 0x245c <vfprintf+0x3bc>
    2102:	85 32       	cpi	r24, 0x25	; 37
    2104:	39 f4       	brne	.+14     	; 0x2114 <vfprintf+0x74>
    2106:	93 fd       	sbrc	r25, 3
    2108:	85 91       	lpm	r24, Z+
    210a:	93 ff       	sbrs	r25, 3
    210c:	81 91       	ld	r24, Z+
    210e:	7f 01       	movw	r14, r30
    2110:	85 32       	cpi	r24, 0x25	; 37
    2112:	21 f4       	brne	.+8      	; 0x211c <vfprintf+0x7c>
    2114:	b6 01       	movw	r22, r12
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	d6 d1       	rcall	.+940    	; 0x24c6 <fputc>
    211a:	e8 cf       	rjmp	.-48     	; 0x20ec <vfprintf+0x4c>
    211c:	91 2c       	mov	r9, r1
    211e:	21 2c       	mov	r2, r1
    2120:	31 2c       	mov	r3, r1
    2122:	ff e1       	ldi	r31, 0x1F	; 31
    2124:	f3 15       	cp	r31, r3
    2126:	d8 f0       	brcs	.+54     	; 0x215e <vfprintf+0xbe>
    2128:	8b 32       	cpi	r24, 0x2B	; 43
    212a:	79 f0       	breq	.+30     	; 0x214a <vfprintf+0xaa>
    212c:	38 f4       	brcc	.+14     	; 0x213c <vfprintf+0x9c>
    212e:	80 32       	cpi	r24, 0x20	; 32
    2130:	79 f0       	breq	.+30     	; 0x2150 <vfprintf+0xb0>
    2132:	83 32       	cpi	r24, 0x23	; 35
    2134:	a1 f4       	brne	.+40     	; 0x215e <vfprintf+0xbe>
    2136:	23 2d       	mov	r18, r3
    2138:	20 61       	ori	r18, 0x10	; 16
    213a:	1d c0       	rjmp	.+58     	; 0x2176 <vfprintf+0xd6>
    213c:	8d 32       	cpi	r24, 0x2D	; 45
    213e:	61 f0       	breq	.+24     	; 0x2158 <vfprintf+0xb8>
    2140:	80 33       	cpi	r24, 0x30	; 48
    2142:	69 f4       	brne	.+26     	; 0x215e <vfprintf+0xbe>
    2144:	23 2d       	mov	r18, r3
    2146:	21 60       	ori	r18, 0x01	; 1
    2148:	16 c0       	rjmp	.+44     	; 0x2176 <vfprintf+0xd6>
    214a:	83 2d       	mov	r24, r3
    214c:	82 60       	ori	r24, 0x02	; 2
    214e:	38 2e       	mov	r3, r24
    2150:	e3 2d       	mov	r30, r3
    2152:	e4 60       	ori	r30, 0x04	; 4
    2154:	3e 2e       	mov	r3, r30
    2156:	2a c0       	rjmp	.+84     	; 0x21ac <vfprintf+0x10c>
    2158:	f3 2d       	mov	r31, r3
    215a:	f8 60       	ori	r31, 0x08	; 8
    215c:	1d c0       	rjmp	.+58     	; 0x2198 <vfprintf+0xf8>
    215e:	37 fc       	sbrc	r3, 7
    2160:	2d c0       	rjmp	.+90     	; 0x21bc <vfprintf+0x11c>
    2162:	20 ed       	ldi	r18, 0xD0	; 208
    2164:	28 0f       	add	r18, r24
    2166:	2a 30       	cpi	r18, 0x0A	; 10
    2168:	40 f0       	brcs	.+16     	; 0x217a <vfprintf+0xda>
    216a:	8e 32       	cpi	r24, 0x2E	; 46
    216c:	b9 f4       	brne	.+46     	; 0x219c <vfprintf+0xfc>
    216e:	36 fc       	sbrc	r3, 6
    2170:	75 c1       	rjmp	.+746    	; 0x245c <vfprintf+0x3bc>
    2172:	23 2d       	mov	r18, r3
    2174:	20 64       	ori	r18, 0x40	; 64
    2176:	32 2e       	mov	r3, r18
    2178:	19 c0       	rjmp	.+50     	; 0x21ac <vfprintf+0x10c>
    217a:	36 fe       	sbrs	r3, 6
    217c:	06 c0       	rjmp	.+12     	; 0x218a <vfprintf+0xea>
    217e:	8a e0       	ldi	r24, 0x0A	; 10
    2180:	98 9e       	mul	r9, r24
    2182:	20 0d       	add	r18, r0
    2184:	11 24       	eor	r1, r1
    2186:	92 2e       	mov	r9, r18
    2188:	11 c0       	rjmp	.+34     	; 0x21ac <vfprintf+0x10c>
    218a:	ea e0       	ldi	r30, 0x0A	; 10
    218c:	2e 9e       	mul	r2, r30
    218e:	20 0d       	add	r18, r0
    2190:	11 24       	eor	r1, r1
    2192:	22 2e       	mov	r2, r18
    2194:	f3 2d       	mov	r31, r3
    2196:	f0 62       	ori	r31, 0x20	; 32
    2198:	3f 2e       	mov	r3, r31
    219a:	08 c0       	rjmp	.+16     	; 0x21ac <vfprintf+0x10c>
    219c:	8c 36       	cpi	r24, 0x6C	; 108
    219e:	21 f4       	brne	.+8      	; 0x21a8 <vfprintf+0x108>
    21a0:	83 2d       	mov	r24, r3
    21a2:	80 68       	ori	r24, 0x80	; 128
    21a4:	38 2e       	mov	r3, r24
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <vfprintf+0x10c>
    21a8:	88 36       	cpi	r24, 0x68	; 104
    21aa:	41 f4       	brne	.+16     	; 0x21bc <vfprintf+0x11c>
    21ac:	f7 01       	movw	r30, r14
    21ae:	93 fd       	sbrc	r25, 3
    21b0:	85 91       	lpm	r24, Z+
    21b2:	93 ff       	sbrs	r25, 3
    21b4:	81 91       	ld	r24, Z+
    21b6:	7f 01       	movw	r14, r30
    21b8:	81 11       	cpse	r24, r1
    21ba:	b3 cf       	rjmp	.-154    	; 0x2122 <vfprintf+0x82>
    21bc:	98 2f       	mov	r25, r24
    21be:	9f 7d       	andi	r25, 0xDF	; 223
    21c0:	95 54       	subi	r25, 0x45	; 69
    21c2:	93 30       	cpi	r25, 0x03	; 3
    21c4:	28 f4       	brcc	.+10     	; 0x21d0 <vfprintf+0x130>
    21c6:	0c 5f       	subi	r16, 0xFC	; 252
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ca:	9f e3       	ldi	r25, 0x3F	; 63
    21cc:	99 83       	std	Y+1, r25	; 0x01
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <vfprintf+0x14a>
    21d0:	83 36       	cpi	r24, 0x63	; 99
    21d2:	31 f0       	breq	.+12     	; 0x21e0 <vfprintf+0x140>
    21d4:	83 37       	cpi	r24, 0x73	; 115
    21d6:	71 f0       	breq	.+28     	; 0x21f4 <vfprintf+0x154>
    21d8:	83 35       	cpi	r24, 0x53	; 83
    21da:	09 f0       	breq	.+2      	; 0x21de <vfprintf+0x13e>
    21dc:	55 c0       	rjmp	.+170    	; 0x2288 <vfprintf+0x1e8>
    21de:	20 c0       	rjmp	.+64     	; 0x2220 <vfprintf+0x180>
    21e0:	f8 01       	movw	r30, r16
    21e2:	80 81       	ld	r24, Z
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	0e 5f       	subi	r16, 0xFE	; 254
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	88 24       	eor	r8, r8
    21ec:	83 94       	inc	r8
    21ee:	91 2c       	mov	r9, r1
    21f0:	53 01       	movw	r10, r6
    21f2:	12 c0       	rjmp	.+36     	; 0x2218 <vfprintf+0x178>
    21f4:	28 01       	movw	r4, r16
    21f6:	f2 e0       	ldi	r31, 0x02	; 2
    21f8:	4f 0e       	add	r4, r31
    21fa:	51 1c       	adc	r5, r1
    21fc:	f8 01       	movw	r30, r16
    21fe:	a0 80       	ld	r10, Z
    2200:	b1 80       	ldd	r11, Z+1	; 0x01
    2202:	36 fe       	sbrs	r3, 6
    2204:	03 c0       	rjmp	.+6      	; 0x220c <vfprintf+0x16c>
    2206:	69 2d       	mov	r22, r9
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <vfprintf+0x170>
    220c:	6f ef       	ldi	r22, 0xFF	; 255
    220e:	7f ef       	ldi	r23, 0xFF	; 255
    2210:	c5 01       	movw	r24, r10
    2212:	4e d1       	rcall	.+668    	; 0x24b0 <strnlen>
    2214:	4c 01       	movw	r8, r24
    2216:	82 01       	movw	r16, r4
    2218:	f3 2d       	mov	r31, r3
    221a:	ff 77       	andi	r31, 0x7F	; 127
    221c:	3f 2e       	mov	r3, r31
    221e:	15 c0       	rjmp	.+42     	; 0x224a <vfprintf+0x1aa>
    2220:	28 01       	movw	r4, r16
    2222:	22 e0       	ldi	r18, 0x02	; 2
    2224:	42 0e       	add	r4, r18
    2226:	51 1c       	adc	r5, r1
    2228:	f8 01       	movw	r30, r16
    222a:	a0 80       	ld	r10, Z
    222c:	b1 80       	ldd	r11, Z+1	; 0x01
    222e:	36 fe       	sbrs	r3, 6
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <vfprintf+0x198>
    2232:	69 2d       	mov	r22, r9
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <vfprintf+0x19c>
    2238:	6f ef       	ldi	r22, 0xFF	; 255
    223a:	7f ef       	ldi	r23, 0xFF	; 255
    223c:	c5 01       	movw	r24, r10
    223e:	2d d1       	rcall	.+602    	; 0x249a <strnlen_P>
    2240:	4c 01       	movw	r8, r24
    2242:	f3 2d       	mov	r31, r3
    2244:	f0 68       	ori	r31, 0x80	; 128
    2246:	3f 2e       	mov	r3, r31
    2248:	82 01       	movw	r16, r4
    224a:	33 fc       	sbrc	r3, 3
    224c:	19 c0       	rjmp	.+50     	; 0x2280 <vfprintf+0x1e0>
    224e:	82 2d       	mov	r24, r2
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	88 16       	cp	r8, r24
    2254:	99 06       	cpc	r9, r25
    2256:	a0 f4       	brcc	.+40     	; 0x2280 <vfprintf+0x1e0>
    2258:	b6 01       	movw	r22, r12
    225a:	80 e2       	ldi	r24, 0x20	; 32
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	33 d1       	rcall	.+614    	; 0x24c6 <fputc>
    2260:	2a 94       	dec	r2
    2262:	f5 cf       	rjmp	.-22     	; 0x224e <vfprintf+0x1ae>
    2264:	f5 01       	movw	r30, r10
    2266:	37 fc       	sbrc	r3, 7
    2268:	85 91       	lpm	r24, Z+
    226a:	37 fe       	sbrs	r3, 7
    226c:	81 91       	ld	r24, Z+
    226e:	5f 01       	movw	r10, r30
    2270:	b6 01       	movw	r22, r12
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	28 d1       	rcall	.+592    	; 0x24c6 <fputc>
    2276:	21 10       	cpse	r2, r1
    2278:	2a 94       	dec	r2
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	82 1a       	sub	r8, r18
    227e:	91 08       	sbc	r9, r1
    2280:	81 14       	cp	r8, r1
    2282:	91 04       	cpc	r9, r1
    2284:	79 f7       	brne	.-34     	; 0x2264 <vfprintf+0x1c4>
    2286:	e1 c0       	rjmp	.+450    	; 0x244a <vfprintf+0x3aa>
    2288:	84 36       	cpi	r24, 0x64	; 100
    228a:	11 f0       	breq	.+4      	; 0x2290 <vfprintf+0x1f0>
    228c:	89 36       	cpi	r24, 0x69	; 105
    228e:	39 f5       	brne	.+78     	; 0x22de <vfprintf+0x23e>
    2290:	f8 01       	movw	r30, r16
    2292:	37 fe       	sbrs	r3, 7
    2294:	07 c0       	rjmp	.+14     	; 0x22a4 <vfprintf+0x204>
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	0c 5f       	subi	r16, 0xFC	; 252
    22a0:	1f 4f       	sbci	r17, 0xFF	; 255
    22a2:	08 c0       	rjmp	.+16     	; 0x22b4 <vfprintf+0x214>
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	07 2e       	mov	r0, r23
    22aa:	00 0c       	add	r0, r0
    22ac:	88 0b       	sbc	r24, r24
    22ae:	99 0b       	sbc	r25, r25
    22b0:	0e 5f       	subi	r16, 0xFE	; 254
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	f3 2d       	mov	r31, r3
    22b6:	ff 76       	andi	r31, 0x6F	; 111
    22b8:	3f 2e       	mov	r3, r31
    22ba:	97 ff       	sbrs	r25, 7
    22bc:	09 c0       	rjmp	.+18     	; 0x22d0 <vfprintf+0x230>
    22be:	90 95       	com	r25
    22c0:	80 95       	com	r24
    22c2:	70 95       	com	r23
    22c4:	61 95       	neg	r22
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	f0 68       	ori	r31, 0x80	; 128
    22ce:	3f 2e       	mov	r3, r31
    22d0:	2a e0       	ldi	r18, 0x0A	; 10
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	a3 01       	movw	r20, r6
    22d6:	33 d1       	rcall	.+614    	; 0x253e <__ultoa_invert>
    22d8:	88 2e       	mov	r8, r24
    22da:	86 18       	sub	r8, r6
    22dc:	44 c0       	rjmp	.+136    	; 0x2366 <vfprintf+0x2c6>
    22de:	85 37       	cpi	r24, 0x75	; 117
    22e0:	31 f4       	brne	.+12     	; 0x22ee <vfprintf+0x24e>
    22e2:	23 2d       	mov	r18, r3
    22e4:	2f 7e       	andi	r18, 0xEF	; 239
    22e6:	b2 2e       	mov	r11, r18
    22e8:	2a e0       	ldi	r18, 0x0A	; 10
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	25 c0       	rjmp	.+74     	; 0x2338 <vfprintf+0x298>
    22ee:	93 2d       	mov	r25, r3
    22f0:	99 7f       	andi	r25, 0xF9	; 249
    22f2:	b9 2e       	mov	r11, r25
    22f4:	8f 36       	cpi	r24, 0x6F	; 111
    22f6:	c1 f0       	breq	.+48     	; 0x2328 <vfprintf+0x288>
    22f8:	18 f4       	brcc	.+6      	; 0x2300 <vfprintf+0x260>
    22fa:	88 35       	cpi	r24, 0x58	; 88
    22fc:	79 f0       	breq	.+30     	; 0x231c <vfprintf+0x27c>
    22fe:	ae c0       	rjmp	.+348    	; 0x245c <vfprintf+0x3bc>
    2300:	80 37       	cpi	r24, 0x70	; 112
    2302:	19 f0       	breq	.+6      	; 0x230a <vfprintf+0x26a>
    2304:	88 37       	cpi	r24, 0x78	; 120
    2306:	21 f0       	breq	.+8      	; 0x2310 <vfprintf+0x270>
    2308:	a9 c0       	rjmp	.+338    	; 0x245c <vfprintf+0x3bc>
    230a:	e9 2f       	mov	r30, r25
    230c:	e0 61       	ori	r30, 0x10	; 16
    230e:	be 2e       	mov	r11, r30
    2310:	b4 fe       	sbrs	r11, 4
    2312:	0d c0       	rjmp	.+26     	; 0x232e <vfprintf+0x28e>
    2314:	fb 2d       	mov	r31, r11
    2316:	f4 60       	ori	r31, 0x04	; 4
    2318:	bf 2e       	mov	r11, r31
    231a:	09 c0       	rjmp	.+18     	; 0x232e <vfprintf+0x28e>
    231c:	34 fe       	sbrs	r3, 4
    231e:	0a c0       	rjmp	.+20     	; 0x2334 <vfprintf+0x294>
    2320:	29 2f       	mov	r18, r25
    2322:	26 60       	ori	r18, 0x06	; 6
    2324:	b2 2e       	mov	r11, r18
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <vfprintf+0x294>
    2328:	28 e0       	ldi	r18, 0x08	; 8
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <vfprintf+0x298>
    232e:	20 e1       	ldi	r18, 0x10	; 16
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <vfprintf+0x298>
    2334:	20 e1       	ldi	r18, 0x10	; 16
    2336:	32 e0       	ldi	r19, 0x02	; 2
    2338:	f8 01       	movw	r30, r16
    233a:	b7 fe       	sbrs	r11, 7
    233c:	07 c0       	rjmp	.+14     	; 0x234c <vfprintf+0x2ac>
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	0c 5f       	subi	r16, 0xFC	; 252
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	06 c0       	rjmp	.+12     	; 0x2358 <vfprintf+0x2b8>
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 5f       	subi	r16, 0xFE	; 254
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	a3 01       	movw	r20, r6
    235a:	f1 d0       	rcall	.+482    	; 0x253e <__ultoa_invert>
    235c:	88 2e       	mov	r8, r24
    235e:	86 18       	sub	r8, r6
    2360:	fb 2d       	mov	r31, r11
    2362:	ff 77       	andi	r31, 0x7F	; 127
    2364:	3f 2e       	mov	r3, r31
    2366:	36 fe       	sbrs	r3, 6
    2368:	0d c0       	rjmp	.+26     	; 0x2384 <vfprintf+0x2e4>
    236a:	23 2d       	mov	r18, r3
    236c:	2e 7f       	andi	r18, 0xFE	; 254
    236e:	a2 2e       	mov	r10, r18
    2370:	89 14       	cp	r8, r9
    2372:	58 f4       	brcc	.+22     	; 0x238a <vfprintf+0x2ea>
    2374:	34 fe       	sbrs	r3, 4
    2376:	0b c0       	rjmp	.+22     	; 0x238e <vfprintf+0x2ee>
    2378:	32 fc       	sbrc	r3, 2
    237a:	09 c0       	rjmp	.+18     	; 0x238e <vfprintf+0x2ee>
    237c:	83 2d       	mov	r24, r3
    237e:	8e 7e       	andi	r24, 0xEE	; 238
    2380:	a8 2e       	mov	r10, r24
    2382:	05 c0       	rjmp	.+10     	; 0x238e <vfprintf+0x2ee>
    2384:	b8 2c       	mov	r11, r8
    2386:	a3 2c       	mov	r10, r3
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <vfprintf+0x2f0>
    238a:	b8 2c       	mov	r11, r8
    238c:	01 c0       	rjmp	.+2      	; 0x2390 <vfprintf+0x2f0>
    238e:	b9 2c       	mov	r11, r9
    2390:	a4 fe       	sbrs	r10, 4
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <vfprintf+0x312>
    2394:	fe 01       	movw	r30, r28
    2396:	e8 0d       	add	r30, r8
    2398:	f1 1d       	adc	r31, r1
    239a:	80 81       	ld	r24, Z
    239c:	80 33       	cpi	r24, 0x30	; 48
    239e:	21 f4       	brne	.+8      	; 0x23a8 <vfprintf+0x308>
    23a0:	9a 2d       	mov	r25, r10
    23a2:	99 7e       	andi	r25, 0xE9	; 233
    23a4:	a9 2e       	mov	r10, r25
    23a6:	09 c0       	rjmp	.+18     	; 0x23ba <vfprintf+0x31a>
    23a8:	a2 fe       	sbrs	r10, 2
    23aa:	06 c0       	rjmp	.+12     	; 0x23b8 <vfprintf+0x318>
    23ac:	b3 94       	inc	r11
    23ae:	b3 94       	inc	r11
    23b0:	04 c0       	rjmp	.+8      	; 0x23ba <vfprintf+0x31a>
    23b2:	8a 2d       	mov	r24, r10
    23b4:	86 78       	andi	r24, 0x86	; 134
    23b6:	09 f0       	breq	.+2      	; 0x23ba <vfprintf+0x31a>
    23b8:	b3 94       	inc	r11
    23ba:	a3 fc       	sbrc	r10, 3
    23bc:	10 c0       	rjmp	.+32     	; 0x23de <vfprintf+0x33e>
    23be:	a0 fe       	sbrs	r10, 0
    23c0:	06 c0       	rjmp	.+12     	; 0x23ce <vfprintf+0x32e>
    23c2:	b2 14       	cp	r11, r2
    23c4:	80 f4       	brcc	.+32     	; 0x23e6 <vfprintf+0x346>
    23c6:	28 0c       	add	r2, r8
    23c8:	92 2c       	mov	r9, r2
    23ca:	9b 18       	sub	r9, r11
    23cc:	0d c0       	rjmp	.+26     	; 0x23e8 <vfprintf+0x348>
    23ce:	b2 14       	cp	r11, r2
    23d0:	58 f4       	brcc	.+22     	; 0x23e8 <vfprintf+0x348>
    23d2:	b6 01       	movw	r22, r12
    23d4:	80 e2       	ldi	r24, 0x20	; 32
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	76 d0       	rcall	.+236    	; 0x24c6 <fputc>
    23da:	b3 94       	inc	r11
    23dc:	f8 cf       	rjmp	.-16     	; 0x23ce <vfprintf+0x32e>
    23de:	b2 14       	cp	r11, r2
    23e0:	18 f4       	brcc	.+6      	; 0x23e8 <vfprintf+0x348>
    23e2:	2b 18       	sub	r2, r11
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <vfprintf+0x34a>
    23e6:	98 2c       	mov	r9, r8
    23e8:	21 2c       	mov	r2, r1
    23ea:	a4 fe       	sbrs	r10, 4
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <vfprintf+0x36c>
    23ee:	b6 01       	movw	r22, r12
    23f0:	80 e3       	ldi	r24, 0x30	; 48
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	68 d0       	rcall	.+208    	; 0x24c6 <fputc>
    23f6:	a2 fe       	sbrs	r10, 2
    23f8:	16 c0       	rjmp	.+44     	; 0x2426 <vfprintf+0x386>
    23fa:	a1 fc       	sbrc	r10, 1
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <vfprintf+0x364>
    23fe:	88 e7       	ldi	r24, 0x78	; 120
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <vfprintf+0x368>
    2404:	88 e5       	ldi	r24, 0x58	; 88
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	b6 01       	movw	r22, r12
    240a:	0c c0       	rjmp	.+24     	; 0x2424 <vfprintf+0x384>
    240c:	8a 2d       	mov	r24, r10
    240e:	86 78       	andi	r24, 0x86	; 134
    2410:	51 f0       	breq	.+20     	; 0x2426 <vfprintf+0x386>
    2412:	a1 fe       	sbrs	r10, 1
    2414:	02 c0       	rjmp	.+4      	; 0x241a <vfprintf+0x37a>
    2416:	8b e2       	ldi	r24, 0x2B	; 43
    2418:	01 c0       	rjmp	.+2      	; 0x241c <vfprintf+0x37c>
    241a:	80 e2       	ldi	r24, 0x20	; 32
    241c:	a7 fc       	sbrc	r10, 7
    241e:	8d e2       	ldi	r24, 0x2D	; 45
    2420:	b6 01       	movw	r22, r12
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	50 d0       	rcall	.+160    	; 0x24c6 <fputc>
    2426:	89 14       	cp	r8, r9
    2428:	30 f4       	brcc	.+12     	; 0x2436 <vfprintf+0x396>
    242a:	b6 01       	movw	r22, r12
    242c:	80 e3       	ldi	r24, 0x30	; 48
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	4a d0       	rcall	.+148    	; 0x24c6 <fputc>
    2432:	9a 94       	dec	r9
    2434:	f8 cf       	rjmp	.-16     	; 0x2426 <vfprintf+0x386>
    2436:	8a 94       	dec	r8
    2438:	f3 01       	movw	r30, r6
    243a:	e8 0d       	add	r30, r8
    243c:	f1 1d       	adc	r31, r1
    243e:	80 81       	ld	r24, Z
    2440:	b6 01       	movw	r22, r12
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	40 d0       	rcall	.+128    	; 0x24c6 <fputc>
    2446:	81 10       	cpse	r8, r1
    2448:	f6 cf       	rjmp	.-20     	; 0x2436 <vfprintf+0x396>
    244a:	22 20       	and	r2, r2
    244c:	09 f4       	brne	.+2      	; 0x2450 <vfprintf+0x3b0>
    244e:	4e ce       	rjmp	.-868    	; 0x20ec <vfprintf+0x4c>
    2450:	b6 01       	movw	r22, r12
    2452:	80 e2       	ldi	r24, 0x20	; 32
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	37 d0       	rcall	.+110    	; 0x24c6 <fputc>
    2458:	2a 94       	dec	r2
    245a:	f7 cf       	rjmp	.-18     	; 0x244a <vfprintf+0x3aa>
    245c:	f6 01       	movw	r30, r12
    245e:	86 81       	ldd	r24, Z+6	; 0x06
    2460:	97 81       	ldd	r25, Z+7	; 0x07
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <vfprintf+0x3c8>
    2464:	8f ef       	ldi	r24, 0xFF	; 255
    2466:	9f ef       	ldi	r25, 0xFF	; 255
    2468:	2b 96       	adiw	r28, 0x0b	; 11
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	bf 90       	pop	r11
    2486:	af 90       	pop	r10
    2488:	9f 90       	pop	r9
    248a:	8f 90       	pop	r8
    248c:	7f 90       	pop	r7
    248e:	6f 90       	pop	r6
    2490:	5f 90       	pop	r5
    2492:	4f 90       	pop	r4
    2494:	3f 90       	pop	r3
    2496:	2f 90       	pop	r2
    2498:	08 95       	ret

0000249a <strnlen_P>:
    249a:	fc 01       	movw	r30, r24
    249c:	05 90       	lpm	r0, Z+
    249e:	61 50       	subi	r22, 0x01	; 1
    24a0:	70 40       	sbci	r23, 0x00	; 0
    24a2:	01 10       	cpse	r0, r1
    24a4:	d8 f7       	brcc	.-10     	; 0x249c <strnlen_P+0x2>
    24a6:	80 95       	com	r24
    24a8:	90 95       	com	r25
    24aa:	8e 0f       	add	r24, r30
    24ac:	9f 1f       	adc	r25, r31
    24ae:	08 95       	ret

000024b0 <strnlen>:
    24b0:	fc 01       	movw	r30, r24
    24b2:	61 50       	subi	r22, 0x01	; 1
    24b4:	70 40       	sbci	r23, 0x00	; 0
    24b6:	01 90       	ld	r0, Z+
    24b8:	01 10       	cpse	r0, r1
    24ba:	d8 f7       	brcc	.-10     	; 0x24b2 <strnlen+0x2>
    24bc:	80 95       	com	r24
    24be:	90 95       	com	r25
    24c0:	8e 0f       	add	r24, r30
    24c2:	9f 1f       	adc	r25, r31
    24c4:	08 95       	ret

000024c6 <fputc>:
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	fb 01       	movw	r30, r22
    24d0:	23 81       	ldd	r18, Z+3	; 0x03
    24d2:	21 fd       	sbrc	r18, 1
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <fputc+0x16>
    24d6:	8f ef       	ldi	r24, 0xFF	; 255
    24d8:	9f ef       	ldi	r25, 0xFF	; 255
    24da:	2c c0       	rjmp	.+88     	; 0x2534 <fputc+0x6e>
    24dc:	22 ff       	sbrs	r18, 2
    24de:	16 c0       	rjmp	.+44     	; 0x250c <fputc+0x46>
    24e0:	46 81       	ldd	r20, Z+6	; 0x06
    24e2:	57 81       	ldd	r21, Z+7	; 0x07
    24e4:	24 81       	ldd	r18, Z+4	; 0x04
    24e6:	35 81       	ldd	r19, Z+5	; 0x05
    24e8:	42 17       	cp	r20, r18
    24ea:	53 07       	cpc	r21, r19
    24ec:	44 f4       	brge	.+16     	; 0x24fe <fputc+0x38>
    24ee:	a0 81       	ld	r26, Z
    24f0:	b1 81       	ldd	r27, Z+1	; 0x01
    24f2:	9d 01       	movw	r18, r26
    24f4:	2f 5f       	subi	r18, 0xFF	; 255
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	31 83       	std	Z+1, r19	; 0x01
    24fa:	20 83       	st	Z, r18
    24fc:	8c 93       	st	X, r24
    24fe:	26 81       	ldd	r18, Z+6	; 0x06
    2500:	37 81       	ldd	r19, Z+7	; 0x07
    2502:	2f 5f       	subi	r18, 0xFF	; 255
    2504:	3f 4f       	sbci	r19, 0xFF	; 255
    2506:	37 83       	std	Z+7, r19	; 0x07
    2508:	26 83       	std	Z+6, r18	; 0x06
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <fputc+0x6e>
    250c:	8b 01       	movw	r16, r22
    250e:	ec 01       	movw	r28, r24
    2510:	fb 01       	movw	r30, r22
    2512:	00 84       	ldd	r0, Z+8	; 0x08
    2514:	f1 85       	ldd	r31, Z+9	; 0x09
    2516:	e0 2d       	mov	r30, r0
    2518:	09 95       	icall
    251a:	89 2b       	or	r24, r25
    251c:	e1 f6       	brne	.-72     	; 0x24d6 <fputc+0x10>
    251e:	d8 01       	movw	r26, r16
    2520:	16 96       	adiw	r26, 0x06	; 6
    2522:	8d 91       	ld	r24, X+
    2524:	9c 91       	ld	r25, X
    2526:	17 97       	sbiw	r26, 0x07	; 7
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	17 96       	adiw	r26, 0x07	; 7
    252c:	9c 93       	st	X, r25
    252e:	8e 93       	st	-X, r24
    2530:	16 97       	sbiw	r26, 0x06	; 6
    2532:	ce 01       	movw	r24, r28
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	08 95       	ret

0000253e <__ultoa_invert>:
    253e:	fa 01       	movw	r30, r20
    2540:	aa 27       	eor	r26, r26
    2542:	28 30       	cpi	r18, 0x08	; 8
    2544:	51 f1       	breq	.+84     	; 0x259a <__ultoa_invert+0x5c>
    2546:	20 31       	cpi	r18, 0x10	; 16
    2548:	81 f1       	breq	.+96     	; 0x25aa <__ultoa_invert+0x6c>
    254a:	e8 94       	clt
    254c:	6f 93       	push	r22
    254e:	6e 7f       	andi	r22, 0xFE	; 254
    2550:	6e 5f       	subi	r22, 0xFE	; 254
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	8f 4f       	sbci	r24, 0xFF	; 255
    2556:	9f 4f       	sbci	r25, 0xFF	; 255
    2558:	af 4f       	sbci	r26, 0xFF	; 255
    255a:	b1 e0       	ldi	r27, 0x01	; 1
    255c:	3e d0       	rcall	.+124    	; 0x25da <__ultoa_invert+0x9c>
    255e:	b4 e0       	ldi	r27, 0x04	; 4
    2560:	3c d0       	rcall	.+120    	; 0x25da <__ultoa_invert+0x9c>
    2562:	67 0f       	add	r22, r23
    2564:	78 1f       	adc	r23, r24
    2566:	89 1f       	adc	r24, r25
    2568:	9a 1f       	adc	r25, r26
    256a:	a1 1d       	adc	r26, r1
    256c:	68 0f       	add	r22, r24
    256e:	79 1f       	adc	r23, r25
    2570:	8a 1f       	adc	r24, r26
    2572:	91 1d       	adc	r25, r1
    2574:	a1 1d       	adc	r26, r1
    2576:	6a 0f       	add	r22, r26
    2578:	71 1d       	adc	r23, r1
    257a:	81 1d       	adc	r24, r1
    257c:	91 1d       	adc	r25, r1
    257e:	a1 1d       	adc	r26, r1
    2580:	20 d0       	rcall	.+64     	; 0x25c2 <__ultoa_invert+0x84>
    2582:	09 f4       	brne	.+2      	; 0x2586 <__ultoa_invert+0x48>
    2584:	68 94       	set
    2586:	3f 91       	pop	r19
    2588:	2a e0       	ldi	r18, 0x0A	; 10
    258a:	26 9f       	mul	r18, r22
    258c:	11 24       	eor	r1, r1
    258e:	30 19       	sub	r19, r0
    2590:	30 5d       	subi	r19, 0xD0	; 208
    2592:	31 93       	st	Z+, r19
    2594:	de f6       	brtc	.-74     	; 0x254c <__ultoa_invert+0xe>
    2596:	cf 01       	movw	r24, r30
    2598:	08 95       	ret
    259a:	46 2f       	mov	r20, r22
    259c:	47 70       	andi	r20, 0x07	; 7
    259e:	40 5d       	subi	r20, 0xD0	; 208
    25a0:	41 93       	st	Z+, r20
    25a2:	b3 e0       	ldi	r27, 0x03	; 3
    25a4:	0f d0       	rcall	.+30     	; 0x25c4 <__ultoa_invert+0x86>
    25a6:	c9 f7       	brne	.-14     	; 0x259a <__ultoa_invert+0x5c>
    25a8:	f6 cf       	rjmp	.-20     	; 0x2596 <__ultoa_invert+0x58>
    25aa:	46 2f       	mov	r20, r22
    25ac:	4f 70       	andi	r20, 0x0F	; 15
    25ae:	40 5d       	subi	r20, 0xD0	; 208
    25b0:	4a 33       	cpi	r20, 0x3A	; 58
    25b2:	18 f0       	brcs	.+6      	; 0x25ba <__ultoa_invert+0x7c>
    25b4:	49 5d       	subi	r20, 0xD9	; 217
    25b6:	31 fd       	sbrc	r19, 1
    25b8:	40 52       	subi	r20, 0x20	; 32
    25ba:	41 93       	st	Z+, r20
    25bc:	02 d0       	rcall	.+4      	; 0x25c2 <__ultoa_invert+0x84>
    25be:	a9 f7       	brne	.-22     	; 0x25aa <__ultoa_invert+0x6c>
    25c0:	ea cf       	rjmp	.-44     	; 0x2596 <__ultoa_invert+0x58>
    25c2:	b4 e0       	ldi	r27, 0x04	; 4
    25c4:	a6 95       	lsr	r26
    25c6:	97 95       	ror	r25
    25c8:	87 95       	ror	r24
    25ca:	77 95       	ror	r23
    25cc:	67 95       	ror	r22
    25ce:	ba 95       	dec	r27
    25d0:	c9 f7       	brne	.-14     	; 0x25c4 <__ultoa_invert+0x86>
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	61 05       	cpc	r22, r1
    25d6:	71 05       	cpc	r23, r1
    25d8:	08 95       	ret
    25da:	9b 01       	movw	r18, r22
    25dc:	ac 01       	movw	r20, r24
    25de:	0a 2e       	mov	r0, r26
    25e0:	06 94       	lsr	r0
    25e2:	57 95       	ror	r21
    25e4:	47 95       	ror	r20
    25e6:	37 95       	ror	r19
    25e8:	27 95       	ror	r18
    25ea:	ba 95       	dec	r27
    25ec:	c9 f7       	brne	.-14     	; 0x25e0 <__ultoa_invert+0xa2>
    25ee:	62 0f       	add	r22, r18
    25f0:	73 1f       	adc	r23, r19
    25f2:	84 1f       	adc	r24, r20
    25f4:	95 1f       	adc	r25, r21
    25f6:	a0 1d       	adc	r26, r0
    25f8:	08 95       	ret

000025fa <_exit>:
    25fa:	f8 94       	cli

000025fc <__stop_program>:
    25fc:	ff cf       	rjmp	.-2      	; 0x25fc <__stop_program>
