
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001e6a  00001efe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027c  0080012c  0080012c  00001f2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b78  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184b  00000000  00000000  00006f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002461  00000000  00000000  000087e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d9c  00000000  00000000  0000ac44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001486  00000000  00000000  0000b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a19  00000000  00000000  0000ce66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0001087f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	e5 c5       	rjmp	.+3018   	; 0xbe4 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c4       	rjmp	.+2546   	; 0xa24 <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c4       	rjmp	.+2230   	; 0x8f8 <__vector_16>
      42:	00 00       	nop
      44:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__vector_17>
      48:	38 c7       	rjmp	.+3696   	; 0xeba <__vector_18>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c2       	rjmp	.+1266   	; 0x548 <__vector_21>
      56:	00 00       	nop
      58:	59 c2       	rjmp	.+1202   	; 0x50c <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9c c2       	rjmp	.+1336   	; 0x5ba <__vector_32>
      82:	00 00       	nop
      84:	7c c2       	rjmp	.+1272   	; 0x57e <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	2f 07       	cpc	r18, r31
      96:	34 07       	cpc	r19, r20
      98:	3a 07       	cpc	r19, r26
      9a:	40 07       	cpc	r20, r16
      9c:	46 07       	cpc	r20, r22
      9e:	4b 07       	cpc	r20, r27
      a0:	51 07       	cpc	r21, r17
      a2:	57 07       	cpc	r21, r23

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e6       	ldi	r30, 0x6A	; 106
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	ac 32       	cpi	r26, 0x2C	; 44
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	ac e2       	ldi	r26, 0x2C	; 44
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a8 3a       	cpi	r26, 0xA8	; 168
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	39 d3       	rcall	.+1650   	; 0x74e <main>
      dc:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <f32_Integrator>
      e6:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <f32_Integrator+0x1>
      ea:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <f32_Integrator+0x2>
      ee:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     11c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     120:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     124:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     128:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4e eb       	ldi	r20, 0xBE	; 190
     132:	52 e4       	ldi	r21, 0x42	; 66
     134:	c7 01       	movw	r24, r14
     136:	b6 01       	movw	r22, r12
     138:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__gesf2>
     13c:	88 23       	and	r24, r24
     13e:	54 f4       	brge	.+20     	; 0x154 <controller+0x60>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	48 e4       	ldi	r20, 0x48	; 72
     146:	52 e4       	ldi	r21, 0x42	; 66
     148:	c7 01       	movw	r24, r14
     14a:	b6 01       	movw	r22, r12
     14c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__cmpsf2>
     150:	18 16       	cp	r1, r24
     152:	24 f0       	brlt	.+8      	; 0x15c <controller+0x68>
	{
		b_saturation = true ;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
     15a:	02 c0       	rjmp	.+4      	; 0x160 <controller+0x6c>
		} else {
		b_saturation = false;
     15c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
	}
	
	f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     160:	a3 01       	movw	r20, r6
     162:	92 01       	movw	r18, r4
     164:	c5 01       	movw	r24, r10
     166:	b4 01       	movw	r22, r8
     168:	0e 94 25 0a 	call	0x144a	; 0x144a <__subsf3>
     16c:	6b 01       	movw	r12, r22
     16e:	7c 01       	movw	r14, r24
     170:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <f32_CurrentDelta>
     174:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <f32_CurrentDelta+0x1>
     178:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <f32_CurrentDelta+0x2>
     17c:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <f32_CurrentDelta+0x3>
	
	if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) intgral windup protection
     180:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
     184:	81 11       	cpse	r24, r1
     186:	1c c0       	rjmp	.+56     	; 0x1c0 <controller+0xcc>
	{
		f32_Integrator+=f32_CurrentDelta*TimeStep ;
     188:	2a e0       	ldi	r18, 0x0A	; 10
     18a:	37 ed       	ldi	r19, 0xD7	; 215
     18c:	43 e2       	ldi	r20, 0x23	; 35
     18e:	5c e3       	ldi	r21, 0x3C	; 60
     190:	c7 01       	movw	r24, r14
     192:	b6 01       	movw	r22, r12
     194:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__mulsf3>
     198:	9b 01       	movw	r18, r22
     19a:	ac 01       	movw	r20, r24
     19c:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <f32_Integrator>
     1a0:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <f32_Integrator+0x1>
     1a4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <f32_Integrator+0x2>
     1a8:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <f32_Integrator+0x3>
     1ac:	0e 94 26 0a 	call	0x144c	; 0x144c <__addsf3>
     1b0:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <f32_Integrator>
     1b4:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <f32_Integrator+0x1>
     1b8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <f32_Integrator+0x2>
     1bc:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <f32_Integrator+0x3>
	}
	
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
	f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c0:	23 e3       	ldi	r18, 0x33	; 51
     1c2:	33 e3       	ldi	r19, 0x33	; 51
     1c4:	43 e7       	ldi	r20, 0x73	; 115
     1c6:	52 e4       	ldi	r21, 0x42	; 66
     1c8:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <f32_Integrator>
     1cc:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <f32_Integrator+0x1>
     1d0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <f32_Integrator+0x2>
     1d4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <f32_Integrator+0x3>
     1d8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__mulsf3>
     1dc:	4b 01       	movw	r8, r22
     1de:	5c 01       	movw	r10, r24
     1e0:	29 ef       	ldi	r18, 0xF9	; 249
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 e7       	ldi	r20, 0x79	; 121
     1e6:	5f e3       	ldi	r21, 0x3F	; 63
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__mulsf3>
     1f0:	9b 01       	movw	r18, r22
     1f2:	ac 01       	movw	r20, r24
     1f4:	c5 01       	movw	r24, r10
     1f6:	b4 01       	movw	r22, r8
     1f8:	0e 94 26 0a 	call	0x144c	; 0x144c <__addsf3>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	48 e4       	ldi	r20, 0x48	; 72
     202:	52 e4       	ldi	r21, 0x42	; 66
     204:	0e 94 26 0a 	call	0x144c	; 0x144c <__addsf3>
     208:	6b 01       	movw	r12, r22
     20a:	7c 01       	movw	r14, r24
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4e eb       	ldi	r20, 0xBE	; 190
     222:	52 e4       	ldi	r21, 0x42	; 66
     224:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__gesf2>
     228:	18 16       	cp	r1, r24
     22a:	6c f4       	brge	.+26     	; 0x246 <controller+0x152>
	{
		f32_DutyCycleCmd = 95;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	ae eb       	ldi	r26, 0xBE	; 190
     232:	b2 e4       	ldi	r27, 0x42	; 66
     234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     238:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     23c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     240:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     244:	16 c0       	rjmp	.+44     	; 0x272 <controller+0x17e>
	}
	
	if (f32_DutyCycleCmd < 50)
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	48 e4       	ldi	r20, 0x48	; 72
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__cmpsf2>
     256:	88 23       	and	r24, r24
     258:	64 f4       	brge	.+24     	; 0x272 <controller+0x17e>
	{
		f32_DutyCycleCmd = 50;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a8 e4       	ldi	r26, 0x48	; 72
     260:	b2 e4       	ldi	r27, 0x42	; 66
     262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     26a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     26e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
     272:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     276:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	48 ec       	ldi	r20, 0xC8	; 200
     280:	52 e4       	ldi	r21, 0x42	; 66
     282:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     286:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     28e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     292:	0e 94 8e 0a 	call	0x151c	; 0x151c <__divsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	be 01       	movw	r22, r28
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 27 0b 	call	0x164e	; 0x164e <__floatunsisf>
     2a4:	9b 01       	movw	r18, r22
     2a6:	ac 01       	movw	r20, r24
     2a8:	c7 01       	movw	r24, r14
     2aa:	b6 01       	movw	r22, r12
     2ac:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__mulsf3>
     2b0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fixsfsi>
     2b4:	e8 e9       	ldi	r30, 0x98	; 152
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	71 83       	std	Z+1, r23	; 0x01
     2ba:	60 83       	st	Z, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     2c4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ;
     2c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2d8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__fixunssfsi>
     2dc:	f8 01       	movw	r30, r16
     2de:	60 83       	st	Z, r22
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	7f 90       	pop	r7
     2fa:	6f 90       	pop	r6
     2fc:	5f 90       	pop	r5
     2fe:	4f 90       	pop	r4
     300:	08 95       	ret

00000302 <drivers_init>:

void drivers_init()
{
	DDRB |= (1 << PB4) ;
     302:	24 9a       	sbi	0x04, 4	; 4
     304:	08 95       	ret

00000306 <drivers>:
}
void drivers(uint8_t b_state)
{
	if (b_state)
     306:	88 23       	and	r24, r24
     308:	11 f0       	breq	.+4      	; 0x30e <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     30a:	2c 9a       	sbi	0x05, 4	; 5
     30c:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     30e:	2c 98       	cbi	0x05, 4	; 5
     310:	08 95       	ret

00000312 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     312:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     314:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     316:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     318:	ea e6       	ldi	r30, 0x6A	; 106
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	8c 60       	ori	r24, 0x0C	; 12
     320:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     322:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     324:	ed 9a       	sbi	0x1d, 5	; 29
     326:	08 95       	ret

00000328 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     328:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <tx0_Head>
     32c:	9f 5f       	subi	r25, 0xFF	; 255
     32e:	9f 71       	andi	r25, 0x1F	; 31
     330:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <tx0_Tail>
     334:	92 17       	cp	r25, r18
     336:	e1 f3       	breq	.-8      	; 0x330 <uart0_putc+0x8>
     338:	e9 2f       	mov	r30, r25
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	e4 5c       	subi	r30, 0xC4	; 196
     33e:	fc 4f       	sbci	r31, 0xFC	; 252
     340:	80 83       	st	Z, r24
     342:	2f b7       	in	r18, 0x3f	; 63
     344:	f8 94       	cli
     346:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <tx0_Head>
     34a:	e1 ec       	ldi	r30, 0xC1	; 193
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	80 62       	ori	r24, 0x20	; 32
     352:	80 83       	st	Z, r24
     354:	2f bf       	out	0x3f, r18	; 63
     356:	08 95       	ret

00000358 <uart0_flush>:
     358:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <tx0_Tail>
     35c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <tx0_Head>
     360:	98 13       	cpse	r25, r24
     362:	fa cf       	rjmp	.-12     	; 0x358 <uart0_flush>
     364:	08 95       	ret

00000366 <uart1_putc>:
     366:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <tx1_Head>
     36a:	9f 5f       	subi	r25, 0xFF	; 255
     36c:	9f 71       	andi	r25, 0x1F	; 31
     36e:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <tx1_Tail>
     372:	92 17       	cp	r25, r18
     374:	e1 f3       	breq	.-8      	; 0x36e <uart1_putc+0x8>
     376:	e9 2f       	mov	r30, r25
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	e9 50       	subi	r30, 0x09	; 9
     37c:	fd 4f       	sbci	r31, 0xFD	; 253
     37e:	80 83       	st	Z, r24
     380:	2f b7       	in	r18, 0x3f	; 63
     382:	f8 94       	cli
     384:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <tx1_Head>
     388:	e9 ec       	ldi	r30, 0xC9	; 201
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	2f bf       	out	0x3f, r18	; 63
     394:	08 95       	ret

00000396 <uart_putchar>:
     396:	cf 93       	push	r28
     398:	c8 2f       	mov	r28, r24
     39a:	fb 01       	movw	r30, r22
     39c:	84 85       	ldd	r24, Z+12	; 0x0c
     39e:	95 85       	ldd	r25, Z+13	; 0x0d
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	39 f0       	breq	.+14     	; 0x3b2 <uart_putchar+0x1c>
     3a4:	ca 30       	cpi	r28, 0x0A	; 10
     3a6:	11 f4       	brne	.+4      	; 0x3ac <uart_putchar+0x16>
     3a8:	8d e0       	ldi	r24, 0x0D	; 13
     3aa:	be df       	rcall	.-132    	; 0x328 <uart0_putc>
     3ac:	8c 2f       	mov	r24, r28
     3ae:	bc df       	rcall	.-136    	; 0x328 <uart0_putc>
     3b0:	06 c0       	rjmp	.+12     	; 0x3be <uart_putchar+0x28>
     3b2:	ca 30       	cpi	r28, 0x0A	; 10
     3b4:	11 f4       	brne	.+4      	; 0x3ba <uart_putchar+0x24>
     3b6:	8d e0       	ldi	r24, 0x0D	; 13
     3b8:	d6 df       	rcall	.-84     	; 0x366 <uart1_putc>
     3ba:	8c 2f       	mov	r24, r28
     3bc:	d4 df       	rcall	.-88     	; 0x366 <uart1_putc>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <uart0_getc>:
     3c6:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <rx0_Tail>
     3ca:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <rx0_Head>
     3ce:	89 17       	cp	r24, r25
     3d0:	59 f0       	breq	.+22     	; 0x3e8 <uart0_getc+0x22>
     3d2:	8f 5f       	subi	r24, 0xFF	; 255
     3d4:	98 2f       	mov	r25, r24
     3d6:	9f 71       	andi	r25, 0x1F	; 31
     3d8:	e9 2f       	mov	r30, r25
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	ec 52       	subi	r30, 0x2C	; 44
     3de:	fd 4f       	sbci	r31, 0xFD	; 253
     3e0:	80 81       	ld	r24, Z
     3e2:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <rx0_Tail>
     3e6:	08 95       	ret
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	08 95       	ret

000003ec <uart0_getlnToFirstWhiteSpace>:
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	7c 01       	movw	r14, r24
     3fa:	16 2f       	mov	r17, r22
     3fc:	e4 df       	rcall	.-56     	; 0x3c6 <uart0_getc>
     3fe:	f7 01       	movw	r30, r14
     400:	80 83       	st	Z, r24
     402:	81 32       	cpi	r24, 0x21	; 33
     404:	d8 f3       	brcs	.-10     	; 0x3fc <uart0_getlnToFirstWhiteSpace+0x10>
     406:	e7 01       	movw	r28, r14
     408:	21 96       	adiw	r28, 0x01	; 1
     40a:	12 30       	cpi	r17, 0x02	; 2
     40c:	c1 f0       	breq	.+48     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     40e:	13 50       	subi	r17, 0x03	; 3
     410:	81 2f       	mov	r24, r17
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 96       	adiw	r24, 0x02	; 2
     416:	87 01       	movw	r16, r14
     418:	08 0f       	add	r16, r24
     41a:	19 1f       	adc	r17, r25
     41c:	d4 df       	rcall	.-88     	; 0x3c6 <uart0_getc>
     41e:	88 83       	st	Y, r24
     420:	88 23       	and	r24, r24
     422:	e1 f3       	breq	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	8d 30       	cpi	r24, 0x0D	; 13
     426:	21 f4       	brne	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     428:	ce df       	rcall	.-100    	; 0x3c6 <uart0_getc>
     42a:	88 23       	and	r24, r24
     42c:	e9 f3       	breq	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     42e:	07 c0       	rjmp	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     430:	81 32       	cpi	r24, 0x21	; 33
     432:	28 f0       	brcs	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	21 96       	adiw	r28, 0x01	; 1
     436:	0c 17       	cp	r16, r28
     438:	1d 07       	cpc	r17, r29
     43a:	81 f7       	brne	.-32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     43c:	e8 01       	movw	r28, r16
     43e:	18 82       	st	Y, r1
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	08 95       	ret

0000044e <uart0_getint>:
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	27 97       	sbiw	r28, 0x07	; 7
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	67 e0       	ldi	r22, 0x07	; 7
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	c1 df       	rcall	.-126    	; 0x3ec <uart0_getlnToFirstWhiteSpace>
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	0e 94 49 0c 	call	0x1892	; 0x1892 <atoi>
     472:	27 96       	adiw	r28, 0x07	; 7
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <uart0_getData>:
     484:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <rx0_Tail>
     488:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <rx0_Head>
     48c:	89 17       	cp	r24, r25
     48e:	61 f0       	breq	.+24     	; 0x4a8 <uart0_getData+0x24>
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	8f 71       	andi	r24, 0x1F	; 31
     494:	e8 2f       	mov	r30, r24
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	ec 52       	subi	r30, 0x2C	; 44
     49a:	fd 4f       	sbci	r31, 0xFD	; 253
     49c:	90 81       	ld	r25, Z
     49e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <rx0_Tail>
     4a2:	89 2f       	mov	r24, r25
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	08 95       	ret
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	9f ef       	ldi	r25, 0xFF	; 255
     4ac:	08 95       	ret

000004ae <uart1_getData>:
     4ae:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <rx1_Tail>
     4b2:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <rx1_Head>
     4b6:	89 17       	cp	r24, r25
     4b8:	61 f0       	breq	.+24     	; 0x4d2 <uart1_getData+0x24>
     4ba:	8f 5f       	subi	r24, 0xFF	; 255
     4bc:	8f 71       	andi	r24, 0x1F	; 31
     4be:	e8 2f       	mov	r30, r24
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	e8 5e       	subi	r30, 0xE8	; 232
     4c4:	fc 4f       	sbci	r31, 0xFC	; 252
     4c6:	90 81       	ld	r25, Z
     4c8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <rx1_Tail>
     4cc:	89 2f       	mov	r24, r25
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	08 95       	ret

000004d8 <uart_getchar>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	fc 01       	movw	r30, r24
     4de:	84 85       	ldd	r24, Z+12	; 0x0c
     4e0:	95 85       	ldd	r25, Z+13	; 0x0d
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	41 f0       	breq	.+16     	; 0x4f6 <uart_getchar+0x1e>
     4e6:	ce df       	rcall	.-100    	; 0x484 <uart0_getData>
     4e8:	ec 01       	movw	r28, r24
     4ea:	99 23       	and	r25, r25
     4ec:	e4 f3       	brlt	.-8      	; 0x4e6 <uart_getchar+0xe>
     4ee:	1c df       	rcall	.-456    	; 0x328 <uart0_putc>
     4f0:	ce 01       	movw	r24, r28
     4f2:	99 27       	eor	r25, r25
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <uart_getchar+0x2c>
     4f6:	db df       	rcall	.-74     	; 0x4ae <uart1_getData>
     4f8:	ec 01       	movw	r28, r24
     4fa:	99 23       	and	r25, r25
     4fc:	e4 f3       	brlt	.-8      	; 0x4f6 <uart_getchar+0x1e>
     4fe:	33 df       	rcall	.-410    	; 0x366 <uart1_putc>
     500:	ce 01       	movw	r24, r28
     502:	99 27       	eor	r25, r25
     504:	99 27       	eor	r25, r25
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     50c:	0f 93       	push	r16
     50e:	0f b7       	in	r16, 0x3f	; 63
     510:	ef 93       	push	r30
     512:	ff 93       	push	r31
     514:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <tx0_Tail>
     518:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <tx0_Head>
     51c:	e3 95       	inc	r30
     51e:	ef 71       	andi	r30, 0x1F	; 31
     520:	ef 13       	cpse	r30, r31
     522:	05 c0       	rjmp	.+10     	; 0x52e <USART0_TX_CONTINUE>
     524:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     528:	ff 7d       	andi	r31, 0xDF	; 223
     52a:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

0000052e <USART0_TX_CONTINUE>:
     52e:	e0 93 f5 02 	sts	0x02F5, r30	; 0x8002f5 <tx0_Tail>
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	e4 5c       	subi	r30, 0xC4	; 196
     536:	fc 4f       	sbci	r31, 0xFC	; 252
     538:	e0 81       	ld	r30, Z
     53a:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

0000053e <USART0_TX_EXIT>:
     53e:	ff 91       	pop	r31
     540:	ef 91       	pop	r30
     542:	0f bf       	out	0x3f, r16	; 63
     544:	0f 91       	pop	r16
     546:	18 95       	reti

00000548 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     548:	0f 93       	push	r16
     54a:	0f b7       	in	r16, 0x3f	; 63
     54c:	9f 93       	push	r25
     54e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     552:	ef 93       	push	r30
     554:	ff 93       	push	r31
     556:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <rx0_Head>
     55a:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <rx0_Tail>
     55e:	e3 95       	inc	r30
     560:	ef 71       	andi	r30, 0x1F	; 31
     562:	fe 17       	cp	r31, r30
     564:	31 f0       	breq	.+12     	; 0x572 <USART0_RX_EXIT>
     566:	e0 93 38 03 	sts	0x0338, r30	; 0x800338 <rx0_Head>
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	ec 52       	subi	r30, 0x2C	; 44
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	90 83       	st	Z, r25

00000572 <USART0_RX_EXIT>:
     572:	ff 91       	pop	r31
     574:	ef 91       	pop	r30
     576:	9f 91       	pop	r25
     578:	0f bf       	out	0x3f, r16	; 63
     57a:	0f 91       	pop	r16
     57c:	18 95       	reti

0000057e <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     57e:	0f 93       	push	r16
     580:	0f b7       	in	r16, 0x3f	; 63
     582:	ef 93       	push	r30
     584:	ff 93       	push	r31
     586:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <tx1_Tail>
     58a:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <tx1_Head>
     58e:	e3 95       	inc	r30
     590:	ef 71       	andi	r30, 0x1F	; 31
     592:	ef 13       	cpse	r30, r31
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <USART1_TX_CONTINUE>
     596:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     59a:	ff 7d       	andi	r31, 0xDF	; 223
     59c:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

000005a0 <USART1_TX_CONTINUE>:
     5a0:	e0 93 39 03 	sts	0x0339, r30	; 0x800339 <tx1_Tail>
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	e9 50       	subi	r30, 0x09	; 9
     5a8:	fd 4f       	sbci	r31, 0xFD	; 253
     5aa:	e0 81       	ld	r30, Z
     5ac:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

000005b0 <USART1_TX_EXIT>:
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	0f bf       	out	0x3f, r16	; 63
     5b6:	0f 91       	pop	r16
     5b8:	18 95       	reti

000005ba <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     5ba:	0f 93       	push	r16
     5bc:	0f b7       	in	r16, 0x3f	; 63
     5be:	9f 93       	push	r25
     5c0:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
     5c8:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <rx1_Head>
     5cc:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <rx1_Tail>
     5d0:	e3 95       	inc	r30
     5d2:	ef 71       	andi	r30, 0x1F	; 31
     5d4:	fe 17       	cp	r31, r30
     5d6:	31 f0       	breq	.+12     	; 0x5e4 <USART1_RX_EXIT>
     5d8:	e0 93 3a 03 	sts	0x033A, r30	; 0x80033a <rx1_Head>
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	e8 5e       	subi	r30, 0xE8	; 232
     5e0:	fc 4f       	sbci	r31, 0xFC	; 252
     5e2:	90 83       	st	Z, r25

000005e4 <USART1_RX_EXIT>:
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	9f 91       	pop	r25
     5ea:	0f bf       	out	0x3f, r16	; 63
     5ec:	0f 91       	pop	r16
     5ee:	18 95       	reti

000005f0 <timer1_init_ts>:

//for speed
static uint16_t u16_speed_count = 0;

void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     5f0:	e1 e8       	ldi	r30, 0x81	; 129
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	83 60       	ori	r24, 0x03	; 3
     5f8:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     5fa:	80 81       	ld	r24, Z
     5fc:	88 60       	ori	r24, 0x08	; 8
     5fe:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     600:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     604:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     608:	ef e6       	ldi	r30, 0x6F	; 111
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	82 60       	ori	r24, 0x02	; 2
     610:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     612:	8d e7       	ldi	r24, 0x7D	; 125
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     61a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     61e:	08 95       	ret

00000620 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     620:	84 b5       	in	r24, 0x24	; 36
     622:	85 60       	ori	r24, 0x05	; 5
     624:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     626:	84 b5       	in	r24, 0x24	; 36
     628:	88 60       	ori	r24, 0x08	; 8
     62a:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     62c:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     62e:	ee e6       	ldi	r30, 0x6E	; 110
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	82 60       	ori	r24, 0x02	; 2
     636:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms
     638:	87 e2       	ldi	r24, 0x27	; 39
     63a:	87 bd       	out	0x27, r24	; 39
     63c:	08 95       	ret

0000063e <handle_can>:
	.motor_status = IDLE,
	.Direction = FORWARD,
};


void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	8c 01       	movw	r16, r24
     648:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     64a:	cb 01       	movw	r24, r22
     64c:	7c d5       	rcall	.+2808   	; 0x1146 <can_read_message_if_new>
     64e:	88 23       	and	r24, r24
     650:	09 f4       	brne	.+2      	; 0x654 <handle_can+0x16>
     652:	44 c0       	rjmp	.+136    	; 0x6dc <handle_can+0x9e>
		switch (rx->id){
     654:	88 81       	ld	r24, Y
     656:	99 81       	ldd	r25, Y+1	; 0x01
     658:	80 31       	cpi	r24, 0x10	; 16
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	92 07       	cpc	r25, r18
     65e:	a1 f1       	breq	.+104    	; 0x6c8 <handle_can+0x8a>
     660:	80 33       	cpi	r24, 0x30	; 48
     662:	92 40       	sbci	r25, 0x02	; 2
     664:	09 f0       	breq	.+2      	; 0x668 <handle_can+0x2a>
     666:	3a c0       	rjmp	.+116    	; 0x6dc <handle_can+0x9e>
			case FORWARD_CAN_ID:
			
				if (rx->data.u8[3] > 10)
     668:	8e 81       	ldd	r24, Y+6	; 0x06
     66a:	8b 30       	cpi	r24, 0x0B	; 11
     66c:	88 f0       	brcs	.+34     	; 0x690 <handle_can+0x52>
				{
					ComValues.motor_status = FW_ACCEL ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ComValues+0x12>
					vals->u8_throttle_cmd = rx->data.u8[3]/10.0 ;
     674:	6e 81       	ldd	r22, Y+6	; 0x06
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	ea d7       	rcall	.+4052   	; 0x1652 <__floatsisf>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e2       	ldi	r20, 0x20	; 32
     684:	51 e4       	ldi	r21, 0x41	; 65
     686:	4a d7       	rcall	.+3732   	; 0x151c <__divsf3>
     688:	b6 d7       	rcall	.+3948   	; 0x15f6 <__fixunssfsi>
     68a:	f8 01       	movw	r30, r16
     68c:	66 87       	std	Z+14, r22	; 0x0e
     68e:	04 c0       	rjmp	.+8      	; 0x698 <handle_can+0x5a>
				} else {
					ComValues.motor_status = IDLE ;
     690:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ComValues+0x12>
					vals->u8_throttle_cmd = 0;
     694:	f8 01       	movw	r30, r16
     696:	16 86       	std	Z+14, r1	; 0x0e
				}
				
				if (rx->data.u8[2] > 25 && ComValues.motor_status == IDLE)
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	8a 31       	cpi	r24, 0x1A	; 26
     69c:	f8 f0       	brcs	.+62     	; 0x6dc <handle_can+0x9e>
     69e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ComValues+0x12>
     6a2:	81 11       	cpse	r24, r1
     6a4:	1b c0       	rjmp	.+54     	; 0x6dc <handle_can+0x9e>
				{
					ComValues.motor_status = FW_BRAKE ;
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ComValues+0x12>
					vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     6ac:	6d 81       	ldd	r22, Y+5	; 0x05
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	ce d7       	rcall	.+3996   	; 0x1652 <__floatsisf>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	51 e4       	ldi	r21, 0x41	; 65
     6be:	2e d7       	rcall	.+3676   	; 0x151c <__divsf3>
     6c0:	9a d7       	rcall	.+3892   	; 0x15f6 <__fixunssfsi>
     6c2:	f8 01       	movw	r30, r16
     6c4:	66 87       	std	Z+14, r22	; 0x0e
     6c6:	0a c0       	rjmp	.+20     	; 0x6dc <handle_can+0x9e>
				
				
				break;
			
			case BRAKE_CAN_ID:
				if (vals->Direction == FORWARD)
     6c8:	f8 01       	movw	r30, r16
     6ca:	83 89       	ldd	r24, Z+19	; 0x13
     6cc:	81 11       	cpse	r24, r1
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <handle_can+0x98>
				{
					vals->motor_status = FW_BRAKE;
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	82 8b       	std	Z+18, r24	; 0x12
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <handle_can+0x9e>
				} else {
					vals->motor_status = BW_BRAKE;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	f8 01       	movw	r30, r16
     6da:	82 8b       	std	Z+18, r24	; 0x12
				}
				break;
		}
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
	if(*send){
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 81       	ld	r18, Z
     6f6:	22 23       	and	r18, r18
     6f8:	19 f1       	breq	.+70     	; 0x740 <handle_motor_status_can_msg+0x5a>
     6fa:	eb 01       	movw	r28, r22
     6fc:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     6fe:	0f 2e       	mov	r0, r31
     700:	f7 e9       	ldi	r31, 0x97	; 151
     702:	ef 2e       	mov	r14, r31
     704:	f3 e0       	ldi	r31, 0x03	; 3
     706:	ff 2e       	mov	r15, r31
     708:	f0 2d       	mov	r31, r0
     70a:	8a 89       	ldd	r24, Y+18	; 0x12
     70c:	f7 01       	movw	r30, r14
     70e:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = vals->u8_throttle_cmd;
     710:	8e 85       	ldd	r24, Y+14	; 0x0e
     712:	84 83       	std	Z+4, r24	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     714:	68 81       	ld	r22, Y
     716:	79 81       	ldd	r23, Y+1	; 0x01
     718:	8a 81       	ldd	r24, Y+2	; 0x02
     71a:	9b 81       	ldd	r25, Y+3	; 0x03
     71c:	6c d7       	rcall	.+3800   	; 0x15f6 <__fixunssfsi>
     71e:	f7 01       	movw	r30, r14
     720:	76 83       	std	Z+6, r23	; 0x06
     722:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = OCR3B ;
     724:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     728:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     72c:	90 87       	std	Z+8, r25	; 0x08
     72e:	87 83       	std	Z+7, r24	; 0x07
		txFrame.data.u16[3] = vals->u8_car_speed;
     730:	8d 85       	ldd	r24, Y+13	; 0x0d
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	92 87       	std	Z+10, r25	; 0x0a
		
		can_send_message(&txFrame);
     736:	81 87       	std	Z+9, r24	; 0x09
     738:	c7 01       	movw	r24, r14
		*send = 0;
     73a:	48 d5       	rcall	.+2704   	; 0x11cc <can_send_message>
     73c:	f8 01       	movw	r30, r16
	}
}
     73e:	10 82       	st	Z, r1
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	08 95       	ret

0000074e <main>:

int main(void)	
{
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <main+0x6>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	cli();
     758:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     75a:	81 2c       	mov	r8, r1
     75c:	91 2c       	mov	r9, r1
     75e:	54 01       	movw	r10, r8
     760:	75 01       	movw	r14, r10
     762:	64 01       	movw	r12, r8
     764:	0d ec       	ldi	r16, 0xCD	; 205
     766:	1c ec       	ldi	r17, 0xCC	; 204
     768:	2c e4       	ldi	r18, 0x4C	; 76
     76a:	3d e3       	ldi	r19, 0x3D	; 61
     76c:	4d ec       	ldi	r20, 0xCD	; 205
     76e:	5c ec       	ldi	r21, 0xCC	; 204
     770:	6c ec       	ldi	r22, 0xCC	; 204
     772:	7d e3       	ldi	r23, 0x3D	; 61
     774:	8f e7       	ldi	r24, 0x7F	; 127
     776:	93 e0       	ldi	r25, 0x03	; 3
	pwm_init();
     778:	4c d2       	rcall	.+1176   	; 0xc12 <pid_init>
     77a:	a6 d5       	rcall	.+2892   	; 0x12c8 <pwm_init>
	can_init(0,0);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
	timer1_init_ts();
     780:	80 e0       	ldi	r24, 0x00	; 0
	timer0_init_ts();
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	8b d4       	rcall	.+2326   	; 0x109c <can_init>
	speed_init();
     786:	34 df       	rcall	.-408    	; 0x5f0 <timer1_init_ts>
     788:	4b df       	rcall	.-362    	; 0x620 <timer0_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     78a:	c3 dd       	rcall	.-1146   	; 0x312 <speed_init>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	ec d5       	rcall	.+3032   	; 0x1368 <spi_init>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     790:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     794:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     798:	88 e9       	ldi	r24, 0x98	; 152
     79a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     79e:	e2 ea       	ldi	r30, 0xA2	; 162
     7a0:	f3 e0       	ldi	r31, 0x03	; 3
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	91 e0       	ldi	r25, 0x01	; 1
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     7a6:	93 83       	std	Z+3, r25	; 0x03
     7a8:	82 83       	std	Z+2, r24	; 0x02
	
	rgbled_init();
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
	drivers_init();
     7ae:	d1 d5       	rcall	.+2978   	; 0x1352 <rgbled_init>
     7b0:	a8 dd       	rcall	.-1200   	; 0x302 <drivers_init>
	txFrame.id = MOTOR_CAN_ID;
     7b2:	e7 e9       	ldi	r30, 0x97	; 151
     7b4:	f3 e0       	ldi	r31, 0x03	; 3
     7b6:	80 e5       	ldi	r24, 0x50	; 80
     7b8:	94 e0       	ldi	r25, 0x04	; 4
     7ba:	91 83       	std	Z+1, r25	; 0x01
	txFrame.length = 8;
     7bc:	80 83       	st	Z, r24
     7be:	88 e0       	ldi	r24, 0x08	; 8
	
	sei();
     7c0:	82 83       	std	Z+2, r24	; 0x02
	
	rgbled_turn_on(LED_BLUE);
     7c2:	78 94       	sei
     7c4:	80 e8       	ldi	r24, 0x80	; 128
     7c6:	cb d5       	rcall	.+2966   	; 0x135e <rgbled_turn_on>
		uart_putint(ComValues.u8_throttle_cmd*1000);
		uart_puts(",");
		uart_putint((uint16_t)((float)OCR3A/ICR3*1000));
		uart_puts("\r\n");*/
		
		printf("%i",(uint16_t)(ComValues.f32_motor_current*1000));
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f6 e2       	ldi	r31, 0x26	; 38
     7cc:	ef 2e       	mov	r14, r31
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	ff 2e       	mov	r15, r31
     7d2:	f0 2d       	mov	r31, r0
		printf(",");
		printf("%u",ComValues.u8_throttle_cmd*1000);
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f8 ee       	ldi	r31, 0xE8	; 232
     7d8:	cf 2e       	mov	r12, r31
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	df 2e       	mov	r13, r31
     7de:	f0 2d       	mov	r31, r0
     7e0:	09 e2       	ldi	r16, 0x29	; 41
			volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
			uart_flush();
			if (u16_data_received >10 && u16_data_received <= 20)
			{
				ComValues.u8_throttle_cmd = u16_data_received-10 ;
				ComValues.motor_status = FW_BRAKE ;
     7e2:	11 e0       	ldi	r17, 0x01	; 1
     7e4:	68 94       	set
     7e6:	aa 24       	eor	r10, r10
			}
			if (u16_data_received>0 && u16_data_received <= 10)
			{
				ComValues.u8_throttle_cmd = u16_data_received ;
				ComValues.motor_status = FW_ACCEL;
     7e8:	a1 f8       	bld	r10, 1
	
	rgbled_turn_on(LED_BLUE);
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     7ea:	bb 24       	eor	r11, r11
     7ec:	b3 94       	inc	r11
     7ee:	62 e1       	ldi	r22, 0x12	; 18
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	8d e3       	ldi	r24, 0x3D	; 61
     7f4:	91 e0       	ldi	r25, 0x01	; 1
		handle_can(&ComValues, &rxFrame);
     7f6:	77 df       	rcall	.-274    	; 0x6e6 <handle_motor_status_can_msg>
     7f8:	64 e7       	ldi	r22, 0x74	; 116
     7fa:	73 e0       	ldi	r23, 0x03	; 3
     7fc:	82 e1       	ldi	r24, 0x12	; 18
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	1e df       	rcall	.-452    	; 0x63e <handle_can>
		uart_putint(ComValues.u8_throttle_cmd*1000);
		uart_puts(",");
		uart_putint((uint16_t)((float)OCR3A/ICR3*1000));
		uart_puts("\r\n");*/
		
		printf("%i",(uint16_t)(ComValues.f32_motor_current*1000));
     802:	0f 2e       	mov	r0, r31
     804:	f2 e1       	ldi	r31, 0x12	; 18
     806:	8f 2e       	mov	r8, r31
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	9f 2e       	mov	r9, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	4a e7       	ldi	r20, 0x7A	; 122
     814:	54 e4       	ldi	r21, 0x44	; 68
     816:	f4 01       	movw	r30, r8
     818:	60 81       	ld	r22, Z
     81a:	71 81       	ldd	r23, Z+1	; 0x01
     81c:	82 81       	ldd	r24, Z+2	; 0x02
     81e:	93 81       	ldd	r25, Z+3	; 0x03
     820:	cc d7       	rcall	.+3992   	; 0x17ba <__mulsf3>
     822:	e9 d6       	rcall	.+3538   	; 0x15f6 <__fixunssfsi>
     824:	7f 93       	push	r23
     826:	6f 93       	push	r22
     828:	ff 92       	push	r15
     82a:	ef 92       	push	r14
     82c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
		printf(",");
     830:	8c e2       	ldi	r24, 0x2C	; 44
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 81 0c 	call	0x1902	; 0x1902 <putchar>
		printf("%u",ComValues.u8_throttle_cmd*1000);
     838:	f4 01       	movw	r30, r8
     83a:	26 85       	ldd	r18, Z+14	; 0x0e
     83c:	2c 9d       	mul	r18, r12
     83e:	c0 01       	movw	r24, r0
     840:	2d 9d       	mul	r18, r13
     842:	90 0d       	add	r25, r0
     844:	11 24       	eor	r1, r1
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	1f 93       	push	r17
     84c:	0f 93       	push	r16
		printf(",");
     84e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
     852:	8c e2       	ldi	r24, 0x2C	; 44
		printf("%u",(uint16_t)(ComValues.u8_duty_cycle*10.0));
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 81 0c 	call	0x1902	; 0x1902 <putchar>
     85a:	f4 01       	movw	r30, r8
     85c:	67 85       	ldd	r22, Z+15	; 0x0f
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	f6 d6       	rcall	.+3564   	; 0x1652 <__floatsisf>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e2       	ldi	r20, 0x20	; 32
     86c:	51 e4       	ldi	r21, 0x41	; 65
     86e:	a5 d7       	rcall	.+3914   	; 0x17ba <__mulsf3>
     870:	c2 d6       	rcall	.+3460   	; 0x15f6 <__fixunssfsi>
     872:	7f 93       	push	r23
     874:	6f 93       	push	r22
     876:	1f 93       	push	r17
     878:	0f 93       	push	r16
     87a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
		printf("\n");
     87e:	8a e0       	ldi	r24, 0x0A	; 10
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 81 0c 	call	0x1902	; 0x1902 <putchar>
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     886:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <rx0_Head>
		
		/////////////////////receiving throttle cmd through USB
		if(uart_AvailableBytes()!=0){
     88a:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <rx0_Tail>
     88e:	89 1b       	sub	r24, r25
     890:	8f 71       	andi	r24, 0x1F	; 31
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
			volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     89c:	09 f4       	brne	.+2      	; 0x8a0 <main+0x152>
     89e:	a7 cf       	rjmp	.-178    	; 0x7ee <main+0xa0>
     8a0:	d6 dd       	rcall	.-1108   	; 0x44e <uart0_getint>
     8a2:	9a 83       	std	Y+2, r25	; 0x02
			uart_flush();
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	58 dd       	rcall	.-1360   	; 0x358 <uart0_flush>
			if (u16_data_received >10 && u16_data_received <= 20)
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	0b 97       	sbiw	r24, 0x0b	; 11
     8ae:	50 f0       	brcs	.+20     	; 0x8c4 <main+0x176>
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	45 97       	sbiw	r24, 0x15	; 21
     8b6:	30 f4       	brcc	.+12     	; 0x8c4 <main+0x176>
			{
				ComValues.u8_throttle_cmd = u16_data_received-10 ;
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	f4 01       	movw	r30, r8
     8be:	8a 50       	subi	r24, 0x0A	; 10
     8c0:	86 87       	std	Z+14, r24	; 0x0e
				ComValues.motor_status = FW_BRAKE ;
     8c2:	a2 8a       	std	Z+18, r10	; 0x12
			}
			if (u16_data_received>0 && u16_data_received <= 10)
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	9a 81       	ldd	r25, Y+2	; 0x02
     8c8:	89 2b       	or	r24, r25
     8ca:	51 f0       	breq	.+20     	; 0x8e0 <main+0x192>
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	0b 97       	sbiw	r24, 0x0b	; 11
     8d2:	30 f4       	brcc	.+12     	; 0x8e0 <main+0x192>
			{
				ComValues.u8_throttle_cmd = u16_data_received ;
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	e2 e1       	ldi	r30, 0x12	; 18
     8da:	f1 e0       	ldi	r31, 0x01	; 1
     8dc:	86 87       	std	Z+14, r24	; 0x0e
				ComValues.motor_status = FW_ACCEL;
     8de:	b2 8a       	std	Z+18, r11	; 0x12
			}
			if (u16_data_received == 0)
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	9a 81       	ldd	r25, Y+2	; 0x02
     8e4:	89 2b       	or	r24, r25
     8e6:	09 f0       	breq	.+2      	; 0x8ea <main+0x19c>
     8e8:	82 cf       	rjmp	.-252    	; 0x7ee <main+0xa0>
			{
				ComValues.u8_throttle_cmd = u16_data_received ;
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	9a 81       	ldd	r25, Y+2	; 0x02
     8ee:	e2 e1       	ldi	r30, 0x12	; 18
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	86 87       	std	Z+14, r24	; 0x0e
				ComValues.motor_status = IDLE;
     8f4:	12 8a       	std	Z+18, r1	; 0x12
     8f6:	7b cf       	rjmp	.-266    	; 0x7ee <main+0xa0>

000008f8 <__vector_16>:
		}	
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	0b b6       	in	r0, 0x3b	; 59
     904:	0f 92       	push	r0
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	4f 93       	push	r20
     918:	5f 93       	push	r21
     91a:	6f 93       	push	r22
     91c:	7f 93       	push	r23
     91e:	8f 93       	push	r24
     920:	9f 93       	push	r25
     922:	af 93       	push	r26
     924:	bf 93       	push	r27
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31

	//send_can = 1;
	if (ComValues.f32_batt_volt > 15.0) //if motor controller card powered
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e7       	ldi	r20, 0x70	; 112
     934:	51 e4       	ldi	r21, 0x41	; 65
     936:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <ComValues+0x8>
     93a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <ComValues+0x9>
     93e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ComValues+0xa>
     942:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <ComValues+0xb>
     946:	35 d7       	rcall	.+3690   	; 0x17b2 <__gesf2>
     948:	18 16       	cp	r1, r24
     94a:	0c f0       	brlt	.+2      	; 0x94e <__vector_16+0x56>
     94c:	4d c0       	rjmp	.+154    	; 0x9e8 <__vector_16+0xf0>
	{
		if (ComValues.motor_status == FW_BRAKE || ComValues.motor_status == BW_ACCEL)
     94e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ComValues+0x12>
     952:	82 50       	subi	r24, 0x02	; 2
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	d8 f4       	brcc	.+54     	; 0x98e <__vector_16+0x96>
		{
			ComValues.u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     958:	c2 e1       	ldi	r28, 0x12	; 18
     95a:	d1 e0       	ldi	r29, 0x01	; 1
     95c:	84 ef       	ldi	r24, 0xF4	; 244
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	99 8b       	std	Y+17, r25	; 0x11
			drivers(1); //drivers turn on
     962:	88 8b       	std	Y+16, r24	; 0x10
     964:	81 e0       	ldi	r24, 0x01	; 1
			controller(-ComValues.u8_throttle_cmd, ComValues.f32_motor_current,&ComValues.u8_duty_cycle);
     966:	cf dc       	rcall	.-1634   	; 0x306 <drivers>
     968:	c8 80       	ld	r12, Y
     96a:	d9 80       	ldd	r13, Y+1	; 0x01
     96c:	ea 80       	ldd	r14, Y+2	; 0x02
     96e:	fb 80       	ldd	r15, Y+3	; 0x03
     970:	6e 85       	ldd	r22, Y+14	; 0x0e
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	71 95       	neg	r23
     976:	61 95       	neg	r22
     978:	71 09       	sbc	r23, r1
     97a:	07 2e       	mov	r0, r23
     97c:	00 0c       	add	r0, r0
     97e:	88 0b       	sbc	r24, r24
     980:	99 0b       	sbc	r25, r25
     982:	67 d6       	rcall	.+3278   	; 0x1652 <__floatsisf>
     984:	01 e2       	ldi	r16, 0x21	; 33
     986:	11 e0       	ldi	r17, 0x01	; 1
     988:	a7 01       	movw	r20, r14
     98a:	96 01       	movw	r18, r12
		}
	
		if (/*ComValues.motor_status == BW_BRAKE || */ComValues.motor_status == FW_ACCEL)
     98c:	b3 db       	rcall	.-2202   	; 0xf4 <controller>
     98e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ComValues+0x12>
     992:	81 30       	cpi	r24, 0x01	; 1
		{
			ComValues.u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     994:	b1 f4       	brne	.+44     	; 0x9c2 <__vector_16+0xca>
     996:	c2 e1       	ldi	r28, 0x12	; 18
     998:	d1 e0       	ldi	r29, 0x01	; 1
     99a:	84 ef       	ldi	r24, 0xF4	; 244
     99c:	91 e0       	ldi	r25, 0x01	; 1
			drivers(1); //drivers turn on
     99e:	99 8b       	std	Y+17, r25	; 0x11
     9a0:	88 8b       	std	Y+16, r24	; 0x10
     9a2:	81 e0       	ldi	r24, 0x01	; 1
			controller(ComValues.u8_throttle_cmd, ComValues.f32_motor_current, &ComValues.u8_duty_cycle);
     9a4:	b0 dc       	rcall	.-1696   	; 0x306 <drivers>
     9a6:	c8 80       	ld	r12, Y
     9a8:	d9 80       	ldd	r13, Y+1	; 0x01
     9aa:	ea 80       	ldd	r14, Y+2	; 0x02
     9ac:	fb 80       	ldd	r15, Y+3	; 0x03
     9ae:	6e 85       	ldd	r22, Y+14	; 0x0e
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	4b d6       	rcall	.+3222   	; 0x164e <__floatunsisf>
     9b8:	01 e2       	ldi	r16, 0x21	; 33
     9ba:	11 e0       	ldi	r17, 0x01	; 1
     9bc:	a7 01       	movw	r20, r14
     9be:	96 01       	movw	r18, r12
		}
		if (ComValues.motor_status == IDLE)
     9c0:	99 db       	rcall	.-2254   	; 0xf4 <controller>
     9c2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ComValues+0x12>
     9c6:	81 11       	cpse	r24, r1
				drivers(0);//drivers shutdown
				reset_I(); //reset integrator
			}else{
				ComValues.u16_watchdog -- ;
			}*/
			controller(0.0, ComValues.f32_motor_current,&ComValues.u8_duty_cycle);		
     9c8:	12 c0       	rjmp	.+36     	; 0x9ee <__vector_16+0xf6>
     9ca:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <ComValues>
     9ce:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <ComValues+0x1>
     9d2:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <ComValues+0x2>
     9d6:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <ComValues+0x3>
     9da:	01 e2       	ldi	r16, 0x21	; 33
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
		}
	}else{
		drivers(0);//drivers shutdown
     9e2:	cb 01       	movw	r24, r22
     9e4:	87 db       	rcall	.-2290   	; 0xf4 <controller>
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <__vector_16+0xf6>
		reset_I(); //reset integrator
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	8d dc       	rcall	.-1766   	; 0x306 <drivers>
	}
	
	//handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 100);
}
     9ec:	7a db       	rcall	.-2316   	; 0xe2 <reset_I>
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	0f 90       	pop	r0
     a18:	0b be       	out	0x3b, r0	; 59
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	0b b6       	in	r0, 0x3b	; 59
     a30:	0f 92       	push	r0
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31

	if (u8_SPI_count == 4)
     a4a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_SPI_count>
     a4e:	84 30       	cpi	r24, 0x04	; 4
     a50:	e1 f4       	brne	.+56     	; 0xa8a <__vector_12+0x66>
	{
		//motor temp
		Set_ADC_Channel_ext(4, u8_txBuffer);
     a52:	6a e3       	ldi	r22, 0x3A	; 58
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	fb d1       	rcall	.+1014   	; 0xe4e <Set_ADC_Channel_ext>
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	43 e0       	ldi	r20, 0x03	; 3
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	67 e3       	ldi	r22, 0x37	; 55
     a60:	71 e0       	ldi	r23, 0x01	; 1
     a62:	8a e3       	ldi	r24, 0x3A	; 58
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	91 d4       	rcall	.+2338   	; 0x138a <spi_trancieve>
		u8_rxBuffer[1]&= ~(0b111<<5);
     a68:	e7 e3       	ldi	r30, 0x37	; 55
     a6a:	f1 e0       	ldi	r31, 0x01	; 1
     a6c:	81 81       	ldd	r24, Z+1	; 0x01
     a6e:	8f 71       	andi	r24, 0x1F	; 31
     a70:	81 83       	std	Z+1, r24	; 0x01
		u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	98 2f       	mov	r25, r24
     a76:	88 27       	eor	r24, r24
     a78:	22 81       	ldd	r18, Z+2	; 0x02
     a7a:	82 2b       	or	r24, r18
     a7c:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <u16_ADC4_reg+0x1>
     a80:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u16_ADC4_reg>
		u8_SPI_count = 0 ;
     a84:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8_SPI_count>
     a88:	28 c0       	rjmp	.+80     	; 0xada <__vector_12+0xb6>
	}
	
	if (u8_SPI_count == 3)
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	21 f4       	brne	.+8      	; 0xa96 <__vector_12+0x72>
	{
		u8_SPI_count ++ ;
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8_SPI_count>
     a94:	44 c0       	rjmp	.+136    	; 0xb1e <__vector_12+0xfa>
	}
	
	if (u8_SPI_count == 2)
     a96:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_SPI_count>
     a9a:	82 30       	cpi	r24, 0x02	; 2
	{
		//batt volt
		Set_ADC_Channel_ext(2, u8_txBuffer);
     a9c:	f1 f4       	brne	.+60     	; 0xada <__vector_12+0xb6>
     a9e:	6a e3       	ldi	r22, 0x3A	; 58
     aa0:	71 e0       	ldi	r23, 0x01	; 1
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     aa2:	d5 d1       	rcall	.+938    	; 0xe4e <Set_ADC_Channel_ext>
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	43 e0       	ldi	r20, 0x03	; 3
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	67 e3       	ldi	r22, 0x37	; 55
     aac:	71 e0       	ldi	r23, 0x01	; 1
     aae:	8a e3       	ldi	r24, 0x3A	; 58
     ab0:	91 e0       	ldi	r25, 0x01	; 1
		u8_rxBuffer[1]&= ~(0b111<<5);
     ab2:	6b d4       	rcall	.+2262   	; 0x138a <spi_trancieve>
     ab4:	e7 e3       	ldi	r30, 0x37	; 55
     ab6:	f1 e0       	ldi	r31, 0x01	; 1
     ab8:	81 81       	ldd	r24, Z+1	; 0x01
     aba:	8f 71       	andi	r24, 0x1F	; 31
		u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     abc:	81 83       	std	Z+1, r24	; 0x01
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	98 2f       	mov	r25, r24
     ac2:	88 27       	eor	r24, r24
     ac4:	22 81       	ldd	r18, Z+2	; 0x02
     ac6:	82 2b       	or	r24, r18
     ac8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <u16_ADC2_reg+0x1>
     acc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u16_ADC2_reg>
		u8_SPI_count ++ ;
     ad0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_SPI_count>
     ad4:	8f 5f       	subi	r24, 0xFF	; 255
     ad6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     ada:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_SPI_count>
	{
		//batt current
		Set_ADC_Channel_ext(1, u8_txBuffer);
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	f1 f4       	brne	.+60     	; 0xb1e <__vector_12+0xfa>
     ae2:	6a e3       	ldi	r22, 0x3A	; 58
     ae4:	71 e0       	ldi	r23, 0x01	; 1
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     ae6:	b3 d1       	rcall	.+870    	; 0xe4e <Set_ADC_Channel_ext>
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	43 e0       	ldi	r20, 0x03	; 3
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	67 e3       	ldi	r22, 0x37	; 55
     af0:	71 e0       	ldi	r23, 0x01	; 1
     af2:	8a e3       	ldi	r24, 0x3A	; 58
     af4:	91 e0       	ldi	r25, 0x01	; 1
		u8_rxBuffer[1]&= ~(0b111<<5);
     af6:	49 d4       	rcall	.+2194   	; 0x138a <spi_trancieve>
     af8:	e7 e3       	ldi	r30, 0x37	; 55
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	81 81       	ldd	r24, Z+1	; 0x01
     afe:	8f 71       	andi	r24, 0x1F	; 31
		u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     b00:	81 83       	std	Z+1, r24	; 0x01
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	98 2f       	mov	r25, r24
     b06:	88 27       	eor	r24, r24
     b08:	22 81       	ldd	r18, Z+2	; 0x02
     b0a:	82 2b       	or	r24, r18
     b0c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <u16_ADC1_reg+0x1>
     b10:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u16_ADC1_reg>
		u8_SPI_count ++ ;
     b14:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_SPI_count>
     b18:	8f 5f       	subi	r24, 0xFF	; 255
	}	
	
	if (u8_SPI_count == 0)
     b1a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8_SPI_count>
     b1e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_SPI_count>
	{
		//motor current
		Set_ADC_Channel_ext(0, u8_txBuffer);
     b22:	81 11       	cpse	r24, r1
     b24:	1e c0       	rjmp	.+60     	; 0xb62 <__vector_12+0x13e>
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     b26:	6a e3       	ldi	r22, 0x3A	; 58
     b28:	71 e0       	ldi	r23, 0x01	; 1
     b2a:	91 d1       	rcall	.+802    	; 0xe4e <Set_ADC_Channel_ext>
     b2c:	21 e0       	ldi	r18, 0x01	; 1
     b2e:	43 e0       	ldi	r20, 0x03	; 3
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	67 e3       	ldi	r22, 0x37	; 55
     b34:	71 e0       	ldi	r23, 0x01	; 1
		u8_rxBuffer[1]&= ~(0b111<<5);
     b36:	8a e3       	ldi	r24, 0x3A	; 58
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	27 d4       	rcall	.+2126   	; 0x138a <spi_trancieve>
     b3c:	e7 e3       	ldi	r30, 0x37	; 55
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
		u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     b40:	81 81       	ldd	r24, Z+1	; 0x01
     b42:	8f 71       	andi	r24, 0x1F	; 31
     b44:	81 83       	std	Z+1, r24	; 0x01
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	98 2f       	mov	r25, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	22 81       	ldd	r18, Z+2	; 0x02
     b4e:	82 2b       	or	r24, r18
     b50:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <u16_ADC0_reg+0x1>
		u8_SPI_count ++ ;
     b54:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u16_ADC0_reg>
     b58:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_SPI_count>
	}
	
	////////////////////INTERPRETATION OF RECEIVED ADC VALUES//////////////
	handle_current_sensor(&ComValues.f32_motor_current, u16_ADC0_reg);
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8_SPI_count>
     b62:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <u16_ADC0_reg>
     b66:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <u16_ADC0_reg+0x1>
	
	handle_current_sensor(&ComValues.f32_batt_current, u16_ADC1_reg);
     b6a:	82 e1       	ldi	r24, 0x12	; 18
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	7d d0       	rcall	.+250    	; 0xc6a <handle_current_sensor>
     b70:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <u16_ADC1_reg>
     b74:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <u16_ADC1_reg+0x1>
	
	ComValues.f32_batt_volt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     b78:	86 e1       	ldi	r24, 0x16	; 22
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	76 d0       	rcall	.+236    	; 0xc6a <handle_current_sensor>
     b7e:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <u16_ADC2_reg>
     b82:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <u16_ADC2_reg+0x1>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	61 d5       	rcall	.+2754   	; 0x164e <__floatunsisf>
     b8c:	23 e3       	ldi	r18, 0x33	; 51
     b8e:	33 e3       	ldi	r19, 0x33	; 51
     b90:	44 e8       	ldi	r20, 0x84	; 132
     b92:	52 e4       	ldi	r21, 0x42	; 66
     b94:	c3 d4       	rcall	.+2438   	; 0x151c <__divsf3>
     b96:	24 ea       	ldi	r18, 0xA4	; 164
     b98:	30 e7       	ldi	r19, 0x70	; 112
     b9a:	4d eb       	ldi	r20, 0xBD	; 189
     b9c:	5e e3       	ldi	r21, 0x3E	; 62
     b9e:	55 d4       	rcall	.+2218   	; 0x144a <__subsf3>
     ba0:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <ComValues+0x8>
     ba4:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <ComValues+0x9>
	
	handle_temp_sensor(&ComValues.u8_motor_temp, u16_ADC4_reg);
     ba8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <ComValues+0xa>
     bac:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <ComValues+0xb>
     bb0:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <u16_ADC4_reg>
     bb4:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <u16_ADC4_reg+0x1>
}
     bb8:	8e e1       	ldi	r24, 0x1E	; 30
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	c6 d0       	rcall	.+396    	; 0xd4a <handle_temp_sensor>
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0b be       	out	0x3b, r0	; 59
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0
     be0:	1f 90       	pop	r1
     be2:	18 95       	reti

00000be4 <__vector_6>:


ISR(INT5_vect)
{
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
	u16_speed_count ++ ;
     bf2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u16_speed_count>
     bf6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <u16_speed_count+0x1>
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <u16_speed_count+0x1>
     c00:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u16_speed_count>
}
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     c12:	8f 92       	push	r8
     c14:	9f 92       	push	r9
     c16:	af 92       	push	r10
     c18:	bf 92       	push	r11
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	fc 01       	movw	r30, r24
	PID->Kp = p;
     c30:	04 87       	std	Z+12, r16	; 0x0c
     c32:	15 87       	std	Z+13, r17	; 0x0d
     c34:	26 87       	std	Z+14, r18	; 0x0e
     c36:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     c38:	c4 8a       	std	Z+20, r12	; 0x14
     c3a:	d5 8a       	std	Z+21, r13	; 0x15
     c3c:	e6 8a       	std	Z+22, r14	; 0x16
     c3e:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     c40:	80 8a       	std	Z+16, r8	; 0x10
     c42:	91 8a       	std	Z+17, r9	; 0x11
     c44:	a2 8a       	std	Z+18, r10	; 0x12
     c46:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     c48:	40 87       	std	Z+8, r20	; 0x08
     c4a:	51 87       	std	Z+9, r21	; 0x09
     c4c:	62 87       	std	Z+10, r22	; 0x0a
     c4e:	73 87       	std	Z+11, r23	; 0x0b
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	bf 90       	pop	r11
     c62:	af 90       	pop	r10
     c64:	9f 90       	pop	r9
     c66:	8f 90       	pop	r8
     c68:	08 95       	ret

00000c6a <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.26
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     c6a:	8f 92       	push	r8
     c6c:	9f 92       	push	r9
     c6e:	af 92       	push	r10
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	00 d0       	rcall	.+0      	; 0xc84 <handle_current_sensor+0x1a>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <handle_current_sensor+0x1c>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	de d4       	rcall	.+2492   	; 0x164e <__floatunsisf>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 ea       	ldi	r20, 0xA0	; 160
     c98:	50 e4       	ldi	r21, 0x40	; 64
     c9a:	8f d5       	rcall	.+2846   	; 0x17ba <__mulsf3>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e8       	ldi	r20, 0x80	; 128
     ca2:	59 e3       	ldi	r21, 0x39	; 57
     ca4:	8a d5       	rcall	.+2836   	; 0x17ba <__mulsf3>
     ca6:	27 ed       	ldi	r18, 0xD7	; 215
     ca8:	33 ea       	ldi	r19, 0xA3	; 163
     caa:	40 e1       	ldi	r20, 0x10	; 16
     cac:	50 e4       	ldi	r21, 0x40	; 64
     cae:	cd d3       	rcall	.+1946   	; 0x144a <__subsf3>
     cb0:	23 ec       	ldi	r18, 0xC3	; 195
     cb2:	34 e6       	ldi	r19, 0x64	; 100
     cb4:	4a e2       	ldi	r20, 0x2A	; 42
     cb6:	5d e3       	ldi	r21, 0x3D	; 61
     cb8:	31 d4       	rcall	.+2146   	; 0x151c <__divsf3>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e4       	ldi	r20, 0x40	; 64
     cc0:	50 e4       	ldi	r21, 0x40	; 64
     cc2:	2c d4       	rcall	.+2136   	; 0x151c <__divsf3>
     cc4:	69 83       	std	Y+1, r22	; 0x01
     cc6:	7a 83       	std	Y+2, r23	; 0x02
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current-1.76);// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     ccc:	69 81       	ldd	r22, Y+1	; 0x01
     cce:	7a 81       	ldd	r23, Y+2	; 0x02
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	9c 81       	ldd	r25, Y+4	; 0x04
     cd4:	2e ea       	ldi	r18, 0xAE	; 174
     cd6:	37 e4       	ldi	r19, 0x47	; 71
     cd8:	41 ee       	ldi	r20, 0xE1	; 225
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	b6 d3       	rcall	.+1900   	; 0x144a <__subsf3>
     cde:	69 83       	std	Y+1, r22	; 0x01
     ce0:	7a 83       	std	Y+2, r23	; 0x02
     ce2:	8b 83       	std	Y+3, r24	; 0x03
     ce4:	9c 83       	std	Y+4, r25	; 0x04
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
     ce6:	89 80       	ldd	r8, Y+1	; 0x01
     ce8:	9a 80       	ldd	r9, Y+2	; 0x02
     cea:	ab 80       	ldd	r10, Y+3	; 0x03
     cec:	bc 80       	ldd	r11, Y+4	; 0x04
     cee:	26 e6       	ldi	r18, 0x66	; 102
     cf0:	36 e6       	ldi	r19, 0x66	; 102
     cf2:	46 e6       	ldi	r20, 0x66	; 102
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	f8 01       	movw	r30, r16
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	5c d5       	rcall	.+2744   	; 0x17ba <__mulsf3>
     d02:	6b 01       	movw	r12, r22
     d04:	7c 01       	movw	r14, r24
     d06:	2d ec       	ldi	r18, 0xCD	; 205
     d08:	3c ec       	ldi	r19, 0xCC	; 204
     d0a:	4c ec       	ldi	r20, 0xCC	; 204
     d0c:	5d e3       	ldi	r21, 0x3D	; 61
     d0e:	c5 01       	movw	r24, r10
     d10:	b4 01       	movw	r22, r8
     d12:	53 d5       	rcall	.+2726   	; 0x17ba <__mulsf3>
     d14:	9b 01       	movw	r18, r22
     d16:	ac 01       	movw	r20, r24
     d18:	c7 01       	movw	r24, r14
     d1a:	b6 01       	movw	r22, r12
     d1c:	97 d3       	rcall	.+1838   	; 0x144c <__addsf3>
     d1e:	f8 01       	movw	r30, r16
     d20:	60 83       	st	Z, r22
     d22:	71 83       	std	Z+1, r23	; 0x01
     d24:	82 83       	std	Z+2, r24	; 0x02
     d26:	93 83       	std	Z+3, r25	; 0x03
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	bf 90       	pop	r11
     d42:	af 90       	pop	r10
     d44:	9f 90       	pop	r9
     d46:	8f 90       	pop	r8
     d48:	08 95       	ret

00000d4a <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <handle_temp_sensor+0xa>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <handle_temp_sensor+0xc>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	76 d4       	rcall	.+2284   	; 0x164e <__floatunsisf>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 ea       	ldi	r20, 0xA0	; 160
     d68:	50 e4       	ldi	r21, 0x40	; 64
     d6a:	27 d5       	rcall	.+2638   	; 0x17ba <__mulsf3>
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	59 e3       	ldi	r21, 0x39	; 57
     d74:	22 d5       	rcall	.+2628   	; 0x17ba <__mulsf3>
     d76:	69 83       	std	Y+1, r22	; 0x01
     d78:	7a 83       	std	Y+2, r23	; 0x02
     d7a:	8b 83       	std	Y+3, r24	; 0x03
     d7c:	9c 83       	std	Y+4, r25	; 0x04
	// 0 -> 3.7V => T = 20*V-22
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit.
	
	if (f_sens_volt <= 3.7)
     d7e:	69 81       	ldd	r22, Y+1	; 0x01
     d80:	7a 81       	ldd	r23, Y+2	; 0x02
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	2d ec       	ldi	r18, 0xCD	; 205
     d88:	3c ec       	ldi	r19, 0xCC	; 204
     d8a:	4c e6       	ldi	r20, 0x6C	; 108
     d8c:	50 e4       	ldi	r21, 0x40	; 64
     d8e:	c2 d3       	rcall	.+1924   	; 0x1514 <__cmpsf2>
     d90:	18 16       	cp	r1, r24
     d92:	8c f0       	brlt	.+34     	; 0xdb6 <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     d94:	69 81       	ldd	r22, Y+1	; 0x01
     d96:	7a 81       	ldd	r23, Y+2	; 0x02
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 ea       	ldi	r20, 0xA0	; 160
     da2:	51 e4       	ldi	r21, 0x41	; 65
     da4:	0a d5       	rcall	.+2580   	; 0x17ba <__mulsf3>
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 eb       	ldi	r20, 0xB0	; 176
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	4d d3       	rcall	.+1690   	; 0x144a <__subsf3>
     db0:	22 d4       	rcall	.+2116   	; 0x15f6 <__fixunssfsi>
     db2:	f8 01       	movw	r30, r16
     db4:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     db6:	69 81       	ldd	r22, Y+1	; 0x01
     db8:	7a 81       	ldd	r23, Y+2	; 0x02
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	26 e6       	ldi	r18, 0x66	; 102
     dc0:	36 e6       	ldi	r19, 0x66	; 102
     dc2:	46 e9       	ldi	r20, 0x96	; 150
     dc4:	50 e4       	ldi	r21, 0x40	; 64
     dc6:	a6 d3       	rcall	.+1868   	; 0x1514 <__cmpsf2>
     dc8:	18 16       	cp	r1, r24
     dca:	e4 f0       	brlt	.+56     	; 0xe04 <handle_temp_sensor+0xba>
     dcc:	69 81       	ldd	r22, Y+1	; 0x01
     dce:	7a 81       	ldd	r23, Y+2	; 0x02
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	2d ec       	ldi	r18, 0xCD	; 205
     dd6:	3c ec       	ldi	r19, 0xCC	; 204
     dd8:	4c e6       	ldi	r20, 0x6C	; 108
     dda:	50 e4       	ldi	r21, 0x40	; 64
     ddc:	ea d4       	rcall	.+2516   	; 0x17b2 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     dde:	18 16       	cp	r1, r24
     de0:	8c f4       	brge	.+34     	; 0xe04 <handle_temp_sensor+0xba>
     de2:	69 81       	ldd	r22, Y+1	; 0x01
     de4:	7a 81       	ldd	r23, Y+2	; 0x02
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4e e5       	ldi	r20, 0x5E	; 94
     df0:	52 e4       	ldi	r21, 0x42	; 66
     df2:	e3 d4       	rcall	.+2502   	; 0x17ba <__mulsf3>
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e8       	ldi	r19, 0x80	; 128
     df8:	4b e1       	ldi	r20, 0x1B	; 27
     dfa:	53 e4       	ldi	r21, 0x43	; 67
     dfc:	26 d3       	rcall	.+1612   	; 0x144a <__subsf3>
     dfe:	fb d3       	rcall	.+2038   	; 0x15f6 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     e00:	f8 01       	movw	r30, r16
     e02:	60 83       	st	Z, r22
     e04:	69 81       	ldd	r22, Y+1	; 0x01
     e06:	7a 81       	ldd	r23, Y+2	; 0x02
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	26 e6       	ldi	r18, 0x66	; 102
     e0e:	36 e6       	ldi	r19, 0x66	; 102
     e10:	46 e9       	ldi	r20, 0x96	; 150
     e12:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     e14:	ce d4       	rcall	.+2460   	; 0x17b2 <__gesf2>
     e16:	18 16       	cp	r1, r24
     e18:	8c f4       	brge	.+34     	; 0xe3c <handle_temp_sensor+0xf2>
     e1a:	69 81       	ldd	r22, Y+1	; 0x01
     e1c:	7a 81       	ldd	r23, Y+2	; 0x02
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	48 e4       	ldi	r20, 0x48	; 72
     e28:	53 e4       	ldi	r21, 0x43	; 67
     e2a:	c7 d4       	rcall	.+2446   	; 0x17ba <__mulsf3>
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	42 e5       	ldi	r20, 0x52	; 82
     e32:	54 e4       	ldi	r21, 0x44	; 68
     e34:	0a d3       	rcall	.+1556   	; 0x144a <__subsf3>
     e36:	df d3       	rcall	.+1982   	; 0x15f6 <__fixunssfsi>
	}
     e38:	f8 01       	movw	r30, r16
     e3a:	60 83       	st	Z, r22
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <Set_ADC_Channel_ext>:
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
}

void Set_ADC_Channel_ext(uint8_t u8_CHn, uint8_t * u8_ADC_tx)
{
	switch(u8_CHn)
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	91 05       	cpc	r25, r1
     e54:	88 f5       	brcc	.+98     	; 0xeb8 <Set_ADC_Channel_ext+0x6a>
     e56:	fc 01       	movw	r30, r24
     e58:	e6 5b       	subi	r30, 0xB6	; 182
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	11 c5       	rjmp	.+2594   	; 0x1880 <__tablejump2__>
	{
		case 0 :
			u8_ADC_tx[0] = 0b00000110 ;
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	fb 01       	movw	r30, r22
     e62:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b00 ;
     e64:	11 82       	std	Z+1, r1	; 0x01
		break;
     e66:	08 95       	ret
		
		case 1 :
			u8_ADC_tx[0] = 0b00000110 ;
     e68:	86 e0       	ldi	r24, 0x06	; 6
     e6a:	fb 01       	movw	r30, r22
     e6c:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b01 << 6 ;
     e6e:	80 e4       	ldi	r24, 0x40	; 64
     e70:	81 83       	std	Z+1, r24	; 0x01
		break;
     e72:	08 95       	ret
		
		case 2 :
			u8_ADC_tx[0] = 0b00000110 ;
     e74:	86 e0       	ldi	r24, 0x06	; 6
     e76:	fb 01       	movw	r30, r22
     e78:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b10 << 6 ;
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	81 83       	std	Z+1, r24	; 0x01
		break;
     e7e:	08 95       	ret
		
		case 3 :
		u8_ADC_tx[0] = 0b00000110 ;
     e80:	86 e0       	ldi	r24, 0x06	; 6
     e82:	fb 01       	movw	r30, r22
     e84:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
     e86:	80 ec       	ldi	r24, 0xC0	; 192
     e88:	81 83       	std	Z+1, r24	; 0x01
		break;
     e8a:	08 95       	ret
		
		case 4 :
		u8_ADC_tx[0] = 0b00000111 ;
     e8c:	87 e0       	ldi	r24, 0x07	; 7
     e8e:	fb 01       	movw	r30, r22
     e90:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b00 << 6 ;
     e92:	11 82       	std	Z+1, r1	; 0x01
		break;
     e94:	08 95       	ret
		
		case 5 :
		u8_ADC_tx[0] = 0b00000111 ;
     e96:	87 e0       	ldi	r24, 0x07	; 7
     e98:	fb 01       	movw	r30, r22
     e9a:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b01 << 6 ;
     e9c:	80 e4       	ldi	r24, 0x40	; 64
     e9e:	81 83       	std	Z+1, r24	; 0x01
		break;
     ea0:	08 95       	ret
		
		case 6 :
		u8_ADC_tx[0] = 0b00000111 ;
     ea2:	87 e0       	ldi	r24, 0x07	; 7
     ea4:	fb 01       	movw	r30, r22
     ea6:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b10 << 6 ;
     ea8:	80 e8       	ldi	r24, 0x80	; 128
     eaa:	81 83       	std	Z+1, r24	; 0x01
		break;
     eac:	08 95       	ret
		
		case 7 :
		u8_ADC_tx[0] = 0b00000111 ;
     eae:	87 e0       	ldi	r24, 0x07	; 7
     eb0:	fb 01       	movw	r30, r22
     eb2:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
     eb4:	80 ec       	ldi	r24, 0xC0	; 192
     eb6:	81 83       	std	Z+1, r24	; 0x01
     eb8:	08 95       	ret

00000eba <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
     eda:	ef 93       	push	r30
     edc:	ff 93       	push	r31
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	1f 92       	push	r1
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     ee8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     eec:	80 ff       	sbrs	r24, 0
     eee:	47 c0       	rjmp	.+142    	; 0xf7e <__vector_18+0xc4>
     ef0:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ef4:	90 ff       	sbrs	r25, 0
     ef6:	43 c0       	rjmp	.+134    	; 0xf7e <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     ef8:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     efc:	ee ee       	ldi	r30, 0xEE	; 238
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     f04:	80 81       	ld	r24, Z
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     f0a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tx_off>
     f0e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tx_on>
     f12:	98 17       	cp	r25, r24
     f14:	89 f1       	breq	.+98     	; 0xf78 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     f16:	8f 70       	andi	r24, 0x0F	; 15
     f18:	2b e0       	ldi	r18, 0x0B	; 11
     f1a:	82 9f       	mul	r24, r18
     f1c:	c0 01       	movw	r24, r0
     f1e:	11 24       	eor	r1, r1
     f20:	fc 01       	movw	r30, r24
     f22:	e4 50       	subi	r30, 0x04	; 4
     f24:	fe 4f       	sbci	r31, 0xFE	; 254
     f26:	20 81       	ld	r18, Z
     f28:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     f2c:	20 81       	ld	r18, Z
     f2e:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     f32:	21 81       	ldd	r18, Z+1	; 0x01
     f34:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     f38:	23 81       	ldd	r18, Z+3	; 0x03
     f3a:	aa ef       	ldi	r26, 0xFA	; 250
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     f40:	24 81       	ldd	r18, Z+4	; 0x04
     f42:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     f44:	25 81       	ldd	r18, Z+5	; 0x05
     f46:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     f48:	26 81       	ldd	r18, Z+6	; 0x06
     f4a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     f4c:	27 81       	ldd	r18, Z+7	; 0x07
     f4e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     f50:	20 85       	ldd	r18, Z+8	; 0x08
     f52:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     f54:	21 85       	ldd	r18, Z+9	; 0x09
     f56:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     f58:	22 85       	ldd	r18, Z+10	; 0x0a
     f5a:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     f5c:	fc 01       	movw	r30, r24
     f5e:	e2 50       	subi	r30, 0x02	; 2
     f60:	fe 4f       	sbci	r31, 0xFE	; 254
     f62:	80 81       	ld	r24, Z
     f64:	8f 70       	andi	r24, 0x0F	; 15
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     f6c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tx_off>
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tx_off>
     f76:	7d c0       	rjmp	.+250    	; 0x1072 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     f78:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <tx_busy>
     f7c:	7a c0       	rjmp	.+244    	; 0x1072 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     f7e:	81 ff       	sbrs	r24, 1
     f80:	78 c0       	rjmp	.+240    	; 0x1072 <__vector_18+0x1b8>
     f82:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     f86:	81 ff       	sbrs	r24, 1
     f88:	74 c0       	rjmp	.+232    	; 0x1072 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     f8a:	80 e1       	ldi	r24, 0x10	; 16
     f8c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     f90:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_on>
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <rx_off>
     f9c:	29 1b       	sub	r18, r25
     f9e:	31 09       	sbc	r19, r1
     fa0:	2f 77       	andi	r18, 0x7F	; 127
     fa2:	33 27       	eor	r19, r19
     fa4:	20 31       	cpi	r18, 0x10	; 16
     fa6:	31 05       	cpc	r19, r1
     fa8:	0c f0       	brlt	.+2      	; 0xfac <__vector_18+0xf2>
     faa:	58 c0       	rjmp	.+176    	; 0x105c <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     fac:	e8 2f       	mov	r30, r24
     fae:	ef 70       	andi	r30, 0x0F	; 15
     fb0:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     fb4:	2e 2f       	mov	r18, r30
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4b e0       	ldi	r20, 0x0B	; 11
     fba:	e4 9f       	mul	r30, r20
     fbc:	f0 01       	movw	r30, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	e4 5b       	subi	r30, 0xB4	; 180
     fc2:	fe 4f       	sbci	r31, 0xFE	; 254
     fc4:	9f 70       	andi	r25, 0x0F	; 15
     fc6:	42 81       	ldd	r20, Z+2	; 0x02
     fc8:	40 7f       	andi	r20, 0xF0	; 240
     fca:	94 2b       	or	r25, r20
     fcc:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     fce:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     fd2:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     fd6:	40 7e       	andi	r20, 0xE0	; 224
     fd8:	97 70       	andi	r25, 0x07	; 7
     fda:	94 2b       	or	r25, r20
     fdc:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     fde:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     fe2:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     fe4:	aa ef       	ldi	r26, 0xFA	; 250
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	9c 91       	ld	r25, X
     fea:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     fec:	9c 91       	ld	r25, X
     fee:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     ff0:	9c 91       	ld	r25, X
     ff2:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     ff4:	9c 91       	ld	r25, X
     ff6:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     ff8:	9c 91       	ld	r25, X
     ffa:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     ffc:	9c 91       	ld	r25, X
     ffe:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    1000:	9c 91       	ld	r25, X
    1002:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    1004:	9c 91       	ld	r25, X
    1006:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    100e:	40 81       	ld	r20, Z
    1010:	42 95       	swap	r20
    1012:	46 95       	lsr	r20
    1014:	47 70       	andi	r20, 0x07	; 7
    1016:	51 81       	ldd	r21, Z+1	; 0x01
    1018:	65 2f       	mov	r22, r21
    101a:	66 0f       	add	r22, r22
    101c:	66 0f       	add	r22, r22
    101e:	66 0f       	add	r22, r22
    1020:	86 2f       	mov	r24, r22
    1022:	84 2b       	or	r24, r20
    1024:	95 2f       	mov	r25, r21
    1026:	92 95       	swap	r25
    1028:	96 95       	lsr	r25
    102a:	97 70       	andi	r25, 0x07	; 7
    102c:	89 2b       	or	r24, r25
    102e:	b1 f4       	brne	.+44     	; 0x105c <__vector_18+0x1a2>
    1030:	8b e0       	ldi	r24, 0x0B	; 11
    1032:	82 9f       	mul	r24, r18
    1034:	f0 01       	movw	r30, r0
    1036:	83 9f       	mul	r24, r19
    1038:	f0 0d       	add	r31, r0
    103a:	11 24       	eor	r1, r1
    103c:	e4 5b       	subi	r30, 0xB4	; 180
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	83 81       	ldd	r24, Z+3	; 0x03
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	59 f4       	brne	.+22     	; 0x105c <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1046:	98 e0       	ldi	r25, 0x08	; 8
    1048:	88 e1       	ldi	r24, 0x18	; 24
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	a8 95       	wdr
    1050:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    105a:	ff cf       	rjmp	.-2      	; 0x105a <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    105c:	ee ee       	ldi	r30, 0xEE	; 238
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    1064:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    1066:	80 81       	ld	r24, Z
    1068:	8f 7d       	andi	r24, 0xDF	; 223
    106a:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    106c:	80 e8       	ldi	r24, 0x80	; 128
    106e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    1072:	0f 90       	pop	r0
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0b be       	out	0x3b, r0	; 59
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    10a0:	e8 ed       	ldi	r30, 0xD8	; 216
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    10a8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    10ac:	2c e0       	ldi	r18, 0x0C	; 12
    10ae:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    10b2:	27 e3       	ldi	r18, 0x37	; 55
    10b4:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    10b8:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    10bc:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    10c0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10c4:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    10c8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    10cc:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    10d0:	cd ee       	ldi	r28, 0xED	; 237
    10d2:	d0 e0       	ldi	r29, 0x00	; 0
    10d4:	18 82       	st	Y, r1
	CANSTMOB = 0;
    10d6:	ae ee       	ldi	r26, 0xEE	; 238
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    10dc:	20 e1       	ldi	r18, 0x10	; 16
    10de:	28 83       	st	Y, r18
	CANSTMOB = 0;
    10e0:	1c 92       	st	X, r1
	CANIDM4 = 0;
    10e2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    10e6:	28 2f       	mov	r18, r24
    10e8:	22 95       	swap	r18
    10ea:	22 0f       	add	r18, r18
    10ec:	20 7e       	andi	r18, 0xE0	; 224
    10ee:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	96 95       	lsr	r25
    10f8:	87 95       	ror	r24
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    1102:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    1106:	86 2f       	mov	r24, r22
    1108:	82 95       	swap	r24
    110a:	88 0f       	add	r24, r24
    110c:	80 7e       	andi	r24, 0xE0	; 224
    110e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    1112:	76 95       	lsr	r23
    1114:	67 95       	ror	r22
    1116:	76 95       	lsr	r23
    1118:	67 95       	ror	r22
    111a:	76 95       	lsr	r23
    111c:	67 95       	ror	r22
    111e:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    1122:	80 e8       	ldi	r24, 0x80	; 128
    1124:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    112e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    1132:	80 eb       	ldi	r24, 0xB0	; 176
    1134:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	80 83       	st	Z, r24

	reset = 0;
    113c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <reset>
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    114c:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <rx_off>
    1150:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <rx_on>
    1154:	24 17       	cp	r18, r20
    1156:	89 f1       	breq	.+98     	; 0x11ba <can_read_message_if_new+0x74>
    1158:	a4 2f       	mov	r26, r20
    115a:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    115c:	8b e0       	ldi	r24, 0x0B	; 11
    115e:	a8 9f       	mul	r26, r24
    1160:	b0 01       	movw	r22, r0
    1162:	11 24       	eor	r1, r1
    1164:	fb 01       	movw	r30, r22
    1166:	e4 5b       	subi	r30, 0xB4	; 180
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	20 81       	ld	r18, Z
    116c:	22 95       	swap	r18
    116e:	26 95       	lsr	r18
    1170:	27 70       	andi	r18, 0x07	; 7
    1172:	31 81       	ldd	r19, Z+1	; 0x01
    1174:	53 2f       	mov	r21, r19
    1176:	55 0f       	add	r21, r21
    1178:	55 0f       	add	r21, r21
    117a:	55 0f       	add	r21, r21
    117c:	25 2b       	or	r18, r21
    117e:	32 95       	swap	r19
    1180:	36 95       	lsr	r19
    1182:	37 70       	andi	r19, 0x07	; 7
    1184:	28 83       	st	Y, r18
    1186:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1188:	fb 01       	movw	r30, r22
    118a:	e2 5b       	subi	r30, 0xB2	; 178
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	20 81       	ld	r18, Z
    1190:	2f 70       	andi	r18, 0x0F	; 15
    1192:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    1194:	22 23       	and	r18, r18
    1196:	99 f0       	breq	.+38     	; 0x11be <can_read_message_if_new+0x78>
    1198:	db 01       	movw	r26, r22
    119a:	a1 5b       	subi	r26, 0xB1	; 177
    119c:	be 4f       	sbci	r27, 0xFE	; 254
    119e:	fe 01       	movw	r30, r28
    11a0:	33 96       	adiw	r30, 0x03	; 3
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	2d 5f       	subi	r18, 0xFD	; 253
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	ce 01       	movw	r24, r28
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    11ae:	2d 91       	ld	r18, X+
    11b0:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    11b2:	e8 17       	cp	r30, r24
    11b4:	f9 07       	cpc	r31, r25
    11b6:	d9 f7       	brne	.-10     	; 0x11ae <can_read_message_if_new+0x68>
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    11be:	4f 5f       	subi	r20, 0xFF	; 255
    11c0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <rx_off>
	}

	return true;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
}
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    11d2:	ab ed       	ldi	r26, 0xDB	; 219
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	8c 91       	ld	r24, X
    11d8:	8f 77       	andi	r24, 0x7F	; 127
    11da:	8c 93       	st	X, r24

	if (!tx_busy) {
    11dc:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_busy>
    11e0:	81 11       	cpse	r24, r1
    11e2:	27 c0       	rjmp	.+78     	; 0x1232 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    11e4:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    11e8:	80 81       	ld	r24, Z
    11ea:	82 95       	swap	r24
    11ec:	88 0f       	add	r24, r24
    11ee:	80 7e       	andi	r24, 0xE0	; 224
    11f0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	96 95       	lsr	r25
    11fa:	87 95       	ror	r24
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1208:	df 01       	movw	r26, r30
    120a:	13 96       	adiw	r26, 0x03	; 3
    120c:	9f 01       	movw	r18, r30
    120e:	25 5f       	subi	r18, 0xF5	; 245
    1210:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1212:	ca ef       	ldi	r28, 0xFA	; 250
    1214:	d0 e0       	ldi	r29, 0x00	; 0
    1216:	9d 91       	ld	r25, X+
    1218:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    121a:	a2 17       	cp	r26, r18
    121c:	b3 07       	cpc	r27, r19
    121e:	d9 f7       	brne	.-10     	; 0x1216 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	80 64       	ori	r24, 0x40	; 64
    122a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	43 c0       	rjmp	.+134    	; 0x12b8 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1232:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <tx_on>
    1236:	82 2f       	mov	r24, r18
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_off>
    123e:	83 1b       	sub	r24, r19
    1240:	91 09       	sbc	r25, r1
    1242:	8f 77       	andi	r24, 0x7F	; 127
    1244:	99 27       	eor	r25, r25
    1246:	40 97       	sbiw	r24, 0x10	; 16
    1248:	b1 f1       	breq	.+108    	; 0x12b6 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    124a:	a2 2f       	mov	r26, r18
    124c:	af 70       	andi	r26, 0x0F	; 15
    124e:	8b e0       	ldi	r24, 0x0B	; 11
    1250:	a8 9f       	mul	r26, r24
    1252:	d0 01       	movw	r26, r0
    1254:	11 24       	eor	r1, r1
    1256:	ed 01       	movw	r28, r26
    1258:	c4 50       	subi	r28, 0x04	; 4
    125a:	de 4f       	sbci	r29, 0xFE	; 254
    125c:	80 81       	ld	r24, Z
    125e:	98 2f       	mov	r25, r24
    1260:	92 95       	swap	r25
    1262:	99 0f       	add	r25, r25
    1264:	90 7e       	andi	r25, 0xE0	; 224
    1266:	88 81       	ld	r24, Y
    1268:	8f 71       	andi	r24, 0x1F	; 31
    126a:	89 2b       	or	r24, r25
    126c:	88 83       	st	Y, r24
    126e:	80 81       	ld	r24, Z
    1270:	98 2f       	mov	r25, r24
    1272:	96 95       	lsr	r25
    1274:	96 95       	lsr	r25
    1276:	96 95       	lsr	r25
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	80 7e       	andi	r24, 0xE0	; 224
    127c:	89 2b       	or	r24, r25
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	92 95       	swap	r25
    1284:	99 0f       	add	r25, r25
    1286:	90 7e       	andi	r25, 0xE0	; 224
    1288:	8f 71       	andi	r24, 0x1F	; 31
    128a:	89 2b       	or	r24, r25
    128c:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	98 2f       	mov	r25, r24
    1292:	9f 70       	andi	r25, 0x0F	; 15
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 7f       	andi	r24, 0xF0	; 240
    1298:	89 2b       	or	r24, r25
    129a:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    129c:	a1 50       	subi	r26, 0x01	; 1
    129e:	be 4f       	sbci	r27, 0xFE	; 254
    12a0:	33 96       	adiw	r30, 0x03	; 3
    12a2:	88 e0       	ldi	r24, 0x08	; 8
    12a4:	01 90       	ld	r0, Z+
    12a6:	0d 92       	st	X+, r0
    12a8:	8a 95       	dec	r24
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    12ac:	2f 5f       	subi	r18, 0xFF	; 255
    12ae:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <tx_on>
		result = true;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    12b6:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    12b8:	eb ed       	ldi	r30, 0xDB	; 219
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	90 81       	ld	r25, Z
    12be:	90 68       	ori	r25, 0x80	; 128
    12c0:	90 83       	st	Z, r25

	return result;
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <pwm_init>:
#include <avr/io.h>

void pwm_init(void){
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
    12c8:	8e b1       	in	r24, 0x0e	; 14
    12ca:	87 7e       	andi	r24, 0xE7	; 231
    12cc:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
    12ce:	8d b1       	in	r24, 0x0d	; 13
    12d0:	88 61       	ori	r24, 0x18	; 24
    12d2:	8d b9       	out	0x0d, r24	; 13
	
	//Timer 3 fast pwm, mode 14, TOP at ICR
	TCCR3B |= (1<<WGM33)|(1<<WGM32);
    12d4:	a1 e9       	ldi	r26, 0x91	; 145
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	8c 91       	ld	r24, X
    12da:	88 61       	ori	r24, 0x18	; 24
    12dc:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);
    12de:	e0 e9       	ldi	r30, 0x90	; 144
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	82 60       	ori	r24, 0x02	; 2
    12e6:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM30);
    12e8:	80 81       	ld	r24, Z
    12ea:	8e 7f       	andi	r24, 0xFE	; 254
    12ec:	80 83       	st	Z, r24

	// Non inverted PWM for A
	TCCR3A |= (1<<COM3A1);
    12ee:	80 81       	ld	r24, Z
    12f0:	80 68       	ori	r24, 0x80	; 128
    12f2:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<COM3A0);
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 7b       	andi	r24, 0xBF	; 191
    12f8:	80 83       	st	Z, r24
	
	// Inverted PWM for B
	TCCR3A |= (1<<COM3B1);
    12fa:	80 81       	ld	r24, Z
    12fc:	80 62       	ori	r24, 0x20	; 32
    12fe:	80 83       	st	Z, r24
	TCCR3A |= (1<<COM3B0);
    1300:	80 81       	ld	r24, Z
    1302:	80 61       	ori	r24, 0x10	; 16
    1304:	80 83       	st	Z, r24
	
	//Set prescale clk/1 for timer 3
	
	TCCR3B |= (1<<CS30);
    1306:	8c 91       	ld	r24, X
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	8c 93       	st	X, r24
	TCCR3B &= ~((1<<CS32)|(1<<CS31));
    130c:	8c 91       	ld	r24, X
    130e:	89 7f       	andi	r24, 0xF9	; 249
    1310:	8c 93       	st	X, r24
	
	//Set top value for timer 3
	ICR3 = 0x199; //20kHz
    1312:	e6 e9       	ldi	r30, 0x96	; 150
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	89 e9       	ldi	r24, 0x99	; 153
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
	
	OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3 (non inverted)
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	93 d1       	rcall	.+806    	; 0x164e <__floatunsisf>
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	44 d2       	rcall	.+1160   	; 0x17ba <__mulsf3>
    1332:	5c d1       	rcall	.+696    	; 0x15ec <__fixsfsi>
    1334:	e8 e9       	ldi	r30, 0x98	; 152
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	71 83       	std	Z+1, r23	; 0x01
    133a:	60 83       	st	Z, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1344:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1348:	08 95       	ret

0000134a <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
    134a:	95 b1       	in	r25, 0x05	; 5
    134c:	89 2b       	or	r24, r25
    134e:	85 b9       	out	0x05, r24	; 5
    1350:	08 95       	ret

00001352 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
    1352:	84 b1       	in	r24, 0x04	; 4
    1354:	80 6e       	ori	r24, 0xE0	; 224
    1356:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
    1358:	80 ee       	ldi	r24, 0xE0	; 224
    135a:	f7 cf       	rjmp	.-18     	; 0x134a <rgbled_turn_off>
    135c:	08 95       	ret

0000135e <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
    135e:	95 b1       	in	r25, 0x05	; 5
    1360:	80 95       	com	r24
    1362:	98 23       	and	r25, r24
    1364:	95 b9       	out	0x05, r25	; 5
    1366:	08 95       	ret

00001368 <spi_init>:
#define PIN_SCK PB1
#define PIN_SS PB0

void spi_init(spi_prescale_t clock_prescale) {
	// Set MOSI, SS, and SCK output, all others input
	DDR_SPI |= (1 << PIN_MOSI) | (1 << PIN_SCK) | (1 << PIN_SS);
    1368:	94 b1       	in	r25, 0x04	; 4
    136a:	97 60       	ori	r25, 0x07	; 7
    136c:	94 b9       	out	0x04, r25	; 4
	
	uint8_t SPI2X_val = (uint8_t)((clock_prescale >> 2) & 0b001);
    136e:	82 fb       	bst	r24, 2
    1370:	99 27       	eor	r25, r25
    1372:	90 f9       	bld	r25, 0
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0) | (1 << CPOL) | (1 << CPHA);
	SPSR = (SPI2X_val << SPI2X);
*/

	// Enable SPI, Master, selected prescaling, mode 0 (CPOL = CPHA = 0)
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0);
    1374:	28 2f       	mov	r18, r24
    1376:	22 70       	andi	r18, 0x02	; 2
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	80 65       	ori	r24, 0x50	; 80
    137c:	82 2b       	or	r24, r18
    137e:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA));
    1380:	8c b5       	in	r24, 0x2c	; 44
    1382:	83 7f       	andi	r24, 0xF3	; 243
    1384:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPI2X_val << SPI2X);
    1386:	9d bd       	out	0x2d, r25	; 45
    1388:	08 95       	ret

0000138a <spi_trancieve>:

}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	ec 01       	movw	r28, r24
	PORTB &= ~(1 << PIN_SS);
    1390:	28 98       	cbi	0x05, 0	; 5

	for (size_t i = 0; i < length; i++) {
    1392:	41 15       	cp	r20, r1
    1394:	51 05       	cpc	r21, r1
    1396:	c1 f0       	breq	.+48     	; 0x13c8 <spi_trancieve+0x3e>
    1398:	fb 01       	movw	r30, r22
    139a:	dc 01       	movw	r26, r24
    139c:	46 0f       	add	r20, r22
    139e:	57 1f       	adc	r21, r23
		SPDR = (tx_buffer != NULL) ? tx_buffer[i] : 0xFF;
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	20 97       	sbiw	r28, 0x00	; 0
    13a4:	11 f0       	breq	.+4      	; 0x13aa <spi_trancieve+0x20>
    13a6:	9c 91       	ld	r25, X
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <spi_trancieve+0x22>
    13aa:	98 2f       	mov	r25, r24
    13ac:	9e bd       	out	0x2e, r25	; 46

		while(!(SPSR & (1 << SPIF)));
    13ae:	0d b4       	in	r0, 0x2d	; 45
    13b0:	07 fe       	sbrs	r0, 7
    13b2:	fd cf       	rjmp	.-6      	; 0x13ae <spi_trancieve+0x24>
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
    13b4:	61 15       	cp	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	11 f0       	breq	.+4      	; 0x13be <spi_trancieve+0x34>
    13ba:	9e b5       	in	r25, 0x2e	; 46
    13bc:	90 83       	st	Z, r25
    13be:	31 96       	adiw	r30, 0x01	; 1
    13c0:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
	PORTB &= ~(1 << PIN_SS);

	for (size_t i = 0; i < length; i++) {
    13c2:	e4 17       	cp	r30, r20
    13c4:	f5 07       	cpc	r31, r21
    13c6:	69 f7       	brne	.-38     	; 0x13a2 <spi_trancieve+0x18>
		while(!(SPSR & (1 << SPIF)));
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
	}

	if (last_in_transmission) {
    13c8:	21 11       	cpse	r18, r1
		PORTB |= (1 << PIN_SS);
    13ca:	28 9a       	sbi	0x05, 0	; 5
	}
}
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	0b b6       	in	r0, 0x3b	; 59
    13de:	0f 92       	push	r0
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	af 93       	push	r26
    13f0:	bf 93       	push	r27
    13f2:	ef 93       	push	r30
    13f4:	ff 93       	push	r31
    13f6:	ac ec       	ldi	r26, 0xCC	; 204
    13f8:	b2 e0       	ldi	r27, 0x02	; 2
    13fa:	ec ea       	ldi	r30, 0xAC	; 172
    13fc:	f2 e0       	ldi	r31, 0x02	; 2
    13fe:	2c ec       	ldi	r18, 0xCC	; 204
    1400:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
    1402:	8d 91       	ld	r24, X+
    1404:	88 23       	and	r24, r24
    1406:	59 f0       	breq	.+22     	; 0x141e <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
    1408:	40 81       	ld	r20, Z
    140a:	51 81       	ldd	r21, Z+1	; 0x01
    140c:	62 81       	ldd	r22, Z+2	; 0x02
    140e:	73 81       	ldd	r23, Z+3	; 0x03
    1410:	50 5e       	subi	r21, 0xE0	; 224
    1412:	6f 4f       	sbci	r22, 0xFF	; 255
    1414:	7f 4f       	sbci	r23, 0xFF	; 255
    1416:	40 83       	st	Z, r20
    1418:	51 83       	std	Z+1, r21	; 0x01
    141a:	62 83       	std	Z+2, r22	; 0x02
    141c:	73 83       	std	Z+3, r23	; 0x03
    141e:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
    1420:	e2 17       	cp	r30, r18
    1422:	f3 07       	cpc	r31, r19
    1424:	71 f7       	brne	.-36     	; 0x1402 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0b be       	out	0x3b, r0	; 59
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__subsf3>:
    144a:	50 58       	subi	r21, 0x80	; 128

0000144c <__addsf3>:
    144c:	bb 27       	eor	r27, r27
    144e:	aa 27       	eor	r26, r26
    1450:	0e d0       	rcall	.+28     	; 0x146e <__addsf3x>
    1452:	75 c1       	rjmp	.+746    	; 0x173e <__fp_round>
    1454:	66 d1       	rcall	.+716    	; 0x1722 <__fp_pscA>
    1456:	30 f0       	brcs	.+12     	; 0x1464 <__addsf3+0x18>
    1458:	6b d1       	rcall	.+726    	; 0x1730 <__fp_pscB>
    145a:	20 f0       	brcs	.+8      	; 0x1464 <__addsf3+0x18>
    145c:	31 f4       	brne	.+12     	; 0x146a <__addsf3+0x1e>
    145e:	9f 3f       	cpi	r25, 0xFF	; 255
    1460:	11 f4       	brne	.+4      	; 0x1466 <__addsf3+0x1a>
    1462:	1e f4       	brtc	.+6      	; 0x146a <__addsf3+0x1e>
    1464:	5b c1       	rjmp	.+694    	; 0x171c <__fp_nan>
    1466:	0e f4       	brtc	.+2      	; 0x146a <__addsf3+0x1e>
    1468:	e0 95       	com	r30
    146a:	e7 fb       	bst	r30, 7
    146c:	51 c1       	rjmp	.+674    	; 0x1710 <__fp_inf>

0000146e <__addsf3x>:
    146e:	e9 2f       	mov	r30, r25
    1470:	77 d1       	rcall	.+750    	; 0x1760 <__fp_split3>
    1472:	80 f3       	brcs	.-32     	; 0x1454 <__addsf3+0x8>
    1474:	ba 17       	cp	r27, r26
    1476:	62 07       	cpc	r22, r18
    1478:	73 07       	cpc	r23, r19
    147a:	84 07       	cpc	r24, r20
    147c:	95 07       	cpc	r25, r21
    147e:	18 f0       	brcs	.+6      	; 0x1486 <__addsf3x+0x18>
    1480:	71 f4       	brne	.+28     	; 0x149e <__addsf3x+0x30>
    1482:	9e f5       	brtc	.+102    	; 0x14ea <__addsf3x+0x7c>
    1484:	8f c1       	rjmp	.+798    	; 0x17a4 <__fp_zero>
    1486:	0e f4       	brtc	.+2      	; 0x148a <__addsf3x+0x1c>
    1488:	e0 95       	com	r30
    148a:	0b 2e       	mov	r0, r27
    148c:	ba 2f       	mov	r27, r26
    148e:	a0 2d       	mov	r26, r0
    1490:	0b 01       	movw	r0, r22
    1492:	b9 01       	movw	r22, r18
    1494:	90 01       	movw	r18, r0
    1496:	0c 01       	movw	r0, r24
    1498:	ca 01       	movw	r24, r20
    149a:	a0 01       	movw	r20, r0
    149c:	11 24       	eor	r1, r1
    149e:	ff 27       	eor	r31, r31
    14a0:	59 1b       	sub	r21, r25
    14a2:	99 f0       	breq	.+38     	; 0x14ca <__addsf3x+0x5c>
    14a4:	59 3f       	cpi	r21, 0xF9	; 249
    14a6:	50 f4       	brcc	.+20     	; 0x14bc <__addsf3x+0x4e>
    14a8:	50 3e       	cpi	r21, 0xE0	; 224
    14aa:	68 f1       	brcs	.+90     	; 0x1506 <__addsf3x+0x98>
    14ac:	1a 16       	cp	r1, r26
    14ae:	f0 40       	sbci	r31, 0x00	; 0
    14b0:	a2 2f       	mov	r26, r18
    14b2:	23 2f       	mov	r18, r19
    14b4:	34 2f       	mov	r19, r20
    14b6:	44 27       	eor	r20, r20
    14b8:	58 5f       	subi	r21, 0xF8	; 248
    14ba:	f3 cf       	rjmp	.-26     	; 0x14a2 <__addsf3x+0x34>
    14bc:	46 95       	lsr	r20
    14be:	37 95       	ror	r19
    14c0:	27 95       	ror	r18
    14c2:	a7 95       	ror	r26
    14c4:	f0 40       	sbci	r31, 0x00	; 0
    14c6:	53 95       	inc	r21
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <__addsf3x+0x4e>
    14ca:	7e f4       	brtc	.+30     	; 0x14ea <__addsf3x+0x7c>
    14cc:	1f 16       	cp	r1, r31
    14ce:	ba 0b       	sbc	r27, r26
    14d0:	62 0b       	sbc	r22, r18
    14d2:	73 0b       	sbc	r23, r19
    14d4:	84 0b       	sbc	r24, r20
    14d6:	ba f0       	brmi	.+46     	; 0x1506 <__addsf3x+0x98>
    14d8:	91 50       	subi	r25, 0x01	; 1
    14da:	a1 f0       	breq	.+40     	; 0x1504 <__addsf3x+0x96>
    14dc:	ff 0f       	add	r31, r31
    14de:	bb 1f       	adc	r27, r27
    14e0:	66 1f       	adc	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	88 1f       	adc	r24, r24
    14e6:	c2 f7       	brpl	.-16     	; 0x14d8 <__addsf3x+0x6a>
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <__addsf3x+0x98>
    14ea:	ba 0f       	add	r27, r26
    14ec:	62 1f       	adc	r22, r18
    14ee:	73 1f       	adc	r23, r19
    14f0:	84 1f       	adc	r24, r20
    14f2:	48 f4       	brcc	.+18     	; 0x1506 <__addsf3x+0x98>
    14f4:	87 95       	ror	r24
    14f6:	77 95       	ror	r23
    14f8:	67 95       	ror	r22
    14fa:	b7 95       	ror	r27
    14fc:	f7 95       	ror	r31
    14fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1500:	08 f0       	brcs	.+2      	; 0x1504 <__addsf3x+0x96>
    1502:	b3 cf       	rjmp	.-154    	; 0x146a <__addsf3+0x1e>
    1504:	93 95       	inc	r25
    1506:	88 0f       	add	r24, r24
    1508:	08 f0       	brcs	.+2      	; 0x150c <__addsf3x+0x9e>
    150a:	99 27       	eor	r25, r25
    150c:	ee 0f       	add	r30, r30
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	08 95       	ret

00001514 <__cmpsf2>:
    1514:	d9 d0       	rcall	.+434    	; 0x16c8 <__fp_cmp>
    1516:	08 f4       	brcc	.+2      	; 0x151a <__cmpsf2+0x6>
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	08 95       	ret

0000151c <__divsf3>:
    151c:	0c d0       	rcall	.+24     	; 0x1536 <__divsf3x>
    151e:	0f c1       	rjmp	.+542    	; 0x173e <__fp_round>
    1520:	07 d1       	rcall	.+526    	; 0x1730 <__fp_pscB>
    1522:	40 f0       	brcs	.+16     	; 0x1534 <__divsf3+0x18>
    1524:	fe d0       	rcall	.+508    	; 0x1722 <__fp_pscA>
    1526:	30 f0       	brcs	.+12     	; 0x1534 <__divsf3+0x18>
    1528:	21 f4       	brne	.+8      	; 0x1532 <__divsf3+0x16>
    152a:	5f 3f       	cpi	r21, 0xFF	; 255
    152c:	19 f0       	breq	.+6      	; 0x1534 <__divsf3+0x18>
    152e:	f0 c0       	rjmp	.+480    	; 0x1710 <__fp_inf>
    1530:	51 11       	cpse	r21, r1
    1532:	39 c1       	rjmp	.+626    	; 0x17a6 <__fp_szero>
    1534:	f3 c0       	rjmp	.+486    	; 0x171c <__fp_nan>

00001536 <__divsf3x>:
    1536:	14 d1       	rcall	.+552    	; 0x1760 <__fp_split3>
    1538:	98 f3       	brcs	.-26     	; 0x1520 <__divsf3+0x4>

0000153a <__divsf3_pse>:
    153a:	99 23       	and	r25, r25
    153c:	c9 f3       	breq	.-14     	; 0x1530 <__divsf3+0x14>
    153e:	55 23       	and	r21, r21
    1540:	b1 f3       	breq	.-20     	; 0x152e <__divsf3+0x12>
    1542:	95 1b       	sub	r25, r21
    1544:	55 0b       	sbc	r21, r21
    1546:	bb 27       	eor	r27, r27
    1548:	aa 27       	eor	r26, r26
    154a:	62 17       	cp	r22, r18
    154c:	73 07       	cpc	r23, r19
    154e:	84 07       	cpc	r24, r20
    1550:	38 f0       	brcs	.+14     	; 0x1560 <__divsf3_pse+0x26>
    1552:	9f 5f       	subi	r25, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	44 1f       	adc	r20, r20
    155c:	aa 1f       	adc	r26, r26
    155e:	a9 f3       	breq	.-22     	; 0x154a <__divsf3_pse+0x10>
    1560:	33 d0       	rcall	.+102    	; 0x15c8 <__divsf3_pse+0x8e>
    1562:	0e 2e       	mov	r0, r30
    1564:	3a f0       	brmi	.+14     	; 0x1574 <__divsf3_pse+0x3a>
    1566:	e0 e8       	ldi	r30, 0x80	; 128
    1568:	30 d0       	rcall	.+96     	; 0x15ca <__divsf3_pse+0x90>
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	50 40       	sbci	r21, 0x00	; 0
    156e:	e6 95       	lsr	r30
    1570:	00 1c       	adc	r0, r0
    1572:	ca f7       	brpl	.-14     	; 0x1566 <__divsf3_pse+0x2c>
    1574:	29 d0       	rcall	.+82     	; 0x15c8 <__divsf3_pse+0x8e>
    1576:	fe 2f       	mov	r31, r30
    1578:	27 d0       	rcall	.+78     	; 0x15c8 <__divsf3_pse+0x8e>
    157a:	66 0f       	add	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	88 1f       	adc	r24, r24
    1580:	bb 1f       	adc	r27, r27
    1582:	26 17       	cp	r18, r22
    1584:	37 07       	cpc	r19, r23
    1586:	48 07       	cpc	r20, r24
    1588:	ab 07       	cpc	r26, r27
    158a:	b0 e8       	ldi	r27, 0x80	; 128
    158c:	09 f0       	breq	.+2      	; 0x1590 <__divsf3_pse+0x56>
    158e:	bb 0b       	sbc	r27, r27
    1590:	80 2d       	mov	r24, r0
    1592:	bf 01       	movw	r22, r30
    1594:	ff 27       	eor	r31, r31
    1596:	93 58       	subi	r25, 0x83	; 131
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	2a f0       	brmi	.+10     	; 0x15a6 <__divsf3_pse+0x6c>
    159c:	9e 3f       	cpi	r25, 0xFE	; 254
    159e:	51 05       	cpc	r21, r1
    15a0:	68 f0       	brcs	.+26     	; 0x15bc <__divsf3_pse+0x82>
    15a2:	b6 c0       	rjmp	.+364    	; 0x1710 <__fp_inf>
    15a4:	00 c1       	rjmp	.+512    	; 0x17a6 <__fp_szero>
    15a6:	5f 3f       	cpi	r21, 0xFF	; 255
    15a8:	ec f3       	brlt	.-6      	; 0x15a4 <__divsf3_pse+0x6a>
    15aa:	98 3e       	cpi	r25, 0xE8	; 232
    15ac:	dc f3       	brlt	.-10     	; 0x15a4 <__divsf3_pse+0x6a>
    15ae:	86 95       	lsr	r24
    15b0:	77 95       	ror	r23
    15b2:	67 95       	ror	r22
    15b4:	b7 95       	ror	r27
    15b6:	f7 95       	ror	r31
    15b8:	9f 5f       	subi	r25, 0xFF	; 255
    15ba:	c9 f7       	brne	.-14     	; 0x15ae <__divsf3_pse+0x74>
    15bc:	88 0f       	add	r24, r24
    15be:	91 1d       	adc	r25, r1
    15c0:	96 95       	lsr	r25
    15c2:	87 95       	ror	r24
    15c4:	97 f9       	bld	r25, 7
    15c6:	08 95       	ret
    15c8:	e1 e0       	ldi	r30, 0x01	; 1
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	bb 1f       	adc	r27, r27
    15d2:	62 17       	cp	r22, r18
    15d4:	73 07       	cpc	r23, r19
    15d6:	84 07       	cpc	r24, r20
    15d8:	ba 07       	cpc	r27, r26
    15da:	20 f0       	brcs	.+8      	; 0x15e4 <__divsf3_pse+0xaa>
    15dc:	62 1b       	sub	r22, r18
    15de:	73 0b       	sbc	r23, r19
    15e0:	84 0b       	sbc	r24, r20
    15e2:	ba 0b       	sbc	r27, r26
    15e4:	ee 1f       	adc	r30, r30
    15e6:	88 f7       	brcc	.-30     	; 0x15ca <__divsf3_pse+0x90>
    15e8:	e0 95       	com	r30
    15ea:	08 95       	ret

000015ec <__fixsfsi>:
    15ec:	04 d0       	rcall	.+8      	; 0x15f6 <__fixunssfsi>
    15ee:	68 94       	set
    15f0:	b1 11       	cpse	r27, r1
    15f2:	d9 c0       	rjmp	.+434    	; 0x17a6 <__fp_szero>
    15f4:	08 95       	ret

000015f6 <__fixunssfsi>:
    15f6:	bc d0       	rcall	.+376    	; 0x1770 <__fp_splitA>
    15f8:	88 f0       	brcs	.+34     	; 0x161c <__fixunssfsi+0x26>
    15fa:	9f 57       	subi	r25, 0x7F	; 127
    15fc:	90 f0       	brcs	.+36     	; 0x1622 <__fixunssfsi+0x2c>
    15fe:	b9 2f       	mov	r27, r25
    1600:	99 27       	eor	r25, r25
    1602:	b7 51       	subi	r27, 0x17	; 23
    1604:	a0 f0       	brcs	.+40     	; 0x162e <__fixunssfsi+0x38>
    1606:	d1 f0       	breq	.+52     	; 0x163c <__fixunssfsi+0x46>
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	1a f0       	brmi	.+6      	; 0x1618 <__fixunssfsi+0x22>
    1612:	ba 95       	dec	r27
    1614:	c9 f7       	brne	.-14     	; 0x1608 <__fixunssfsi+0x12>
    1616:	12 c0       	rjmp	.+36     	; 0x163c <__fixunssfsi+0x46>
    1618:	b1 30       	cpi	r27, 0x01	; 1
    161a:	81 f0       	breq	.+32     	; 0x163c <__fixunssfsi+0x46>
    161c:	c3 d0       	rcall	.+390    	; 0x17a4 <__fp_zero>
    161e:	b1 e0       	ldi	r27, 0x01	; 1
    1620:	08 95       	ret
    1622:	c0 c0       	rjmp	.+384    	; 0x17a4 <__fp_zero>
    1624:	67 2f       	mov	r22, r23
    1626:	78 2f       	mov	r23, r24
    1628:	88 27       	eor	r24, r24
    162a:	b8 5f       	subi	r27, 0xF8	; 248
    162c:	39 f0       	breq	.+14     	; 0x163c <__fixunssfsi+0x46>
    162e:	b9 3f       	cpi	r27, 0xF9	; 249
    1630:	cc f3       	brlt	.-14     	; 0x1624 <__fixunssfsi+0x2e>
    1632:	86 95       	lsr	r24
    1634:	77 95       	ror	r23
    1636:	67 95       	ror	r22
    1638:	b3 95       	inc	r27
    163a:	d9 f7       	brne	.-10     	; 0x1632 <__fixunssfsi+0x3c>
    163c:	3e f4       	brtc	.+14     	; 0x164c <__fixunssfsi+0x56>
    163e:	90 95       	com	r25
    1640:	80 95       	com	r24
    1642:	70 95       	com	r23
    1644:	61 95       	neg	r22
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	8f 4f       	sbci	r24, 0xFF	; 255
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	08 95       	ret

0000164e <__floatunsisf>:
    164e:	e8 94       	clt
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <__floatsisf+0x12>

00001652 <__floatsisf>:
    1652:	97 fb       	bst	r25, 7
    1654:	3e f4       	brtc	.+14     	; 0x1664 <__floatsisf+0x12>
    1656:	90 95       	com	r25
    1658:	80 95       	com	r24
    165a:	70 95       	com	r23
    165c:	61 95       	neg	r22
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	8f 4f       	sbci	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	99 23       	and	r25, r25
    1666:	a9 f0       	breq	.+42     	; 0x1692 <__floatsisf+0x40>
    1668:	f9 2f       	mov	r31, r25
    166a:	96 e9       	ldi	r25, 0x96	; 150
    166c:	bb 27       	eor	r27, r27
    166e:	93 95       	inc	r25
    1670:	f6 95       	lsr	r31
    1672:	87 95       	ror	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f1 11       	cpse	r31, r1
    167c:	f8 cf       	rjmp	.-16     	; 0x166e <__floatsisf+0x1c>
    167e:	fa f4       	brpl	.+62     	; 0x16be <__floatsisf+0x6c>
    1680:	bb 0f       	add	r27, r27
    1682:	11 f4       	brne	.+4      	; 0x1688 <__floatsisf+0x36>
    1684:	60 ff       	sbrs	r22, 0
    1686:	1b c0       	rjmp	.+54     	; 0x16be <__floatsisf+0x6c>
    1688:	6f 5f       	subi	r22, 0xFF	; 255
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	16 c0       	rjmp	.+44     	; 0x16be <__floatsisf+0x6c>
    1692:	88 23       	and	r24, r24
    1694:	11 f0       	breq	.+4      	; 0x169a <__floatsisf+0x48>
    1696:	96 e9       	ldi	r25, 0x96	; 150
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <__floatsisf+0x6a>
    169a:	77 23       	and	r23, r23
    169c:	21 f0       	breq	.+8      	; 0x16a6 <__floatsisf+0x54>
    169e:	9e e8       	ldi	r25, 0x8E	; 142
    16a0:	87 2f       	mov	r24, r23
    16a2:	76 2f       	mov	r23, r22
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <__floatsisf+0x5e>
    16a6:	66 23       	and	r22, r22
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <__floatsisf+0x74>
    16aa:	96 e8       	ldi	r25, 0x86	; 134
    16ac:	86 2f       	mov	r24, r22
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	2a f0       	brmi	.+10     	; 0x16be <__floatsisf+0x6c>
    16b4:	9a 95       	dec	r25
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	da f7       	brpl	.-10     	; 0x16b4 <__floatsisf+0x62>
    16be:	88 0f       	add	r24, r24
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	97 f9       	bld	r25, 7
    16c6:	08 95       	ret

000016c8 <__fp_cmp>:
    16c8:	99 0f       	add	r25, r25
    16ca:	00 08       	sbc	r0, r0
    16cc:	55 0f       	add	r21, r21
    16ce:	aa 0b       	sbc	r26, r26
    16d0:	e0 e8       	ldi	r30, 0x80	; 128
    16d2:	fe ef       	ldi	r31, 0xFE	; 254
    16d4:	16 16       	cp	r1, r22
    16d6:	17 06       	cpc	r1, r23
    16d8:	e8 07       	cpc	r30, r24
    16da:	f9 07       	cpc	r31, r25
    16dc:	c0 f0       	brcs	.+48     	; 0x170e <__fp_cmp+0x46>
    16de:	12 16       	cp	r1, r18
    16e0:	13 06       	cpc	r1, r19
    16e2:	e4 07       	cpc	r30, r20
    16e4:	f5 07       	cpc	r31, r21
    16e6:	98 f0       	brcs	.+38     	; 0x170e <__fp_cmp+0x46>
    16e8:	62 1b       	sub	r22, r18
    16ea:	73 0b       	sbc	r23, r19
    16ec:	84 0b       	sbc	r24, r20
    16ee:	95 0b       	sbc	r25, r21
    16f0:	39 f4       	brne	.+14     	; 0x1700 <__fp_cmp+0x38>
    16f2:	0a 26       	eor	r0, r26
    16f4:	61 f0       	breq	.+24     	; 0x170e <__fp_cmp+0x46>
    16f6:	23 2b       	or	r18, r19
    16f8:	24 2b       	or	r18, r20
    16fa:	25 2b       	or	r18, r21
    16fc:	21 f4       	brne	.+8      	; 0x1706 <__fp_cmp+0x3e>
    16fe:	08 95       	ret
    1700:	0a 26       	eor	r0, r26
    1702:	09 f4       	brne	.+2      	; 0x1706 <__fp_cmp+0x3e>
    1704:	a1 40       	sbci	r26, 0x01	; 1
    1706:	a6 95       	lsr	r26
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	81 1d       	adc	r24, r1
    170c:	81 1d       	adc	r24, r1
    170e:	08 95       	ret

00001710 <__fp_inf>:
    1710:	97 f9       	bld	r25, 7
    1712:	9f 67       	ori	r25, 0x7F	; 127
    1714:	80 e8       	ldi	r24, 0x80	; 128
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	08 95       	ret

0000171c <__fp_nan>:
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	80 ec       	ldi	r24, 0xC0	; 192
    1720:	08 95       	ret

00001722 <__fp_pscA>:
    1722:	00 24       	eor	r0, r0
    1724:	0a 94       	dec	r0
    1726:	16 16       	cp	r1, r22
    1728:	17 06       	cpc	r1, r23
    172a:	18 06       	cpc	r1, r24
    172c:	09 06       	cpc	r0, r25
    172e:	08 95       	ret

00001730 <__fp_pscB>:
    1730:	00 24       	eor	r0, r0
    1732:	0a 94       	dec	r0
    1734:	12 16       	cp	r1, r18
    1736:	13 06       	cpc	r1, r19
    1738:	14 06       	cpc	r1, r20
    173a:	05 06       	cpc	r0, r21
    173c:	08 95       	ret

0000173e <__fp_round>:
    173e:	09 2e       	mov	r0, r25
    1740:	03 94       	inc	r0
    1742:	00 0c       	add	r0, r0
    1744:	11 f4       	brne	.+4      	; 0x174a <__fp_round+0xc>
    1746:	88 23       	and	r24, r24
    1748:	52 f0       	brmi	.+20     	; 0x175e <__fp_round+0x20>
    174a:	bb 0f       	add	r27, r27
    174c:	40 f4       	brcc	.+16     	; 0x175e <__fp_round+0x20>
    174e:	bf 2b       	or	r27, r31
    1750:	11 f4       	brne	.+4      	; 0x1756 <__fp_round+0x18>
    1752:	60 ff       	sbrs	r22, 0
    1754:	04 c0       	rjmp	.+8      	; 0x175e <__fp_round+0x20>
    1756:	6f 5f       	subi	r22, 0xFF	; 255
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	8f 4f       	sbci	r24, 0xFF	; 255
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	08 95       	ret

00001760 <__fp_split3>:
    1760:	57 fd       	sbrc	r21, 7
    1762:	90 58       	subi	r25, 0x80	; 128
    1764:	44 0f       	add	r20, r20
    1766:	55 1f       	adc	r21, r21
    1768:	59 f0       	breq	.+22     	; 0x1780 <__fp_splitA+0x10>
    176a:	5f 3f       	cpi	r21, 0xFF	; 255
    176c:	71 f0       	breq	.+28     	; 0x178a <__fp_splitA+0x1a>
    176e:	47 95       	ror	r20

00001770 <__fp_splitA>:
    1770:	88 0f       	add	r24, r24
    1772:	97 fb       	bst	r25, 7
    1774:	99 1f       	adc	r25, r25
    1776:	61 f0       	breq	.+24     	; 0x1790 <__fp_splitA+0x20>
    1778:	9f 3f       	cpi	r25, 0xFF	; 255
    177a:	79 f0       	breq	.+30     	; 0x179a <__fp_splitA+0x2a>
    177c:	87 95       	ror	r24
    177e:	08 95       	ret
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	14 06       	cpc	r1, r20
    1786:	55 1f       	adc	r21, r21
    1788:	f2 cf       	rjmp	.-28     	; 0x176e <__fp_split3+0xe>
    178a:	46 95       	lsr	r20
    178c:	f1 df       	rcall	.-30     	; 0x1770 <__fp_splitA>
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <__fp_splitA+0x30>
    1790:	16 16       	cp	r1, r22
    1792:	17 06       	cpc	r1, r23
    1794:	18 06       	cpc	r1, r24
    1796:	99 1f       	adc	r25, r25
    1798:	f1 cf       	rjmp	.-30     	; 0x177c <__fp_splitA+0xc>
    179a:	86 95       	lsr	r24
    179c:	71 05       	cpc	r23, r1
    179e:	61 05       	cpc	r22, r1
    17a0:	08 94       	sec
    17a2:	08 95       	ret

000017a4 <__fp_zero>:
    17a4:	e8 94       	clt

000017a6 <__fp_szero>:
    17a6:	bb 27       	eor	r27, r27
    17a8:	66 27       	eor	r22, r22
    17aa:	77 27       	eor	r23, r23
    17ac:	cb 01       	movw	r24, r22
    17ae:	97 f9       	bld	r25, 7
    17b0:	08 95       	ret

000017b2 <__gesf2>:
    17b2:	8a df       	rcall	.-236    	; 0x16c8 <__fp_cmp>
    17b4:	08 f4       	brcc	.+2      	; 0x17b8 <__gesf2+0x6>
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	08 95       	ret

000017ba <__mulsf3>:
    17ba:	0b d0       	rcall	.+22     	; 0x17d2 <__mulsf3x>
    17bc:	c0 cf       	rjmp	.-128    	; 0x173e <__fp_round>
    17be:	b1 df       	rcall	.-158    	; 0x1722 <__fp_pscA>
    17c0:	28 f0       	brcs	.+10     	; 0x17cc <__mulsf3+0x12>
    17c2:	b6 df       	rcall	.-148    	; 0x1730 <__fp_pscB>
    17c4:	18 f0       	brcs	.+6      	; 0x17cc <__mulsf3+0x12>
    17c6:	95 23       	and	r25, r21
    17c8:	09 f0       	breq	.+2      	; 0x17cc <__mulsf3+0x12>
    17ca:	a2 cf       	rjmp	.-188    	; 0x1710 <__fp_inf>
    17cc:	a7 cf       	rjmp	.-178    	; 0x171c <__fp_nan>
    17ce:	11 24       	eor	r1, r1
    17d0:	ea cf       	rjmp	.-44     	; 0x17a6 <__fp_szero>

000017d2 <__mulsf3x>:
    17d2:	c6 df       	rcall	.-116    	; 0x1760 <__fp_split3>
    17d4:	a0 f3       	brcs	.-24     	; 0x17be <__mulsf3+0x4>

000017d6 <__mulsf3_pse>:
    17d6:	95 9f       	mul	r25, r21
    17d8:	d1 f3       	breq	.-12     	; 0x17ce <__mulsf3+0x14>
    17da:	95 0f       	add	r25, r21
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	55 1f       	adc	r21, r21
    17e0:	62 9f       	mul	r22, r18
    17e2:	f0 01       	movw	r30, r0
    17e4:	72 9f       	mul	r23, r18
    17e6:	bb 27       	eor	r27, r27
    17e8:	f0 0d       	add	r31, r0
    17ea:	b1 1d       	adc	r27, r1
    17ec:	63 9f       	mul	r22, r19
    17ee:	aa 27       	eor	r26, r26
    17f0:	f0 0d       	add	r31, r0
    17f2:	b1 1d       	adc	r27, r1
    17f4:	aa 1f       	adc	r26, r26
    17f6:	64 9f       	mul	r22, r20
    17f8:	66 27       	eor	r22, r22
    17fa:	b0 0d       	add	r27, r0
    17fc:	a1 1d       	adc	r26, r1
    17fe:	66 1f       	adc	r22, r22
    1800:	82 9f       	mul	r24, r18
    1802:	22 27       	eor	r18, r18
    1804:	b0 0d       	add	r27, r0
    1806:	a1 1d       	adc	r26, r1
    1808:	62 1f       	adc	r22, r18
    180a:	73 9f       	mul	r23, r19
    180c:	b0 0d       	add	r27, r0
    180e:	a1 1d       	adc	r26, r1
    1810:	62 1f       	adc	r22, r18
    1812:	83 9f       	mul	r24, r19
    1814:	a0 0d       	add	r26, r0
    1816:	61 1d       	adc	r22, r1
    1818:	22 1f       	adc	r18, r18
    181a:	74 9f       	mul	r23, r20
    181c:	33 27       	eor	r19, r19
    181e:	a0 0d       	add	r26, r0
    1820:	61 1d       	adc	r22, r1
    1822:	23 1f       	adc	r18, r19
    1824:	84 9f       	mul	r24, r20
    1826:	60 0d       	add	r22, r0
    1828:	21 1d       	adc	r18, r1
    182a:	82 2f       	mov	r24, r18
    182c:	76 2f       	mov	r23, r22
    182e:	6a 2f       	mov	r22, r26
    1830:	11 24       	eor	r1, r1
    1832:	9f 57       	subi	r25, 0x7F	; 127
    1834:	50 40       	sbci	r21, 0x00	; 0
    1836:	8a f0       	brmi	.+34     	; 0x185a <__mulsf3_pse+0x84>
    1838:	e1 f0       	breq	.+56     	; 0x1872 <__mulsf3_pse+0x9c>
    183a:	88 23       	and	r24, r24
    183c:	4a f0       	brmi	.+18     	; 0x1850 <__mulsf3_pse+0x7a>
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	bb 1f       	adc	r27, r27
    1844:	66 1f       	adc	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	91 50       	subi	r25, 0x01	; 1
    184c:	50 40       	sbci	r21, 0x00	; 0
    184e:	a9 f7       	brne	.-22     	; 0x183a <__mulsf3_pse+0x64>
    1850:	9e 3f       	cpi	r25, 0xFE	; 254
    1852:	51 05       	cpc	r21, r1
    1854:	70 f0       	brcs	.+28     	; 0x1872 <__mulsf3_pse+0x9c>
    1856:	5c cf       	rjmp	.-328    	; 0x1710 <__fp_inf>
    1858:	a6 cf       	rjmp	.-180    	; 0x17a6 <__fp_szero>
    185a:	5f 3f       	cpi	r21, 0xFF	; 255
    185c:	ec f3       	brlt	.-6      	; 0x1858 <__mulsf3_pse+0x82>
    185e:	98 3e       	cpi	r25, 0xE8	; 232
    1860:	dc f3       	brlt	.-10     	; 0x1858 <__mulsf3_pse+0x82>
    1862:	86 95       	lsr	r24
    1864:	77 95       	ror	r23
    1866:	67 95       	ror	r22
    1868:	b7 95       	ror	r27
    186a:	f7 95       	ror	r31
    186c:	e7 95       	ror	r30
    186e:	9f 5f       	subi	r25, 0xFF	; 255
    1870:	c1 f7       	brne	.-16     	; 0x1862 <__mulsf3_pse+0x8c>
    1872:	fe 2b       	or	r31, r30
    1874:	88 0f       	add	r24, r24
    1876:	91 1d       	adc	r25, r1
    1878:	96 95       	lsr	r25
    187a:	87 95       	ror	r24
    187c:	97 f9       	bld	r25, 7
    187e:	08 95       	ret

00001880 <__tablejump2__>:
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	00 24       	eor	r0, r0
    1886:	00 1c       	adc	r0, r0
    1888:	0b be       	out	0x3b, r0	; 59
    188a:	07 90       	elpm	r0, Z+
    188c:	f6 91       	elpm	r31, Z
    188e:	e0 2d       	mov	r30, r0
    1890:	09 94       	ijmp

00001892 <atoi>:
    1892:	fc 01       	movw	r30, r24
    1894:	88 27       	eor	r24, r24
    1896:	99 27       	eor	r25, r25
    1898:	e8 94       	clt
    189a:	21 91       	ld	r18, Z+
    189c:	20 32       	cpi	r18, 0x20	; 32
    189e:	e9 f3       	breq	.-6      	; 0x189a <atoi+0x8>
    18a0:	29 30       	cpi	r18, 0x09	; 9
    18a2:	10 f0       	brcs	.+4      	; 0x18a8 <atoi+0x16>
    18a4:	2e 30       	cpi	r18, 0x0E	; 14
    18a6:	c8 f3       	brcs	.-14     	; 0x189a <atoi+0x8>
    18a8:	2b 32       	cpi	r18, 0x2B	; 43
    18aa:	39 f0       	breq	.+14     	; 0x18ba <atoi+0x28>
    18ac:	2d 32       	cpi	r18, 0x2D	; 45
    18ae:	31 f4       	brne	.+12     	; 0x18bc <atoi+0x2a>
    18b0:	68 94       	set
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <atoi+0x28>
    18b4:	0b d0       	rcall	.+22     	; 0x18cc <__mulhi_const_10>
    18b6:	82 0f       	add	r24, r18
    18b8:	91 1d       	adc	r25, r1
    18ba:	21 91       	ld	r18, Z+
    18bc:	20 53       	subi	r18, 0x30	; 48
    18be:	2a 30       	cpi	r18, 0x0A	; 10
    18c0:	c8 f3       	brcs	.-14     	; 0x18b4 <atoi+0x22>
    18c2:	1e f4       	brtc	.+6      	; 0x18ca <atoi+0x38>
    18c4:	90 95       	com	r25
    18c6:	81 95       	neg	r24
    18c8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ca:	08 95       	ret

000018cc <__mulhi_const_10>:
    18cc:	7a e0       	ldi	r23, 0x0A	; 10
    18ce:	97 9f       	mul	r25, r23
    18d0:	90 2d       	mov	r25, r0
    18d2:	87 9f       	mul	r24, r23
    18d4:	80 2d       	mov	r24, r0
    18d6:	91 0d       	add	r25, r1
    18d8:	11 24       	eor	r1, r1
    18da:	08 95       	ret

000018dc <printf>:
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	ae 01       	movw	r20, r28
    18e6:	4b 5f       	subi	r20, 0xFB	; 251
    18e8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ea:	fa 01       	movw	r30, r20
    18ec:	61 91       	ld	r22, Z+
    18ee:	71 91       	ld	r23, Z+
    18f0:	af 01       	movw	r20, r30
    18f2:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__iob+0x2>
    18f6:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__iob+0x3>
    18fa:	08 d0       	rcall	.+16     	; 0x190c <vfprintf>
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <putchar>:
    1902:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <__iob+0x2>
    1906:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <__iob+0x3>
    190a:	13 c2       	rjmp	.+1062   	; 0x1d32 <fputc>

0000190c <vfprintf>:
    190c:	2f 92       	push	r2
    190e:	3f 92       	push	r3
    1910:	4f 92       	push	r4
    1912:	5f 92       	push	r5
    1914:	6f 92       	push	r6
    1916:	7f 92       	push	r7
    1918:	8f 92       	push	r8
    191a:	9f 92       	push	r9
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	2b 97       	sbiw	r28, 0x0b	; 11
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	6c 01       	movw	r12, r24
    1942:	7b 01       	movw	r14, r22
    1944:	8a 01       	movw	r16, r20
    1946:	fc 01       	movw	r30, r24
    1948:	17 82       	std	Z+7, r1	; 0x07
    194a:	16 82       	std	Z+6, r1	; 0x06
    194c:	83 81       	ldd	r24, Z+3	; 0x03
    194e:	81 ff       	sbrs	r24, 1
    1950:	bf c1       	rjmp	.+894    	; 0x1cd0 <vfprintf+0x3c4>
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	3c 01       	movw	r6, r24
    1958:	f6 01       	movw	r30, r12
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	f7 01       	movw	r30, r14
    195e:	93 fd       	sbrc	r25, 3
    1960:	85 91       	lpm	r24, Z+
    1962:	93 ff       	sbrs	r25, 3
    1964:	81 91       	ld	r24, Z+
    1966:	7f 01       	movw	r14, r30
    1968:	88 23       	and	r24, r24
    196a:	09 f4       	brne	.+2      	; 0x196e <vfprintf+0x62>
    196c:	ad c1       	rjmp	.+858    	; 0x1cc8 <vfprintf+0x3bc>
    196e:	85 32       	cpi	r24, 0x25	; 37
    1970:	39 f4       	brne	.+14     	; 0x1980 <vfprintf+0x74>
    1972:	93 fd       	sbrc	r25, 3
    1974:	85 91       	lpm	r24, Z+
    1976:	93 ff       	sbrs	r25, 3
    1978:	81 91       	ld	r24, Z+
    197a:	7f 01       	movw	r14, r30
    197c:	85 32       	cpi	r24, 0x25	; 37
    197e:	21 f4       	brne	.+8      	; 0x1988 <vfprintf+0x7c>
    1980:	b6 01       	movw	r22, r12
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	d6 d1       	rcall	.+940    	; 0x1d32 <fputc>
    1986:	e8 cf       	rjmp	.-48     	; 0x1958 <vfprintf+0x4c>
    1988:	91 2c       	mov	r9, r1
    198a:	21 2c       	mov	r2, r1
    198c:	31 2c       	mov	r3, r1
    198e:	ff e1       	ldi	r31, 0x1F	; 31
    1990:	f3 15       	cp	r31, r3
    1992:	d8 f0       	brcs	.+54     	; 0x19ca <vfprintf+0xbe>
    1994:	8b 32       	cpi	r24, 0x2B	; 43
    1996:	79 f0       	breq	.+30     	; 0x19b6 <vfprintf+0xaa>
    1998:	38 f4       	brcc	.+14     	; 0x19a8 <vfprintf+0x9c>
    199a:	80 32       	cpi	r24, 0x20	; 32
    199c:	79 f0       	breq	.+30     	; 0x19bc <vfprintf+0xb0>
    199e:	83 32       	cpi	r24, 0x23	; 35
    19a0:	a1 f4       	brne	.+40     	; 0x19ca <vfprintf+0xbe>
    19a2:	23 2d       	mov	r18, r3
    19a4:	20 61       	ori	r18, 0x10	; 16
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <vfprintf+0xd6>
    19a8:	8d 32       	cpi	r24, 0x2D	; 45
    19aa:	61 f0       	breq	.+24     	; 0x19c4 <vfprintf+0xb8>
    19ac:	80 33       	cpi	r24, 0x30	; 48
    19ae:	69 f4       	brne	.+26     	; 0x19ca <vfprintf+0xbe>
    19b0:	23 2d       	mov	r18, r3
    19b2:	21 60       	ori	r18, 0x01	; 1
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <vfprintf+0xd6>
    19b6:	83 2d       	mov	r24, r3
    19b8:	82 60       	ori	r24, 0x02	; 2
    19ba:	38 2e       	mov	r3, r24
    19bc:	e3 2d       	mov	r30, r3
    19be:	e4 60       	ori	r30, 0x04	; 4
    19c0:	3e 2e       	mov	r3, r30
    19c2:	2a c0       	rjmp	.+84     	; 0x1a18 <vfprintf+0x10c>
    19c4:	f3 2d       	mov	r31, r3
    19c6:	f8 60       	ori	r31, 0x08	; 8
    19c8:	1d c0       	rjmp	.+58     	; 0x1a04 <vfprintf+0xf8>
    19ca:	37 fc       	sbrc	r3, 7
    19cc:	2d c0       	rjmp	.+90     	; 0x1a28 <vfprintf+0x11c>
    19ce:	20 ed       	ldi	r18, 0xD0	; 208
    19d0:	28 0f       	add	r18, r24
    19d2:	2a 30       	cpi	r18, 0x0A	; 10
    19d4:	40 f0       	brcs	.+16     	; 0x19e6 <vfprintf+0xda>
    19d6:	8e 32       	cpi	r24, 0x2E	; 46
    19d8:	b9 f4       	brne	.+46     	; 0x1a08 <vfprintf+0xfc>
    19da:	36 fc       	sbrc	r3, 6
    19dc:	75 c1       	rjmp	.+746    	; 0x1cc8 <vfprintf+0x3bc>
    19de:	23 2d       	mov	r18, r3
    19e0:	20 64       	ori	r18, 0x40	; 64
    19e2:	32 2e       	mov	r3, r18
    19e4:	19 c0       	rjmp	.+50     	; 0x1a18 <vfprintf+0x10c>
    19e6:	36 fe       	sbrs	r3, 6
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <vfprintf+0xea>
    19ea:	8a e0       	ldi	r24, 0x0A	; 10
    19ec:	98 9e       	mul	r9, r24
    19ee:	20 0d       	add	r18, r0
    19f0:	11 24       	eor	r1, r1
    19f2:	92 2e       	mov	r9, r18
    19f4:	11 c0       	rjmp	.+34     	; 0x1a18 <vfprintf+0x10c>
    19f6:	ea e0       	ldi	r30, 0x0A	; 10
    19f8:	2e 9e       	mul	r2, r30
    19fa:	20 0d       	add	r18, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	22 2e       	mov	r2, r18
    1a00:	f3 2d       	mov	r31, r3
    1a02:	f0 62       	ori	r31, 0x20	; 32
    1a04:	3f 2e       	mov	r3, r31
    1a06:	08 c0       	rjmp	.+16     	; 0x1a18 <vfprintf+0x10c>
    1a08:	8c 36       	cpi	r24, 0x6C	; 108
    1a0a:	21 f4       	brne	.+8      	; 0x1a14 <vfprintf+0x108>
    1a0c:	83 2d       	mov	r24, r3
    1a0e:	80 68       	ori	r24, 0x80	; 128
    1a10:	38 2e       	mov	r3, r24
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <vfprintf+0x10c>
    1a14:	88 36       	cpi	r24, 0x68	; 104
    1a16:	41 f4       	brne	.+16     	; 0x1a28 <vfprintf+0x11c>
    1a18:	f7 01       	movw	r30, r14
    1a1a:	93 fd       	sbrc	r25, 3
    1a1c:	85 91       	lpm	r24, Z+
    1a1e:	93 ff       	sbrs	r25, 3
    1a20:	81 91       	ld	r24, Z+
    1a22:	7f 01       	movw	r14, r30
    1a24:	81 11       	cpse	r24, r1
    1a26:	b3 cf       	rjmp	.-154    	; 0x198e <vfprintf+0x82>
    1a28:	98 2f       	mov	r25, r24
    1a2a:	9f 7d       	andi	r25, 0xDF	; 223
    1a2c:	95 54       	subi	r25, 0x45	; 69
    1a2e:	93 30       	cpi	r25, 0x03	; 3
    1a30:	28 f4       	brcc	.+10     	; 0x1a3c <vfprintf+0x130>
    1a32:	0c 5f       	subi	r16, 0xFC	; 252
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	9f e3       	ldi	r25, 0x3F	; 63
    1a38:	99 83       	std	Y+1, r25	; 0x01
    1a3a:	0d c0       	rjmp	.+26     	; 0x1a56 <vfprintf+0x14a>
    1a3c:	83 36       	cpi	r24, 0x63	; 99
    1a3e:	31 f0       	breq	.+12     	; 0x1a4c <vfprintf+0x140>
    1a40:	83 37       	cpi	r24, 0x73	; 115
    1a42:	71 f0       	breq	.+28     	; 0x1a60 <vfprintf+0x154>
    1a44:	83 35       	cpi	r24, 0x53	; 83
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <vfprintf+0x13e>
    1a48:	55 c0       	rjmp	.+170    	; 0x1af4 <vfprintf+0x1e8>
    1a4a:	20 c0       	rjmp	.+64     	; 0x1a8c <vfprintf+0x180>
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	80 81       	ld	r24, Z
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	0e 5f       	subi	r16, 0xFE	; 254
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	88 24       	eor	r8, r8
    1a58:	83 94       	inc	r8
    1a5a:	91 2c       	mov	r9, r1
    1a5c:	53 01       	movw	r10, r6
    1a5e:	12 c0       	rjmp	.+36     	; 0x1a84 <vfprintf+0x178>
    1a60:	28 01       	movw	r4, r16
    1a62:	f2 e0       	ldi	r31, 0x02	; 2
    1a64:	4f 0e       	add	r4, r31
    1a66:	51 1c       	adc	r5, r1
    1a68:	f8 01       	movw	r30, r16
    1a6a:	a0 80       	ld	r10, Z
    1a6c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a6e:	36 fe       	sbrs	r3, 6
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <vfprintf+0x16c>
    1a72:	69 2d       	mov	r22, r9
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <vfprintf+0x170>
    1a78:	6f ef       	ldi	r22, 0xFF	; 255
    1a7a:	7f ef       	ldi	r23, 0xFF	; 255
    1a7c:	c5 01       	movw	r24, r10
    1a7e:	4e d1       	rcall	.+668    	; 0x1d1c <strnlen>
    1a80:	4c 01       	movw	r8, r24
    1a82:	82 01       	movw	r16, r4
    1a84:	f3 2d       	mov	r31, r3
    1a86:	ff 77       	andi	r31, 0x7F	; 127
    1a88:	3f 2e       	mov	r3, r31
    1a8a:	15 c0       	rjmp	.+42     	; 0x1ab6 <vfprintf+0x1aa>
    1a8c:	28 01       	movw	r4, r16
    1a8e:	22 e0       	ldi	r18, 0x02	; 2
    1a90:	42 0e       	add	r4, r18
    1a92:	51 1c       	adc	r5, r1
    1a94:	f8 01       	movw	r30, r16
    1a96:	a0 80       	ld	r10, Z
    1a98:	b1 80       	ldd	r11, Z+1	; 0x01
    1a9a:	36 fe       	sbrs	r3, 6
    1a9c:	03 c0       	rjmp	.+6      	; 0x1aa4 <vfprintf+0x198>
    1a9e:	69 2d       	mov	r22, r9
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x19c>
    1aa4:	6f ef       	ldi	r22, 0xFF	; 255
    1aa6:	7f ef       	ldi	r23, 0xFF	; 255
    1aa8:	c5 01       	movw	r24, r10
    1aaa:	2d d1       	rcall	.+602    	; 0x1d06 <strnlen_P>
    1aac:	4c 01       	movw	r8, r24
    1aae:	f3 2d       	mov	r31, r3
    1ab0:	f0 68       	ori	r31, 0x80	; 128
    1ab2:	3f 2e       	mov	r3, r31
    1ab4:	82 01       	movw	r16, r4
    1ab6:	33 fc       	sbrc	r3, 3
    1ab8:	19 c0       	rjmp	.+50     	; 0x1aec <vfprintf+0x1e0>
    1aba:	82 2d       	mov	r24, r2
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	88 16       	cp	r8, r24
    1ac0:	99 06       	cpc	r9, r25
    1ac2:	a0 f4       	brcc	.+40     	; 0x1aec <vfprintf+0x1e0>
    1ac4:	b6 01       	movw	r22, r12
    1ac6:	80 e2       	ldi	r24, 0x20	; 32
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	33 d1       	rcall	.+614    	; 0x1d32 <fputc>
    1acc:	2a 94       	dec	r2
    1ace:	f5 cf       	rjmp	.-22     	; 0x1aba <vfprintf+0x1ae>
    1ad0:	f5 01       	movw	r30, r10
    1ad2:	37 fc       	sbrc	r3, 7
    1ad4:	85 91       	lpm	r24, Z+
    1ad6:	37 fe       	sbrs	r3, 7
    1ad8:	81 91       	ld	r24, Z+
    1ada:	5f 01       	movw	r10, r30
    1adc:	b6 01       	movw	r22, r12
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	28 d1       	rcall	.+592    	; 0x1d32 <fputc>
    1ae2:	21 10       	cpse	r2, r1
    1ae4:	2a 94       	dec	r2
    1ae6:	21 e0       	ldi	r18, 0x01	; 1
    1ae8:	82 1a       	sub	r8, r18
    1aea:	91 08       	sbc	r9, r1
    1aec:	81 14       	cp	r8, r1
    1aee:	91 04       	cpc	r9, r1
    1af0:	79 f7       	brne	.-34     	; 0x1ad0 <vfprintf+0x1c4>
    1af2:	e1 c0       	rjmp	.+450    	; 0x1cb6 <vfprintf+0x3aa>
    1af4:	84 36       	cpi	r24, 0x64	; 100
    1af6:	11 f0       	breq	.+4      	; 0x1afc <vfprintf+0x1f0>
    1af8:	89 36       	cpi	r24, 0x69	; 105
    1afa:	39 f5       	brne	.+78     	; 0x1b4a <vfprintf+0x23e>
    1afc:	f8 01       	movw	r30, r16
    1afe:	37 fe       	sbrs	r3, 7
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <vfprintf+0x204>
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	0c 5f       	subi	r16, 0xFC	; 252
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	08 c0       	rjmp	.+16     	; 0x1b20 <vfprintf+0x214>
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	07 2e       	mov	r0, r23
    1b16:	00 0c       	add	r0, r0
    1b18:	88 0b       	sbc	r24, r24
    1b1a:	99 0b       	sbc	r25, r25
    1b1c:	0e 5f       	subi	r16, 0xFE	; 254
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	f3 2d       	mov	r31, r3
    1b22:	ff 76       	andi	r31, 0x6F	; 111
    1b24:	3f 2e       	mov	r3, r31
    1b26:	97 ff       	sbrs	r25, 7
    1b28:	09 c0       	rjmp	.+18     	; 0x1b3c <vfprintf+0x230>
    1b2a:	90 95       	com	r25
    1b2c:	80 95       	com	r24
    1b2e:	70 95       	com	r23
    1b30:	61 95       	neg	r22
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	8f 4f       	sbci	r24, 0xFF	; 255
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	f0 68       	ori	r31, 0x80	; 128
    1b3a:	3f 2e       	mov	r3, r31
    1b3c:	2a e0       	ldi	r18, 0x0A	; 10
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	a3 01       	movw	r20, r6
    1b42:	33 d1       	rcall	.+614    	; 0x1daa <__ultoa_invert>
    1b44:	88 2e       	mov	r8, r24
    1b46:	86 18       	sub	r8, r6
    1b48:	44 c0       	rjmp	.+136    	; 0x1bd2 <vfprintf+0x2c6>
    1b4a:	85 37       	cpi	r24, 0x75	; 117
    1b4c:	31 f4       	brne	.+12     	; 0x1b5a <vfprintf+0x24e>
    1b4e:	23 2d       	mov	r18, r3
    1b50:	2f 7e       	andi	r18, 0xEF	; 239
    1b52:	b2 2e       	mov	r11, r18
    1b54:	2a e0       	ldi	r18, 0x0A	; 10
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	25 c0       	rjmp	.+74     	; 0x1ba4 <vfprintf+0x298>
    1b5a:	93 2d       	mov	r25, r3
    1b5c:	99 7f       	andi	r25, 0xF9	; 249
    1b5e:	b9 2e       	mov	r11, r25
    1b60:	8f 36       	cpi	r24, 0x6F	; 111
    1b62:	c1 f0       	breq	.+48     	; 0x1b94 <vfprintf+0x288>
    1b64:	18 f4       	brcc	.+6      	; 0x1b6c <vfprintf+0x260>
    1b66:	88 35       	cpi	r24, 0x58	; 88
    1b68:	79 f0       	breq	.+30     	; 0x1b88 <vfprintf+0x27c>
    1b6a:	ae c0       	rjmp	.+348    	; 0x1cc8 <vfprintf+0x3bc>
    1b6c:	80 37       	cpi	r24, 0x70	; 112
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <vfprintf+0x26a>
    1b70:	88 37       	cpi	r24, 0x78	; 120
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <vfprintf+0x270>
    1b74:	a9 c0       	rjmp	.+338    	; 0x1cc8 <vfprintf+0x3bc>
    1b76:	e9 2f       	mov	r30, r25
    1b78:	e0 61       	ori	r30, 0x10	; 16
    1b7a:	be 2e       	mov	r11, r30
    1b7c:	b4 fe       	sbrs	r11, 4
    1b7e:	0d c0       	rjmp	.+26     	; 0x1b9a <vfprintf+0x28e>
    1b80:	fb 2d       	mov	r31, r11
    1b82:	f4 60       	ori	r31, 0x04	; 4
    1b84:	bf 2e       	mov	r11, r31
    1b86:	09 c0       	rjmp	.+18     	; 0x1b9a <vfprintf+0x28e>
    1b88:	34 fe       	sbrs	r3, 4
    1b8a:	0a c0       	rjmp	.+20     	; 0x1ba0 <vfprintf+0x294>
    1b8c:	29 2f       	mov	r18, r25
    1b8e:	26 60       	ori	r18, 0x06	; 6
    1b90:	b2 2e       	mov	r11, r18
    1b92:	06 c0       	rjmp	.+12     	; 0x1ba0 <vfprintf+0x294>
    1b94:	28 e0       	ldi	r18, 0x08	; 8
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	05 c0       	rjmp	.+10     	; 0x1ba4 <vfprintf+0x298>
    1b9a:	20 e1       	ldi	r18, 0x10	; 16
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <vfprintf+0x298>
    1ba0:	20 e1       	ldi	r18, 0x10	; 16
    1ba2:	32 e0       	ldi	r19, 0x02	; 2
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	b7 fe       	sbrs	r11, 7
    1ba8:	07 c0       	rjmp	.+14     	; 0x1bb8 <vfprintf+0x2ac>
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	0c 5f       	subi	r16, 0xFC	; 252
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <vfprintf+0x2b8>
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 5f       	subi	r16, 0xFE	; 254
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	a3 01       	movw	r20, r6
    1bc6:	f1 d0       	rcall	.+482    	; 0x1daa <__ultoa_invert>
    1bc8:	88 2e       	mov	r8, r24
    1bca:	86 18       	sub	r8, r6
    1bcc:	fb 2d       	mov	r31, r11
    1bce:	ff 77       	andi	r31, 0x7F	; 127
    1bd0:	3f 2e       	mov	r3, r31
    1bd2:	36 fe       	sbrs	r3, 6
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <vfprintf+0x2e4>
    1bd6:	23 2d       	mov	r18, r3
    1bd8:	2e 7f       	andi	r18, 0xFE	; 254
    1bda:	a2 2e       	mov	r10, r18
    1bdc:	89 14       	cp	r8, r9
    1bde:	58 f4       	brcc	.+22     	; 0x1bf6 <vfprintf+0x2ea>
    1be0:	34 fe       	sbrs	r3, 4
    1be2:	0b c0       	rjmp	.+22     	; 0x1bfa <vfprintf+0x2ee>
    1be4:	32 fc       	sbrc	r3, 2
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <vfprintf+0x2ee>
    1be8:	83 2d       	mov	r24, r3
    1bea:	8e 7e       	andi	r24, 0xEE	; 238
    1bec:	a8 2e       	mov	r10, r24
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <vfprintf+0x2ee>
    1bf0:	b8 2c       	mov	r11, r8
    1bf2:	a3 2c       	mov	r10, r3
    1bf4:	03 c0       	rjmp	.+6      	; 0x1bfc <vfprintf+0x2f0>
    1bf6:	b8 2c       	mov	r11, r8
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <vfprintf+0x2f0>
    1bfa:	b9 2c       	mov	r11, r9
    1bfc:	a4 fe       	sbrs	r10, 4
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <vfprintf+0x312>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e8 0d       	add	r30, r8
    1c04:	f1 1d       	adc	r31, r1
    1c06:	80 81       	ld	r24, Z
    1c08:	80 33       	cpi	r24, 0x30	; 48
    1c0a:	21 f4       	brne	.+8      	; 0x1c14 <vfprintf+0x308>
    1c0c:	9a 2d       	mov	r25, r10
    1c0e:	99 7e       	andi	r25, 0xE9	; 233
    1c10:	a9 2e       	mov	r10, r25
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <vfprintf+0x31a>
    1c14:	a2 fe       	sbrs	r10, 2
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x318>
    1c18:	b3 94       	inc	r11
    1c1a:	b3 94       	inc	r11
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <vfprintf+0x31a>
    1c1e:	8a 2d       	mov	r24, r10
    1c20:	86 78       	andi	r24, 0x86	; 134
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <vfprintf+0x31a>
    1c24:	b3 94       	inc	r11
    1c26:	a3 fc       	sbrc	r10, 3
    1c28:	10 c0       	rjmp	.+32     	; 0x1c4a <vfprintf+0x33e>
    1c2a:	a0 fe       	sbrs	r10, 0
    1c2c:	06 c0       	rjmp	.+12     	; 0x1c3a <vfprintf+0x32e>
    1c2e:	b2 14       	cp	r11, r2
    1c30:	80 f4       	brcc	.+32     	; 0x1c52 <vfprintf+0x346>
    1c32:	28 0c       	add	r2, r8
    1c34:	92 2c       	mov	r9, r2
    1c36:	9b 18       	sub	r9, r11
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <vfprintf+0x348>
    1c3a:	b2 14       	cp	r11, r2
    1c3c:	58 f4       	brcc	.+22     	; 0x1c54 <vfprintf+0x348>
    1c3e:	b6 01       	movw	r22, r12
    1c40:	80 e2       	ldi	r24, 0x20	; 32
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	76 d0       	rcall	.+236    	; 0x1d32 <fputc>
    1c46:	b3 94       	inc	r11
    1c48:	f8 cf       	rjmp	.-16     	; 0x1c3a <vfprintf+0x32e>
    1c4a:	b2 14       	cp	r11, r2
    1c4c:	18 f4       	brcc	.+6      	; 0x1c54 <vfprintf+0x348>
    1c4e:	2b 18       	sub	r2, r11
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <vfprintf+0x34a>
    1c52:	98 2c       	mov	r9, r8
    1c54:	21 2c       	mov	r2, r1
    1c56:	a4 fe       	sbrs	r10, 4
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <vfprintf+0x36c>
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	80 e3       	ldi	r24, 0x30	; 48
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	68 d0       	rcall	.+208    	; 0x1d32 <fputc>
    1c62:	a2 fe       	sbrs	r10, 2
    1c64:	16 c0       	rjmp	.+44     	; 0x1c92 <vfprintf+0x386>
    1c66:	a1 fc       	sbrc	r10, 1
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <vfprintf+0x364>
    1c6a:	88 e7       	ldi	r24, 0x78	; 120
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <vfprintf+0x368>
    1c70:	88 e5       	ldi	r24, 0x58	; 88
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	b6 01       	movw	r22, r12
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <vfprintf+0x384>
    1c78:	8a 2d       	mov	r24, r10
    1c7a:	86 78       	andi	r24, 0x86	; 134
    1c7c:	51 f0       	breq	.+20     	; 0x1c92 <vfprintf+0x386>
    1c7e:	a1 fe       	sbrs	r10, 1
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0x37a>
    1c82:	8b e2       	ldi	r24, 0x2B	; 43
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <vfprintf+0x37c>
    1c86:	80 e2       	ldi	r24, 0x20	; 32
    1c88:	a7 fc       	sbrc	r10, 7
    1c8a:	8d e2       	ldi	r24, 0x2D	; 45
    1c8c:	b6 01       	movw	r22, r12
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	50 d0       	rcall	.+160    	; 0x1d32 <fputc>
    1c92:	89 14       	cp	r8, r9
    1c94:	30 f4       	brcc	.+12     	; 0x1ca2 <vfprintf+0x396>
    1c96:	b6 01       	movw	r22, r12
    1c98:	80 e3       	ldi	r24, 0x30	; 48
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	4a d0       	rcall	.+148    	; 0x1d32 <fputc>
    1c9e:	9a 94       	dec	r9
    1ca0:	f8 cf       	rjmp	.-16     	; 0x1c92 <vfprintf+0x386>
    1ca2:	8a 94       	dec	r8
    1ca4:	f3 01       	movw	r30, r6
    1ca6:	e8 0d       	add	r30, r8
    1ca8:	f1 1d       	adc	r31, r1
    1caa:	80 81       	ld	r24, Z
    1cac:	b6 01       	movw	r22, r12
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	40 d0       	rcall	.+128    	; 0x1d32 <fputc>
    1cb2:	81 10       	cpse	r8, r1
    1cb4:	f6 cf       	rjmp	.-20     	; 0x1ca2 <vfprintf+0x396>
    1cb6:	22 20       	and	r2, r2
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <vfprintf+0x3b0>
    1cba:	4e ce       	rjmp	.-868    	; 0x1958 <vfprintf+0x4c>
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	37 d0       	rcall	.+110    	; 0x1d32 <fputc>
    1cc4:	2a 94       	dec	r2
    1cc6:	f7 cf       	rjmp	.-18     	; 0x1cb6 <vfprintf+0x3aa>
    1cc8:	f6 01       	movw	r30, r12
    1cca:	86 81       	ldd	r24, Z+6	; 0x06
    1ccc:	97 81       	ldd	r25, Z+7	; 0x07
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <vfprintf+0x3c8>
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	2b 96       	adiw	r28, 0x0b	; 11
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	af 90       	pop	r10
    1cf4:	9f 90       	pop	r9
    1cf6:	8f 90       	pop	r8
    1cf8:	7f 90       	pop	r7
    1cfa:	6f 90       	pop	r6
    1cfc:	5f 90       	pop	r5
    1cfe:	4f 90       	pop	r4
    1d00:	3f 90       	pop	r3
    1d02:	2f 90       	pop	r2
    1d04:	08 95       	ret

00001d06 <strnlen_P>:
    1d06:	fc 01       	movw	r30, r24
    1d08:	05 90       	lpm	r0, Z+
    1d0a:	61 50       	subi	r22, 0x01	; 1
    1d0c:	70 40       	sbci	r23, 0x00	; 0
    1d0e:	01 10       	cpse	r0, r1
    1d10:	d8 f7       	brcc	.-10     	; 0x1d08 <strnlen_P+0x2>
    1d12:	80 95       	com	r24
    1d14:	90 95       	com	r25
    1d16:	8e 0f       	add	r24, r30
    1d18:	9f 1f       	adc	r25, r31
    1d1a:	08 95       	ret

00001d1c <strnlen>:
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	61 50       	subi	r22, 0x01	; 1
    1d20:	70 40       	sbci	r23, 0x00	; 0
    1d22:	01 90       	ld	r0, Z+
    1d24:	01 10       	cpse	r0, r1
    1d26:	d8 f7       	brcc	.-10     	; 0x1d1e <strnlen+0x2>
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	8e 0f       	add	r24, r30
    1d2e:	9f 1f       	adc	r25, r31
    1d30:	08 95       	ret

00001d32 <fputc>:
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	fb 01       	movw	r30, r22
    1d3c:	23 81       	ldd	r18, Z+3	; 0x03
    1d3e:	21 fd       	sbrc	r18, 1
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <fputc+0x16>
    1d42:	8f ef       	ldi	r24, 0xFF	; 255
    1d44:	9f ef       	ldi	r25, 0xFF	; 255
    1d46:	2c c0       	rjmp	.+88     	; 0x1da0 <fputc+0x6e>
    1d48:	22 ff       	sbrs	r18, 2
    1d4a:	16 c0       	rjmp	.+44     	; 0x1d78 <fputc+0x46>
    1d4c:	46 81       	ldd	r20, Z+6	; 0x06
    1d4e:	57 81       	ldd	r21, Z+7	; 0x07
    1d50:	24 81       	ldd	r18, Z+4	; 0x04
    1d52:	35 81       	ldd	r19, Z+5	; 0x05
    1d54:	42 17       	cp	r20, r18
    1d56:	53 07       	cpc	r21, r19
    1d58:	44 f4       	brge	.+16     	; 0x1d6a <fputc+0x38>
    1d5a:	a0 81       	ld	r26, Z
    1d5c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d5e:	9d 01       	movw	r18, r26
    1d60:	2f 5f       	subi	r18, 0xFF	; 255
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	31 83       	std	Z+1, r19	; 0x01
    1d66:	20 83       	st	Z, r18
    1d68:	8c 93       	st	X, r24
    1d6a:	26 81       	ldd	r18, Z+6	; 0x06
    1d6c:	37 81       	ldd	r19, Z+7	; 0x07
    1d6e:	2f 5f       	subi	r18, 0xFF	; 255
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	37 83       	std	Z+7, r19	; 0x07
    1d74:	26 83       	std	Z+6, r18	; 0x06
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <fputc+0x6e>
    1d78:	8b 01       	movw	r16, r22
    1d7a:	ec 01       	movw	r28, r24
    1d7c:	fb 01       	movw	r30, r22
    1d7e:	00 84       	ldd	r0, Z+8	; 0x08
    1d80:	f1 85       	ldd	r31, Z+9	; 0x09
    1d82:	e0 2d       	mov	r30, r0
    1d84:	09 95       	icall
    1d86:	89 2b       	or	r24, r25
    1d88:	e1 f6       	brne	.-72     	; 0x1d42 <fputc+0x10>
    1d8a:	d8 01       	movw	r26, r16
    1d8c:	16 96       	adiw	r26, 0x06	; 6
    1d8e:	8d 91       	ld	r24, X+
    1d90:	9c 91       	ld	r25, X
    1d92:	17 97       	sbiw	r26, 0x07	; 7
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	17 96       	adiw	r26, 0x07	; 7
    1d98:	9c 93       	st	X, r25
    1d9a:	8e 93       	st	-X, r24
    1d9c:	16 97       	sbiw	r26, 0x06	; 6
    1d9e:	ce 01       	movw	r24, r28
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	08 95       	ret

00001daa <__ultoa_invert>:
    1daa:	fa 01       	movw	r30, r20
    1dac:	aa 27       	eor	r26, r26
    1dae:	28 30       	cpi	r18, 0x08	; 8
    1db0:	51 f1       	breq	.+84     	; 0x1e06 <__ultoa_invert+0x5c>
    1db2:	20 31       	cpi	r18, 0x10	; 16
    1db4:	81 f1       	breq	.+96     	; 0x1e16 <__ultoa_invert+0x6c>
    1db6:	e8 94       	clt
    1db8:	6f 93       	push	r22
    1dba:	6e 7f       	andi	r22, 0xFE	; 254
    1dbc:	6e 5f       	subi	r22, 0xFE	; 254
    1dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	af 4f       	sbci	r26, 0xFF	; 255
    1dc6:	b1 e0       	ldi	r27, 0x01	; 1
    1dc8:	3e d0       	rcall	.+124    	; 0x1e46 <__ultoa_invert+0x9c>
    1dca:	b4 e0       	ldi	r27, 0x04	; 4
    1dcc:	3c d0       	rcall	.+120    	; 0x1e46 <__ultoa_invert+0x9c>
    1dce:	67 0f       	add	r22, r23
    1dd0:	78 1f       	adc	r23, r24
    1dd2:	89 1f       	adc	r24, r25
    1dd4:	9a 1f       	adc	r25, r26
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	68 0f       	add	r22, r24
    1dda:	79 1f       	adc	r23, r25
    1ddc:	8a 1f       	adc	r24, r26
    1dde:	91 1d       	adc	r25, r1
    1de0:	a1 1d       	adc	r26, r1
    1de2:	6a 0f       	add	r22, r26
    1de4:	71 1d       	adc	r23, r1
    1de6:	81 1d       	adc	r24, r1
    1de8:	91 1d       	adc	r25, r1
    1dea:	a1 1d       	adc	r26, r1
    1dec:	20 d0       	rcall	.+64     	; 0x1e2e <__ultoa_invert+0x84>
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <__ultoa_invert+0x48>
    1df0:	68 94       	set
    1df2:	3f 91       	pop	r19
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	26 9f       	mul	r18, r22
    1df8:	11 24       	eor	r1, r1
    1dfa:	30 19       	sub	r19, r0
    1dfc:	30 5d       	subi	r19, 0xD0	; 208
    1dfe:	31 93       	st	Z+, r19
    1e00:	de f6       	brtc	.-74     	; 0x1db8 <__ultoa_invert+0xe>
    1e02:	cf 01       	movw	r24, r30
    1e04:	08 95       	ret
    1e06:	46 2f       	mov	r20, r22
    1e08:	47 70       	andi	r20, 0x07	; 7
    1e0a:	40 5d       	subi	r20, 0xD0	; 208
    1e0c:	41 93       	st	Z+, r20
    1e0e:	b3 e0       	ldi	r27, 0x03	; 3
    1e10:	0f d0       	rcall	.+30     	; 0x1e30 <__ultoa_invert+0x86>
    1e12:	c9 f7       	brne	.-14     	; 0x1e06 <__ultoa_invert+0x5c>
    1e14:	f6 cf       	rjmp	.-20     	; 0x1e02 <__ultoa_invert+0x58>
    1e16:	46 2f       	mov	r20, r22
    1e18:	4f 70       	andi	r20, 0x0F	; 15
    1e1a:	40 5d       	subi	r20, 0xD0	; 208
    1e1c:	4a 33       	cpi	r20, 0x3A	; 58
    1e1e:	18 f0       	brcs	.+6      	; 0x1e26 <__ultoa_invert+0x7c>
    1e20:	49 5d       	subi	r20, 0xD9	; 217
    1e22:	31 fd       	sbrc	r19, 1
    1e24:	40 52       	subi	r20, 0x20	; 32
    1e26:	41 93       	st	Z+, r20
    1e28:	02 d0       	rcall	.+4      	; 0x1e2e <__ultoa_invert+0x84>
    1e2a:	a9 f7       	brne	.-22     	; 0x1e16 <__ultoa_invert+0x6c>
    1e2c:	ea cf       	rjmp	.-44     	; 0x1e02 <__ultoa_invert+0x58>
    1e2e:	b4 e0       	ldi	r27, 0x04	; 4
    1e30:	a6 95       	lsr	r26
    1e32:	97 95       	ror	r25
    1e34:	87 95       	ror	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	ba 95       	dec	r27
    1e3c:	c9 f7       	brne	.-14     	; 0x1e30 <__ultoa_invert+0x86>
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	61 05       	cpc	r22, r1
    1e42:	71 05       	cpc	r23, r1
    1e44:	08 95       	ret
    1e46:	9b 01       	movw	r18, r22
    1e48:	ac 01       	movw	r20, r24
    1e4a:	0a 2e       	mov	r0, r26
    1e4c:	06 94       	lsr	r0
    1e4e:	57 95       	ror	r21
    1e50:	47 95       	ror	r20
    1e52:	37 95       	ror	r19
    1e54:	27 95       	ror	r18
    1e56:	ba 95       	dec	r27
    1e58:	c9 f7       	brne	.-14     	; 0x1e4c <__ultoa_invert+0xa2>
    1e5a:	62 0f       	add	r22, r18
    1e5c:	73 1f       	adc	r23, r19
    1e5e:	84 1f       	adc	r24, r20
    1e60:	95 1f       	adc	r25, r21
    1e62:	a0 1d       	adc	r26, r0
    1e64:	08 95       	ret

00001e66 <_exit>:
    1e66:	f8 94       	cli

00001e68 <__stop_program>:
    1e68:	ff cf       	rjmp	.-2      	; 0x1e68 <__stop_program>
