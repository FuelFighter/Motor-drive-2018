
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000029e8  00002a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000262  0080019e  0080019e  00002b1a  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002b1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ffa  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bed  00000000  00000000  000090ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002edb  00000000  00000000  0000aca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ed0  00000000  00000000  0000db84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001759  00000000  00000000  0000ea54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040ce  00000000  00000000  000101ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0001427b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
       2:	00 00       	nop
       4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c0       	rjmp	.+236    	; 0x102 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_6>
      1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c0       	rjmp	.+224    	; 0x102 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c0       	rjmp	.+220    	; 0x102 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c0       	rjmp	.+216    	; 0x102 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c0       	rjmp	.+212    	; 0x102 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_12>
      34:	66 c0       	rjmp	.+204    	; 0x102 <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c0       	rjmp	.+200    	; 0x102 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c0       	rjmp	.+196    	; 0x102 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__vector_16>
      44:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__vector_17>
      48:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_18>
      4c:	5a c0       	rjmp	.+180    	; 0x102 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c0       	rjmp	.+176    	; 0x102 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_21>
      58:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_22>
      5c:	52 c0       	rjmp	.+164    	; 0x102 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c0       	rjmp	.+160    	; 0x102 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c0       	rjmp	.+156    	; 0x102 <__bad_interrupt>
      66:	00 00       	nop
      68:	4c c0       	rjmp	.+152    	; 0x102 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4a c0       	rjmp	.+148    	; 0x102 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c0       	rjmp	.+144    	; 0x102 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c0       	rjmp	.+136    	; 0x102 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c0       	rjmp	.+132    	; 0x102 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_32>
      84:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_33>
      88:	3c c0       	rjmp	.+120    	; 0x102 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c0       	rjmp	.+116    	; 0x102 <__bad_interrupt>
      8e:	00 00       	nop
      90:	38 c0       	rjmp	.+112    	; 0x102 <__bad_interrupt>
      92:	00 00       	nop
      94:	c6 04       	cpc	r12, r6
      96:	e2 04       	cpc	r14, r2
      98:	ec 04       	cpc	r14, r12
      9a:	f6 04       	cpc	r15, r6
      9c:	00 05       	cpc	r16, r0
      9e:	0a 05       	cpc	r16, r10
      a0:	14 05       	cpc	r17, r4
      a2:	d8 04       	cpc	r13, r8
      a4:	7a 06       	cpc	r7, r26
      a6:	36 07       	cpc	r19, r22
      a8:	56 07       	cpc	r21, r22
      aa:	6f 07       	cpc	r22, r31
      ac:	8c 07       	cpc	r24, r28
      ae:	8c 06       	cpc	r8, r28
      b0:	b0 07       	cpc	r27, r16
      b2:	c6 06       	cpc	r12, r22
      b4:	fb 0c       	add	r15, r11
      b6:	00 0d       	add	r16, r0
      b8:	06 0d       	add	r16, r6
      ba:	0c 0d       	add	r16, r12
      bc:	12 0d       	add	r17, r2
      be:	17 0d       	add	r17, r7
      c0:	1d 0d       	add	r17, r13
      c2:	23 0d       	add	r18, r3

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d0 e1       	ldi	r29, 0x10	; 16
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e8 ee       	ldi	r30, 0xE8	; 232
      d8:	f9 e2       	ldi	r31, 0x29	; 41
      da:	00 e0       	ldi	r16, 0x00	; 0
      dc:	0b bf       	out	0x3b, r16	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
      e0:	07 90       	elpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ae 39       	cpi	r26, 0x9E	; 158
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
      ea:	24 e0       	ldi	r18, 0x04	; 4
      ec:	ae e9       	ldi	r26, 0x9E	; 158
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a0 30       	cpi	r26, 0x00	; 0
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <main>
      fe:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <_exit>

00000102 <__bad_interrupt>:
     102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <reset_I>:

static float f32_Integrator = 0.0 ;

void reset_I(void)
{
	f32_Integrator = 0;
     104:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <f32_Integrator>
     108:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <f32_Integrator+0x1>
     10c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <f32_Integrator+0x2>
     110:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <f32_Integrator+0x3>
     114:	08 95       	ret

00000116 <set_I>:
}

void set_I(uint8_t duty)
{
	f32_Integrator = (duty-50.0)/Ki;
     116:	68 2f       	mov	r22, r24
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatsisf>
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	48 e4       	ldi	r20, 0x48	; 72
     128:	52 e4       	ldi	r21, 0x42	; 66
     12a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     12e:	27 ed       	ldi	r18, 0xD7	; 215
     130:	33 ea       	ldi	r19, 0xA3	; 163
     132:	48 e8       	ldi	r20, 0x88	; 136
     134:	51 e4       	ldi	r21, 0x41	; 65
     136:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     13a:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <f32_Integrator>
     13e:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <f32_Integrator+0x1>
     142:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <f32_Integrator+0x2>
     146:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <f32_Integrator+0x3>
     14a:	08 95       	ret

0000014c <drivers_init>:

}

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     14c:	24 9a       	sbi	0x04, 4	; 4
     14e:	08 95       	ret

00000150 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state == 1)
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	11 f4       	brne	.+4      	; 0x158 <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     154:	2c 9a       	sbi	0x05, 4	; 5
     156:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     158:	2c 98       	cbi	0x05, 4	; 5
     15a:	08 95       	ret

0000015c <controller>:
void set_I(uint8_t duty)
{
	f32_Integrator = (duty-50.0)/Ki;
}

void controller(volatile ModuleValues_t *vals){
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ec 01       	movw	r28, r24
	static float f32_DutyCycleCmd = 50.0;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	float f32_throttle_cmd = 0;
	
	if (vals->motor_status == BRAKE_GEAR1 || vals->motor_status == BRAKE_GEAR2)
     176:	8c 8d       	ldd	r24, Y+28	; 0x1c
     178:	83 30       	cpi	r24, 0x03	; 3
     17a:	19 f0       	breq	.+6      	; 0x182 <controller+0x26>
     17c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     17e:	84 30       	cpi	r24, 0x04	; 4
     180:	71 f4       	brne	.+28     	; 0x19e <controller+0x42>
	{
		f32_throttle_cmd = -vals->u8_brake_cmd ;
     182:	6e 89       	ldd	r22, Y+22	; 0x16
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	71 95       	neg	r23
     188:	61 95       	neg	r22
     18a:	71 09       	sbc	r23, r1
     18c:	07 2e       	mov	r0, r23
     18e:	00 0c       	add	r0, r0
     190:	88 0b       	sbc	r24, r24
     192:	99 0b       	sbc	r25, r25
     194:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatsisf>
     198:	6b 01       	movw	r12, r22
     19a:	7c 01       	movw	r14, r24
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <controller+0x48>
	
	static float f32_DutyCycle = 50.0 ;
	static float f32_DutyCycleCmd = 50.0;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	float f32_throttle_cmd = 0;
     19e:	c1 2c       	mov	r12, r1
     1a0:	d1 2c       	mov	r13, r1
     1a2:	76 01       	movw	r14, r12
	
	if (vals->motor_status == BRAKE_GEAR1 || vals->motor_status == BRAKE_GEAR2)
	{
		f32_throttle_cmd = -vals->u8_brake_cmd ;
	}
	if (vals->motor_status == ACCEL_GEAR1 || vals->motor_status == ACCEL_GEAR2)
     1a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <controller+0x54>
     1aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	41 f4       	brne	.+16     	; 0x1c0 <controller+0x64>
	{
		f32_throttle_cmd = vals->u8_accel_cmd ;
     1b0:	6d 89       	ldd	r22, Y+21	; 0x15
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     1bc:	6b 01       	movw	r12, r22
     1be:	7c 01       	movw	r14, r24
	}
	
	if (vals->ctrl_type == CURRENT)
     1c0:	89 a1       	ldd	r24, Y+33	; 0x21
     1c2:	81 11       	cpse	r24, r1
     1c4:	82 c0       	rjmp	.+260    	; 0x2ca <controller+0x16e>
	{
		if (f32_DutyCycle >= MAX_DUTY_BOUND || f32_DutyCycle <= MIN_DUTY_BOUND)
     1c6:	80 90 04 01 	lds	r8, 0x0104	; 0x800104 <f32_DutyCycle.2169>
     1ca:	90 90 05 01 	lds	r9, 0x0105	; 0x800105 <f32_DutyCycle.2169+0x1>
     1ce:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <f32_DutyCycle.2169+0x2>
     1d2:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <f32_DutyCycle.2169+0x3>
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	4e eb       	ldi	r20, 0xBE	; 190
     1dc:	52 e4       	ldi	r21, 0x42	; 66
     1de:	c5 01       	movw	r24, r10
     1e0:	b4 01       	movw	r22, r8
     1e2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__gesf2>
     1e6:	88 23       	and	r24, r24
     1e8:	54 f4       	brge	.+20     	; 0x1fe <controller+0xa2>
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	48 e4       	ldi	r20, 0x48	; 72
     1f0:	52 e4       	ldi	r21, 0x42	; 66
     1f2:	c5 01       	movw	r24, r10
     1f4:	b4 01       	movw	r22, r8
     1f6:	0e 94 19 10 	call	0x2032	; 0x2032 <__cmpsf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	44 f0       	brlt	.+16     	; 0x20e <controller+0xb2>
		{
			b_saturation = 1 ;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
		} else {
			b_saturation = 0;
		}
		if (vals->gear_required != vals->closest_gear && vals->near_gear == 0) {
     204:	9f 8d       	ldd	r25, Y+31	; 0x1f
     206:	8b a1       	ldd	r24, Y+35	; 0x23
     208:	98 13       	cpse	r25, r24
     20a:	94 c1       	rjmp	.+808    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     20c:	6a c1       	rjmp	.+724    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	{
		if (f32_DutyCycle >= MAX_DUTY_BOUND || f32_DutyCycle <= MIN_DUTY_BOUND)
		{
			b_saturation = 1 ;
		} else {
			b_saturation = 0;
     20e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
		}
		if (vals->gear_required != vals->closest_gear && vals->near_gear == 0) {
     212:	9f 8d       	ldd	r25, Y+31	; 0x1f
     214:	8b a1       	ldd	r24, Y+35	; 0x23
     216:	98 13       	cpse	r25, r24
     218:	7c c1       	rjmp	.+760    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     21a:	58 c1       	rjmp	.+688    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			f32_throttle_cmd = -25;
		}
		
		
		f32_CurrentDelta = ((f32_throttle_cmd)-vals->f32_motor_current)	;
     21c:	28 81       	ld	r18, Y
     21e:	39 81       	ldd	r19, Y+1	; 0x01
     220:	4a 81       	ldd	r20, Y+2	; 0x02
     222:	5b 81       	ldd	r21, Y+3	; 0x03
     224:	c7 01       	movw	r24, r14
     226:	b6 01       	movw	r22, r12
     228:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     22c:	6b 01       	movw	r12, r22
     22e:	7c 01       	movw	r14, r24
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     230:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     234:	81 11       	cpse	r24, r1
     236:	1c c0       	rjmp	.+56     	; 0x270 <controller+0x114>
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     238:	2a e0       	ldi	r18, 0x0A	; 10
     23a:	37 ed       	ldi	r19, 0xD7	; 215
     23c:	43 ea       	ldi	r20, 0xA3	; 163
     23e:	5b e3       	ldi	r21, 0x3B	; 59
     240:	c7 01       	movw	r24, r14
     242:	b6 01       	movw	r22, r12
     244:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     248:	9b 01       	movw	r18, r22
     24a:	ac 01       	movw	r20, r24
     24c:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <f32_Integrator>
     250:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <f32_Integrator+0x1>
     254:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <f32_Integrator+0x2>
     258:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <f32_Integrator+0x3>
     25c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__addsf3>
     260:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <f32_Integrator>
     264:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <f32_Integrator+0x1>
     268:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <f32_Integrator+0x2>
     26c:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <f32_Integrator+0x3>
		}
		
		f32_DutyCycle=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycle=f32_DutyCycle+50.0 ;
     270:	27 ed       	ldi	r18, 0xD7	; 215
     272:	33 ea       	ldi	r19, 0xA3	; 163
     274:	48 e8       	ldi	r20, 0x88	; 136
     276:	51 e4       	ldi	r21, 0x41	; 65
     278:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <f32_Integrator>
     27c:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <f32_Integrator+0x1>
     280:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <f32_Integrator+0x2>
     284:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <f32_Integrator+0x3>
     288:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     28c:	4b 01       	movw	r8, r22
     28e:	5c 01       	movw	r10, r24
     290:	27 e8       	ldi	r18, 0x87	; 135
     292:	3f eb       	ldi	r19, 0xBF	; 191
     294:	46 e2       	ldi	r20, 0x26	; 38
     296:	5e e3       	ldi	r21, 0x3E	; 62
     298:	c7 01       	movw	r24, r14
     29a:	b6 01       	movw	r22, r12
     29c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     2a0:	9b 01       	movw	r18, r22
     2a2:	ac 01       	movw	r20, r24
     2a4:	c5 01       	movw	r24, r10
     2a6:	b4 01       	movw	r22, r8
     2a8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__addsf3>
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	48 e4       	ldi	r20, 0x48	; 72
     2b2:	52 e4       	ldi	r21, 0x42	; 66
     2b4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__addsf3>
     2b8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <f32_DutyCycle.2169>
     2bc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <f32_DutyCycle.2169+0x1>
     2c0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycle.2169+0x2>
     2c4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycle.2169+0x3>
     2c8:	1e c0       	rjmp	.+60     	; 0x306 <controller+0x1aa>
	
	}else if (vals->ctrl_type == PWM)
     2ca:	89 a1       	ldd	r24, Y+33	; 0x21
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	d9 f4       	brne	.+54     	; 0x306 <controller+0x1aa>
	{
		if (vals->near_gear != NEUTRAL) {
     2d0:	8c a1       	ldd	r24, Y+36	; 0x24
     2d2:	88 23       	and	r24, r24
     2d4:	11 f0       	breq	.+4      	; 0x2da <controller+0x17e>
			drivers(0);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	3b df       	rcall	.-394    	; 0x150 <drivers>
		}
		f32_DutyCycle = (float)(vals->u8_duty_cycle);
     2da:	6f 89       	ldd	r22, Y+23	; 0x17
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     2e6:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <f32_DutyCycle.2169>
     2ea:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <f32_DutyCycle.2169+0x1>
     2ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycle.2169+0x2>
     2f2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycle.2169+0x3>
		if (vals->f32_motor_current > 0.5)
     2f6:	88 81       	ld	r24, Y
     2f8:	99 81       	ldd	r25, Y+1	; 0x01
     2fa:	aa 81       	ldd	r26, Y+2	; 0x02
     2fc:	bb 81       	ldd	r27, Y+3	; 0x03
		{
			//f32_DutyCycle -- ;
		}
		if (vals->f32_motor_current < -0.5)
     2fe:	88 81       	ld	r24, Y
     300:	99 81       	ldd	r25, Y+1	; 0x01
     302:	aa 81       	ldd	r26, Y+2	; 0x02
     304:	bb 81       	ldd	r27, Y+3	; 0x03
		}
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycle > MAX_DUTY_BOUND)
     306:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <f32_DutyCycle.2169>
     30a:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <f32_DutyCycle.2169+0x1>
     30e:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <f32_DutyCycle.2169+0x2>
     312:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <f32_DutyCycle.2169+0x3>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	4e eb       	ldi	r20, 0xBE	; 190
     31c:	52 e4       	ldi	r21, 0x42	; 66
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__gesf2>
     326:	18 16       	cp	r1, r24
     328:	6c f4       	brge	.+26     	; 0x344 <controller+0x1e8>
	{
		f32_DutyCycle = MAX_DUTY_BOUND;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	ae eb       	ldi	r26, 0xBE	; 190
     330:	b2 e4       	ldi	r27, 0x42	; 66
     332:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <f32_DutyCycle.2169>
     336:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <f32_DutyCycle.2169+0x1>
     33a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <f32_DutyCycle.2169+0x2>
     33e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <f32_DutyCycle.2169+0x3>
     342:	16 c0       	rjmp	.+44     	; 0x370 <controller+0x214>
	}
	
	if (f32_DutyCycle < MIN_DUTY_BOUND)// bounding at 50 to prevent rheostatic braking and backwards motion
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	48 e4       	ldi	r20, 0x48	; 72
     34a:	52 e4       	ldi	r21, 0x42	; 66
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 19 10 	call	0x2032	; 0x2032 <__cmpsf2>
     354:	88 23       	and	r24, r24
     356:	64 f4       	brge	.+24     	; 0x370 <controller+0x214>
	{
		f32_DutyCycle = MIN_DUTY_BOUND;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	a8 e4       	ldi	r26, 0x48	; 72
     35e:	b2 e4       	ldi	r27, 0x42	; 66
     360:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <f32_DutyCycle.2169>
     364:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <f32_DutyCycle.2169+0x1>
     368:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <f32_DutyCycle.2169+0x2>
     36c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <f32_DutyCycle.2169+0x3>
	}
	
	if (vals->closest_gear == GEAR2 || ((vals->gear_required == GEAR2) && vals->closest_gear == NEUTRAL) )
     370:	8b a1       	ldd	r24, Y+35	; 0x23
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	31 f0       	breq	.+12     	; 0x382 <controller+0x226>
     376:	8f 8d       	ldd	r24, Y+31	; 0x1f
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	d1 f4       	brne	.+52     	; 0x3b0 <controller+0x254>
     37c:	8b a1       	ldd	r24, Y+35	; 0x23
     37e:	81 11       	cpse	r24, r1
     380:	17 c0       	rjmp	.+46     	; 0x3b0 <controller+0x254>
	{
		f32_DutyCycleCmd = (100-f32_DutyCycle);
     382:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <f32_DutyCycle.2169>
     386:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <f32_DutyCycle.2169+0x1>
     38a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <f32_DutyCycle.2169+0x2>
     38e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <f32_DutyCycle.2169+0x3>
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	88 ec       	ldi	r24, 0xC8	; 200
     398:	92 e4       	ldi	r25, 0x42	; 66
     39a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     39e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     3a2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     3a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     3aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     3ae:	2a c0       	rjmp	.+84     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	} else if (vals->closest_gear == GEAR1 || ((vals->gear_required == GEAR1) && vals->closest_gear == NEUTRAL)) {
     3b0:	8b a1       	ldd	r24, Y+35	; 0x23
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <controller+0x266>
     3b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	a1 f4       	brne	.+40     	; 0x3e4 <controller+0x288>
     3bc:	8b a1       	ldd	r24, Y+35	; 0x23
     3be:	81 11       	cpse	r24, r1
     3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <controller+0x288>
		f32_DutyCycleCmd = f32_DutyCycle;
     3c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <f32_DutyCycle.2169>
     3c6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <f32_DutyCycle.2169+0x1>
     3ca:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <f32_DutyCycle.2169+0x2>
     3ce:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <f32_DutyCycle.2169+0x3>
     3d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     3d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     3da:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     3de:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     3e2:	10 c0       	rjmp	.+32     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	} else {
		f32_DutyCycleCmd = f32_DutyCycle;
     3e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <f32_DutyCycle.2169>
     3e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <f32_DutyCycle.2169+0x1>
     3ec:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <f32_DutyCycle.2169+0x2>
     3f0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <f32_DutyCycle.2169+0x3>
     3f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     3f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     3fc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     400:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     404:	06 e9       	ldi	r16, 0x96	; 150
     406:	10 e0       	ldi	r17, 0x00	; 0
     408:	f8 01       	movw	r30, r16
     40a:	e0 80       	ld	r14, Z
     40c:	f1 80       	ldd	r15, Z+1	; 0x01
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	48 ec       	ldi	r20, 0xC8	; 200
     414:	52 e4       	ldi	r21, 0x42	; 66
     416:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     41a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     41e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     422:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     426:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     42a:	4b 01       	movw	r8, r22
     42c:	5c 01       	movw	r10, r24
     42e:	b7 01       	movw	r22, r14
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     438:	9b 01       	movw	r18, r22
     43a:	ac 01       	movw	r20, r24
     43c:	c5 01       	movw	r24, r10
     43e:	b4 01       	movw	r22, r8
     440:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     444:	0e 94 85 10 	call	0x210a	; 0x210a <__fixsfsi>
     448:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     44c:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     450:	f8 01       	movw	r30, r16
     452:	60 81       	ld	r22, Z
     454:	71 81       	ldd	r23, Z+1	; 0x01
     456:	00 81       	ld	r16, Z
     458:	11 81       	ldd	r17, Z+1	; 0x01
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     462:	6b 01       	movw	r12, r22
     464:	7c 01       	movw	r14, r24
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	48 ec       	ldi	r20, 0xC8	; 200
     46c:	52 e4       	ldi	r21, 0x42	; 66
     46e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     472:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     476:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     47a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     47e:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     482:	4b 01       	movw	r8, r22
     484:	5c 01       	movw	r10, r24
     486:	b8 01       	movw	r22, r16
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     490:	9b 01       	movw	r18, r22
     492:	ac 01       	movw	r20, r24
     494:	c5 01       	movw	r24, r10
     496:	b4 01       	movw	r22, r8
     498:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     49c:	9b 01       	movw	r18, r22
     49e:	ac 01       	movw	r20, r24
     4a0:	c7 01       	movw	r24, r14
     4a2:	b6 01       	movw	r22, r12
     4a4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     4a8:	0e 94 85 10 	call	0x210a	; 0x210a <__fixsfsi>
     4ac:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     4b0:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	vals->u8_duty_cycle = (uint8_t)f32_DutyCycle ; //exporting the duty cycle to be able to read in on the CAN and USB
     4b4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <f32_DutyCycle.2169>
     4b8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <f32_DutyCycle.2169+0x1>
     4bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <f32_DutyCycle.2169+0x2>
     4c0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <f32_DutyCycle.2169+0x3>
     4c4:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     4c8:	6f 8b       	std	Y+23, r22	; 0x17

}
     4ca:	38 c0       	rjmp	.+112    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
		if (vals->gear_required != vals->closest_gear && vals->near_gear == 0) {
			f32_throttle_cmd = -25;
		}
		
		
		f32_CurrentDelta = ((f32_throttle_cmd)-vals->f32_motor_current)	;
     4cc:	28 81       	ld	r18, Y
     4ce:	39 81       	ldd	r19, Y+1	; 0x01
     4d0:	4a 81       	ldd	r20, Y+2	; 0x02
     4d2:	5b 81       	ldd	r21, Y+3	; 0x03
     4d4:	c7 01       	movw	r24, r14
     4d6:	b6 01       	movw	r22, r12
     4d8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     4dc:	6b 01       	movw	r12, r22
     4de:	7c 01       	movw	r14, r24
     4e0:	ab ce       	rjmp	.-682    	; 0x238 <controller+0xdc>
     4e2:	28 81       	ld	r18, Y
     4e4:	39 81       	ldd	r19, Y+1	; 0x01
     4e6:	4a 81       	ldd	r20, Y+2	; 0x02
     4e8:	5b 81       	ldd	r21, Y+3	; 0x03
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	bc ce       	rjmp	.-648    	; 0x270 <controller+0x114>
     4f8:	28 81       	ld	r18, Y
     4fa:	39 81       	ldd	r19, Y+1	; 0x01
     4fc:	4a 81       	ldd	r20, Y+2	; 0x02
     4fe:	5b 81       	ldd	r21, Y+3	; 0x03
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	88 ec       	ldi	r24, 0xC8	; 200
     506:	91 ec       	ldi	r25, 0xC1	; 193
     508:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     50c:	6b 01       	movw	r12, r22
     50e:	7c 01       	movw	r14, r24
     510:	93 ce       	rjmp	.-730    	; 0x238 <controller+0xdc>
		{
			b_saturation = 1 ;
		} else {
			b_saturation = 0;
		}
		if (vals->gear_required != vals->closest_gear && vals->near_gear == 0) {
     512:	8c a1       	ldd	r24, Y+36	; 0x24
     514:	88 23       	and	r24, r24
     516:	81 f3       	breq	.-32     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     518:	81 ce       	rjmp	.-766    	; 0x21c <controller+0xc0>
			f32_throttle_cmd = -25;
		}
		
		
		f32_CurrentDelta = ((f32_throttle_cmd)-vals->f32_motor_current)	;
     51a:	28 81       	ld	r18, Y
     51c:	39 81       	ldd	r19, Y+1	; 0x01
     51e:	4a 81       	ldd	r20, Y+2	; 0x02
     520:	5b 81       	ldd	r21, Y+3	; 0x03
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	88 ec       	ldi	r24, 0xC8	; 200
     528:	91 ec       	ldi	r25, 0xC1	; 193
     52a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__subsf3>
     52e:	6b 01       	movw	r12, r22
     530:	7c 01       	movw	r14, r24
     532:	9e ce       	rjmp	.-708    	; 0x270 <controller+0x114>
		{
			b_saturation = 1 ;
		} else {
			b_saturation = 0;
		}
		if (vals->gear_required != vals->closest_gear && vals->near_gear == 0) {
     534:	8c a1       	ldd	r24, Y+36	; 0x24
     536:	81 11       	cpse	r24, r1
     538:	71 ce       	rjmp	.-798    	; 0x21c <controller+0xc0>
     53a:	ef cf       	rjmp	.-34     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
	}
	
	vals->u8_duty_cycle = (uint8_t)f32_DutyCycle ; //exporting the duty cycle to be able to read in on the CAN and USB

}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	bf 90       	pop	r11
     54e:	af 90       	pop	r10
     550:	9f 90       	pop	r9
     552:	8f 90       	pop	r8
     554:	08 95       	ret

00000556 <SPI_handler_0>:
static uint8_t u8_rxBuffer[3];

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(volatile float * p_f32_motcurrent) // motor current
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     55c:	66 ea       	ldi	r22, 0xA6	; 166
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	43 e0       	ldi	r20, 0x03	; 3
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	63 ea       	ldi	r22, 0xA3	; 163
     56e:	71 e0       	ldi	r23, 0x01	; 1
     570:	86 ea       	ldi	r24, 0xA6	; 166
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     578:	e3 ea       	ldi	r30, 0xA3	; 163
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	61 81       	ldd	r22, Z+1	; 0x01
     57e:	6f 71       	andi	r22, 0x1F	; 31
     580:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(p_f32_motcurrent, u16_ADC0_reg,0);
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	76 2f       	mov	r23, r22
     586:	66 27       	eor	r22, r22
     588:	82 81       	ldd	r24, Z+2	; 0x02
     58a:	68 2b       	or	r22, r24
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	ce 01       	movw	r24, r28
     590:	0e 94 b1 0b 	call	0x1762	; 0x1762 <handle_current_sensor>
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <SPI_handler_1>:

void SPI_handler_1(volatile float * f32_batcurrent) // battery current
{
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     5a0:	66 ea       	ldi	r22, 0xA6	; 166
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	43 e0       	ldi	r20, 0x03	; 3
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	63 ea       	ldi	r22, 0xA3	; 163
     5b2:	71 e0       	ldi	r23, 0x01	; 1
     5b4:	86 ea       	ldi	r24, 0xA6	; 166
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     5bc:	e3 ea       	ldi	r30, 0xA3	; 163
     5be:	f1 e0       	ldi	r31, 0x01	; 1
     5c0:	61 81       	ldd	r22, Z+1	; 0x01
     5c2:	6f 71       	andi	r22, 0x1F	; 31
     5c4:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg,1);
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	76 2f       	mov	r23, r22
     5ca:	66 27       	eor	r22, r22
     5cc:	82 81       	ldd	r24, Z+2	; 0x02
     5ce:	68 2b       	or	r22, r24
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	ce 01       	movw	r24, r28
     5d4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <handle_current_sensor>
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <SPI_handler_2>:

void SPI_handler_2(volatile float * f32_batvolt) //battery voltage
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     5e4:	66 ea       	ldi	r22, 0xA6	; 166
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	43 e0       	ldi	r20, 0x03	; 3
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	63 ea       	ldi	r22, 0xA3	; 163
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	86 ea       	ldi	r24, 0xA6	; 166
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     600:	e3 ea       	ldi	r30, 0xA3	; 163
     602:	f1 e0       	ldi	r31, 0x01	; 1
     604:	61 81       	ldd	r22, Z+1	; 0x01
     606:	6f 71       	andi	r22, 0x1F	; 31
     608:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = VOLT_CONVERSION_OFFSET+(float)u16_ADC2_reg/VOLT_CONVERSION_COEFF;
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	76 2f       	mov	r23, r22
     60e:	66 27       	eor	r22, r22
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	68 2b       	or	r22, r24
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	49 e8       	ldi	r20, 0x89	; 137
     622:	52 e4       	ldi	r21, 0x42	; 66
     624:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     628:	2a e9       	ldi	r18, 0x9A	; 154
     62a:	39 e9       	ldi	r19, 0x99	; 153
     62c:	49 e9       	ldi	r20, 0x99	; 153
     62e:	5e e3       	ldi	r21, 0x3E	; 62
     630:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__addsf3>
     634:	68 83       	st	Y, r22
     636:	79 83       	std	Y+1, r23	; 0x01
     638:	8a 83       	std	Y+2, r24	; 0x02
     63a:	9b 83       	std	Y+3, r25	; 0x03
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <SPI_handler_4>:

void SPI_handler_4(volatile uint8_t * u8_mottemp) //motor temperature
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     648:	66 ea       	ldi	r22, 0xA6	; 166
     64a:	71 e0       	ldi	r23, 0x01	; 1
     64c:	84 e0       	ldi	r24, 0x04	; 4
     64e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	43 e0       	ldi	r20, 0x03	; 3
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	63 ea       	ldi	r22, 0xA3	; 163
     65a:	71 e0       	ldi	r23, 0x01	; 1
     65c:	86 ea       	ldi	r24, 0xA6	; 166
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     664:	e3 ea       	ldi	r30, 0xA3	; 163
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	61 81       	ldd	r22, Z+1	; 0x01
     66a:	6f 71       	andi	r22, 0x1F	; 31
     66c:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	76 2f       	mov	r23, r22
     672:	66 27       	eor	r22, r22
     674:	82 81       	ldd	r24, Z+2	; 0x02
     676:	68 2b       	or	r22, r24
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 2d 0c 	call	0x185a	; 0x185a <handle_temp_sensor>
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <handle_can>:

///////////////////////  CAN  /////////////////////////


//receiving
void handle_can(volatile ModuleValues_t *vals, CanMessage_t *rx){
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	8c 01       	movw	r16, r24
     68e:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx) && vals->motor_status != ERR){
     690:	cb 01       	movw	r24, r22
     692:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <can_read_message_if_new>
     696:	88 23       	and	r24, r24
     698:	09 f4       	brne	.+2      	; 0x69c <handle_can+0x18>
     69a:	4f c0       	rjmp	.+158    	; 0x73a <handle_can+0xb6>
     69c:	f8 01       	movw	r30, r16
     69e:	84 8d       	ldd	r24, Z+28	; 0x1c
     6a0:	86 30       	cpi	r24, 0x06	; 6
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <handle_can+0x22>
     6a4:	4a c0       	rjmp	.+148    	; 0x73a <handle_can+0xb6>
		switch (rx->id){
     6a6:	88 81       	ld	r24, Y
     6a8:	99 81       	ldd	r25, Y+1	; 0x01
     6aa:	80 32       	cpi	r24, 0x20	; 32
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	9f 07       	cpc	r25, r31
     6b0:	91 f1       	breq	.+100    	; 0x716 <handle_can+0x92>
     6b2:	80 33       	cpi	r24, 0x30	; 48
     6b4:	92 40       	sbci	r25, 0x02	; 2
     6b6:	09 f0       	breq	.+2      	; 0x6ba <handle_can+0x36>
     6b8:	40 c0       	rjmp	.+128    	; 0x73a <handle_can+0xb6>
			case DASHBOARD_CAN_ID	: //receiving can messages from the steering wheel
				
				vals->message_mode = CAN ;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	f8 01       	movw	r30, r16
     6be:	85 8f       	std	Z+29, r24	; 0x1d
				vals->ctrl_type = CURRENT ;
     6c0:	11 a2       	std	Z+33, r1	; 0x21
				vals->u16_watchdog_can = WATCHDOG_CAN_RELOAD_VALUE ; // resetting to max value each time a message is received.
     6c2:	82 e3       	ldi	r24, 0x32	; 50
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	91 8f       	std	Z+25, r25	; 0x19
     6c8:	80 8f       	std	Z+24, r24	; 0x18
				if (rx->data.u8[3] > 8)
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	89 30       	cpi	r24, 0x09	; 9
     6ce:	40 f0       	brcs	.+16     	; 0x6e0 <handle_can+0x5c>
				{
					vals->u8_accel_cmd = rx->data.u8[3]/8 ; 
     6d0:	86 95       	lsr	r24
     6d2:	86 95       	lsr	r24
     6d4:	86 95       	lsr	r24
     6d6:	85 8b       	std	Z+21, r24	; 0x15
					vals->u16_watchdog_throttle = WATCHDOG_THROTTLE_RELOAD_VALUE ;
     6d8:	8e e1       	ldi	r24, 0x1E	; 30
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	93 8f       	std	Z+27, r25	; 0x1b
     6de:	82 8f       	std	Z+26, r24	; 0x1a
				}
				
				if (rx->data.u8[2] > 8)
     6e0:	8d 81       	ldd	r24, Y+5	; 0x05
     6e2:	89 30       	cpi	r24, 0x09	; 9
     6e4:	80 f0       	brcs	.+32     	; 0x706 <handle_can+0x82>
				{
					vals->u8_brake_cmd = rx->data.u8[2]/10 ;
     6e6:	9d ec       	ldi	r25, 0xCD	; 205
     6e8:	89 9f       	mul	r24, r25
     6ea:	81 2d       	mov	r24, r1
     6ec:	11 24       	eor	r1, r1
     6ee:	86 95       	lsr	r24
     6f0:	86 95       	lsr	r24
     6f2:	86 95       	lsr	r24
     6f4:	f8 01       	movw	r30, r16
     6f6:	86 8b       	std	Z+22, r24	; 0x16
					vals->u16_watchdog_throttle = WATCHDOG_THROTTLE_RELOAD_VALUE ;
     6f8:	8e e1       	ldi	r24, 0x1E	; 30
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	93 8f       	std	Z+27, r25	; 0x1b
     6fe:	82 8f       	std	Z+26, r24	; 0x1a
				}
				
				if (rx->data.u8[2] <= 8)
     700:	8d 81       	ldd	r24, Y+5	; 0x05
     702:	89 30       	cpi	r24, 0x09	; 9
     704:	10 f4       	brcc	.+4      	; 0x70a <handle_can+0x86>
				{
					vals->u8_brake_cmd = 0;
     706:	f8 01       	movw	r30, r16
     708:	16 8a       	std	Z+22, r1	; 0x16
				}
				if (rx->data.u8[3] <= 8)
     70a:	8e 81       	ldd	r24, Y+6	; 0x06
     70c:	89 30       	cpi	r24, 0x09	; 9
     70e:	a8 f4       	brcc	.+42     	; 0x73a <handle_can+0xb6>
				{
					vals->u8_accel_cmd = 0;
     710:	f8 01       	movw	r30, r16
     712:	15 8a       	std	Z+21, r1	; 0x15
     714:	12 c0       	rjmp	.+36     	; 0x73a <handle_can+0xb6>
				}
				
			break;
			
			case E_CLUTCH_CAN_ID :
				if (vals->pwtrain_type == BELT) {
     716:	f8 01       	movw	r30, r16
     718:	82 a1       	ldd	r24, Z+34	; 0x22
     71a:	81 11       	cpse	r24, r1
     71c:	03 c0       	rjmp	.+6      	; 0x724 <handle_can+0xa0>
					vals->pwtrain_type = GEAR ;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	82 a3       	std	Z+34, r24	; 0x22
					vals->gear_required = NEUTRAL;
     722:	17 8e       	std	Z+31, r1	; 0x1f
				}
				vals->u16_motor_speed = rx->data.u16[0] ; //receiving motor speed from encoder from clutch board
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	f8 01       	movw	r30, r16
     72a:	94 8b       	std	Z+20, r25	; 0x14
     72c:	83 8b       	std	Z+19, r24	; 0x13
				vals->gear_status = rx->data.u8[2] ; //receiving gear status from the clutch board
     72e:	8d 81       	ldd	r24, Y+5	; 0x05
     730:	86 8f       	std	Z+30, r24	; 0x1e
				vals->closest_gear = rx->data.u8[3];
     732:	8e 81       	ldd	r24, Y+6	; 0x06
     734:	83 a3       	std	Z+35, r24	; 0x23
				vals->near_gear = rx->data.u8[4];
     736:	8f 81       	ldd	r24, Y+7	; 0x07
     738:	84 a3       	std	Z+36, r24	; 0x24
			break;
		}
	}
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(volatile ModuleValues_t vals){
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
	
	txFrame.id = MOTOR_CAN_ID;
     750:	07 e6       	ldi	r16, 0x67	; 103
     752:	13 e0       	ldi	r17, 0x03	; 3
     754:	80 e5       	ldi	r24, 0x50	; 80
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	f8 01       	movw	r30, r16
     75a:	91 83       	std	Z+1, r25	; 0x01
     75c:	80 83       	st	Z, r24
	txFrame.length = 8;
     75e:	88 e0       	ldi	r24, 0x08	; 8
     760:	82 83       	std	Z+2, r24	; 0x02
	
	txFrame.data.u8[0] = vals.motor_status;
     762:	8b a1       	ldd	r24, Y+35	; 0x23
     764:	83 83       	std	Z+3, r24	; 0x03
	txFrame.data.i8[1] = (int8_t)(vals.f32_motor_current*10);
     766:	6f 81       	ldd	r22, Y+7	; 0x07
     768:	78 85       	ldd	r23, Y+8	; 0x08
     76a:	89 85       	ldd	r24, Y+9	; 0x09
     76c:	9a 85       	ldd	r25, Y+10	; 0x0a
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e2       	ldi	r20, 0x20	; 32
     774:	51 e4       	ldi	r21, 0x41	; 65
     776:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     77a:	0e 94 85 10 	call	0x210a	; 0x210a <__fixsfsi>
     77e:	f8 01       	movw	r30, r16
     780:	64 83       	std	Z+4, r22	; 0x04
	txFrame.data.u16[1] = (uint16_t)(vals.f32_batt_volt*10);
     782:	6f 85       	ldd	r22, Y+15	; 0x0f
     784:	78 89       	ldd	r23, Y+16	; 0x10
     786:	89 89       	ldd	r24, Y+17	; 0x11
     788:	9a 89       	ldd	r25, Y+18	; 0x12
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e2       	ldi	r20, 0x20	; 32
     790:	51 e4       	ldi	r21, 0x41	; 65
     792:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     796:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     79a:	f8 01       	movw	r30, r16
     79c:	76 83       	std	Z+6, r23	; 0x06
     79e:	65 83       	std	Z+5, r22	; 0x05
	txFrame.data.u16[2] = (uint16_t)abs((int16_t)vals.f32_energy/100.0) ;
     7a0:	6b 89       	ldd	r22, Y+19	; 0x13
     7a2:	7c 89       	ldd	r23, Y+20	; 0x14
     7a4:	8d 89       	ldd	r24, Y+21	; 0x15
     7a6:	9e 89       	ldd	r25, Y+22	; 0x16
     7a8:	0e 94 85 10 	call	0x210a	; 0x210a <__fixsfsi>
     7ac:	07 2e       	mov	r0, r23
     7ae:	00 0c       	add	r0, r0
     7b0:	88 0b       	sbc	r24, r24
     7b2:	99 0b       	sbc	r25, r25
     7b4:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatsisf>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	48 ec       	ldi	r20, 0xC8	; 200
     7be:	52 e4       	ldi	r21, 0x42	; 66
     7c0:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     7c4:	0e 94 85 10 	call	0x210a	; 0x210a <__fixsfsi>
     7c8:	9b 01       	movw	r18, r22
     7ca:	77 23       	and	r23, r23
     7cc:	24 f4       	brge	.+8      	; 0x7d6 <handle_motor_status_can_msg+0x92>
     7ce:	22 27       	eor	r18, r18
     7d0:	33 27       	eor	r19, r19
     7d2:	26 1b       	sub	r18, r22
     7d4:	37 0b       	sbc	r19, r23
     7d6:	30 93 6f 03 	sts	0x036F, r19	; 0x80036f <txFrame+0x8>
     7da:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <txFrame+0x7>
	txFrame.data.u8[6] = (uint8_t)(vals.u16_car_speed*3.6*0.5) ; //sent in km/h*5
     7de:	68 8d       	ldd	r22, Y+24	; 0x18
     7e0:	79 8d       	ldd	r23, Y+25	; 0x19
     7e2:	07 e6       	ldi	r16, 0x67	; 103
     7e4:	13 e0       	ldi	r17, 0x03	; 3
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     7ee:	26 e6       	ldi	r18, 0x66	; 102
     7f0:	36 e6       	ldi	r19, 0x66	; 102
     7f2:	46 e6       	ldi	r20, 0x66	; 102
     7f4:	50 e4       	ldi	r21, 0x40	; 64
     7f6:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	5f e3       	ldi	r21, 0x3F	; 63
     802:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     806:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     80a:	f8 01       	movw	r30, r16
     80c:	61 87       	std	Z+9, r22	; 0x09
	txFrame.data.u8[7] = vals.u8_motor_temp;
     80e:	8f 89       	ldd	r24, Y+23	; 0x17
     810:	82 87       	std	Z+10, r24	; 0x0a
		
	can_send_message(&txFrame);
     812:	c8 01       	movw	r24, r16
     814:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <can_send_message>
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <handle_clutch_cmd_can_msg>:

void handle_clutch_cmd_can_msg(volatile ModuleValues_t vals){
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	
	txFrame1.id = MOTOR_CL_CMD_CAN_ID;
     82a:	ec e5       	ldi	r30, 0x5C	; 92
     82c:	f3 e0       	ldi	r31, 0x03	; 3
     82e:	81 e5       	ldi	r24, 0x51	; 81
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	91 83       	std	Z+1, r25	; 0x01
     834:	80 83       	st	Z, r24
	txFrame1.length = 1;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	82 83       	std	Z+2, r24	; 0x02

	txFrame1.data.u8[0] = vals.gear_required;
     83a:	8c a1       	ldd	r24, Y+36	; 0x24
     83c:	83 83       	std	Z+3, r24	; 0x03
		
	can_send_message(&txFrame1);
     83e:	cf 01       	movw	r24, r30
     840:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <can_send_message>
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <receive_uart>:

///////////////////  UART  ////////////////////

//receiving 
void receive_uart(volatile ModuleValues_t * vals)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     854:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <rx0_Head>
     858:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <rx0_Tail>
	if(uart_AvailableBytes()!=0){
     85c:	92 1b       	sub	r25, r18
     85e:	9f 71       	andi	r25, 0x1F	; 31
     860:	01 f1       	breq	.+64     	; 0x8a2 <receive_uart+0x58>
		vals->message_mode = UART ;
     862:	1d 8e       	std	Y+29, r1	; 0x1d
		int16_t i16_data_received=uart_getint();
     864:	a6 d4       	rcall	.+2380   	; 0x11b2 <uart0_getint>
     866:	18 2f       	mov	r17, r24
     868:	09 2f       	mov	r16, r25
		uart_flush();
     86a:	28 d4       	rcall	.+2128   	; 0x10bc <uart0_flush>
     86c:	82 e3       	ldi	r24, 0x32	; 50
		vals->u16_watchdog_can = WATCHDOG_CAN_RELOAD_VALUE ;
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	99 8f       	std	Y+25, r25	; 0x19
     872:	88 8f       	std	Y+24, r24	; 0x18
     874:	89 a1       	ldd	r24, Y+33	; 0x21
		if (vals->ctrl_type == CURRENT)
     876:	81 11       	cpse	r24, r1
     878:	10 c0       	rjmp	.+32     	; 0x89a <receive_uart+0x50>
     87a:	81 2f       	mov	r24, r17
		{
			if (i16_data_received > -10 && i16_data_received < 0) //limited braking and acceleration at 10A
     87c:	90 2f       	mov	r25, r16
     87e:	9c 01       	movw	r18, r24
     880:	27 5f       	subi	r18, 0xF7	; 247
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	29 30       	cpi	r18, 0x09	; 9
     886:	31 05       	cpc	r19, r1
     888:	18 f4       	brcc	.+6      	; 0x890 <receive_uart+0x46>
     88a:	21 2f       	mov	r18, r17
			{
				vals->u8_brake_cmd = -i16_data_received ;
     88c:	21 95       	neg	r18
     88e:	2e 8b       	std	Y+22, r18	; 0x16
     890:	01 97       	sbiw	r24, 0x01	; 1
			}
			if (i16_data_received > 0 && i16_data_received < 10) //limited braking and acceleration at 10A
     892:	09 97       	sbiw	r24, 0x09	; 9
     894:	30 f4       	brcc	.+12     	; 0x8a2 <receive_uart+0x58>
     896:	1d 8b       	std	Y+21, r17	; 0x15
			{
				vals->u8_accel_cmd = i16_data_received ;
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <receive_uart+0x58>
     89a:	89 a1       	ldd	r24, Y+33	; 0x21
			}
				
		}else if (vals->ctrl_type == PWM)
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <receive_uart+0x58>
     8a0:	1f 8b       	std	Y+23, r17	; 0x17
		{
			vals->u8_duty_cycle = i16_data_received;
     8a2:	df 91       	pop	r29
		}
	}
}
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <send_uart>:
     8ac:	cf 93       	push	r28

//sending
//sends motor current and current cmd through USB
void send_uart(volatile ModuleValues_t vals)
{
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
	//printf("%i,%i,%u,%u,%u,%u,%i",(int16_t)(vals.f32_motor_current*1000),(int16_t)(vals.f32_batt_current*1000),(uint16_t)(vals.f32_batt_volt*1000),vals.u8_car_speed,vals.u8_duty_cycle,vals.u8_motor_temp,vals.i8_throttle_cmd);
	printf("\r\n");
     8b4:	8b e3       	ldi	r24, 0x3B	; 59
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 15 12 	call	0x242a	; 0x242a <puts>
	{
		printf(" cmd : %i",-(int8_t)vals.u8_brake_cmd);
	}
	printf(",");
	*/
	printf("speed km/h : %u",(uint16_t)(vals.u16_car_speed*3.6/10));
     8bc:	6e 89       	ldd	r22, Y+22	; 0x16
     8be:	7f 89       	ldd	r23, Y+23	; 0x17
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     8c8:	26 e6       	ldi	r18, 0x66	; 102
     8ca:	36 e6       	ldi	r19, 0x66	; 102
     8cc:	46 e6       	ldi	r20, 0x66	; 102
     8ce:	50 e4       	ldi	r21, 0x40	; 64
     8d0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e2       	ldi	r20, 0x20	; 32
     8da:	51 e4       	ldi	r21, 0x41	; 65
     8dc:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     8e0:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     8e4:	7f 93       	push	r23
     8e6:	6f 93       	push	r22
     8e8:	8d e3       	ldi	r24, 0x3D	; 61
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	0e 94 fd 11 	call	0x23fa	; 0x23fa <printf>
	printf(",");
     8f4:	8c e2       	ldi	r24, 0x2C	; 44
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 10 12 	call	0x2420	; 0x2420 <putchar>
	printf(" gear req : %u",vals.gear_required);
     8fc:	8c a1       	ldd	r24, Y+36	; 0x24
     8fe:	1f 92       	push	r1
     900:	8f 93       	push	r24
     902:	8d e4       	ldi	r24, 0x4D	; 77
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <printf>
	printf(",");
     90e:	8c e2       	ldi	r24, 0x2C	; 44
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 10 12 	call	0x2420	; 0x2420 <putchar>
	printf(" gear status : %u",vals.gear_status);
     916:	8b a1       	ldd	r24, Y+35	; 0x23
     918:	1f 92       	push	r1
     91a:	8f 93       	push	r24
     91c:	8c e5       	ldi	r24, 0x5C	; 92
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	0e 94 fd 11 	call	0x23fa	; 0x23fa <printf>
	printf(",");
     928:	8c e2       	ldi	r24, 0x2C	; 44
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 10 12 	call	0x2420	; 0x2420 <putchar>
	
	printf(" ctrl mode (0:Cur, 1:PWM) : %u",vals.ctrl_type);
     930:	8e a1       	ldd	r24, Y+38	; 0x26
     932:	1f 92       	push	r1
     934:	8f 93       	push	r24
     936:	8e e6       	ldi	r24, 0x6E	; 110
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <printf>
	printf(",");
     942:	8c e2       	ldi	r24, 0x2C	; 44
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 10 12 	call	0x2420	; 0x2420 <putchar>
	printf(" motor mode : %u",vals.motor_status);
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	1f 92       	push	r1
     94e:	8f 93       	push	r24
     950:	8d e8       	ldi	r24, 0x8D	; 141
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	0e 94 fd 11 	call	0x23fa	; 0x23fa <printf>
	printf(",");
	printf("%u",(uint16_t)(vals.f32_batt_volt*10));
	printf(",");
	printf("%i",(int16_t)(vals.f32_batt_current*1000));
	*/
}
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(volatile ModuleValues_t vals)
{	
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     974:	e9 a1       	ldd	r30, Y+33	; 0x21
     976:	8e 2f       	mov	r24, r30
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	88 30       	cpi	r24, 0x08	; 8
     97c:	91 05       	cpc	r25, r1
     97e:	08 f0       	brcs	.+2      	; 0x982 <manage_LEDs+0x16>
     980:	5c c0       	rjmp	.+184    	; 0xa3a <manage_LEDs+0xce>
     982:	fc 01       	movw	r30, r24
     984:	e6 5b       	subi	r30, 0xB6	; 182
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__tablejump2__>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     98c:	80 e4       	ldi	r24, 0x40	; 64
     98e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     992:	80 e8       	ldi	r24, 0x80	; 128
     994:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <rgbled_turn_on>
			if (vals.u16_watchdog_can == 0) //no can messages
     998:	8d 8d       	ldd	r24, Y+29	; 0x1d
     99a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     99c:	89 2b       	or	r24, r25
     99e:	21 f4       	brne	.+8      	; 0x9a8 <manage_LEDs+0x3c>
			{
				rgbled_turn_on(LED_RED);
     9a0:	80 e2       	ldi	r24, 0x20	; 32
     9a2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <rgbled_turn_on>
     9a6:	49 c0       	rjmp	.+146    	; 0xa3a <manage_LEDs+0xce>
			}else{
				rgbled_turn_off(LED_RED);
     9a8:	80 e2       	ldi	r24, 0x20	; 32
     9aa:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
     9ae:	45 c0       	rjmp	.+138    	; 0xa3a <manage_LEDs+0xce>
			}
		break ;
		
		case ENGAGE :
			rgbled_turn_off(LED_RED);
     9b0:	80 e2       	ldi	r24, 0x20	; 32
     9b2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_off(LED_GREEN);
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     9bc:	80 e8       	ldi	r24, 0x80	; 128
     9be:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <rgbled_turn_on>
		break ;
     9c2:	3b c0       	rjmp	.+118    	; 0xa3a <manage_LEDs+0xce>
		
		case ACCEL_GEAR1 :
			rgbled_turn_off(LED_RED);
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     9ca:	80 e8       	ldi	r24, 0x80	; 128
     9cc:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     9d0:	80 e4       	ldi	r24, 0x40	; 64
     9d2:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <rgbled_toggle>
		break;
     9d6:	31 c0       	rjmp	.+98     	; 0xa3a <manage_LEDs+0xce>
		
		case ACCEL_GEAR2 :
		rgbled_turn_off(LED_RED);
     9d8:	80 e2       	ldi	r24, 0x20	; 32
     9da:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
		rgbled_turn_on(LED_BLUE);
     9de:	80 e8       	ldi	r24, 0x80	; 128
     9e0:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <rgbled_turn_on>
		rgbled_toggle(LED_GREEN);
     9e4:	80 e4       	ldi	r24, 0x40	; 64
     9e6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <rgbled_toggle>
		break;
     9ea:	27 c0       	rjmp	.+78     	; 0xa3a <manage_LEDs+0xce>
		
		case BRAKE_GEAR1 :
			rgbled_turn_off(LED_BLUE);
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     9f2:	80 e4       	ldi	r24, 0x40	; 64
     9f4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <rgbled_toggle>
			rgbled_toggle(LED_RED);
     9f8:	80 e2       	ldi	r24, 0x20	; 32
     9fa:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <rgbled_toggle>
		break;
     9fe:	1d c0       	rjmp	.+58     	; 0xa3a <manage_LEDs+0xce>
		
		case BRAKE_GEAR2 :
		rgbled_turn_on(LED_BLUE);
     a00:	80 e8       	ldi	r24, 0x80	; 128
     a02:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <rgbled_turn_on>
		rgbled_toggle(LED_GREEN);
     a06:	80 e4       	ldi	r24, 0x40	; 64
     a08:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <rgbled_toggle>
		rgbled_toggle(LED_RED);
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <rgbled_toggle>
		break;
     a12:	13 c0       	rjmp	.+38     	; 0xa3a <manage_LEDs+0xce>
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     a14:	80 e2       	ldi	r24, 0x20	; 32
     a16:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     a20:	80 e4       	ldi	r24, 0x40	; 64
     a22:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <rgbled_turn_on>
		break;
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <manage_LEDs+0xce>
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     a28:	80 e4       	ldi	r24, 0x40	; 64
     a2a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     a2e:	80 e8       	ldi	r24, 0x80	; 128
     a30:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     a34:	80 e2       	ldi	r24, 0x20	; 32
     a36:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <rgbled_turn_on>
		break;
	}
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <speed_init>:
static uint16_t u16_speed_array [4];

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     a40:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up
     a42:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     a44:	ed 98       	cbi	0x1d, 5	; 29
	#ifdef SPEED_SENSOR_REED
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
	#endif
	
	#ifdef SPEED_SENSOR_HALL
	EICRB |= (1<<ISC50); // interrupt on rising and falling edge
     a46:	ea e6       	ldi	r30, 0x6A	; 106
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	84 60       	ori	r24, 0x04	; 4
     a4e:	80 83       	st	Z, r24
	#endif
		
	EIFR |= (1<<INTF5) ; // clear flag
     a50:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     a52:	ed 9a       	sbi	0x1d, 5	; 29
     a54:	08 95       	ret

00000a56 <handle_speed_sensor>:
		u16_speed_array[n] = 0;
	}
}

void handle_speed_sensor(volatile uint16_t *u16_speed, volatile uint16_t *u16_counter) // period in 1ms
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
	
	if (*u16_counter > 70)
     a5e:	fb 01       	movw	r30, r22
     a60:	20 81       	ld	r18, Z
     a62:	31 81       	ldd	r19, Z+1	; 0x01
     a64:	27 34       	cpi	r18, 0x47	; 71
     a66:	31 05       	cpc	r19, r1
     a68:	b8 f0       	brcs	.+46     	; 0xa98 <handle_speed_sensor+0x42>
     a6a:	eb 01       	movw	r28, r22
     a6c:	8c 01       	movw	r16, r24
	{
		*u16_speed = (uint16_t)(f32_speed_ratio/((float)*u16_counter));
     a6e:	60 81       	ld	r22, Z
     a70:	71 81       	ldd	r23, Z+1	; 0x01
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	76 e7       	ldi	r23, 0x76	; 118
     a82:	88 e0       	ldi	r24, 0x08	; 8
     a84:	96 e4       	ldi	r25, 0x46	; 70
     a86:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     a8a:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     a8e:	f8 01       	movw	r30, r16
     a90:	71 83       	std	Z+1, r23	; 0x01
     a92:	60 83       	st	Z, r22
		*u16_counter = 0 ;
     a94:	19 82       	std	Y+1, r1	; 0x01
     a96:	18 82       	st	Y, r1
	}	
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <compute_synch_duty>:

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	1f 92       	push	r1
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	69 01       	movw	r12, r18
     ab8:	7a 01       	movw	r14, r20
	uint8_t Duty = 50 ;
	if (gear == GEAR1)//gear powertrain
     aba:	61 30       	cpi	r22, 0x01	; 1
     abc:	21 f5       	brne	.+72     	; 0xb06 <compute_synch_duty+0x64>
	{
		Duty = (speed_10ms*DUTY_CALC1/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5
     abe:	69 81       	ldd	r22, Y+1	; 0x01
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatsisf>
     aca:	22 e1       	ldi	r18, 0x12	; 18
     acc:	35 e8       	ldi	r19, 0x85	; 133
     ace:	41 ee       	ldi	r20, 0xE1	; 225
     ad0:	5e e3       	ldi	r21, 0x3E	; 62
     ad2:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     ad6:	a7 01       	movw	r20, r14
     ad8:	96 01       	movw	r18, r12
     ada:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	48 ec       	ldi	r20, 0xC8	; 200
     ae4:	52 e4       	ldi	r21, 0x42	; 66
     ae6:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	48 e4       	ldi	r20, 0x48	; 72
     af0:	52 e4       	ldi	r21, 0x42	; 66
     af2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__addsf3>
     af6:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     afa:	86 2f       	mov	r24, r22
		if (Duty == 50)
     afc:	62 33       	cpi	r22, 0x32	; 50
     afe:	09 f0       	breq	.+2      	; 0xb02 <compute_synch_duty+0x60>
     b00:	4a c0       	rjmp	.+148    	; 0xb96 <compute_synch_duty+0xf4>
		{
			Duty = 52 ;
     b02:	84 e3       	ldi	r24, 0x34	; 52
     b04:	48 c0       	rjmp	.+144    	; 0xb96 <compute_synch_duty+0xf4>
		}		
	}
	
	if (gear == GEAR2) {
     b06:	62 30       	cpi	r22, 0x02	; 2
     b08:	19 f5       	brne	.+70     	; 0xb50 <compute_synch_duty+0xae>
		Duty = (speed_10ms*DUTY_CALC2/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5
     b0a:	69 81       	ldd	r22, Y+1	; 0x01
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatsisf>
     b16:	25 e0       	ldi	r18, 0x05	; 5
     b18:	38 e8       	ldi	r19, 0x88	; 136
     b1a:	46 e6       	ldi	r20, 0x66	; 102
     b1c:	5e e3       	ldi	r21, 0x3E	; 62
     b1e:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     b22:	a7 01       	movw	r20, r14
     b24:	96 01       	movw	r18, r12
     b26:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	48 ec       	ldi	r20, 0xC8	; 200
     b30:	52 e4       	ldi	r21, 0x42	; 66
     b32:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	48 e4       	ldi	r20, 0x48	; 72
     b3c:	52 e4       	ldi	r21, 0x42	; 66
     b3e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__addsf3>
     b42:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     b46:	86 2f       	mov	r24, r22
		if (Duty == 50)
     b48:	62 33       	cpi	r22, 0x32	; 50
     b4a:	29 f5       	brne	.+74     	; 0xb96 <compute_synch_duty+0xf4>
		{
			Duty = 52 ;
     b4c:	84 e3       	ldi	r24, 0x34	; 52
     b4e:	23 c0       	rjmp	.+70     	; 0xb96 <compute_synch_duty+0xf4>
		}
	}
	
	if (gear == BELTGEAR)//for belt powertrain
     b50:	63 30       	cpi	r22, 0x03	; 3
     b52:	01 f5       	brne	.+64     	; 0xb94 <compute_synch_duty+0xf2>
	{
		Duty = (speed_10ms*DUTY_CALC1/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
     b54:	69 81       	ldd	r22, Y+1	; 0x01
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatsisf>
     b60:	22 e1       	ldi	r18, 0x12	; 18
     b62:	35 e8       	ldi	r19, 0x85	; 133
     b64:	41 ee       	ldi	r20, 0xE1	; 225
     b66:	5e e3       	ldi	r21, 0x3E	; 62
     b68:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     b6c:	a7 01       	movw	r20, r14
     b6e:	96 01       	movw	r18, r12
     b70:	0e 94 1d 10 	call	0x203a	; 0x203a <__divsf3>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	48 ec       	ldi	r20, 0xC8	; 200
     b7a:	52 e4       	ldi	r21, 0x42	; 66
     b7c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	48 e4       	ldi	r20, 0x48	; 72
     b86:	52 e4       	ldi	r21, 0x42	; 66
     b88:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__addsf3>
     b8c:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fixunssfsi>
     b90:	86 2f       	mov	r24, r22
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <compute_synch_duty+0xf4>
	}	
}

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
	uint8_t Duty = 50 ;
     b94:	82 e3       	ldi	r24, 0x32	; 50
	if (gear == BELTGEAR)//for belt powertrain
	{
		Duty = (speed_10ms*DUTY_CALC1/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
	}
	return Duty ;
}
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	08 95       	ret

00000ba6 <calculate_required_gear>:
	}
}

ClutchState_t calculate_required_gear(uint16_t u16_car_speed, uint8_t u8_accel_cmd, uint8_t u8_brake_cmd, PowertrainType_t pwtrain_type) {
	ClutchState_t required_gear = NEUTRAL ;
	if ((u8_accel_cmd > 0 && u8_brake_cmd == 0 && u16_car_speed < LOW_GEAR_CHANGE_SPEED) ||
     ba6:	66 23       	and	r22, r22
     ba8:	69 f1       	breq	.+90     	; 0xc04 <calculate_required_gear+0x5e>
     baa:	41 11       	cpse	r20, r1
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <calculate_required_gear+0x18>
     bae:	83 31       	cpi	r24, 0x13	; 19
     bb0:	91 05       	cpc	r25, r1
     bb2:	40 f4       	brcc	.+16     	; 0xbc4 <calculate_required_gear+0x1e>
     bb4:	19 c0       	rjmp	.+50     	; 0xbe8 <calculate_required_gear+0x42>
	(u8_brake_cmd > 0 && u8_accel_cmd == 0 && u16_car_speed < HIGH_GEAR_CHANGE_SPEED) ||
     bb6:	86 31       	cpi	r24, 0x16	; 22
     bb8:	91 05       	cpc	r25, r1
     bba:	20 f4       	brcc	.+8      	; 0xbc4 <calculate_required_gear+0x1e>
     bbc:	17 c0       	rjmp	.+46     	; 0xbec <calculate_required_gear+0x46>
	(u8_brake_cmd > 0 && u8_accel_cmd > 0 && u16_car_speed < HIGH_GEAR_CHANGE_SPEED) ||
     bbe:	86 31       	cpi	r24, 0x16	; 22
     bc0:	91 05       	cpc	r25, r1
     bc2:	b0 f0       	brcs	.+44     	; 0xbf0 <calculate_required_gear+0x4a>
     bc4:	22 23       	and	r18, r18
     bc6:	b1 f0       	breq	.+44     	; 0xbf4 <calculate_required_gear+0x4e>
	pwtrain_type == BELT)
	{
		required_gear = GEAR1 ;
	}
	else if	((u8_accel_cmd > 0 && u8_brake_cmd == 0 && u16_car_speed >= LOW_GEAR_CHANGE_SPEED) ||
     bc8:	66 23       	and	r22, r22
     bca:	f9 f0       	breq	.+62     	; 0xc0a <calculate_required_gear+0x64>
     bcc:	41 11       	cpse	r20, r1
     bce:	08 c0       	rjmp	.+16     	; 0xbe0 <calculate_required_gear+0x3a>
     bd0:	43 97       	sbiw	r24, 0x13	; 19
     bd2:	90 f0       	brcs	.+36     	; 0xbf8 <calculate_required_gear+0x52>
	(u8_brake_cmd > 0 && u8_accel_cmd == 0 && u16_car_speed >= HIGH_GEAR_CHANGE_SPEED) ||
	(u8_brake_cmd > 0 && u8_accel_cmd > 0 && u16_car_speed >= HIGH_GEAR_CHANGE_SPEED))
	{
		required_gear = GEAR2 ;
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	08 95       	ret
	pwtrain_type == BELT)
	{
		required_gear = GEAR1 ;
	}
	else if	((u8_accel_cmd > 0 && u8_brake_cmd == 0 && u16_car_speed >= LOW_GEAR_CHANGE_SPEED) ||
	(u8_brake_cmd > 0 && u8_accel_cmd == 0 && u16_car_speed >= HIGH_GEAR_CHANGE_SPEED) ||
     bd8:	46 97       	sbiw	r24, 0x16	; 22
     bda:	80 f0       	brcs	.+32     	; 0xbfc <calculate_required_gear+0x56>
	(u8_brake_cmd > 0 && u8_accel_cmd > 0 && u16_car_speed >= HIGH_GEAR_CHANGE_SPEED))
	{
		required_gear = GEAR2 ;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	08 95       	ret
	{
		required_gear = GEAR1 ;
	}
	else if	((u8_accel_cmd > 0 && u8_brake_cmd == 0 && u16_car_speed >= LOW_GEAR_CHANGE_SPEED) ||
	(u8_brake_cmd > 0 && u8_accel_cmd == 0 && u16_car_speed >= HIGH_GEAR_CHANGE_SPEED) ||
	(u8_brake_cmd > 0 && u8_accel_cmd > 0 && u16_car_speed >= HIGH_GEAR_CHANGE_SPEED))
     be0:	46 97       	sbiw	r24, 0x16	; 22
     be2:	70 f0       	brcs	.+28     	; 0xc00 <calculate_required_gear+0x5a>
	{
		required_gear = GEAR2 ;
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	08 95       	ret
	if ((u8_accel_cmd > 0 && u8_brake_cmd == 0 && u16_car_speed < LOW_GEAR_CHANGE_SPEED) ||
	(u8_brake_cmd > 0 && u8_accel_cmd == 0 && u16_car_speed < HIGH_GEAR_CHANGE_SPEED) ||
	(u8_brake_cmd > 0 && u8_accel_cmd > 0 && u16_car_speed < HIGH_GEAR_CHANGE_SPEED) ||
	pwtrain_type == BELT)
	{
		required_gear = GEAR1 ;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	08 95       	ret
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	08 95       	ret
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	08 95       	ret
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	08 95       	ret
		vals->motor_status = ERR;
	}
}

ClutchState_t calculate_required_gear(uint16_t u16_car_speed, uint8_t u8_accel_cmd, uint8_t u8_brake_cmd, PowertrainType_t pwtrain_type) {
	ClutchState_t required_gear = NEUTRAL ;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	08 95       	ret
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	08 95       	ret
	if ((u8_accel_cmd > 0 && u8_brake_cmd == 0 && u16_car_speed < LOW_GEAR_CHANGE_SPEED) ||
     c04:	44 23       	and	r20, r20
     c06:	f1 f2       	breq	.-68     	; 0xbc4 <calculate_required_gear+0x1e>
     c08:	d6 cf       	rjmp	.-84     	; 0xbb6 <calculate_required_gear+0x10>
	(u8_brake_cmd > 0 && u8_accel_cmd > 0 && u16_car_speed < HIGH_GEAR_CHANGE_SPEED) ||
	pwtrain_type == BELT)
	{
		required_gear = GEAR1 ;
	}
	else if	((u8_accel_cmd > 0 && u8_brake_cmd == 0 && u16_car_speed >= LOW_GEAR_CHANGE_SPEED) ||
     c0a:	41 11       	cpse	r20, r1
     c0c:	e5 cf       	rjmp	.-54     	; 0xbd8 <calculate_required_gear+0x32>
		vals->motor_status = ERR;
	}
}

ClutchState_t calculate_required_gear(uint16_t u16_car_speed, uint8_t u8_accel_cmd, uint8_t u8_brake_cmd, PowertrainType_t pwtrain_type) {
	ClutchState_t required_gear = NEUTRAL ;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
	{
		required_gear = GEAR2 ;
	}

	return required_gear ;
}
     c10:	08 95       	ret

00000c12 <state_handler>:
static uint8_t fault_clear_count = 0;
static uint8_t starting_engage = 0;
static uint8_t started_engage = 0;

void state_handler(volatile ModuleValues_t * vals)
{
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	ec 01       	movw	r28, r24
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     c1a:	68 85       	ldd	r22, Y+8	; 0x08
     c1c:	79 85       	ldd	r23, Y+9	; 0x09
     c1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c20:	9b 85       	ldd	r25, Y+11	; 0x0b
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e7       	ldi	r20, 0x70	; 112
     c28:	51 e4       	ldi	r21, 0x41	; 65
     c2a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__gesf2>
     c2e:	88 23       	and	r24, r24
     c30:	d4 f1       	brlt	.+116    	; 0xca6 <state_handler+0x94>
     c32:	68 85       	ldd	r22, Y+8	; 0x08
     c34:	79 85       	ldd	r23, Y+9	; 0x09
     c36:	8a 85       	ldd	r24, Y+10	; 0x0a
     c38:	9b 85       	ldd	r25, Y+11	; 0x0b
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	48 ec       	ldi	r20, 0xC8	; 200
     c40:	52 e4       	ldi	r21, 0x42	; 66
     c42:	0e 94 19 10 	call	0x2032	; 0x2032 <__cmpsf2>
     c46:	88 23       	and	r24, r24
     c48:	0c f4       	brge	.+2      	; 0xc4c <state_handler+0x3a>
     c4a:	bf c1       	rjmp	.+894    	; 0xfca <state_handler+0x3b8>
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	30 c0       	rjmp	.+96     	; 0xcb0 <state_handler+0x9e>

	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP|| vals->f32_motor_current <= -MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     c50:	68 81       	ld	r22, Y
     c52:	79 81       	ldd	r23, Y+1	; 0x01
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	48 ec       	ldi	r20, 0xC8	; 200
     c5e:	51 ec       	ldi	r21, 0xC1	; 193
     c60:	0e 94 19 10 	call	0x2032	; 0x2032 <__cmpsf2>
     c64:	18 16       	cp	r1, r24
     c66:	64 f4       	brge	.+24     	; 0xc80 <state_handler+0x6e>
     c68:	68 85       	ldd	r22, Y+8	; 0x08
     c6a:	79 85       	ldd	r23, Y+9	; 0x09
     c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	4c e5       	ldi	r20, 0x5C	; 92
     c76:	52 e4       	ldi	r21, 0x42	; 66
     c78:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__gesf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	ac f4       	brge	.+42     	; 0xcaa <state_handler+0x98>
	{
		fault_count ++ ;
     c80:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <fault_count>
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <fault_count>
		if (fault_count == 3) // a fault is cleared after some time and a maximum of three times. If the fault occurs more than three times,
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	81 f4       	brne	.+32     	; 0xcae <state_handler+0x9c>
		//the board needs to be reset. there is a real problem to be investigated.
		{
			b_major_fault = 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <b_major_fault>
			fault_timeout = 600 ;
			fault_clear_count ++;
     c94:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <fault_clear_count>
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <fault_clear_count>
		}
	}
	if (fault_timeout > 0)
     c9e:	88 e5       	ldi	r24, 0x58	; 88
     ca0:	92 e0       	ldi	r25, 0x02	; 2
static uint8_t starting_engage = 0;
static uint8_t started_engage = 0;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     ca2:	11 e0       	ldi	r17, 0x01	; 1
     ca4:	0b c0       	rjmp	.+22     	; 0xcbc <state_handler+0xaa>
     ca6:	10 e0       	ldi	r17, 0x00	; 0
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <state_handler+0x9e>
     caa:	11 e0       	ldi	r17, 0x01	; 1
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <state_handler+0x9e>
     cae:	11 e0       	ldi	r17, 0x01	; 1
			b_major_fault = 1;
			fault_timeout = 600 ;
			fault_clear_count ++;
		}
	}
	if (fault_timeout > 0)
     cb0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <fault_timeout>
     cb4:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <fault_timeout+0x1>
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	31 f0       	breq	.+12     	; 0xcc8 <state_handler+0xb6>
	{
		fault_timeout -- ;
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <fault_timeout+0x1>
     cc2:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <fault_timeout>
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <state_handler+0xca>
	}else if(b_major_fault && fault_clear_count < 3){
     cc8:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <b_major_fault>
     ccc:	88 23       	and	r24, r24
     cce:	31 f0       	breq	.+12     	; 0xcdc <state_handler+0xca>
     cd0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <fault_clear_count>
     cd4:	83 30       	cpi	r24, 0x03	; 3
     cd6:	10 f4       	brcc	.+4      	; 0xcdc <state_handler+0xca>
		b_major_fault = 0;
     cd8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <b_major_fault>
	}

	switch(vals->motor_status)
     cdc:	ec 8d       	ldd	r30, Y+28	; 0x1c
     cde:	8e 2f       	mov	r24, r30
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	88 30       	cpi	r24, 0x08	; 8
     ce4:	91 05       	cpc	r25, r1
     ce6:	08 f0       	brcs	.+2      	; 0xcea <state_handler+0xd8>
     ce8:	4d c1       	rjmp	.+666    	; 0xf84 <state_handler+0x372>
     cea:	fc 01       	movw	r30, r24
     cec:	ee 5a       	subi	r30, 0xAE	; 174
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__tablejump2__>
	{
		case OFF:
			//transition 1 (see documentation for the state machine description)
			if (vals->u16_watchdog_can > 0 && b_board_powered)
     cf4:	88 8d       	ldd	r24, Y+24	; 0x18
     cf6:	99 8d       	ldd	r25, Y+25	; 0x19
     cf8:	89 2b       	or	r24, r25
     cfa:	21 f0       	breq	.+8      	; 0xd04 <state_handler+0xf2>
     cfc:	11 23       	and	r17, r17
     cfe:	11 f0       	breq	.+4      	; 0xd04 <state_handler+0xf2>
			{
				vals->motor_status = IDLE;
     d00:	85 e0       	ldi	r24, 0x05	; 5
     d02:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			//During
			drivers(0);//drivers shutdown
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	24 da       	rcall	.-3000   	; 0x150 <drivers>
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     d08:	18 a2       	std	Y+32, r1	; 0x20
     d0a:	fc d9       	rcall	.-3080   	; 0x104 <reset_I>
			vals->u8_brake_cmd = 0;
     d0c:	1e 8a       	std	Y+22, r1	; 0x16
			vals->u8_accel_cmd = 0;
     d0e:	1d 8a       	std	Y+21, r1	; 0x15
			vals->u8_duty_cycle = 50;
     d10:	82 e3       	ldi	r24, 0x32	; 50
     d12:	8f 8b       	std	Y+23, r24	; 0x17
			vals->gear_required = NEUTRAL ;
     d14:	1f 8e       	std	Y+31, r1	; 0x1f

		break;
     d16:	36 c1       	rjmp	.+620    	; 0xf84 <state_handler+0x372>

		case IDLE:

			if (vals->pwtrain_type == BELT)
     d18:	8a a1       	ldd	r24, Y+34	; 0x22
     d1a:	81 11       	cpse	r24, r1
			{
				//controller(vals);
				drivers(0); //disable
     d1c:	24 c0       	rjmp	.+72     	; 0xd66 <state_handler+0x154>
     d1e:	18 da       	rcall	.-3024   	; 0x150 <drivers>
				reset_I();
     d20:	f1 d9       	rcall	.-3102   	; 0x104 <reset_I>
     d22:	82 e3       	ldi	r24, 0x32	; 50
				vals->u8_duty_cycle = 50 ;
     d24:	8f 8b       	std	Y+23, r24	; 0x17
     d26:	8e 89       	ldd	r24, Y+22	; 0x16

				//transition 7
				if (vals->u8_brake_cmd > 0)
     d28:	88 23       	and	r24, r24
     d2a:	69 f0       	breq	.+26     	; 0xd46 <state_handler+0x134>
     d2c:	28 85       	ldd	r18, Y+8	; 0x08
				{
					vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, BELTGEAR, vals->f32_batt_volt) ; //Setting duty
     d2e:	39 85       	ldd	r19, Y+9	; 0x09
     d30:	4a 85       	ldd	r20, Y+10	; 0x0a
     d32:	5b 85       	ldd	r21, Y+11	; 0x0b
     d34:	89 89       	ldd	r24, Y+17	; 0x11
     d36:	9a 89       	ldd	r25, Y+18	; 0x12
     d38:	63 e0       	ldi	r22, 0x03	; 3
     d3a:	b3 de       	rcall	.-666    	; 0xaa2 <compute_synch_duty>
     d3c:	8f 8b       	std	Y+23, r24	; 0x17
					set_I(vals->u8_duty_cycle) ; //set integrator
     d3e:	8f 89       	ldd	r24, Y+23	; 0x17
     d40:	ea d9       	rcall	.-3116   	; 0x116 <set_I>
     d42:	83 e0       	ldi	r24, 0x03	; 3
					vals->motor_status = BRAKE_GEAR1;
     d44:	8c 8f       	std	Y+28, r24	; 0x1c
     d46:	8d 89       	ldd	r24, Y+21	; 0x15
				}
				//transition 5
				if (vals->u8_accel_cmd > 0)
     d48:	88 23       	and	r24, r24
     d4a:	69 f0       	breq	.+26     	; 0xd66 <state_handler+0x154>
     d4c:	28 85       	ldd	r18, Y+8	; 0x08
				{
					vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, BELTGEAR, vals->f32_batt_volt) ; //Setting duty
     d4e:	39 85       	ldd	r19, Y+9	; 0x09
     d50:	4a 85       	ldd	r20, Y+10	; 0x0a
     d52:	5b 85       	ldd	r21, Y+11	; 0x0b
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	63 e0       	ldi	r22, 0x03	; 3
     d5a:	a3 de       	rcall	.-698    	; 0xaa2 <compute_synch_duty>
     d5c:	8f 8b       	std	Y+23, r24	; 0x17
					set_I(vals->u8_duty_cycle) ; //set integrator
     d5e:	8f 89       	ldd	r24, Y+23	; 0x17
     d60:	da d9       	rcall	.-3148   	; 0x116 <set_I>
     d62:	81 e0       	ldi	r24, 0x01	; 1
					vals->motor_status = ACCEL_GEAR1;
     d64:	8c 8f       	std	Y+28, r24	; 0x1c
     d66:	8a a1       	ldd	r24, Y+34	; 0x22
				}
			}

			if (vals->pwtrain_type == GEAR)
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	09 f0       	breq	.+2      	; 0xd6e <state_handler+0x15c>
     d6c:	0b c1       	rjmp	.+534    	; 0xf84 <state_handler+0x372>
     d6e:	8d 89       	ldd	r24, Y+21	; 0x15
			{
				//transition 5
				if (vals->u8_accel_cmd > 0 || vals->u8_brake_cmd > 0)
     d70:	81 11       	cpse	r24, r1
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <state_handler+0x168>
     d74:	8e 89       	ldd	r24, Y+22	; 0x16
     d76:	88 23       	and	r24, r24
				{
					vals->motor_status = ENGAGE;
     d78:	11 f0       	breq	.+4      	; 0xd7e <state_handler+0x16c>
     d7a:	87 e0       	ldi	r24, 0x07	; 7
				}
				drivers(0); //disable
     d7c:	8c 8f       	std	Y+28, r24	; 0x1c
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	e7 d9       	rcall	.-3122   	; 0x150 <drivers>
				vals->gear_required = NEUTRAL ;
     d82:	1f 8e       	std	Y+31, r1	; 0x1f
				reset_I();
     d84:	bf d9       	rcall	.-3202   	; 0x104 <reset_I>
				vals->u8_duty_cycle = 50 ;
     d86:	82 e3       	ldi	r24, 0x32	; 50
     d88:	8f 8b       	std	Y+23, r24	; 0x17
     d8a:	fc c0       	rjmp	.+504    	; 0xf84 <state_handler+0x372>

		break;

		case ENGAGE: // /!\ TODO : with the two gears, all turning motion has to be inverted for the inner gear.

			vals->gear_required = calculate_required_gear(vals->u16_car_speed, vals->u8_accel_cmd, vals->u8_brake_cmd, vals->pwtrain_type);
     d8c:	2a a1       	ldd	r18, Y+34	; 0x22
     d8e:	4e 89       	ldd	r20, Y+22	; 0x16
     d90:	6d 89       	ldd	r22, Y+21	; 0x15
     d92:	89 89       	ldd	r24, Y+17	; 0x11
     d94:	9a 89       	ldd	r25, Y+18	; 0x12
     d96:	07 df       	rcall	.-498    	; 0xba6 <calculate_required_gear>
     d98:	8f 8f       	std	Y+31, r24	; 0x1f
     d9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
			if ((vals->gear_required != vals->gear_status ) && !started_engage) {
     d9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d9e:	98 17       	cp	r25, r24
     da0:	41 f0       	breq	.+16     	; 0xdb2 <state_handler+0x1a0>
     da2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <started_engage>
     da6:	81 11       	cpse	r24, r1
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <state_handler+0x1a0>
     daa:	81 e0       	ldi	r24, 0x01	; 1
				starting_engage = 1;
     dac:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <starting_engage>
     db0:	0a c0       	rjmp	.+20     	; 0xdc6 <state_handler+0x1b4>
     db2:	9f 8d       	ldd	r25, Y+31	; 0x1f
			} else if ((vals->gear_required == vals->gear_status ))
     db4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db6:	98 13       	cpse	r25, r24
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <state_handler+0x1ac>
     dba:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <started_engage>
			{
				started_engage = 0;
     dbe:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <starting_engage>
			}
			if (starting_engage && vals->closest_gear == vals->gear_required)
     dc2:	88 23       	and	r24, r24
     dc4:	99 f0       	breq	.+38     	; 0xdec <state_handler+0x1da>
     dc6:	9b a1       	ldd	r25, Y+35	; 0x23
     dc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dca:	98 13       	cpse	r25, r24
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <state_handler+0x1da>
			{
				vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, vals->gear_required, vals->f32_batt_volt) ; //Setting duty
     dce:	28 85       	ldd	r18, Y+8	; 0x08
     dd0:	39 85       	ldd	r19, Y+9	; 0x09
     dd2:	4a 85       	ldd	r20, Y+10	; 0x0a
     dd4:	5b 85       	ldd	r21, Y+11	; 0x0b
     dd6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     dd8:	89 89       	ldd	r24, Y+17	; 0x11
     dda:	9a 89       	ldd	r25, Y+18	; 0x12
     ddc:	62 de       	rcall	.-828    	; 0xaa2 <compute_synch_duty>
				set_I(vals->u8_duty_cycle) ; //set integrator
     dde:	8f 8b       	std	Y+23, r24	; 0x17
     de0:	8f 89       	ldd	r24, Y+23	; 0x17
     de2:	99 d9       	rcall	.-3278   	; 0x116 <set_I>
				vals->ctrl_type = PWM ;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	89 a3       	std	Y+33, r24	; 0x21
				starting_engage = 0;
     de8:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <starting_engage>
			}
			//save_ctrl_type = vals->ctrl_type ; // PWM type ctrl is needed only for the engagement process. The mode will be reverted to previous in ACCEL and BRAKE modes

			controller(vals) ; //speed up motor to synch speed
     dec:	ce 01       	movw	r24, r28
     dee:	b6 d9       	rcall	.-3220   	; 0x15c <controller>
     df0:	81 e0       	ldi	r24, 0x01	; 1
			drivers(1);
     df2:	ae d9       	rcall	.-3236   	; 0x150 <drivers>
     df4:	8e 89       	ldd	r24, Y+22	; 0x16
     df6:	88 23       	and	r24, r24
			//transition ?	9, GEAR1
			if (vals->u8_brake_cmd > 0 && vals->u16_car_speed < HIGH_GEAR_CHANGE_SPEED && vals->gear_status == GEAR1)
     df8:	49 f0       	breq	.+18     	; 0xe0c <state_handler+0x1fa>
     dfa:	89 89       	ldd	r24, Y+17	; 0x11
     dfc:	9a 89       	ldd	r25, Y+18	; 0x12
     dfe:	46 97       	sbiw	r24, 0x16	; 22
     e00:	28 f4       	brcc	.+10     	; 0xe0c <state_handler+0x1fa>
     e02:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	11 f4       	brne	.+4      	; 0xe0c <state_handler+0x1fa>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 8f       	std	Y+28, r24	; 0x1c
			{
				vals->motor_status = BRAKE_GEAR1;
     e0c:	8e 89       	ldd	r24, Y+22	; 0x16
     e0e:	88 23       	and	r24, r24
			}
			//transition ?	9, GEAR2
			if (vals->u8_brake_cmd > 0 && vals->u16_car_speed > HIGH_GEAR_CHANGE_SPEED && vals->gear_status == GEAR2)
     e10:	49 f0       	breq	.+18     	; 0xe24 <state_handler+0x212>
     e12:	89 89       	ldd	r24, Y+17	; 0x11
     e14:	9a 89       	ldd	r25, Y+18	; 0x12
     e16:	47 97       	sbiw	r24, 0x17	; 23
     e18:	28 f0       	brcs	.+10     	; 0xe24 <state_handler+0x212>
     e1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	11 f4       	brne	.+4      	; 0xe24 <state_handler+0x212>
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	8c 8f       	std	Y+28, r24	; 0x1c
			{
				vals->motor_status = BRAKE_GEAR2;
     e24:	8d 89       	ldd	r24, Y+21	; 0x15
     e26:	88 23       	and	r24, r24
			}

			//transition ?10, GEAR1
			if (vals->u8_accel_cmd > 0 && vals->u16_car_speed < LOW_GEAR_CHANGE_SPEED && vals->gear_status == GEAR1)
     e28:	41 f0       	breq	.+16     	; 0xe3a <state_handler+0x228>
     e2a:	89 89       	ldd	r24, Y+17	; 0x11
     e2c:	9a 89       	ldd	r25, Y+18	; 0x12
     e2e:	43 97       	sbiw	r24, 0x13	; 19
     e30:	20 f4       	brcc	.+8      	; 0xe3a <state_handler+0x228>
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	09 f4       	brne	.+2      	; 0xe3a <state_handler+0x228>
     e38:	8c 8f       	std	Y+28, r24	; 0x1c
     e3a:	8d 89       	ldd	r24, Y+21	; 0x15
			{
				vals->motor_status = ACCEL_GEAR1;
     e3c:	88 23       	and	r24, r24
			}
			//transition ?10, GEAR2
			if (vals->u8_accel_cmd > 0 && vals->u16_car_speed > LOW_GEAR_CHANGE_SPEED && vals->gear_status == GEAR2)
     e3e:	41 f0       	breq	.+16     	; 0xe50 <state_handler+0x23e>
     e40:	89 89       	ldd	r24, Y+17	; 0x11
     e42:	9a 89       	ldd	r25, Y+18	; 0x12
     e44:	44 97       	sbiw	r24, 0x14	; 20
     e46:	20 f0       	brcs	.+8      	; 0xe50 <state_handler+0x23e>
     e48:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	09 f4       	brne	.+2      	; 0xe50 <state_handler+0x23e>
     e4e:	8c 8f       	std	Y+28, r24	; 0x1c
     e50:	8d 89       	ldd	r24, Y+21	; 0x15
			{
				vals->motor_status = ACCEL_GEAR2;
     e52:	81 11       	cpse	r24, r1
			}

			//transition 11, GEAR
			if (vals->u8_accel_cmd == 0 && vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     e54:	97 c0       	rjmp	.+302    	; 0xf84 <state_handler+0x372>
     e56:	8e 89       	ldd	r24, Y+22	; 0x16
     e58:	81 11       	cpse	r24, r1
     e5a:	94 c0       	rjmp	.+296    	; 0xf84 <state_handler+0x372>
     e5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e5e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e60:	89 2b       	or	r24, r25
     e62:	09 f0       	breq	.+2      	; 0xe66 <state_handler+0x254>
     e64:	8f c0       	rjmp	.+286    	; 0xf84 <state_handler+0x372>
			{
				vals->motor_status = IDLE;
     e66:	85 e0       	ldi	r24, 0x05	; 5
     e68:	8c 8f       	std	Y+28, r24	; 0x1c
     e6a:	8c c0       	rjmp	.+280    	; 0xf84 <state_handler+0x372>
		break;

		case ACCEL_GEAR1:

			// TODO check gear one change_rules
			vals->ctrl_type = CURRENT;
     e6c:	19 a2       	std	Y+33, r1	; 0x21
			controller(vals);
     e6e:	ce 01       	movw	r24, r28
     e70:	75 d9       	rcall	.-3350   	; 0x15c <controller>
     e72:	81 e0       	ldi	r24, 0x01	; 1
			drivers(1);
     e74:	6d d9       	rcall	.-3366   	; 0x150 <drivers>
     e76:	8d 89       	ldd	r24, Y+21	; 0x15
     e78:	81 11       	cpse	r24, r1
			//transition 6
			if (vals->u8_accel_cmd == 0 && vals->u16_watchdog_throttle == 0)
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <state_handler+0x276>
     e7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e7e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e80:	89 2b       	or	r24, r25
     e82:	11 f4       	brne	.+4      	; 0xe88 <state_handler+0x276>
     e84:	85 e0       	ldi	r24, 0x05	; 5
     e86:	8c 8f       	std	Y+28, r24	; 0x1c
			{
				vals->motor_status = IDLE;
     e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e8a:	88 23       	and	r24, r24
			}
			//transition ?12
			if ((vals->gear_status == NEUTRAL) ||
     e8c:	61 f0       	breq	.+24     	; 0xea6 <state_handler+0x294>
     e8e:	8e 89       	ldd	r24, Y+22	; 0x16
     e90:	81 11       	cpse	r24, r1
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <state_handler+0x294>
				(vals->u8_brake_cmd > 0) ||
				(vals->u8_accel_cmd > 0 && vals->u16_car_speed > HIGH_GEAR_CHANGE_SPEED))
     e94:	8d 89       	ldd	r24, Y+21	; 0x15
			{
				vals->motor_status = IDLE;
			}
			//transition ?12
			if ((vals->gear_status == NEUTRAL) ||
				(vals->u8_brake_cmd > 0) ||
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <state_handler+0x28a>
     e9a:	74 c0       	rjmp	.+232    	; 0xf84 <state_handler+0x372>
				(vals->u8_accel_cmd > 0 && vals->u16_car_speed > HIGH_GEAR_CHANGE_SPEED))
     e9c:	89 89       	ldd	r24, Y+17	; 0x11
     e9e:	9a 89       	ldd	r25, Y+18	; 0x12
     ea0:	47 97       	sbiw	r24, 0x17	; 23
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <state_handler+0x294>
     ea4:	6f c0       	rjmp	.+222    	; 0xf84 <state_handler+0x372>
			{
				vals->motor_status = ENGAGE;
     ea6:	87 e0       	ldi	r24, 0x07	; 7
     ea8:	8c 8f       	std	Y+28, r24	; 0x1c
     eaa:	6c c0       	rjmp	.+216    	; 0xf84 <state_handler+0x372>
		break;

		case ACCEL_GEAR2:

		// TODO check gear to change rules
		vals->ctrl_type = CURRENT;
     eac:	19 a2       	std	Y+33, r1	; 0x21
		controller(vals);
     eae:	ce 01       	movw	r24, r28
     eb0:	55 d9       	rcall	.-3414   	; 0x15c <controller>
     eb2:	81 e0       	ldi	r24, 0x01	; 1
		drivers(1);
     eb4:	4d d9       	rcall	.-3430   	; 0x150 <drivers>
     eb6:	8d 89       	ldd	r24, Y+21	; 0x15
     eb8:	81 11       	cpse	r24, r1
		//transition 6
		if (vals->u8_accel_cmd == 0 && vals->u16_watchdog_throttle == 0)
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <state_handler+0x2b6>
     ebc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ebe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ec0:	89 2b       	or	r24, r25
     ec2:	11 f4       	brne	.+4      	; 0xec8 <state_handler+0x2b6>
		{
			vals->motor_status = IDLE;
     ec4:	85 e0       	ldi	r24, 0x05	; 5
     ec6:	8c 8f       	std	Y+28, r24	; 0x1c
		}
		//transition 12 and ?14, GEAR
		if ((vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL) ||
     ec8:	8a a1       	ldd	r24, Y+34	; 0x22
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	19 f4       	brne	.+6      	; 0xed4 <state_handler+0x2c2>
     ece:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed0:	88 23       	and	r24, r24
     ed2:	19 f0       	breq	.+6      	; 0xeda <state_handler+0x2c8>
			(vals->u8_brake_cmd > 0))
     ed4:	8e 89       	ldd	r24, Y+22	; 0x16
		if (vals->u8_accel_cmd == 0 && vals->u16_watchdog_throttle == 0)
		{
			vals->motor_status = IDLE;
		}
		//transition 12 and ?14, GEAR
		if ((vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL) ||
     ed6:	88 23       	and	r24, r24
     ed8:	11 f0       	breq	.+4      	; 0xede <state_handler+0x2cc>
			(vals->u8_brake_cmd > 0))
		{
			vals->motor_status = ENGAGE;
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	8c 8f       	std	Y+28, r24	; 0x1c
		}

		case BRAKE_GEAR1:
			vals->ctrl_type = CURRENT ;
     ede:	19 a2       	std	Y+33, r1	; 0x21
			controller(vals); //negative throttle cmd
     ee0:	ce 01       	movw	r24, r28
     ee2:	3c d9       	rcall	.-3464   	; 0x15c <controller>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
			drivers(1);
     ee6:	34 d9       	rcall	.-3480   	; 0x150 <drivers>
     ee8:	8e 89       	ldd	r24, Y+22	; 0x16
     eea:	81 11       	cpse	r24, r1
			//transition 8
			if (vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     eec:	06 c0       	rjmp	.+12     	; 0xefa <state_handler+0x2e8>
     eee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ef0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ef2:	89 2b       	or	r24, r25
     ef4:	11 f4       	brne	.+4      	; 0xefa <state_handler+0x2e8>
     ef6:	85 e0       	ldi	r24, 0x05	; 5
			{
				vals->motor_status = IDLE;
     ef8:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			//transition 13 and ?15, GEAR
			if ((vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL) ||
     efa:	8a a1       	ldd	r24, Y+34	; 0x22
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	19 f4       	brne	.+6      	; 0xf06 <state_handler+0x2f4>
     f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f02:	88 23       	and	r24, r24
     f04:	31 f0       	breq	.+12     	; 0xf12 <state_handler+0x300>
				(vals->u8_brake_cmd == 0 && vals->u8_accel_cmd > 0))
     f06:	8e 89       	ldd	r24, Y+22	; 0x16
			if (vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
			{
				vals->motor_status = IDLE;
			}
			//transition 13 and ?15, GEAR
			if ((vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL) ||
     f08:	81 11       	cpse	r24, r1
     f0a:	3c c0       	rjmp	.+120    	; 0xf84 <state_handler+0x372>
				(vals->u8_brake_cmd == 0 && vals->u8_accel_cmd > 0))
     f0c:	8d 89       	ldd	r24, Y+21	; 0x15
     f0e:	88 23       	and	r24, r24
     f10:	c9 f1       	breq	.+114    	; 0xf84 <state_handler+0x372>
			{
				vals->motor_status = ENGAGE;
     f12:	87 e0       	ldi	r24, 0x07	; 7
     f14:	8c 8f       	std	Y+28, r24	; 0x1c
     f16:	36 c0       	rjmp	.+108    	; 0xf84 <state_handler+0x372>
			}
		break;

		case BRAKE_GEAR2:
			vals->ctrl_type = CURRENT ;
     f18:	19 a2       	std	Y+33, r1	; 0x21
			controller(vals); //negative throttle cmd
     f1a:	ce 01       	movw	r24, r28
     f1c:	1f d9       	rcall	.-3522   	; 0x15c <controller>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
			drivers(1);
     f20:	17 d9       	rcall	.-3538   	; 0x150 <drivers>
     f22:	8e 89       	ldd	r24, Y+22	; 0x16
     f24:	81 11       	cpse	r24, r1
			//transition 8
			if (vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <state_handler+0x322>
     f28:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f2c:	89 2b       	or	r24, r25
     f2e:	11 f4       	brne	.+4      	; 0xf34 <state_handler+0x322>
     f30:	85 e0       	ldi	r24, 0x05	; 5
     f32:	8c 8f       	std	Y+28, r24	; 0x1c
			{
				vals->motor_status = IDLE;
     f34:	8a a1       	ldd	r24, Y+34	; 0x22
     f36:	81 30       	cpi	r24, 0x01	; 1
			}
			//transition 13 and ?15, GEAR
			if ((vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL) ||
     f38:	19 f4       	brne	.+6      	; 0xf40 <state_handler+0x32e>
     f3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f3c:	88 23       	and	r24, r24
     f3e:	69 f0       	breq	.+26     	; 0xf5a <state_handler+0x348>
     f40:	8e 89       	ldd	r24, Y+22	; 0x16
     f42:	81 11       	cpse	r24, r1
				(vals->u8_brake_cmd == 0 && vals->u8_accel_cmd > 0) ||
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <state_handler+0x33a>
			if (vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
			{
				vals->motor_status = IDLE;
			}
			//transition 13 and ?15, GEAR
			if ((vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL) ||
     f46:	8d 89       	ldd	r24, Y+21	; 0x15
     f48:	81 11       	cpse	r24, r1
				(vals->u8_brake_cmd == 0 && vals->u8_accel_cmd > 0) ||
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <state_handler+0x348>
     f4c:	8e 89       	ldd	r24, Y+22	; 0x16
     f4e:	88 23       	and	r24, r24
     f50:	c9 f0       	breq	.+50     	; 0xf84 <state_handler+0x372>
				(vals->u8_brake_cmd > 0 && vals->u16_car_speed < HIGH_GEAR_CHANGE_SPEED))
     f52:	89 89       	ldd	r24, Y+17	; 0x11
     f54:	9a 89       	ldd	r25, Y+18	; 0x12
     f56:	46 97       	sbiw	r24, 0x16	; 22
     f58:	a8 f4       	brcc	.+42     	; 0xf84 <state_handler+0x372>
			{
				vals->motor_status = ENGAGE;
     f5a:	87 e0       	ldi	r24, 0x07	; 7
     f5c:	8c 8f       	std	Y+28, r24	; 0x1c
     f5e:	12 c0       	rjmp	.+36     	; 0xf84 <state_handler+0x372>

		break;

		case ERR:
			//transition 4
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
     f60:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <b_major_fault>
     f64:	81 11       	cpse	r24, r1
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <state_handler+0x360>
     f68:	88 89       	ldd	r24, Y+16	; 0x10
     f6a:	84 36       	cpi	r24, 0x64	; 100
     f6c:	10 f4       	brcc	.+4      	; 0xf72 <state_handler+0x360>
			{
				vals->motor_status = IDLE;
     f6e:	85 e0       	ldi	r24, 0x05	; 5
     f70:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			drivers(0);//drivers shutdown
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	ed d8       	rcall	.-3622   	; 0x150 <drivers>
     f76:	18 a2       	std	Y+32, r1	; 0x20
			vals->b_driver_status = 0;
     f78:	1f 8e       	std	Y+31, r1	; 0x1f
			vals->gear_required = NEUTRAL;
     f7a:	c4 d8       	rcall	.-3704   	; 0x104 <reset_I>
			reset_I(); //reset integrator
     f7c:	1e 8a       	std	Y+22, r1	; 0x16
     f7e:	1d 8a       	std	Y+21, r1	; 0x15
			vals->u8_brake_cmd = 0;
     f80:	82 e3       	ldi	r24, 0x32	; 50
			vals->u8_accel_cmd = 0;
     f82:	8f 8b       	std	Y+23, r24	; 0x17
			vals->u8_duty_cycle = 50;
     f84:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f86:	85 30       	cpi	r24, 0x05	; 5
		break;
	}

	if ((vals->motor_status == IDLE ||
     f88:	79 f0       	breq	.+30     	; 0xfa8 <state_handler+0x396>
     f8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f8c:	81 30       	cpi	r24, 0x01	; 1
		vals->motor_status == ACCEL_GEAR1 ||
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <state_handler+0x396>
			vals->u8_accel_cmd = 0;
			vals->u8_duty_cycle = 50;
		break;
	}

	if ((vals->motor_status == IDLE ||
     f90:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f92:	82 30       	cpi	r24, 0x02	; 2
		vals->motor_status == ACCEL_GEAR1 ||
		vals->motor_status == ACCEL_GEAR2 ||
     f94:	49 f0       	breq	.+18     	; 0xfa8 <state_handler+0x396>
			vals->u8_duty_cycle = 50;
		break;
	}

	if ((vals->motor_status == IDLE ||
		vals->motor_status == ACCEL_GEAR1 ||
     f96:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f98:	83 30       	cpi	r24, 0x03	; 3
		vals->motor_status == ACCEL_GEAR2 ||
		vals->motor_status == BRAKE_GEAR1 ||
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <state_handler+0x396>
		break;
	}

	if ((vals->motor_status == IDLE ||
		vals->motor_status == ACCEL_GEAR1 ||
		vals->motor_status == ACCEL_GEAR2 ||
     f9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f9e:	84 30       	cpi	r24, 0x04	; 4
		vals->motor_status == BRAKE_GEAR1 ||
		vals->motor_status == BRAKE_GEAR2 ||
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <state_handler+0x396>
	}

	if ((vals->motor_status == IDLE ||
		vals->motor_status == ACCEL_GEAR1 ||
		vals->motor_status == ACCEL_GEAR2 ||
		vals->motor_status == BRAKE_GEAR1 ||
     fa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fa4:	87 30       	cpi	r24, 0x07	; 7
		vals->motor_status == BRAKE_GEAR2 ||
		vals->motor_status == ENGAGE) &&
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <state_handler+0x3a4>

	if ((vals->motor_status == IDLE ||
		vals->motor_status == ACCEL_GEAR1 ||
		vals->motor_status == ACCEL_GEAR2 ||
		vals->motor_status == BRAKE_GEAR1 ||
		vals->motor_status == BRAKE_GEAR2 ||
     fa8:	88 8d       	ldd	r24, Y+24	; 0x18
     faa:	99 8d       	ldd	r25, Y+25	; 0x19
		vals->motor_status == ENGAGE) &&
		(vals->u16_watchdog_can == 0 || !b_board_powered)
     fac:	89 2b       	or	r24, r25
     fae:	11 f0       	breq	.+4      	; 0xfb4 <state_handler+0x3a2>
	if ((vals->motor_status == IDLE ||
		vals->motor_status == ACCEL_GEAR1 ||
		vals->motor_status == ACCEL_GEAR2 ||
		vals->motor_status == BRAKE_GEAR1 ||
		vals->motor_status == BRAKE_GEAR2 ||
		vals->motor_status == ENGAGE) &&
     fb0:	11 11       	cpse	r17, r1
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <state_handler+0x3a4>
		(vals->u16_watchdog_can == 0 || !b_board_powered)
     fb4:	1c 8e       	std	Y+28, r1	; 0x1c
     fb6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <b_major_fault>
	{
		// transition 2
		vals->motor_status = OFF;
	}

	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
     fba:	81 11       	cpse	r24, r1
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <state_handler+0x3b2>
     fbe:	88 89       	ldd	r24, Y+16	; 0x10
     fc0:	84 36       	cpi	r24, 0x64	; 100
     fc2:	88 f0       	brcs	.+34     	; 0xfe6 <state_handler+0x3d4>
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	8c 8f       	std	Y+28, r24	; 0x1c
	{
		//transition 3
		vals->motor_status = ERR;
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <state_handler+0x3d4>
     fca:	68 81       	ld	r22, Y
	}
}
     fcc:	79 81       	ldd	r23, Y+1	; 0x01

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);

	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP|| vals->f32_motor_current <= -MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	48 ec       	ldi	r20, 0xC8	; 200
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__gesf2>
     fde:	88 23       	and	r24, r24
     fe0:	0c f0       	brlt	.+2      	; 0xfe4 <state_handler+0x3d2>
     fe2:	4e ce       	rjmp	.-868    	; 0xc80 <state_handler+0x6e>
     fe4:	35 ce       	rjmp	.-918    	; 0xc50 <state_handler+0x3e>
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		//transition 3
		vals->motor_status = ERR;
	}
}
     fea:	1f 91       	pop	r17
     fec:	08 95       	ret

00000fee <pwm_init>:
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	8e b1       	in	r24, 0x0e	; 14
     ff4:	87 7e       	andi	r24, 0xE7	; 231
     ff6:	8e b9       	out	0x0e, r24	; 14
     ff8:	8d b1       	in	r24, 0x0d	; 13
     ffa:	88 61       	ori	r24, 0x18	; 24
     ffc:	8d b9       	out	0x0d, r24	; 13
     ffe:	a1 e9       	ldi	r26, 0x91	; 145
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	8c 91       	ld	r24, X
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	8c 93       	st	X, r24
    1008:	8c 91       	ld	r24, X
    100a:	87 7f       	andi	r24, 0xF7	; 247
    100c:	8c 93       	st	X, r24
    100e:	e0 e9       	ldi	r30, 0x90	; 144
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	82 60       	ori	r24, 0x02	; 2
    1016:	80 83       	st	Z, r24
    1018:	80 81       	ld	r24, Z
    101a:	8e 7f       	andi	r24, 0xFE	; 254
    101c:	80 83       	st	Z, r24
    101e:	80 81       	ld	r24, Z
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	80 83       	st	Z, r24
    1024:	80 81       	ld	r24, Z
    1026:	8f 7b       	andi	r24, 0xBF	; 191
    1028:	80 83       	st	Z, r24
    102a:	80 81       	ld	r24, Z
    102c:	80 62       	ori	r24, 0x20	; 32
    102e:	80 83       	st	Z, r24
    1030:	80 81       	ld	r24, Z
    1032:	8f 7e       	andi	r24, 0xEF	; 239
    1034:	80 83       	st	Z, r24
    1036:	8c 91       	ld	r24, X
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	8c 93       	st	X, r24
    103c:	8c 91       	ld	r24, X
    103e:	89 7f       	andi	r24, 0xF9	; 249
    1040:	8c 93       	st	X, r24
    1042:	c6 e9       	ldi	r28, 0x96	; 150
    1044:	d0 e0       	ldi	r29, 0x00	; 0
    1046:	85 e8       	ldi	r24, 0x85	; 133
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	99 83       	std	Y+1, r25	; 0x01
    104c:	88 83       	st	Y, r24
    104e:	68 81       	ld	r22, Y
    1050:	79 81       	ldd	r23, Y+1	; 0x01
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 b6 10 	call	0x216c	; 0x216c <__floatunsisf>
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3>
    1066:	0e 94 85 10 	call	0x210a	; 0x210a <__fixsfsi>
    106a:	e8 e9       	ldi	r30, 0x98	; 152
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	71 83       	std	Z+1, r23	; 0x01
    1070:	60 83       	st	Z, r22
    1072:	88 81       	ld	r24, Y
    1074:	99 81       	ldd	r25, Y+1	; 0x01
    1076:	20 81       	ld	r18, Z
    1078:	31 81       	ldd	r19, Z+1	; 0x01
    107a:	82 1b       	sub	r24, r18
    107c:	93 0b       	sbc	r25, r19
    107e:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1082:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <uart0_putc>:
    108c:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <tx0_Head>
    1090:	9f 5f       	subi	r25, 0xFF	; 255
    1092:	9f 71       	andi	r25, 0x1F	; 31
    1094:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <tx0_Tail>
    1098:	92 17       	cp	r25, r18
    109a:	e1 f3       	breq	.-8      	; 0x1094 <uart0_putc+0x8>
    109c:	e9 2f       	mov	r30, r25
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	e6 52       	subi	r30, 0x26	; 38
    10a2:	fc 4f       	sbci	r31, 0xFC	; 252
    10a4:	80 83       	st	Z, r24
    10a6:	2f b7       	in	r18, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <tx0_Head>
    10ae:	e1 ec       	ldi	r30, 0xC1	; 193
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 62       	ori	r24, 0x20	; 32
    10b6:	80 83       	st	Z, r24
    10b8:	2f bf       	out	0x3f, r18	; 63
    10ba:	08 95       	ret

000010bc <uart0_flush>:
    10bc:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <tx0_Tail>
    10c0:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <tx0_Head>
    10c4:	98 13       	cpse	r25, r24
    10c6:	fa cf       	rjmp	.-12     	; 0x10bc <uart0_flush>
    10c8:	08 95       	ret

000010ca <uart1_putc>:
    10ca:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <tx1_Head>
    10ce:	9f 5f       	subi	r25, 0xFF	; 255
    10d0:	9f 71       	andi	r25, 0x1F	; 31
    10d2:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <tx1_Tail>
    10d6:	92 17       	cp	r25, r18
    10d8:	e1 f3       	breq	.-8      	; 0x10d2 <uart1_putc+0x8>
    10da:	e9 2f       	mov	r30, r25
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	eb 56       	subi	r30, 0x6B	; 107
    10e0:	fc 4f       	sbci	r31, 0xFC	; 252
    10e2:	80 83       	st	Z, r24
    10e4:	2f b7       	in	r18, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <tx1_Head>
    10ec:	e9 ec       	ldi	r30, 0xC9	; 201
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 62       	ori	r24, 0x20	; 32
    10f4:	80 83       	st	Z, r24
    10f6:	2f bf       	out	0x3f, r18	; 63
    10f8:	08 95       	ret

000010fa <uart_putchar>:
    10fa:	cf 93       	push	r28
    10fc:	c8 2f       	mov	r28, r24
    10fe:	fb 01       	movw	r30, r22
    1100:	84 85       	ldd	r24, Z+12	; 0x0c
    1102:	95 85       	ldd	r25, Z+13	; 0x0d
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	39 f0       	breq	.+14     	; 0x1116 <__stack+0x17>
    1108:	ca 30       	cpi	r28, 0x0A	; 10
    110a:	11 f4       	brne	.+4      	; 0x1110 <__stack+0x11>
    110c:	8d e0       	ldi	r24, 0x0D	; 13
    110e:	be df       	rcall	.-132    	; 0x108c <uart0_putc>
    1110:	8c 2f       	mov	r24, r28
    1112:	bc df       	rcall	.-136    	; 0x108c <uart0_putc>
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <__stack+0x23>
    1116:	ca 30       	cpi	r28, 0x0A	; 10
    1118:	11 f4       	brne	.+4      	; 0x111e <__stack+0x1f>
    111a:	8d e0       	ldi	r24, 0x0D	; 13
    111c:	d6 df       	rcall	.-84     	; 0x10ca <uart1_putc>
    111e:	8c 2f       	mov	r24, r28
    1120:	d4 df       	rcall	.-88     	; 0x10ca <uart1_putc>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <uart0_getc>:
    112a:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <rx0_Tail>
    112e:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <rx0_Head>
    1132:	89 17       	cp	r24, r25
    1134:	59 f0       	breq	.+22     	; 0x114c <uart0_getc+0x22>
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	98 2f       	mov	r25, r24
    113a:	9f 71       	andi	r25, 0x1F	; 31
    113c:	e9 2f       	mov	r30, r25
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	ee 58       	subi	r30, 0x8E	; 142
    1142:	fc 4f       	sbci	r31, 0xFC	; 252
    1144:	80 81       	ld	r24, Z
    1146:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <rx0_Tail>
    114a:	08 95       	ret
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	08 95       	ret

00001150 <uart0_getlnToFirstWhiteSpace>:
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	7c 01       	movw	r14, r24
    115e:	16 2f       	mov	r17, r22
    1160:	e4 df       	rcall	.-56     	; 0x112a <uart0_getc>
    1162:	f7 01       	movw	r30, r14
    1164:	80 83       	st	Z, r24
    1166:	81 32       	cpi	r24, 0x21	; 33
    1168:	d8 f3       	brcs	.-10     	; 0x1160 <uart0_getlnToFirstWhiteSpace+0x10>
    116a:	e7 01       	movw	r28, r14
    116c:	21 96       	adiw	r28, 0x01	; 1
    116e:	12 30       	cpi	r17, 0x02	; 2
    1170:	c1 f0       	breq	.+48     	; 0x11a2 <uart0_getlnToFirstWhiteSpace+0x52>
    1172:	13 50       	subi	r17, 0x03	; 3
    1174:	81 2f       	mov	r24, r17
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	87 01       	movw	r16, r14
    117c:	08 0f       	add	r16, r24
    117e:	19 1f       	adc	r17, r25
    1180:	d4 df       	rcall	.-88     	; 0x112a <uart0_getc>
    1182:	88 83       	st	Y, r24
    1184:	88 23       	and	r24, r24
    1186:	e1 f3       	breq	.-8      	; 0x1180 <uart0_getlnToFirstWhiteSpace+0x30>
    1188:	8d 30       	cpi	r24, 0x0D	; 13
    118a:	21 f4       	brne	.+8      	; 0x1194 <uart0_getlnToFirstWhiteSpace+0x44>
    118c:	ce df       	rcall	.-100    	; 0x112a <uart0_getc>
    118e:	88 23       	and	r24, r24
    1190:	e9 f3       	breq	.-6      	; 0x118c <uart0_getlnToFirstWhiteSpace+0x3c>
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <uart0_getlnToFirstWhiteSpace+0x52>
    1194:	81 32       	cpi	r24, 0x21	; 33
    1196:	28 f0       	brcs	.+10     	; 0x11a2 <uart0_getlnToFirstWhiteSpace+0x52>
    1198:	21 96       	adiw	r28, 0x01	; 1
    119a:	0c 17       	cp	r16, r28
    119c:	1d 07       	cpc	r17, r29
    119e:	81 f7       	brne	.-32     	; 0x1180 <uart0_getlnToFirstWhiteSpace+0x30>
    11a0:	e8 01       	movw	r28, r16
    11a2:	18 82       	st	Y, r1
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	08 95       	ret

000011b2 <uart0_getint>:
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	27 97       	sbiw	r28, 0x07	; 7
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	67 e0       	ldi	r22, 0x07	; 7
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	c1 df       	rcall	.-126    	; 0x1150 <uart0_getlnToFirstWhiteSpace>
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <atoi>
    11d6:	27 96       	adiw	r28, 0x07	; 7
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <uart0_getData>:
    11e8:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <rx0_Tail>
    11ec:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <rx0_Head>
    11f0:	89 17       	cp	r24, r25
    11f2:	61 f0       	breq	.+24     	; 0x120c <uart0_getData+0x24>
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	8f 71       	andi	r24, 0x1F	; 31
    11f8:	e8 2f       	mov	r30, r24
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	ee 58       	subi	r30, 0x8E	; 142
    11fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1200:	90 81       	ld	r25, Z
    1202:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <rx0_Tail>
    1206:	89 2f       	mov	r24, r25
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	08 95       	ret
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	08 95       	ret

00001212 <uart1_getData>:
    1212:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <rx1_Tail>
    1216:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <rx1_Head>
    121a:	89 17       	cp	r24, r25
    121c:	61 f0       	breq	.+24     	; 0x1236 <uart1_getData+0x24>
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	8f 71       	andi	r24, 0x1F	; 31
    1222:	e8 2f       	mov	r30, r24
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	ea 54       	subi	r30, 0x4A	; 74
    1228:	fc 4f       	sbci	r31, 0xFC	; 252
    122a:	90 81       	ld	r25, Z
    122c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <rx1_Tail>
    1230:	89 2f       	mov	r24, r25
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	08 95       	ret
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	08 95       	ret

0000123c <uart_getchar>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	fc 01       	movw	r30, r24
    1242:	84 85       	ldd	r24, Z+12	; 0x0c
    1244:	95 85       	ldd	r25, Z+13	; 0x0d
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	41 f0       	breq	.+16     	; 0x125a <uart_getchar+0x1e>
    124a:	ce df       	rcall	.-100    	; 0x11e8 <uart0_getData>
    124c:	ec 01       	movw	r28, r24
    124e:	99 23       	and	r25, r25
    1250:	e4 f3       	brlt	.-8      	; 0x124a <uart_getchar+0xe>
    1252:	1c df       	rcall	.-456    	; 0x108c <uart0_putc>
    1254:	ce 01       	movw	r24, r28
    1256:	99 27       	eor	r25, r25
    1258:	07 c0       	rjmp	.+14     	; 0x1268 <uart_getchar+0x2c>
    125a:	db df       	rcall	.-74     	; 0x1212 <uart1_getData>
    125c:	ec 01       	movw	r28, r24
    125e:	99 23       	and	r25, r25
    1260:	e4 f3       	brlt	.-8      	; 0x125a <uart_getchar+0x1e>
    1262:	33 df       	rcall	.-410    	; 0x10ca <uart1_putc>
    1264:	ce 01       	movw	r24, r28
    1266:	99 27       	eor	r25, r25
    1268:	99 27       	eor	r25, r25
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <__vector_22>:
    1270:	0f 93       	push	r16
    1272:	0f b7       	in	r16, 0x3f	; 63
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
    1278:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <tx0_Tail>
    127c:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <tx0_Head>
    1280:	e3 95       	inc	r30
    1282:	ef 71       	andi	r30, 0x1F	; 31
    1284:	ef 13       	cpse	r30, r31
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <USART0_TX_CONTINUE>
    1288:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    128c:	ff 7d       	andi	r31, 0xDF	; 223
    128e:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00001292 <USART0_TX_CONTINUE>:
    1292:	e0 93 93 03 	sts	0x0393, r30	; 0x800393 <tx0_Tail>
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	e6 52       	subi	r30, 0x26	; 38
    129a:	fc 4f       	sbci	r31, 0xFC	; 252
    129c:	e0 81       	ld	r30, Z
    129e:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

000012a2 <USART0_TX_EXIT>:
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	0f bf       	out	0x3f, r16	; 63
    12a8:	0f 91       	pop	r16
    12aa:	18 95       	reti

000012ac <__vector_21>:
    12ac:	0f 93       	push	r16
    12ae:	0f b7       	in	r16, 0x3f	; 63
    12b0:	9f 93       	push	r25
    12b2:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    12b6:	ef 93       	push	r30
    12b8:	ff 93       	push	r31
    12ba:	e0 91 d6 03 	lds	r30, 0x03D6	; 0x8003d6 <rx0_Head>
    12be:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <rx0_Tail>
    12c2:	e3 95       	inc	r30
    12c4:	ef 71       	andi	r30, 0x1F	; 31
    12c6:	fe 17       	cp	r31, r30
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <USART0_RX_EXIT>
    12ca:	e0 93 d6 03 	sts	0x03D6, r30	; 0x8003d6 <rx0_Head>
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	ee 58       	subi	r30, 0x8E	; 142
    12d2:	fc 4f       	sbci	r31, 0xFC	; 252
    12d4:	90 83       	st	Z, r25

000012d6 <USART0_RX_EXIT>:
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	9f 91       	pop	r25
    12dc:	0f bf       	out	0x3f, r16	; 63
    12de:	0f 91       	pop	r16
    12e0:	18 95       	reti

000012e2 <__vector_33>:
    12e2:	0f 93       	push	r16
    12e4:	0f b7       	in	r16, 0x3f	; 63
    12e6:	ef 93       	push	r30
    12e8:	ff 93       	push	r31
    12ea:	e0 91 d7 03 	lds	r30, 0x03D7	; 0x8003d7 <tx1_Tail>
    12ee:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <tx1_Head>
    12f2:	e3 95       	inc	r30
    12f4:	ef 71       	andi	r30, 0x1F	; 31
    12f6:	ef 13       	cpse	r30, r31
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <USART1_TX_CONTINUE>
    12fa:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    12fe:	ff 7d       	andi	r31, 0xDF	; 223
    1300:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00001304 <USART1_TX_CONTINUE>:
    1304:	e0 93 d7 03 	sts	0x03D7, r30	; 0x8003d7 <tx1_Tail>
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	eb 56       	subi	r30, 0x6B	; 107
    130c:	fc 4f       	sbci	r31, 0xFC	; 252
    130e:	e0 81       	ld	r30, Z
    1310:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00001314 <USART1_TX_EXIT>:
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	0f bf       	out	0x3f, r16	; 63
    131a:	0f 91       	pop	r16
    131c:	18 95       	reti

0000131e <__vector_32>:
    131e:	0f 93       	push	r16
    1320:	0f b7       	in	r16, 0x3f	; 63
    1322:	9f 93       	push	r25
    1324:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
    132c:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <rx1_Head>
    1330:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <rx1_Tail>
    1334:	e3 95       	inc	r30
    1336:	ef 71       	andi	r30, 0x1F	; 31
    1338:	fe 17       	cp	r31, r30
    133a:	31 f0       	breq	.+12     	; 0x1348 <USART1_RX_EXIT>
    133c:	e0 93 d8 03 	sts	0x03D8, r30	; 0x8003d8 <rx1_Head>
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	ea 54       	subi	r30, 0x4A	; 74
    1344:	fc 4f       	sbci	r31, 0xFC	; 252
    1346:	90 83       	st	Z, r25

00001348 <USART1_RX_EXIT>:
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	9f 91       	pop	r25
    134e:	0f bf       	out	0x3f, r16	; 63
    1350:	0f 91       	pop	r16
    1352:	18 95       	reti

00001354 <timer1_init_ts>:
//for speed
volatile uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
    1354:	e1 e8       	ldi	r30, 0x81	; 129
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	83 60       	ori	r24, 0x03	; 3
    135c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
    135e:	80 81       	ld	r24, Z
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
    1364:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1368:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
    136c:	ef e6       	ldi	r30, 0x6F	; 111
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
    1376:	8d e7       	ldi	r24, 0x7D	; 125
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    137e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1382:	08 95       	ret

00001384 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
    1384:	84 b5       	in	r24, 0x24	; 36
    1386:	85 60       	ori	r24, 0x05	; 5
    1388:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
    138a:	84 b5       	in	r24, 0x24	; 36
    138c:	88 60       	ori	r24, 0x08	; 8
    138e:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
    1390:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
    1392:	ee e6       	ldi	r30, 0x6E	; 110
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	82 60       	ori	r24, 0x02	; 2
    139a:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
    139c:	87 e2       	ldi	r24, 0x27	; 39
    139e:	87 bd       	out	0x27, r24	; 39
    13a0:	08 95       	ret

000013a2 <main>:
	.near_gear = 1
};

int main(void)	
{
	cli();
    13a2:	f8 94       	cli
	rgbled_init();
    13a4:	61 d5       	rcall	.+2754   	; 0x1e68 <rgbled_init>
	DWC_init();
    13a6:	d6 d1       	rcall	.+940    	; 0x1754 <DWC_init>
	pwm_init();
    13a8:	22 de       	rcall	.-956    	; 0xfee <pwm_init>
    13aa:	60 e0       	ldi	r22, 0x00	; 0
	can_init(0,0);
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
	timer1_init_ts();
    13b2:	40 d4       	rcall	.+2176   	; 0x1c34 <can_init>
	timer0_init_ts();
    13b4:	cf df       	rcall	.-98     	; 0x1354 <timer1_init_ts>
    13b6:	e6 df       	rcall	.-52     	; 0x1384 <timer0_init_ts>
	speed_init();
    13b8:	43 db       	rcall	.-2426   	; 0xa40 <speed_init>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
    13bc:	64 d5       	rcall	.+2760   	; 0x1e86 <spi_init>
    13be:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
    13c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
    13c6:	88 e9       	ldi	r24, 0x98	; 152
    13c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
    13cc:	ea ef       	ldi	r30, 0xFA	; 250
    13ce:	f3 e0       	ldi	r31, 0x03	; 3
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	93 83       	std	Z+3, r25	; 0x03
    13d6:	82 83       	std	Z+2, r24	; 0x02
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
    13dc:	0e 94 a6 00 	call	0x14c	; 0x14c <drivers_init>
	drivers_init();
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e 94 a8 00 	call	0x150	; 0x150 <drivers>
	drivers(0);
    13e6:	78 94       	sei
	sei();
    13e8:	c1 e0       	ldi	r28, 0x01	; 1
	
    while (1){
		
		handle_can(&ComValues, &rxFrame); //receive CAN
    13ea:	66 e4       	ldi	r22, 0x46	; 70
    13ec:	73 e0       	ldi	r23, 0x03	; 3
    13ee:	86 e1       	ldi	r24, 0x16	; 22
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	48 d9       	rcall	.-3440   	; 0x684 <handle_can>
    13f4:	86 e1       	ldi	r24, 0x16	; 22
		
		#ifdef ENABLE_UART_TX
			receive_uart(&ComValues);
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	28 da       	rcall	.-2992   	; 0x84a <receive_uart>
    13fa:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <b_send_can>
		#endif
		
		if (b_send_can)
    13fe:	88 23       	and	r24, r24
    1400:	09 f4       	brne	.+2      	; 0x1404 <main+0x62>
    1402:	41 c0       	rjmp	.+130    	; 0x1486 <main+0xe4>
    1404:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <b_select_can_msg>
		{
			if (b_select_can_msg)// sending one or the other
    1408:	88 23       	and	r24, r24
    140a:	f1 f0       	breq	.+60     	; 0x1448 <main+0xa6>
    140c:	8d b7       	in	r24, 0x3d	; 61
    140e:	9e b7       	in	r25, 0x3e	; 62
			{
				handle_motor_status_can_msg(ComValues); //send motor status on CAN
    1410:	85 97       	sbiw	r24, 0x25	; 37
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	9e bf       	out	0x3e, r25	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	8d bf       	out	0x3d, r24	; 61
    141c:	ad b7       	in	r26, 0x3d	; 61
    141e:	be b7       	in	r27, 0x3e	; 62
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	85 e2       	ldi	r24, 0x25	; 37
    1424:	e6 e1       	ldi	r30, 0x16	; 22
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	01 90       	ld	r0, Z+
    142a:	0d 92       	st	X+, r0
    142c:	8a 95       	dec	r24
    142e:	e1 f7       	brne	.-8      	; 0x1428 <main+0x86>
    1430:	89 d9       	rcall	.-3310   	; 0x744 <handle_motor_status_can_msg>
    1432:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <b_select_can_msg>
				b_select_can_msg = 0;
    1436:	8d b7       	in	r24, 0x3d	; 61
    1438:	9e b7       	in	r25, 0x3e	; 62
    143a:	85 96       	adiw	r24, 0x25	; 37
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	9e bf       	out	0x3e, r25	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	8d bf       	out	0x3d, r24	; 61
    1446:	1d c0       	rjmp	.+58     	; 0x1482 <main+0xe0>
    1448:	8d b7       	in	r24, 0x3d	; 61
    144a:	9e b7       	in	r25, 0x3e	; 62
			}else{
				handle_clutch_cmd_can_msg(ComValues); // send clutch command on CAN
    144c:	85 97       	sbiw	r24, 0x25	; 37
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	9e bf       	out	0x3e, r25	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	8d bf       	out	0x3d, r24	; 61
    1458:	ad b7       	in	r26, 0x3d	; 61
    145a:	be b7       	in	r27, 0x3e	; 62
    145c:	11 96       	adiw	r26, 0x01	; 1
    145e:	85 e2       	ldi	r24, 0x25	; 37
    1460:	e6 e1       	ldi	r30, 0x16	; 22
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	01 90       	ld	r0, Z+
    1466:	0d 92       	st	X+, r0
    1468:	8a 95       	dec	r24
    146a:	e1 f7       	brne	.-8      	; 0x1464 <main+0xc2>
    146c:	da d9       	rcall	.-3148   	; 0x822 <handle_clutch_cmd_can_msg>
    146e:	c0 93 b3 01 	sts	0x01B3, r28	; 0x8001b3 <b_select_can_msg>
				b_select_can_msg = 1;
    1472:	8d b7       	in	r24, 0x3d	; 61
    1474:	9e b7       	in	r25, 0x3e	; 62
    1476:	85 96       	adiw	r24, 0x25	; 37
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	9e bf       	out	0x3e, r25	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	8d bf       	out	0x3d, r24	; 61
    1482:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <b_send_can>
			}
			b_send_can = 0;
    1486:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <b_send_uart>
		}
		
		if (b_send_uart)
    148a:	88 23       	and	r24, r24
    148c:	09 f4       	brne	.+2      	; 0x1490 <main+0xee>
    148e:	ad cf       	rjmp	.-166    	; 0x13ea <main+0x48>
    1490:	8d b7       	in	r24, 0x3d	; 61
    1492:	9e b7       	in	r25, 0x3e	; 62
		{
			send_uart(ComValues);
    1494:	85 97       	sbiw	r24, 0x25	; 37
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	9e bf       	out	0x3e, r25	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	8d bf       	out	0x3d, r24	; 61
    14a0:	ad b7       	in	r26, 0x3d	; 61
    14a2:	be b7       	in	r27, 0x3e	; 62
    14a4:	11 96       	adiw	r26, 0x01	; 1
    14a6:	85 e2       	ldi	r24, 0x25	; 37
    14a8:	e6 e1       	ldi	r30, 0x16	; 22
    14aa:	f1 e0       	ldi	r31, 0x01	; 1
    14ac:	01 90       	ld	r0, Z+
    14ae:	0d 92       	st	X+, r0
    14b0:	8a 95       	dec	r24
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <main+0x10a>
    14b4:	fb d9       	rcall	.-3082   	; 0x8ac <send_uart>
    14b6:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <b_send_uart>
			b_send_uart = 0;
    14ba:	8d b7       	in	r24, 0x3d	; 61
    14bc:	9e b7       	in	r25, 0x3e	; 62
    14be:	85 96       	adiw	r24, 0x25	; 37
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	9e bf       	out	0x3e, r25	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	8d bf       	out	0x3d, r24	; 61
    14ca:	8f cf       	rjmp	.-226    	; 0x13ea <main+0x48>

000014cc <__vector_16>:
    14cc:	1f 92       	push	r1
    14ce:	0f 92       	push	r0
		}
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	0f 92       	push	r0
    14d4:	11 24       	eor	r1, r1
    14d6:	0b b6       	in	r0, 0x3b	; 59
    14d8:	0f 92       	push	r0
    14da:	ef 92       	push	r14
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
	handle_DWC(&ComValues); // sets accel and brake cmds to 0 when shell's telemetry system is triggered
    14f8:	86 e1       	ldi	r24, 0x16	; 22
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	2c d1       	rcall	.+600    	; 0x1756 <handle_DWC>
	state_handler(&ComValues); // manages the state machine
    14fe:	86 e1       	ldi	r24, 0x16	; 22
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	87 db       	rcall	.-2290   	; 0xc12 <state_handler>
	if (systic_counter_fast == 7) // every 41ms
    1504:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <systic_counter_fast>
    1508:	87 30       	cpi	r24, 0x07	; 7
    150a:	09 f0       	breq	.+2      	; 0x150e <__vector_16+0x42>
    150c:	44 c0       	rjmp	.+136    	; 0x1596 <__vector_16+0xca>
	{
		b_send_can = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <b_send_can>
		b_send_uart = 1;
    1514:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <b_send_uart>
		if (ComValues.u16_watchdog_can != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    1518:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <ComValues+0x18>
    151c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <ComValues+0x19>
    1520:	89 2b       	or	r24, r25
    1522:	59 f0       	breq	.+22     	; 0x153a <__vector_16+0x6e>
    1524:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ComValues+0x1d>
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	39 f4       	brne	.+14     	; 0x153a <__vector_16+0x6e>
		{
			ComValues.u16_watchdog_can -- ;
    152c:	e6 e1       	ldi	r30, 0x16	; 22
    152e:	f1 e0       	ldi	r31, 0x01	; 1
    1530:	80 8d       	ldd	r24, Z+24	; 0x18
    1532:	91 8d       	ldd	r25, Z+25	; 0x19
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	91 8f       	std	Z+25, r25	; 0x19
    1538:	80 8f       	std	Z+24, r24	; 0x18
		}
		
		if (ComValues.u16_watchdog_throttle != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    153a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <ComValues+0x1a>
    153e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <ComValues+0x1b>
    1542:	89 2b       	or	r24, r25
    1544:	61 f0       	breq	.+24     	; 0x155e <__vector_16+0x92>
    1546:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ComValues+0x1d>
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	41 f4       	brne	.+16     	; 0x155e <__vector_16+0x92>
		{
			ComValues.u16_watchdog_throttle -- ;
    154e:	e6 e1       	ldi	r30, 0x16	; 22
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	82 8d       	ldd	r24, Z+26	; 0x1a
    1554:	93 8d       	ldd	r25, Z+27	; 0x1b
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	93 8f       	std	Z+27, r25	; 0x1b
    155a:	82 8f       	std	Z+26, r24	; 0x1a
    155c:	08 c0       	rjmp	.+16     	; 0x156e <__vector_16+0xa2>
		}else if (ComValues.message_mode == UART)
    155e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ComValues+0x1d>
    1562:	81 11       	cpse	r24, r1
    1564:	04 c0       	rjmp	.+8      	; 0x156e <__vector_16+0xa2>
		{
			ComValues.u16_watchdog_throttle = 0;
    1566:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <ComValues+0x1b>
    156a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <ComValues+0x1a>
		}
		
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 41) ;	//unprecise, to be corrected	
    156e:	e6 e1       	ldi	r30, 0x16	; 22
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	00 85       	ldd	r16, Z+8	; 0x08
    1574:	11 85       	ldd	r17, Z+9	; 0x09
    1576:	22 85       	ldd	r18, Z+10	; 0x0a
    1578:	33 85       	ldd	r19, Z+11	; 0x0b
    157a:	44 81       	ldd	r20, Z+4	; 0x04
    157c:	55 81       	ldd	r21, Z+5	; 0x05
    157e:	66 81       	ldd	r22, Z+6	; 0x06
    1580:	77 81       	ldd	r23, Z+7	; 0x07
    1582:	0f 2e       	mov	r0, r31
    1584:	f9 e2       	ldi	r31, 0x29	; 41
    1586:	ef 2e       	mov	r14, r31
    1588:	f0 2d       	mov	r31, r0
    158a:	82 e2       	ldi	r24, 0x22	; 34
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	ce d1       	rcall	.+924    	; 0x192c <handle_joulemeter>
		systic_counter_fast = 0;
    1590:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <systic_counter_fast>
    1594:	03 c0       	rjmp	.+6      	; 0x159c <__vector_16+0xd0>
	} else {
		systic_counter_fast ++;
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
    159c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <systic_counter_slow>
    15a0:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <systic_counter_slow+0x1>
    15a4:	84 36       	cpi	r24, 0x64	; 100
    15a6:	91 05       	cpc	r25, r1
    15a8:	01 f5       	brne	.+64     	; 0x15ea <__vector_16+0x11e>
	{
		manage_LEDs(ComValues); //UM LED according to motor state
    15aa:	8d b7       	in	r24, 0x3d	; 61
    15ac:	9e b7       	in	r25, 0x3e	; 62
    15ae:	85 97       	sbiw	r24, 0x25	; 37
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	9e bf       	out	0x3e, r25	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	8d bf       	out	0x3d, r24	; 61
    15ba:	ad b7       	in	r26, 0x3d	; 61
    15bc:	be b7       	in	r27, 0x3e	; 62
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	85 e2       	ldi	r24, 0x25	; 37
    15c2:	e6 e1       	ldi	r30, 0x16	; 22
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	01 90       	ld	r0, Z+
    15c8:	0d 92       	st	X+, r0
    15ca:	8a 95       	dec	r24
    15cc:	e1 f7       	brne	.-8      	; 0x15c6 <__vector_16+0xfa>
    15ce:	ce d9       	rcall	.-3172   	; 0x96c <manage_LEDs>
		systic_counter_slow = 0;
    15d0:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <systic_counter_slow+0x1>
    15d4:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <systic_counter_slow>
    15d8:	8d b7       	in	r24, 0x3d	; 61
    15da:	9e b7       	in	r25, 0x3e	; 62
    15dc:	85 96       	adiw	r24, 0x25	; 37
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	9e bf       	out	0x3e, r25	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	8d bf       	out	0x3d, r24	; 61
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <__vector_16+0x128>
		} else {
		systic_counter_slow ++;
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <systic_counter_slow+0x1>
    15f0:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <systic_counter_slow>
	}
}
    15f4:	ff 91       	pop	r31
    15f6:	ef 91       	pop	r30
    15f8:	bf 91       	pop	r27
    15fa:	af 91       	pop	r26
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	7f 91       	pop	r23
    1602:	6f 91       	pop	r22
    1604:	5f 91       	pop	r21
    1606:	4f 91       	pop	r20
    1608:	3f 91       	pop	r19
    160a:	2f 91       	pop	r18
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ef 90       	pop	r14
    1612:	0f 90       	pop	r0
    1614:	0b be       	out	0x3b, r0	; 59
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0
    161c:	1f 90       	pop	r1
    161e:	18 95       	reti

00001620 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	0b b6       	in	r0, 0x3b	; 59
    162c:	0f 92       	push	r0
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
	
	if (u16_speed_count < 2000 ) //after 3s with no magnet, speed = 0
    1646:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <u16_speed_count>
    164a:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <u16_speed_count+0x1>
    164e:	80 3d       	cpi	r24, 0xD0	; 208
    1650:	97 40       	sbci	r25, 0x07	; 7
    1652:	50 f4       	brcc	.+20     	; 0x1668 <__vector_12+0x48>
	{
		u16_speed_count ++ ;
    1654:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <u16_speed_count>
    1658:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <u16_speed_count+0x1>
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <u16_speed_count+0x1>
    1662:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <u16_speed_count>
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <__vector_12+0x58>
	} else
	{
		ComValues.u16_car_speed = 0;
    1668:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ComValues+0x12>
    166c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ComValues+0x11>
		u16_speed_count = 0;
    1670:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <u16_speed_count+0x1>
    1674:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <u16_speed_count>
	}
	
	if (u8_SPI_count == 3)
    1678:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_SPI_count>
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	39 f4       	brne	.+14     	; 0x168e <__vector_12+0x6e>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
    1680:	86 e2       	ldi	r24, 0x26	; 38
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 21 03 	call	0x642	; 0x642 <SPI_handler_4>
		u8_SPI_count = 0 ;
    1688:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <u8_SPI_count>
    168c:	18 c0       	rjmp	.+48     	; 0x16be <__vector_12+0x9e>
	}
	
	if (u8_SPI_count == 2)
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	49 f4       	brne	.+18     	; 0x16a4 <__vector_12+0x84>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
    1692:	8e e1       	ldi	r24, 0x1E	; 30
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_handler_2>
		u8_SPI_count ++ ;
    169a:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_SPI_count>
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
    16a4:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_SPI_count>
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	49 f4       	brne	.+18     	; 0x16be <__vector_12+0x9e>
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
    16ac:	8a e1       	ldi	r24, 0x1A	; 26
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	0e 94 cd 02 	call	0x59a	; 0x59a <SPI_handler_1>
		u8_SPI_count ++ ;
    16b4:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_SPI_count>
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
    16be:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_SPI_count>
    16c2:	81 11       	cpse	r24, r1
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <__vector_12+0xb8>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
    16c6:	86 e1       	ldi	r24, 0x16	; 22
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_handler_0>
		u8_SPI_count ++ ;
    16ce:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_SPI_count>
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <u8_SPI_count>
	}
}
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0b be       	out	0x3b, r0	; 59
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of sensor)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	0b b6       	in	r0, 0x3b	; 59
    170a:	0f 92       	push	r0
    170c:	2f 93       	push	r18
    170e:	3f 93       	push	r19
    1710:	4f 93       	push	r20
    1712:	5f 93       	push	r21
    1714:	6f 93       	push	r22
    1716:	7f 93       	push	r23
    1718:	8f 93       	push	r24
    171a:	9f 93       	push	r25
    171c:	af 93       	push	r26
    171e:	bf 93       	push	r27
    1720:	ef 93       	push	r30
    1722:	ff 93       	push	r31
	//rgbled_toggle(LED_GREEN); //uncomment to test speed sensor mounting. should blink periodically. 
	//remember to comment the "manage_LED" function
	handle_speed_sensor(&ComValues.u16_car_speed, &u16_speed_count);
    1724:	6f ea       	ldi	r22, 0xAF	; 175
    1726:	71 e0       	ldi	r23, 0x01	; 1
    1728:	87 e2       	ldi	r24, 0x27	; 39
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	94 d9       	rcall	.-3288   	; 0xa56 <handle_speed_sensor>
}
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	bf 91       	pop	r27
    1734:	af 91       	pop	r26
    1736:	9f 91       	pop	r25
    1738:	8f 91       	pop	r24
    173a:	7f 91       	pop	r23
    173c:	6f 91       	pop	r22
    173e:	5f 91       	pop	r21
    1740:	4f 91       	pop	r20
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0b be       	out	0x3b, r0	; 59
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <DWC_init>:
#include "sensors.h"
#include <avr/io.h>
#include <stdio.h>

void DWC_init()
{
    1754:	08 95       	ret

00001756 <handle_DWC>:
void handle_DWC(volatile ModuleValues_t *vals)
{
	// check pin value
	  uint8_t b_DWC_cut = !(PINF & 4); //read pin
	  
	  if (b_DWC_cut)
    1756:	7a 99       	sbic	0x0f, 2	; 15
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <handle_DWC+0xa>
	  {
		  vals->u8_accel_cmd = 0.0 ;
    175a:	fc 01       	movw	r30, r24
    175c:	15 8a       	std	Z+21, r1	; 0x15
		  vals->u8_brake_cmd = 0.0 ;
    175e:	16 8a       	std	Z+22, r1	; 0x16
    1760:	08 95       	ret

00001762 <handle_current_sensor>:
	  }
}

void handle_current_sensor(volatile float *f32_current, uint16_t u16_ADC_reg, uint8_t u8_sensor_num)
{
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	00 d0       	rcall	.+0      	; 0x177c <handle_current_sensor+0x1a>
    177c:	00 d0       	rcall	.+0      	; 0x177e <handle_current_sensor+0x1c>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	8c 01       	movw	r16, r24
    1784:	f4 2e       	mov	r15, r20
	volatile float f_new_current = ((((volatile float)u16_ADC_reg*5.0/4096.0) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY) ;// /3 because current passes 3x in transducer for more precision.
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	f0 d4       	rcall	.+2528   	; 0x216c <__floatunsisf>
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 ea       	ldi	r20, 0xA0	; 160
    1792:	50 e4       	ldi	r21, 0x40	; 64
    1794:	a1 d5       	rcall	.+2882   	; 0x22d8 <__mulsf3>
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	59 e3       	ldi	r21, 0x39	; 57
    179e:	9c d5       	rcall	.+2872   	; 0x22d8 <__mulsf3>
    17a0:	2e ea       	ldi	r18, 0xAE	; 174
    17a2:	37 e4       	ldi	r19, 0x47	; 71
    17a4:	41 e2       	ldi	r20, 0x21	; 33
    17a6:	50 e4       	ldi	r21, 0x40	; 64
    17a8:	df d3       	rcall	.+1982   	; 0x1f68 <__subsf3>
    17aa:	23 ec       	ldi	r18, 0xC3	; 195
    17ac:	34 e6       	ldi	r19, 0x64	; 100
    17ae:	4a e2       	ldi	r20, 0x2A	; 42
    17b0:	5d e3       	ldi	r21, 0x3D	; 61
    17b2:	43 d4       	rcall	.+2182   	; 0x203a <__divsf3>
    17b4:	69 83       	std	Y+1, r22	; 0x01
    17b6:	7a 83       	std	Y+2, r23	; 0x02
    17b8:	8b 83       	std	Y+3, r24	; 0x03
    17ba:	9c 83       	std	Y+4, r25	; 0x04
	if (u8_sensor_num)
    17bc:	ff 20       	and	r15, r15
    17be:	71 f0       	breq	.+28     	; 0x17dc <handle_current_sensor+0x7a>
	{//batt
		f_new_current = (f_new_current+CORRECTION_OFFSET_BAT);// correction of offset
    17c0:	69 81       	ldd	r22, Y+1	; 0x01
    17c2:	7a 81       	ldd	r23, Y+2	; 0x02
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	2d ec       	ldi	r18, 0xCD	; 205
    17ca:	3c ec       	ldi	r19, 0xCC	; 204
    17cc:	4c e4       	ldi	r20, 0x4C	; 76
    17ce:	5e e3       	ldi	r21, 0x3E	; 62
    17d0:	cc d3       	rcall	.+1944   	; 0x1f6a <__addsf3>
    17d2:	69 83       	std	Y+1, r22	; 0x01
    17d4:	7a 83       	std	Y+2, r23	; 0x02
    17d6:	8b 83       	std	Y+3, r24	; 0x03
    17d8:	9c 83       	std	Y+4, r25	; 0x04
    17da:	0d c0       	rjmp	.+26     	; 0x17f6 <handle_current_sensor+0x94>
	}else{
		f_new_current = (f_new_current+CORRECTION_OFFSET_MOT);// correction of offset
    17dc:	69 81       	ldd	r22, Y+1	; 0x01
    17de:	7a 81       	ldd	r23, Y+2	; 0x02
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	2d ec       	ldi	r18, 0xCD	; 205
    17e6:	3c ec       	ldi	r19, 0xCC	; 204
    17e8:	4c e4       	ldi	r20, 0x4C	; 76
    17ea:	5d e3       	ldi	r21, 0x3D	; 61
    17ec:	be d3       	rcall	.+1916   	; 0x1f6a <__addsf3>
    17ee:	69 83       	std	Y+1, r22	; 0x01
    17f0:	7a 83       	std	Y+2, r23	; 0x02
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    17f6:	f8 01       	movw	r30, r16
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	89 80       	ldd	r8, Y+1	; 0x01
    1802:	9a 80       	ldd	r9, Y+2	; 0x02
    1804:	ab 80       	ldd	r10, Y+3	; 0x03
    1806:	bc 80       	ldd	r11, Y+4	; 0x04
    1808:	26 e6       	ldi	r18, 0x66	; 102
    180a:	36 e6       	ldi	r19, 0x66	; 102
    180c:	46 e6       	ldi	r20, 0x66	; 102
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	63 d5       	rcall	.+2758   	; 0x22d8 <__mulsf3>
    1812:	6b 01       	movw	r12, r22
    1814:	7c 01       	movw	r14, r24
    1816:	2d ec       	ldi	r18, 0xCD	; 205
    1818:	3c ec       	ldi	r19, 0xCC	; 204
    181a:	4c ec       	ldi	r20, 0xCC	; 204
    181c:	5d e3       	ldi	r21, 0x3D	; 61
    181e:	c5 01       	movw	r24, r10
    1820:	b4 01       	movw	r22, r8
    1822:	5a d5       	rcall	.+2740   	; 0x22d8 <__mulsf3>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	c7 01       	movw	r24, r14
    182a:	b6 01       	movw	r22, r12
    182c:	9e d3       	rcall	.+1852   	; 0x1f6a <__addsf3>
    182e:	f8 01       	movw	r30, r16
    1830:	60 83       	st	Z, r22
    1832:	71 83       	std	Z+1, r23	; 0x01
    1834:	82 83       	std	Z+2, r24	; 0x02
    1836:	93 83       	std	Z+3, r25	; 0x03
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	df 90       	pop	r13
    184e:	cf 90       	pop	r12
    1850:	bf 90       	pop	r11
    1852:	af 90       	pop	r10
    1854:	9f 90       	pop	r9
    1856:	8f 90       	pop	r8
    1858:	08 95       	ret

0000185a <handle_temp_sensor>:

void handle_temp_sensor(volatile uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    185a:	cf 92       	push	r12
    185c:	df 92       	push	r13
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ec 01       	movw	r28, r24
	float f_sens_volt = ((float)u16_ADC_reg*5.0/4096.0);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	7f d4       	rcall	.+2302   	; 0x216c <__floatunsisf>
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 ea       	ldi	r20, 0xA0	; 160
    1874:	50 e4       	ldi	r21, 0x40	; 64
    1876:	30 d5       	rcall	.+2656   	; 0x22d8 <__mulsf3>
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	59 e3       	ldi	r21, 0x39	; 57
    1880:	2b d5       	rcall	.+2646   	; 0x22d8 <__mulsf3>
    1882:	6b 01       	movw	r12, r22
    1884:	7c 01       	movw	r14, r24
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    1886:	2d ec       	ldi	r18, 0xCD	; 205
    1888:	3c ec       	ldi	r19, 0xCC	; 204
    188a:	4c e6       	ldi	r20, 0x6C	; 108
    188c:	50 e4       	ldi	r21, 0x40	; 64
    188e:	d1 d3       	rcall	.+1954   	; 0x2032 <__cmpsf2>
    1890:	18 16       	cp	r1, r24
    1892:	74 f0       	brlt	.+28     	; 0x18b0 <handle_temp_sensor+0x56>
	{
		*u8_temp = (uint8_t)(20.0*f_sens_volt-22.0);
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 ea       	ldi	r20, 0xA0	; 160
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	c7 01       	movw	r24, r14
    189e:	b6 01       	movw	r22, r12
    18a0:	1b d5       	rcall	.+2614   	; 0x22d8 <__mulsf3>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 eb       	ldi	r20, 0xB0	; 176
    18a8:	51 e4       	ldi	r21, 0x41	; 65
    18aa:	5e d3       	rcall	.+1724   	; 0x1f68 <__subsf3>
    18ac:	33 d4       	rcall	.+2150   	; 0x2114 <__fixunssfsi>
    18ae:	68 83       	st	Y, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    18b0:	26 e6       	ldi	r18, 0x66	; 102
    18b2:	36 e6       	ldi	r19, 0x66	; 102
    18b4:	46 e9       	ldi	r20, 0x96	; 150
    18b6:	50 e4       	ldi	r21, 0x40	; 64
    18b8:	c7 01       	movw	r24, r14
    18ba:	b6 01       	movw	r22, r12
    18bc:	ba d3       	rcall	.+1908   	; 0x2032 <__cmpsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	bc f0       	brlt	.+46     	; 0x18f0 <handle_temp_sensor+0x96>
    18c2:	2d ec       	ldi	r18, 0xCD	; 205
    18c4:	3c ec       	ldi	r19, 0xCC	; 204
    18c6:	4c e6       	ldi	r20, 0x6C	; 108
    18c8:	50 e4       	ldi	r21, 0x40	; 64
    18ca:	c7 01       	movw	r24, r14
    18cc:	b6 01       	movw	r22, r12
    18ce:	00 d5       	rcall	.+2560   	; 0x22d0 <__gesf2>
    18d0:	18 16       	cp	r1, r24
    18d2:	74 f4       	brge	.+28     	; 0x18f0 <handle_temp_sensor+0x96>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4e e5       	ldi	r20, 0x5E	; 94
    18da:	52 e4       	ldi	r21, 0x42	; 66
    18dc:	c7 01       	movw	r24, r14
    18de:	b6 01       	movw	r22, r12
    18e0:	fb d4       	rcall	.+2550   	; 0x22d8 <__mulsf3>
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e8       	ldi	r19, 0x80	; 128
    18e6:	4b e1       	ldi	r20, 0x1B	; 27
    18e8:	53 e4       	ldi	r21, 0x43	; 67
    18ea:	3e d3       	rcall	.+1660   	; 0x1f68 <__subsf3>
    18ec:	13 d4       	rcall	.+2086   	; 0x2114 <__fixunssfsi>
    18ee:	68 83       	st	Y, r22
	}
	
	if (f_sens_volt > 4.7)
    18f0:	26 e6       	ldi	r18, 0x66	; 102
    18f2:	36 e6       	ldi	r19, 0x66	; 102
    18f4:	46 e9       	ldi	r20, 0x96	; 150
    18f6:	50 e4       	ldi	r21, 0x40	; 64
    18f8:	c7 01       	movw	r24, r14
    18fa:	b6 01       	movw	r22, r12
    18fc:	e9 d4       	rcall	.+2514   	; 0x22d0 <__gesf2>
    18fe:	18 16       	cp	r1, r24
	{
		*u8_temp = (uint8_t)(200.0*f_sens_volt-840.0);
    1900:	74 f4       	brge	.+28     	; 0x191e <handle_temp_sensor+0xc4>
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	48 e4       	ldi	r20, 0x48	; 72
    1908:	53 e4       	ldi	r21, 0x43	; 67
    190a:	c7 01       	movw	r24, r14
    190c:	b6 01       	movw	r22, r12
    190e:	e4 d4       	rcall	.+2504   	; 0x22d8 <__mulsf3>
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	42 e5       	ldi	r20, 0x52	; 82
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	27 d3       	rcall	.+1614   	; 0x1f68 <__subsf3>
    191a:	fc d3       	rcall	.+2040   	; 0x2114 <__fixunssfsi>
    191c:	68 83       	st	Y, r22
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
	}
}
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	08 95       	ret

0000192c <handle_joulemeter>:
    192c:	4f 92       	push	r4
    192e:	5f 92       	push	r5

void handle_joulemeter(volatile float *f32_energy, volatile float f32_bat_current, volatile float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    1930:	6f 92       	push	r6
    1932:	7f 92       	push	r7
    1934:	8f 92       	push	r8
    1936:	9f 92       	push	r9
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	28 97       	sbiw	r28, 0x08	; 8
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	6c 01       	movw	r12, r24
    195c:	49 83       	std	Y+1, r20	; 0x01
    195e:	5a 83       	std	Y+2, r21	; 0x02
    1960:	6b 83       	std	Y+3, r22	; 0x03
    1962:	7c 83       	std	Y+4, r23	; 0x04
    1964:	0d 83       	std	Y+5, r16	; 0x05
    1966:	1e 83       	std	Y+6, r17	; 0x06
    1968:	2f 83       	std	Y+7, r18	; 0x07
    196a:	38 87       	std	Y+8, r19	; 0x08
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    196c:	6d 81       	ldd	r22, Y+5	; 0x05
    196e:	7e 81       	ldd	r23, Y+6	; 0x06
    1970:	8f 81       	ldd	r24, Y+7	; 0x07
    1972:	98 85       	ldd	r25, Y+8	; 0x08
    1974:	29 81       	ldd	r18, Y+1	; 0x01
    1976:	3a 81       	ldd	r19, Y+2	; 0x02
    1978:	4b 81       	ldd	r20, Y+3	; 0x03
    197a:	5c 81       	ldd	r21, Y+4	; 0x04
    197c:	f6 01       	movw	r30, r12
    197e:	80 80       	ld	r8, Z
    1980:	91 80       	ldd	r9, Z+1	; 0x01
    1982:	a2 80       	ldd	r10, Z+2	; 0x02
    1984:	b3 80       	ldd	r11, Z+3	; 0x03
    1986:	a8 d4       	rcall	.+2384   	; 0x22d8 <__mulsf3>
    1988:	2b 01       	movw	r4, r22
    198a:	3c 01       	movw	r6, r24
    198c:	6e 2d       	mov	r22, r14
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	eb d3       	rcall	.+2006   	; 0x216c <__floatunsisf>
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	c3 01       	movw	r24, r6
    199c:	b2 01       	movw	r22, r4
    199e:	9c d4       	rcall	.+2360   	; 0x22d8 <__mulsf3>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a e7       	ldi	r20, 0x7A	; 122
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	48 d3       	rcall	.+1680   	; 0x203a <__divsf3>
    19aa:	a5 01       	movw	r20, r10
    19ac:	94 01       	movw	r18, r8
    19ae:	dd d2       	rcall	.+1466   	; 0x1f6a <__addsf3>
    19b0:	f6 01       	movw	r30, r12
    19b2:	60 83       	st	Z, r22
    19b4:	71 83       	std	Z+1, r23	; 0x01
    19b6:	82 83       	std	Z+2, r24	; 0x02
    19b8:	93 83       	std	Z+3, r25	; 0x03
    19ba:	28 96       	adiw	r28, 0x08	; 8
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	bf 90       	pop	r11
    19d6:	af 90       	pop	r10
    19d8:	9f 90       	pop	r9
    19da:	8f 90       	pop	r8
    19dc:	7f 90       	pop	r7
    19de:	6f 90       	pop	r6
    19e0:	5f 90       	pop	r5
    19e2:	4f 90       	pop	r4
    19e4:	08 95       	ret

000019e6 <Set_ADC_Channel_ext>:
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	91 05       	cpc	r25, r1
    19ec:	88 f5       	brcc	.+98     	; 0x1a50 <Set_ADC_Channel_ext+0x6a>
    19ee:	fc 01       	movw	r30, r24
    19f0:	e6 5a       	subi	r30, 0xA6	; 166
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	d4 c4       	rjmp	.+2472   	; 0x239e <__tablejump2__>
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	fb 01       	movw	r30, r22
    19fa:	80 83       	st	Z, r24
    19fc:	11 82       	std	Z+1, r1	; 0x01
    19fe:	08 95       	ret
    1a00:	86 e0       	ldi	r24, 0x06	; 6
    1a02:	fb 01       	movw	r30, r22
    1a04:	80 83       	st	Z, r24
    1a06:	80 e4       	ldi	r24, 0x40	; 64
    1a08:	81 83       	std	Z+1, r24	; 0x01
    1a0a:	08 95       	ret
    1a0c:	86 e0       	ldi	r24, 0x06	; 6
    1a0e:	fb 01       	movw	r30, r22
    1a10:	80 83       	st	Z, r24
    1a12:	80 e8       	ldi	r24, 0x80	; 128
    1a14:	81 83       	std	Z+1, r24	; 0x01
    1a16:	08 95       	ret
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	fb 01       	movw	r30, r22
    1a1c:	80 83       	st	Z, r24
    1a1e:	80 ec       	ldi	r24, 0xC0	; 192
    1a20:	81 83       	std	Z+1, r24	; 0x01
    1a22:	08 95       	ret
    1a24:	87 e0       	ldi	r24, 0x07	; 7
    1a26:	fb 01       	movw	r30, r22
    1a28:	80 83       	st	Z, r24
    1a2a:	11 82       	std	Z+1, r1	; 0x01
    1a2c:	08 95       	ret
    1a2e:	87 e0       	ldi	r24, 0x07	; 7
    1a30:	fb 01       	movw	r30, r22
    1a32:	80 83       	st	Z, r24
    1a34:	80 e4       	ldi	r24, 0x40	; 64
    1a36:	81 83       	std	Z+1, r24	; 0x01
    1a38:	08 95       	ret
    1a3a:	87 e0       	ldi	r24, 0x07	; 7
    1a3c:	fb 01       	movw	r30, r22
    1a3e:	80 83       	st	Z, r24
    1a40:	80 e8       	ldi	r24, 0x80	; 128
    1a42:	81 83       	std	Z+1, r24	; 0x01
    1a44:	08 95       	ret
    1a46:	87 e0       	ldi	r24, 0x07	; 7
    1a48:	fb 01       	movw	r30, r22
    1a4a:	80 83       	st	Z, r24
    1a4c:	80 ec       	ldi	r24, 0xC0	; 192
    1a4e:	81 83       	std	Z+1, r24	; 0x01
    1a50:	08 95       	ret

00001a52 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	0b b6       	in	r0, 0x3b	; 59
    1a5e:	0f 92       	push	r0
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	8f 93       	push	r24
    1a6c:	9f 93       	push	r25
    1a6e:	af 93       	push	r26
    1a70:	bf 93       	push	r27
    1a72:	ef 93       	push	r30
    1a74:	ff 93       	push	r31
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	1f 92       	push	r1
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    1a80:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    1a84:	80 ff       	sbrs	r24, 0
    1a86:	47 c0       	rjmp	.+142    	; 0x1b16 <__vector_18+0xc4>
    1a88:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1a8c:	90 ff       	sbrs	r25, 0
    1a8e:	43 c0       	rjmp	.+134    	; 0x1b16 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    1a90:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    1a94:	ee ee       	ldi	r30, 0xEE	; 238
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8f 7b       	andi	r24, 0xBF	; 191
    1aa0:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    1aa2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <tx_off>
    1aa6:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <tx_on>
    1aaa:	98 17       	cp	r25, r24
    1aac:	89 f1       	breq	.+98     	; 0x1b10 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    1aae:	8f 70       	andi	r24, 0x0F	; 15
    1ab0:	2b e0       	ldi	r18, 0x0B	; 11
    1ab2:	82 9f       	mul	r24, r18
    1ab4:	c0 01       	movw	r24, r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e2 59       	subi	r30, 0x92	; 146
    1abc:	fd 4f       	sbci	r31, 0xFD	; 253
    1abe:	20 81       	ld	r18, Z
    1ac0:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    1ac4:	20 81       	ld	r18, Z
    1ac6:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    1aca:	21 81       	ldd	r18, Z+1	; 0x01
    1acc:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    1ad0:	23 81       	ldd	r18, Z+3	; 0x03
    1ad2:	aa ef       	ldi	r26, 0xFA	; 250
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    1ad8:	24 81       	ldd	r18, Z+4	; 0x04
    1ada:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    1adc:	25 81       	ldd	r18, Z+5	; 0x05
    1ade:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    1ae0:	26 81       	ldd	r18, Z+6	; 0x06
    1ae2:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    1ae4:	27 81       	ldd	r18, Z+7	; 0x07
    1ae6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    1ae8:	20 85       	ldd	r18, Z+8	; 0x08
    1aea:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    1aec:	21 85       	ldd	r18, Z+9	; 0x09
    1aee:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    1af0:	22 85       	ldd	r18, Z+10	; 0x0a
    1af2:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    1af4:	fc 01       	movw	r30, r24
    1af6:	e0 59       	subi	r30, 0x90	; 144
    1af8:	fd 4f       	sbci	r31, 0xFD	; 253
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 70       	andi	r24, 0x0F	; 15
    1afe:	80 64       	ori	r24, 0x40	; 64
    1b00:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    1b04:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <tx_off>
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <tx_off>
    1b0e:	7d c0       	rjmp	.+250    	; 0x1c0a <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    1b10:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <tx_busy>
    1b14:	7a c0       	rjmp	.+244    	; 0x1c0a <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    1b16:	81 ff       	sbrs	r24, 1
    1b18:	78 c0       	rjmp	.+240    	; 0x1c0a <__vector_18+0x1b8>
    1b1a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1b1e:	81 ff       	sbrs	r24, 1
    1b20:	74 c0       	rjmp	.+232    	; 0x1c0a <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    1b22:	80 e1       	ldi	r24, 0x10	; 16
    1b24:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    1b28:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <rx_on>
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <rx_off>
    1b34:	29 1b       	sub	r18, r25
    1b36:	31 09       	sbc	r19, r1
    1b38:	2f 77       	andi	r18, 0x7F	; 127
    1b3a:	33 27       	eor	r19, r19
    1b3c:	20 31       	cpi	r18, 0x10	; 16
    1b3e:	31 05       	cpc	r19, r1
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <__vector_18+0xf2>
    1b42:	58 c0       	rjmp	.+176    	; 0x1bf4 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    1b44:	e8 2f       	mov	r30, r24
    1b46:	ef 70       	andi	r30, 0x0F	; 15
    1b48:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1b4c:	2e 2f       	mov	r18, r30
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4b e0       	ldi	r20, 0x0B	; 11
    1b52:	e4 9f       	mul	r30, r20
    1b54:	f0 01       	movw	r30, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	e2 54       	subi	r30, 0x42	; 66
    1b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5c:	9f 70       	andi	r25, 0x0F	; 15
    1b5e:	42 81       	ldd	r20, Z+2	; 0x02
    1b60:	40 7f       	andi	r20, 0xF0	; 240
    1b62:	94 2b       	or	r25, r20
    1b64:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    1b66:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1b6a:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1b6e:	40 7e       	andi	r20, 0xE0	; 224
    1b70:	97 70       	andi	r25, 0x07	; 7
    1b72:	94 2b       	or	r25, r20
    1b74:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    1b76:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1b7a:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    1b7c:	aa ef       	ldi	r26, 0xFA	; 250
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	9c 91       	ld	r25, X
    1b82:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    1b84:	9c 91       	ld	r25, X
    1b86:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    1b88:	9c 91       	ld	r25, X
    1b8a:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    1b8c:	9c 91       	ld	r25, X
    1b8e:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    1b90:	9c 91       	ld	r25, X
    1b92:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    1b94:	9c 91       	ld	r25, X
    1b96:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    1b98:	9c 91       	ld	r25, X
    1b9a:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    1b9c:	9c 91       	ld	r25, X
    1b9e:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    1ba6:	40 81       	ld	r20, Z
    1ba8:	42 95       	swap	r20
    1baa:	46 95       	lsr	r20
    1bac:	47 70       	andi	r20, 0x07	; 7
    1bae:	51 81       	ldd	r21, Z+1	; 0x01
    1bb0:	65 2f       	mov	r22, r21
    1bb2:	66 0f       	add	r22, r22
    1bb4:	66 0f       	add	r22, r22
    1bb6:	66 0f       	add	r22, r22
    1bb8:	86 2f       	mov	r24, r22
    1bba:	84 2b       	or	r24, r20
    1bbc:	95 2f       	mov	r25, r21
    1bbe:	92 95       	swap	r25
    1bc0:	96 95       	lsr	r25
    1bc2:	97 70       	andi	r25, 0x07	; 7
    1bc4:	89 2b       	or	r24, r25
    1bc6:	b1 f4       	brne	.+44     	; 0x1bf4 <__vector_18+0x1a2>
    1bc8:	8b e0       	ldi	r24, 0x0B	; 11
    1bca:	82 9f       	mul	r24, r18
    1bcc:	f0 01       	movw	r30, r0
    1bce:	83 9f       	mul	r24, r19
    1bd0:	f0 0d       	add	r31, r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	e2 54       	subi	r30, 0x42	; 66
    1bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd8:	83 81       	ldd	r24, Z+3	; 0x03
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	59 f4       	brne	.+22     	; 0x1bf4 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1bde:	98 e0       	ldi	r25, 0x08	; 8
    1be0:	88 e1       	ldi	r24, 0x18	; 24
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	a8 95       	wdr
    1be8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1bf2:	ff cf       	rjmp	.-2      	; 0x1bf2 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    1bf4:	ee ee       	ldi	r30, 0xEE	; 238
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 7d       	andi	r24, 0xDF	; 223
    1c02:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    1c04:	80 e8       	ldi	r24, 0x80	; 128
    1c06:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    1c0a:	0f 90       	pop	r0
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	ff 91       	pop	r31
    1c12:	ef 91       	pop	r30
    1c14:	bf 91       	pop	r27
    1c16:	af 91       	pop	r26
    1c18:	9f 91       	pop	r25
    1c1a:	8f 91       	pop	r24
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	0f 90       	pop	r0
    1c28:	0b be       	out	0x3b, r0	; 59
    1c2a:	0f 90       	pop	r0
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	0f 90       	pop	r0
    1c30:	1f 90       	pop	r1
    1c32:	18 95       	reti

00001c34 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    1c38:	e8 ed       	ldi	r30, 0xD8	; 216
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	21 e0       	ldi	r18, 0x01	; 1
    1c3e:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    1c40:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    1c44:	2c e0       	ldi	r18, 0x0C	; 12
    1c46:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    1c4a:	27 e3       	ldi	r18, 0x37	; 55
    1c4c:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    1c50:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    1c54:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    1c58:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1c5c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    1c60:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    1c64:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    1c68:	cd ee       	ldi	r28, 0xED	; 237
    1c6a:	d0 e0       	ldi	r29, 0x00	; 0
    1c6c:	18 82       	st	Y, r1
	CANSTMOB = 0;
    1c6e:	ae ee       	ldi	r26, 0xEE	; 238
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    1c74:	20 e1       	ldi	r18, 0x10	; 16
    1c76:	28 83       	st	Y, r18
	CANSTMOB = 0;
    1c78:	1c 92       	st	X, r1
	CANIDM4 = 0;
    1c7a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    1c7e:	28 2f       	mov	r18, r24
    1c80:	22 95       	swap	r18
    1c82:	22 0f       	add	r18, r18
    1c84:	20 7e       	andi	r18, 0xE0	; 224
    1c86:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    1c8a:	96 95       	lsr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	96 95       	lsr	r25
    1c90:	87 95       	ror	r24
    1c92:	96 95       	lsr	r25
    1c94:	87 95       	ror	r24
    1c96:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    1c9a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    1c9e:	86 2f       	mov	r24, r22
    1ca0:	82 95       	swap	r24
    1ca2:	88 0f       	add	r24, r24
    1ca4:	80 7e       	andi	r24, 0xE0	; 224
    1ca6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    1caa:	76 95       	lsr	r23
    1cac:	67 95       	ror	r22
    1cae:	76 95       	lsr	r23
    1cb0:	67 95       	ror	r22
    1cb2:	76 95       	lsr	r23
    1cb4:	67 95       	ror	r22
    1cb6:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    1cba:	80 e8       	ldi	r24, 0x80	; 128
    1cbc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    1cc6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    1cca:	80 eb       	ldi	r24, 0xB0	; 176
    1ccc:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	80 83       	st	Z, r24

	reset = 0;
    1cd4:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <reset>
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1ce4:	40 91 ba 01 	lds	r20, 0x01BA	; 0x8001ba <rx_off>
    1ce8:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <rx_on>
    1cec:	24 17       	cp	r18, r20
    1cee:	89 f1       	breq	.+98     	; 0x1d52 <can_read_message_if_new+0x74>
    1cf0:	a4 2f       	mov	r26, r20
    1cf2:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    1cf4:	8b e0       	ldi	r24, 0x0B	; 11
    1cf6:	a8 9f       	mul	r26, r24
    1cf8:	b0 01       	movw	r22, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	fb 01       	movw	r30, r22
    1cfe:	e2 54       	subi	r30, 0x42	; 66
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	20 81       	ld	r18, Z
    1d04:	22 95       	swap	r18
    1d06:	26 95       	lsr	r18
    1d08:	27 70       	andi	r18, 0x07	; 7
    1d0a:	31 81       	ldd	r19, Z+1	; 0x01
    1d0c:	53 2f       	mov	r21, r19
    1d0e:	55 0f       	add	r21, r21
    1d10:	55 0f       	add	r21, r21
    1d12:	55 0f       	add	r21, r21
    1d14:	25 2b       	or	r18, r21
    1d16:	32 95       	swap	r19
    1d18:	36 95       	lsr	r19
    1d1a:	37 70       	andi	r19, 0x07	; 7
    1d1c:	28 83       	st	Y, r18
    1d1e:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1d20:	fb 01       	movw	r30, r22
    1d22:	e0 54       	subi	r30, 0x40	; 64
    1d24:	fe 4f       	sbci	r31, 0xFE	; 254
    1d26:	20 81       	ld	r18, Z
    1d28:	2f 70       	andi	r18, 0x0F	; 15
    1d2a:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    1d2c:	22 23       	and	r18, r18
    1d2e:	99 f0       	breq	.+38     	; 0x1d56 <can_read_message_if_new+0x78>
    1d30:	db 01       	movw	r26, r22
    1d32:	af 53       	subi	r26, 0x3F	; 63
    1d34:	be 4f       	sbci	r27, 0xFE	; 254
    1d36:	fe 01       	movw	r30, r28
    1d38:	33 96       	adiw	r30, 0x03	; 3
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	2d 5f       	subi	r18, 0xFD	; 253
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	ce 01       	movw	r24, r28
    1d42:	82 0f       	add	r24, r18
    1d44:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    1d46:	2d 91       	ld	r18, X+
    1d48:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    1d4a:	e8 17       	cp	r30, r24
    1d4c:	f9 07       	cpc	r31, r25
    1d4e:	d9 f7       	brne	.-10     	; 0x1d46 <can_read_message_if_new+0x68>
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	04 c0       	rjmp	.+8      	; 0x1d5e <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    1d56:	4f 5f       	subi	r20, 0xFF	; 255
    1d58:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <rx_off>
	}

	return true;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    1d6a:	ab ed       	ldi	r26, 0xDB	; 219
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	8c 91       	ld	r24, X
    1d70:	8f 77       	andi	r24, 0x7F	; 127
    1d72:	8c 93       	st	X, r24

	if (!tx_busy) {
    1d74:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tx_busy>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    1d7c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    1d80:	80 81       	ld	r24, Z
    1d82:	82 95       	swap	r24
    1d84:	88 0f       	add	r24, r24
    1d86:	80 7e       	andi	r24, 0xE0	; 224
    1d88:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	96 95       	lsr	r25
    1d96:	87 95       	ror	r24
    1d98:	96 95       	lsr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1da0:	df 01       	movw	r26, r30
    1da2:	13 96       	adiw	r26, 0x03	; 3
    1da4:	9f 01       	movw	r18, r30
    1da6:	25 5f       	subi	r18, 0xF5	; 245
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1daa:	ca ef       	ldi	r28, 0xFA	; 250
    1dac:	d0 e0       	ldi	r29, 0x00	; 0
    1dae:	9d 91       	ld	r25, X+
    1db0:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1db2:	a2 17       	cp	r26, r18
    1db4:	b3 07       	cpc	r27, r19
    1db6:	d9 f7       	brne	.-10     	; 0x1dae <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	80 64       	ori	r24, 0x40	; 64
    1dc2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	43 c0       	rjmp	.+134    	; 0x1e50 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1dca:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <tx_on>
    1dce:	82 2f       	mov	r24, r18
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <tx_off>
    1dd6:	83 1b       	sub	r24, r19
    1dd8:	91 09       	sbc	r25, r1
    1dda:	8f 77       	andi	r24, 0x7F	; 127
    1ddc:	99 27       	eor	r25, r25
    1dde:	40 97       	sbiw	r24, 0x10	; 16
    1de0:	b1 f1       	breq	.+108    	; 0x1e4e <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1de2:	a2 2f       	mov	r26, r18
    1de4:	af 70       	andi	r26, 0x0F	; 15
    1de6:	8b e0       	ldi	r24, 0x0B	; 11
    1de8:	a8 9f       	mul	r26, r24
    1dea:	d0 01       	movw	r26, r0
    1dec:	11 24       	eor	r1, r1
    1dee:	ed 01       	movw	r28, r26
    1df0:	c2 59       	subi	r28, 0x92	; 146
    1df2:	dd 4f       	sbci	r29, 0xFD	; 253
    1df4:	80 81       	ld	r24, Z
    1df6:	98 2f       	mov	r25, r24
    1df8:	92 95       	swap	r25
    1dfa:	99 0f       	add	r25, r25
    1dfc:	90 7e       	andi	r25, 0xE0	; 224
    1dfe:	88 81       	ld	r24, Y
    1e00:	8f 71       	andi	r24, 0x1F	; 31
    1e02:	89 2b       	or	r24, r25
    1e04:	88 83       	st	Y, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	98 2f       	mov	r25, r24
    1e0a:	96 95       	lsr	r25
    1e0c:	96 95       	lsr	r25
    1e0e:	96 95       	lsr	r25
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	80 7e       	andi	r24, 0xE0	; 224
    1e14:	89 2b       	or	r24, r25
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	92 95       	swap	r25
    1e1c:	99 0f       	add	r25, r25
    1e1e:	90 7e       	andi	r25, 0xE0	; 224
    1e20:	8f 71       	andi	r24, 0x1F	; 31
    1e22:	89 2b       	or	r24, r25
    1e24:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	98 2f       	mov	r25, r24
    1e2a:	9f 70       	andi	r25, 0x0F	; 15
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	80 7f       	andi	r24, 0xF0	; 240
    1e30:	89 2b       	or	r24, r25
    1e32:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1e34:	af 58       	subi	r26, 0x8F	; 143
    1e36:	bd 4f       	sbci	r27, 0xFD	; 253
    1e38:	33 96       	adiw	r30, 0x03	; 3
    1e3a:	88 e0       	ldi	r24, 0x08	; 8
    1e3c:	01 90       	ld	r0, Z+
    1e3e:	0d 92       	st	X+, r0
    1e40:	8a 95       	dec	r24
    1e42:	e1 f7       	brne	.-8      	; 0x1e3c <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    1e44:	2f 5f       	subi	r18, 0xFF	; 255
    1e46:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <tx_on>
		result = true;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    1e4e:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1e50:	eb ed       	ldi	r30, 0xDB	; 219
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	90 81       	ld	r25, Z
    1e56:	90 68       	ori	r25, 0x80	; 128
    1e58:	90 83       	st	Z, r25

	return result;
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <rgbled_turn_off>:
    1e60:	95 b1       	in	r25, 0x05	; 5
    1e62:	89 2b       	or	r24, r25
    1e64:	85 b9       	out	0x05, r24	; 5
    1e66:	08 95       	ret

00001e68 <rgbled_init>:
    1e68:	84 b1       	in	r24, 0x04	; 4
    1e6a:	80 6e       	ori	r24, 0xE0	; 224
    1e6c:	84 b9       	out	0x04, r24	; 4
    1e6e:	80 ee       	ldi	r24, 0xE0	; 224
    1e70:	f7 cf       	rjmp	.-18     	; 0x1e60 <rgbled_turn_off>
    1e72:	08 95       	ret

00001e74 <rgbled_turn_on>:
    1e74:	95 b1       	in	r25, 0x05	; 5
    1e76:	80 95       	com	r24
    1e78:	98 23       	and	r25, r24
    1e7a:	95 b9       	out	0x05, r25	; 5
    1e7c:	08 95       	ret

00001e7e <rgbled_toggle>:
    1e7e:	95 b1       	in	r25, 0x05	; 5
    1e80:	89 27       	eor	r24, r25
    1e82:	85 b9       	out	0x05, r24	; 5
    1e84:	08 95       	ret

00001e86 <spi_init>:
    1e86:	94 b1       	in	r25, 0x04	; 4
    1e88:	97 60       	ori	r25, 0x07	; 7
    1e8a:	94 b9       	out	0x04, r25	; 4
    1e8c:	82 fb       	bst	r24, 2
    1e8e:	99 27       	eor	r25, r25
    1e90:	90 f9       	bld	r25, 0
    1e92:	28 2f       	mov	r18, r24
    1e94:	22 70       	andi	r18, 0x02	; 2
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	80 65       	ori	r24, 0x50	; 80
    1e9a:	82 2b       	or	r24, r18
    1e9c:	8c bd       	out	0x2c, r24	; 44
    1e9e:	8c b5       	in	r24, 0x2c	; 44
    1ea0:	83 7f       	andi	r24, 0xF3	; 243
    1ea2:	8c bd       	out	0x2c, r24	; 44
    1ea4:	9d bd       	out	0x2d, r25	; 45
    1ea6:	08 95       	ret

00001ea8 <spi_trancieve>:
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
    1eae:	28 98       	cbi	0x05, 0	; 5
    1eb0:	41 15       	cp	r20, r1
    1eb2:	51 05       	cpc	r21, r1
    1eb4:	c1 f0       	breq	.+48     	; 0x1ee6 <spi_trancieve+0x3e>
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	dc 01       	movw	r26, r24
    1eba:	46 0f       	add	r20, r22
    1ebc:	57 1f       	adc	r21, r23
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	20 97       	sbiw	r28, 0x00	; 0
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <spi_trancieve+0x20>
    1ec4:	9c 91       	ld	r25, X
    1ec6:	01 c0       	rjmp	.+2      	; 0x1eca <spi_trancieve+0x22>
    1ec8:	98 2f       	mov	r25, r24
    1eca:	9e bd       	out	0x2e, r25	; 46
    1ecc:	0d b4       	in	r0, 0x2d	; 45
    1ece:	07 fe       	sbrs	r0, 7
    1ed0:	fd cf       	rjmp	.-6      	; 0x1ecc <spi_trancieve+0x24>
    1ed2:	61 15       	cp	r22, r1
    1ed4:	71 05       	cpc	r23, r1
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <spi_trancieve+0x34>
    1ed8:	9e b5       	in	r25, 0x2e	; 46
    1eda:	90 83       	st	Z, r25
    1edc:	31 96       	adiw	r30, 0x01	; 1
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	e4 17       	cp	r30, r20
    1ee2:	f5 07       	cpc	r31, r21
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <spi_trancieve+0x18>
    1ee6:	21 11       	cpse	r18, r1
    1ee8:	28 9a       	sbi	0x05, 0	; 5
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <__vector_17>:
    1ef0:	1f 92       	push	r1
    1ef2:	0f 92       	push	r0
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	0f 92       	push	r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	0b b6       	in	r0, 0x3b	; 59
    1efc:	0f 92       	push	r0
    1efe:	2f 93       	push	r18
    1f00:	3f 93       	push	r19
    1f02:	4f 93       	push	r20
    1f04:	5f 93       	push	r21
    1f06:	6f 93       	push	r22
    1f08:	7f 93       	push	r23
    1f0a:	8f 93       	push	r24
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
    1f14:	ae e3       	ldi	r26, 0x3E	; 62
    1f16:	b3 e0       	ldi	r27, 0x03	; 3
    1f18:	ee e1       	ldi	r30, 0x1E	; 30
    1f1a:	f3 e0       	ldi	r31, 0x03	; 3
    1f1c:	2e e3       	ldi	r18, 0x3E	; 62
    1f1e:	33 e0       	ldi	r19, 0x03	; 3
    1f20:	8d 91       	ld	r24, X+
    1f22:	88 23       	and	r24, r24
    1f24:	59 f0       	breq	.+22     	; 0x1f3c <__vector_17+0x4c>
    1f26:	40 81       	ld	r20, Z
    1f28:	51 81       	ldd	r21, Z+1	; 0x01
    1f2a:	62 81       	ldd	r22, Z+2	; 0x02
    1f2c:	73 81       	ldd	r23, Z+3	; 0x03
    1f2e:	50 5e       	subi	r21, 0xE0	; 224
    1f30:	6f 4f       	sbci	r22, 0xFF	; 255
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	40 83       	st	Z, r20
    1f36:	51 83       	std	Z+1, r21	; 0x01
    1f38:	62 83       	std	Z+2, r22	; 0x02
    1f3a:	73 83       	std	Z+3, r23	; 0x03
    1f3c:	34 96       	adiw	r30, 0x04	; 4
    1f3e:	e2 17       	cp	r30, r18
    1f40:	f3 07       	cpc	r31, r19
    1f42:	71 f7       	brne	.-36     	; 0x1f20 <__vector_17+0x30>
    1f44:	ff 91       	pop	r31
    1f46:	ef 91       	pop	r30
    1f48:	bf 91       	pop	r27
    1f4a:	af 91       	pop	r26
    1f4c:	8f 91       	pop	r24
    1f4e:	7f 91       	pop	r23
    1f50:	6f 91       	pop	r22
    1f52:	5f 91       	pop	r21
    1f54:	4f 91       	pop	r20
    1f56:	3f 91       	pop	r19
    1f58:	2f 91       	pop	r18
    1f5a:	0f 90       	pop	r0
    1f5c:	0b be       	out	0x3b, r0	; 59
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	0f 90       	pop	r0
    1f64:	1f 90       	pop	r1
    1f66:	18 95       	reti

00001f68 <__subsf3>:
    1f68:	50 58       	subi	r21, 0x80	; 128

00001f6a <__addsf3>:
    1f6a:	bb 27       	eor	r27, r27
    1f6c:	aa 27       	eor	r26, r26
    1f6e:	0e d0       	rcall	.+28     	; 0x1f8c <__addsf3x>
    1f70:	75 c1       	rjmp	.+746    	; 0x225c <__fp_round>
    1f72:	66 d1       	rcall	.+716    	; 0x2240 <__fp_pscA>
    1f74:	30 f0       	brcs	.+12     	; 0x1f82 <__addsf3+0x18>
    1f76:	6b d1       	rcall	.+726    	; 0x224e <__fp_pscB>
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <__addsf3+0x18>
    1f7a:	31 f4       	brne	.+12     	; 0x1f88 <__addsf3+0x1e>
    1f7c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__addsf3+0x1a>
    1f80:	1e f4       	brtc	.+6      	; 0x1f88 <__addsf3+0x1e>
    1f82:	5b c1       	rjmp	.+694    	; 0x223a <__fp_nan>
    1f84:	0e f4       	brtc	.+2      	; 0x1f88 <__addsf3+0x1e>
    1f86:	e0 95       	com	r30
    1f88:	e7 fb       	bst	r30, 7
    1f8a:	51 c1       	rjmp	.+674    	; 0x222e <__fp_inf>

00001f8c <__addsf3x>:
    1f8c:	e9 2f       	mov	r30, r25
    1f8e:	77 d1       	rcall	.+750    	; 0x227e <__fp_split3>
    1f90:	80 f3       	brcs	.-32     	; 0x1f72 <__addsf3+0x8>
    1f92:	ba 17       	cp	r27, r26
    1f94:	62 07       	cpc	r22, r18
    1f96:	73 07       	cpc	r23, r19
    1f98:	84 07       	cpc	r24, r20
    1f9a:	95 07       	cpc	r25, r21
    1f9c:	18 f0       	brcs	.+6      	; 0x1fa4 <__addsf3x+0x18>
    1f9e:	71 f4       	brne	.+28     	; 0x1fbc <__addsf3x+0x30>
    1fa0:	9e f5       	brtc	.+102    	; 0x2008 <__addsf3x+0x7c>
    1fa2:	8f c1       	rjmp	.+798    	; 0x22c2 <__fp_zero>
    1fa4:	0e f4       	brtc	.+2      	; 0x1fa8 <__addsf3x+0x1c>
    1fa6:	e0 95       	com	r30
    1fa8:	0b 2e       	mov	r0, r27
    1faa:	ba 2f       	mov	r27, r26
    1fac:	a0 2d       	mov	r26, r0
    1fae:	0b 01       	movw	r0, r22
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	90 01       	movw	r18, r0
    1fb4:	0c 01       	movw	r0, r24
    1fb6:	ca 01       	movw	r24, r20
    1fb8:	a0 01       	movw	r20, r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	ff 27       	eor	r31, r31
    1fbe:	59 1b       	sub	r21, r25
    1fc0:	99 f0       	breq	.+38     	; 0x1fe8 <__addsf3x+0x5c>
    1fc2:	59 3f       	cpi	r21, 0xF9	; 249
    1fc4:	50 f4       	brcc	.+20     	; 0x1fda <__addsf3x+0x4e>
    1fc6:	50 3e       	cpi	r21, 0xE0	; 224
    1fc8:	68 f1       	brcs	.+90     	; 0x2024 <__addsf3x+0x98>
    1fca:	1a 16       	cp	r1, r26
    1fcc:	f0 40       	sbci	r31, 0x00	; 0
    1fce:	a2 2f       	mov	r26, r18
    1fd0:	23 2f       	mov	r18, r19
    1fd2:	34 2f       	mov	r19, r20
    1fd4:	44 27       	eor	r20, r20
    1fd6:	58 5f       	subi	r21, 0xF8	; 248
    1fd8:	f3 cf       	rjmp	.-26     	; 0x1fc0 <__addsf3x+0x34>
    1fda:	46 95       	lsr	r20
    1fdc:	37 95       	ror	r19
    1fde:	27 95       	ror	r18
    1fe0:	a7 95       	ror	r26
    1fe2:	f0 40       	sbci	r31, 0x00	; 0
    1fe4:	53 95       	inc	r21
    1fe6:	c9 f7       	brne	.-14     	; 0x1fda <__addsf3x+0x4e>
    1fe8:	7e f4       	brtc	.+30     	; 0x2008 <__addsf3x+0x7c>
    1fea:	1f 16       	cp	r1, r31
    1fec:	ba 0b       	sbc	r27, r26
    1fee:	62 0b       	sbc	r22, r18
    1ff0:	73 0b       	sbc	r23, r19
    1ff2:	84 0b       	sbc	r24, r20
    1ff4:	ba f0       	brmi	.+46     	; 0x2024 <__addsf3x+0x98>
    1ff6:	91 50       	subi	r25, 0x01	; 1
    1ff8:	a1 f0       	breq	.+40     	; 0x2022 <__addsf3x+0x96>
    1ffa:	ff 0f       	add	r31, r31
    1ffc:	bb 1f       	adc	r27, r27
    1ffe:	66 1f       	adc	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	c2 f7       	brpl	.-16     	; 0x1ff6 <__addsf3x+0x6a>
    2006:	0e c0       	rjmp	.+28     	; 0x2024 <__addsf3x+0x98>
    2008:	ba 0f       	add	r27, r26
    200a:	62 1f       	adc	r22, r18
    200c:	73 1f       	adc	r23, r19
    200e:	84 1f       	adc	r24, r20
    2010:	48 f4       	brcc	.+18     	; 0x2024 <__addsf3x+0x98>
    2012:	87 95       	ror	r24
    2014:	77 95       	ror	r23
    2016:	67 95       	ror	r22
    2018:	b7 95       	ror	r27
    201a:	f7 95       	ror	r31
    201c:	9e 3f       	cpi	r25, 0xFE	; 254
    201e:	08 f0       	brcs	.+2      	; 0x2022 <__addsf3x+0x96>
    2020:	b3 cf       	rjmp	.-154    	; 0x1f88 <__addsf3+0x1e>
    2022:	93 95       	inc	r25
    2024:	88 0f       	add	r24, r24
    2026:	08 f0       	brcs	.+2      	; 0x202a <__addsf3x+0x9e>
    2028:	99 27       	eor	r25, r25
    202a:	ee 0f       	add	r30, r30
    202c:	97 95       	ror	r25
    202e:	87 95       	ror	r24
    2030:	08 95       	ret

00002032 <__cmpsf2>:
    2032:	d9 d0       	rcall	.+434    	; 0x21e6 <__fp_cmp>
    2034:	08 f4       	brcc	.+2      	; 0x2038 <__cmpsf2+0x6>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	08 95       	ret

0000203a <__divsf3>:
    203a:	0c d0       	rcall	.+24     	; 0x2054 <__divsf3x>
    203c:	0f c1       	rjmp	.+542    	; 0x225c <__fp_round>
    203e:	07 d1       	rcall	.+526    	; 0x224e <__fp_pscB>
    2040:	40 f0       	brcs	.+16     	; 0x2052 <__divsf3+0x18>
    2042:	fe d0       	rcall	.+508    	; 0x2240 <__fp_pscA>
    2044:	30 f0       	brcs	.+12     	; 0x2052 <__divsf3+0x18>
    2046:	21 f4       	brne	.+8      	; 0x2050 <__divsf3+0x16>
    2048:	5f 3f       	cpi	r21, 0xFF	; 255
    204a:	19 f0       	breq	.+6      	; 0x2052 <__divsf3+0x18>
    204c:	f0 c0       	rjmp	.+480    	; 0x222e <__fp_inf>
    204e:	51 11       	cpse	r21, r1
    2050:	39 c1       	rjmp	.+626    	; 0x22c4 <__fp_szero>
    2052:	f3 c0       	rjmp	.+486    	; 0x223a <__fp_nan>

00002054 <__divsf3x>:
    2054:	14 d1       	rcall	.+552    	; 0x227e <__fp_split3>
    2056:	98 f3       	brcs	.-26     	; 0x203e <__divsf3+0x4>

00002058 <__divsf3_pse>:
    2058:	99 23       	and	r25, r25
    205a:	c9 f3       	breq	.-14     	; 0x204e <__divsf3+0x14>
    205c:	55 23       	and	r21, r21
    205e:	b1 f3       	breq	.-20     	; 0x204c <__divsf3+0x12>
    2060:	95 1b       	sub	r25, r21
    2062:	55 0b       	sbc	r21, r21
    2064:	bb 27       	eor	r27, r27
    2066:	aa 27       	eor	r26, r26
    2068:	62 17       	cp	r22, r18
    206a:	73 07       	cpc	r23, r19
    206c:	84 07       	cpc	r24, r20
    206e:	38 f0       	brcs	.+14     	; 0x207e <__divsf3_pse+0x26>
    2070:	9f 5f       	subi	r25, 0xFF	; 255
    2072:	5f 4f       	sbci	r21, 0xFF	; 255
    2074:	22 0f       	add	r18, r18
    2076:	33 1f       	adc	r19, r19
    2078:	44 1f       	adc	r20, r20
    207a:	aa 1f       	adc	r26, r26
    207c:	a9 f3       	breq	.-22     	; 0x2068 <__divsf3_pse+0x10>
    207e:	33 d0       	rcall	.+102    	; 0x20e6 <__divsf3_pse+0x8e>
    2080:	0e 2e       	mov	r0, r30
    2082:	3a f0       	brmi	.+14     	; 0x2092 <__divsf3_pse+0x3a>
    2084:	e0 e8       	ldi	r30, 0x80	; 128
    2086:	30 d0       	rcall	.+96     	; 0x20e8 <__divsf3_pse+0x90>
    2088:	91 50       	subi	r25, 0x01	; 1
    208a:	50 40       	sbci	r21, 0x00	; 0
    208c:	e6 95       	lsr	r30
    208e:	00 1c       	adc	r0, r0
    2090:	ca f7       	brpl	.-14     	; 0x2084 <__divsf3_pse+0x2c>
    2092:	29 d0       	rcall	.+82     	; 0x20e6 <__divsf3_pse+0x8e>
    2094:	fe 2f       	mov	r31, r30
    2096:	27 d0       	rcall	.+78     	; 0x20e6 <__divsf3_pse+0x8e>
    2098:	66 0f       	add	r22, r22
    209a:	77 1f       	adc	r23, r23
    209c:	88 1f       	adc	r24, r24
    209e:	bb 1f       	adc	r27, r27
    20a0:	26 17       	cp	r18, r22
    20a2:	37 07       	cpc	r19, r23
    20a4:	48 07       	cpc	r20, r24
    20a6:	ab 07       	cpc	r26, r27
    20a8:	b0 e8       	ldi	r27, 0x80	; 128
    20aa:	09 f0       	breq	.+2      	; 0x20ae <__divsf3_pse+0x56>
    20ac:	bb 0b       	sbc	r27, r27
    20ae:	80 2d       	mov	r24, r0
    20b0:	bf 01       	movw	r22, r30
    20b2:	ff 27       	eor	r31, r31
    20b4:	93 58       	subi	r25, 0x83	; 131
    20b6:	5f 4f       	sbci	r21, 0xFF	; 255
    20b8:	2a f0       	brmi	.+10     	; 0x20c4 <__divsf3_pse+0x6c>
    20ba:	9e 3f       	cpi	r25, 0xFE	; 254
    20bc:	51 05       	cpc	r21, r1
    20be:	68 f0       	brcs	.+26     	; 0x20da <__divsf3_pse+0x82>
    20c0:	b6 c0       	rjmp	.+364    	; 0x222e <__fp_inf>
    20c2:	00 c1       	rjmp	.+512    	; 0x22c4 <__fp_szero>
    20c4:	5f 3f       	cpi	r21, 0xFF	; 255
    20c6:	ec f3       	brlt	.-6      	; 0x20c2 <__divsf3_pse+0x6a>
    20c8:	98 3e       	cpi	r25, 0xE8	; 232
    20ca:	dc f3       	brlt	.-10     	; 0x20c2 <__divsf3_pse+0x6a>
    20cc:	86 95       	lsr	r24
    20ce:	77 95       	ror	r23
    20d0:	67 95       	ror	r22
    20d2:	b7 95       	ror	r27
    20d4:	f7 95       	ror	r31
    20d6:	9f 5f       	subi	r25, 0xFF	; 255
    20d8:	c9 f7       	brne	.-14     	; 0x20cc <__divsf3_pse+0x74>
    20da:	88 0f       	add	r24, r24
    20dc:	91 1d       	adc	r25, r1
    20de:	96 95       	lsr	r25
    20e0:	87 95       	ror	r24
    20e2:	97 f9       	bld	r25, 7
    20e4:	08 95       	ret
    20e6:	e1 e0       	ldi	r30, 0x01	; 1
    20e8:	66 0f       	add	r22, r22
    20ea:	77 1f       	adc	r23, r23
    20ec:	88 1f       	adc	r24, r24
    20ee:	bb 1f       	adc	r27, r27
    20f0:	62 17       	cp	r22, r18
    20f2:	73 07       	cpc	r23, r19
    20f4:	84 07       	cpc	r24, r20
    20f6:	ba 07       	cpc	r27, r26
    20f8:	20 f0       	brcs	.+8      	; 0x2102 <__divsf3_pse+0xaa>
    20fa:	62 1b       	sub	r22, r18
    20fc:	73 0b       	sbc	r23, r19
    20fe:	84 0b       	sbc	r24, r20
    2100:	ba 0b       	sbc	r27, r26
    2102:	ee 1f       	adc	r30, r30
    2104:	88 f7       	brcc	.-30     	; 0x20e8 <__divsf3_pse+0x90>
    2106:	e0 95       	com	r30
    2108:	08 95       	ret

0000210a <__fixsfsi>:
    210a:	04 d0       	rcall	.+8      	; 0x2114 <__fixunssfsi>
    210c:	68 94       	set
    210e:	b1 11       	cpse	r27, r1
    2110:	d9 c0       	rjmp	.+434    	; 0x22c4 <__fp_szero>
    2112:	08 95       	ret

00002114 <__fixunssfsi>:
    2114:	bc d0       	rcall	.+376    	; 0x228e <__fp_splitA>
    2116:	88 f0       	brcs	.+34     	; 0x213a <__fixunssfsi+0x26>
    2118:	9f 57       	subi	r25, 0x7F	; 127
    211a:	90 f0       	brcs	.+36     	; 0x2140 <__fixunssfsi+0x2c>
    211c:	b9 2f       	mov	r27, r25
    211e:	99 27       	eor	r25, r25
    2120:	b7 51       	subi	r27, 0x17	; 23
    2122:	a0 f0       	brcs	.+40     	; 0x214c <__fixunssfsi+0x38>
    2124:	d1 f0       	breq	.+52     	; 0x215a <__fixunssfsi+0x46>
    2126:	66 0f       	add	r22, r22
    2128:	77 1f       	adc	r23, r23
    212a:	88 1f       	adc	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	1a f0       	brmi	.+6      	; 0x2136 <__fixunssfsi+0x22>
    2130:	ba 95       	dec	r27
    2132:	c9 f7       	brne	.-14     	; 0x2126 <__fixunssfsi+0x12>
    2134:	12 c0       	rjmp	.+36     	; 0x215a <__fixunssfsi+0x46>
    2136:	b1 30       	cpi	r27, 0x01	; 1
    2138:	81 f0       	breq	.+32     	; 0x215a <__fixunssfsi+0x46>
    213a:	c3 d0       	rcall	.+390    	; 0x22c2 <__fp_zero>
    213c:	b1 e0       	ldi	r27, 0x01	; 1
    213e:	08 95       	ret
    2140:	c0 c0       	rjmp	.+384    	; 0x22c2 <__fp_zero>
    2142:	67 2f       	mov	r22, r23
    2144:	78 2f       	mov	r23, r24
    2146:	88 27       	eor	r24, r24
    2148:	b8 5f       	subi	r27, 0xF8	; 248
    214a:	39 f0       	breq	.+14     	; 0x215a <__fixunssfsi+0x46>
    214c:	b9 3f       	cpi	r27, 0xF9	; 249
    214e:	cc f3       	brlt	.-14     	; 0x2142 <__fixunssfsi+0x2e>
    2150:	86 95       	lsr	r24
    2152:	77 95       	ror	r23
    2154:	67 95       	ror	r22
    2156:	b3 95       	inc	r27
    2158:	d9 f7       	brne	.-10     	; 0x2150 <__fixunssfsi+0x3c>
    215a:	3e f4       	brtc	.+14     	; 0x216a <__fixunssfsi+0x56>
    215c:	90 95       	com	r25
    215e:	80 95       	com	r24
    2160:	70 95       	com	r23
    2162:	61 95       	neg	r22
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	8f 4f       	sbci	r24, 0xFF	; 255
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	08 95       	ret

0000216c <__floatunsisf>:
    216c:	e8 94       	clt
    216e:	09 c0       	rjmp	.+18     	; 0x2182 <__floatsisf+0x12>

00002170 <__floatsisf>:
    2170:	97 fb       	bst	r25, 7
    2172:	3e f4       	brtc	.+14     	; 0x2182 <__floatsisf+0x12>
    2174:	90 95       	com	r25
    2176:	80 95       	com	r24
    2178:	70 95       	com	r23
    217a:	61 95       	neg	r22
    217c:	7f 4f       	sbci	r23, 0xFF	; 255
    217e:	8f 4f       	sbci	r24, 0xFF	; 255
    2180:	9f 4f       	sbci	r25, 0xFF	; 255
    2182:	99 23       	and	r25, r25
    2184:	a9 f0       	breq	.+42     	; 0x21b0 <__floatsisf+0x40>
    2186:	f9 2f       	mov	r31, r25
    2188:	96 e9       	ldi	r25, 0x96	; 150
    218a:	bb 27       	eor	r27, r27
    218c:	93 95       	inc	r25
    218e:	f6 95       	lsr	r31
    2190:	87 95       	ror	r24
    2192:	77 95       	ror	r23
    2194:	67 95       	ror	r22
    2196:	b7 95       	ror	r27
    2198:	f1 11       	cpse	r31, r1
    219a:	f8 cf       	rjmp	.-16     	; 0x218c <__floatsisf+0x1c>
    219c:	fa f4       	brpl	.+62     	; 0x21dc <__floatsisf+0x6c>
    219e:	bb 0f       	add	r27, r27
    21a0:	11 f4       	brne	.+4      	; 0x21a6 <__floatsisf+0x36>
    21a2:	60 ff       	sbrs	r22, 0
    21a4:	1b c0       	rjmp	.+54     	; 0x21dc <__floatsisf+0x6c>
    21a6:	6f 5f       	subi	r22, 0xFF	; 255
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	8f 4f       	sbci	r24, 0xFF	; 255
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	16 c0       	rjmp	.+44     	; 0x21dc <__floatsisf+0x6c>
    21b0:	88 23       	and	r24, r24
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <__floatsisf+0x48>
    21b4:	96 e9       	ldi	r25, 0x96	; 150
    21b6:	11 c0       	rjmp	.+34     	; 0x21da <__floatsisf+0x6a>
    21b8:	77 23       	and	r23, r23
    21ba:	21 f0       	breq	.+8      	; 0x21c4 <__floatsisf+0x54>
    21bc:	9e e8       	ldi	r25, 0x8E	; 142
    21be:	87 2f       	mov	r24, r23
    21c0:	76 2f       	mov	r23, r22
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <__floatsisf+0x5e>
    21c4:	66 23       	and	r22, r22
    21c6:	71 f0       	breq	.+28     	; 0x21e4 <__floatsisf+0x74>
    21c8:	96 e8       	ldi	r25, 0x86	; 134
    21ca:	86 2f       	mov	r24, r22
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	2a f0       	brmi	.+10     	; 0x21dc <__floatsisf+0x6c>
    21d2:	9a 95       	dec	r25
    21d4:	66 0f       	add	r22, r22
    21d6:	77 1f       	adc	r23, r23
    21d8:	88 1f       	adc	r24, r24
    21da:	da f7       	brpl	.-10     	; 0x21d2 <__floatsisf+0x62>
    21dc:	88 0f       	add	r24, r24
    21de:	96 95       	lsr	r25
    21e0:	87 95       	ror	r24
    21e2:	97 f9       	bld	r25, 7
    21e4:	08 95       	ret

000021e6 <__fp_cmp>:
    21e6:	99 0f       	add	r25, r25
    21e8:	00 08       	sbc	r0, r0
    21ea:	55 0f       	add	r21, r21
    21ec:	aa 0b       	sbc	r26, r26
    21ee:	e0 e8       	ldi	r30, 0x80	; 128
    21f0:	fe ef       	ldi	r31, 0xFE	; 254
    21f2:	16 16       	cp	r1, r22
    21f4:	17 06       	cpc	r1, r23
    21f6:	e8 07       	cpc	r30, r24
    21f8:	f9 07       	cpc	r31, r25
    21fa:	c0 f0       	brcs	.+48     	; 0x222c <__fp_cmp+0x46>
    21fc:	12 16       	cp	r1, r18
    21fe:	13 06       	cpc	r1, r19
    2200:	e4 07       	cpc	r30, r20
    2202:	f5 07       	cpc	r31, r21
    2204:	98 f0       	brcs	.+38     	; 0x222c <__fp_cmp+0x46>
    2206:	62 1b       	sub	r22, r18
    2208:	73 0b       	sbc	r23, r19
    220a:	84 0b       	sbc	r24, r20
    220c:	95 0b       	sbc	r25, r21
    220e:	39 f4       	brne	.+14     	; 0x221e <__fp_cmp+0x38>
    2210:	0a 26       	eor	r0, r26
    2212:	61 f0       	breq	.+24     	; 0x222c <__fp_cmp+0x46>
    2214:	23 2b       	or	r18, r19
    2216:	24 2b       	or	r18, r20
    2218:	25 2b       	or	r18, r21
    221a:	21 f4       	brne	.+8      	; 0x2224 <__fp_cmp+0x3e>
    221c:	08 95       	ret
    221e:	0a 26       	eor	r0, r26
    2220:	09 f4       	brne	.+2      	; 0x2224 <__fp_cmp+0x3e>
    2222:	a1 40       	sbci	r26, 0x01	; 1
    2224:	a6 95       	lsr	r26
    2226:	8f ef       	ldi	r24, 0xFF	; 255
    2228:	81 1d       	adc	r24, r1
    222a:	81 1d       	adc	r24, r1
    222c:	08 95       	ret

0000222e <__fp_inf>:
    222e:	97 f9       	bld	r25, 7
    2230:	9f 67       	ori	r25, 0x7F	; 127
    2232:	80 e8       	ldi	r24, 0x80	; 128
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	08 95       	ret

0000223a <__fp_nan>:
    223a:	9f ef       	ldi	r25, 0xFF	; 255
    223c:	80 ec       	ldi	r24, 0xC0	; 192
    223e:	08 95       	ret

00002240 <__fp_pscA>:
    2240:	00 24       	eor	r0, r0
    2242:	0a 94       	dec	r0
    2244:	16 16       	cp	r1, r22
    2246:	17 06       	cpc	r1, r23
    2248:	18 06       	cpc	r1, r24
    224a:	09 06       	cpc	r0, r25
    224c:	08 95       	ret

0000224e <__fp_pscB>:
    224e:	00 24       	eor	r0, r0
    2250:	0a 94       	dec	r0
    2252:	12 16       	cp	r1, r18
    2254:	13 06       	cpc	r1, r19
    2256:	14 06       	cpc	r1, r20
    2258:	05 06       	cpc	r0, r21
    225a:	08 95       	ret

0000225c <__fp_round>:
    225c:	09 2e       	mov	r0, r25
    225e:	03 94       	inc	r0
    2260:	00 0c       	add	r0, r0
    2262:	11 f4       	brne	.+4      	; 0x2268 <__fp_round+0xc>
    2264:	88 23       	and	r24, r24
    2266:	52 f0       	brmi	.+20     	; 0x227c <__fp_round+0x20>
    2268:	bb 0f       	add	r27, r27
    226a:	40 f4       	brcc	.+16     	; 0x227c <__fp_round+0x20>
    226c:	bf 2b       	or	r27, r31
    226e:	11 f4       	brne	.+4      	; 0x2274 <__fp_round+0x18>
    2270:	60 ff       	sbrs	r22, 0
    2272:	04 c0       	rjmp	.+8      	; 0x227c <__fp_round+0x20>
    2274:	6f 5f       	subi	r22, 0xFF	; 255
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	8f 4f       	sbci	r24, 0xFF	; 255
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	08 95       	ret

0000227e <__fp_split3>:
    227e:	57 fd       	sbrc	r21, 7
    2280:	90 58       	subi	r25, 0x80	; 128
    2282:	44 0f       	add	r20, r20
    2284:	55 1f       	adc	r21, r21
    2286:	59 f0       	breq	.+22     	; 0x229e <__fp_splitA+0x10>
    2288:	5f 3f       	cpi	r21, 0xFF	; 255
    228a:	71 f0       	breq	.+28     	; 0x22a8 <__fp_splitA+0x1a>
    228c:	47 95       	ror	r20

0000228e <__fp_splitA>:
    228e:	88 0f       	add	r24, r24
    2290:	97 fb       	bst	r25, 7
    2292:	99 1f       	adc	r25, r25
    2294:	61 f0       	breq	.+24     	; 0x22ae <__fp_splitA+0x20>
    2296:	9f 3f       	cpi	r25, 0xFF	; 255
    2298:	79 f0       	breq	.+30     	; 0x22b8 <__fp_splitA+0x2a>
    229a:	87 95       	ror	r24
    229c:	08 95       	ret
    229e:	12 16       	cp	r1, r18
    22a0:	13 06       	cpc	r1, r19
    22a2:	14 06       	cpc	r1, r20
    22a4:	55 1f       	adc	r21, r21
    22a6:	f2 cf       	rjmp	.-28     	; 0x228c <__fp_split3+0xe>
    22a8:	46 95       	lsr	r20
    22aa:	f1 df       	rcall	.-30     	; 0x228e <__fp_splitA>
    22ac:	08 c0       	rjmp	.+16     	; 0x22be <__fp_splitA+0x30>
    22ae:	16 16       	cp	r1, r22
    22b0:	17 06       	cpc	r1, r23
    22b2:	18 06       	cpc	r1, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	f1 cf       	rjmp	.-30     	; 0x229a <__fp_splitA+0xc>
    22b8:	86 95       	lsr	r24
    22ba:	71 05       	cpc	r23, r1
    22bc:	61 05       	cpc	r22, r1
    22be:	08 94       	sec
    22c0:	08 95       	ret

000022c2 <__fp_zero>:
    22c2:	e8 94       	clt

000022c4 <__fp_szero>:
    22c4:	bb 27       	eor	r27, r27
    22c6:	66 27       	eor	r22, r22
    22c8:	77 27       	eor	r23, r23
    22ca:	cb 01       	movw	r24, r22
    22cc:	97 f9       	bld	r25, 7
    22ce:	08 95       	ret

000022d0 <__gesf2>:
    22d0:	8a df       	rcall	.-236    	; 0x21e6 <__fp_cmp>
    22d2:	08 f4       	brcc	.+2      	; 0x22d6 <__gesf2+0x6>
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	08 95       	ret

000022d8 <__mulsf3>:
    22d8:	0b d0       	rcall	.+22     	; 0x22f0 <__mulsf3x>
    22da:	c0 cf       	rjmp	.-128    	; 0x225c <__fp_round>
    22dc:	b1 df       	rcall	.-158    	; 0x2240 <__fp_pscA>
    22de:	28 f0       	brcs	.+10     	; 0x22ea <__mulsf3+0x12>
    22e0:	b6 df       	rcall	.-148    	; 0x224e <__fp_pscB>
    22e2:	18 f0       	brcs	.+6      	; 0x22ea <__mulsf3+0x12>
    22e4:	95 23       	and	r25, r21
    22e6:	09 f0       	breq	.+2      	; 0x22ea <__mulsf3+0x12>
    22e8:	a2 cf       	rjmp	.-188    	; 0x222e <__fp_inf>
    22ea:	a7 cf       	rjmp	.-178    	; 0x223a <__fp_nan>
    22ec:	11 24       	eor	r1, r1
    22ee:	ea cf       	rjmp	.-44     	; 0x22c4 <__fp_szero>

000022f0 <__mulsf3x>:
    22f0:	c6 df       	rcall	.-116    	; 0x227e <__fp_split3>
    22f2:	a0 f3       	brcs	.-24     	; 0x22dc <__mulsf3+0x4>

000022f4 <__mulsf3_pse>:
    22f4:	95 9f       	mul	r25, r21
    22f6:	d1 f3       	breq	.-12     	; 0x22ec <__mulsf3+0x14>
    22f8:	95 0f       	add	r25, r21
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	55 1f       	adc	r21, r21
    22fe:	62 9f       	mul	r22, r18
    2300:	f0 01       	movw	r30, r0
    2302:	72 9f       	mul	r23, r18
    2304:	bb 27       	eor	r27, r27
    2306:	f0 0d       	add	r31, r0
    2308:	b1 1d       	adc	r27, r1
    230a:	63 9f       	mul	r22, r19
    230c:	aa 27       	eor	r26, r26
    230e:	f0 0d       	add	r31, r0
    2310:	b1 1d       	adc	r27, r1
    2312:	aa 1f       	adc	r26, r26
    2314:	64 9f       	mul	r22, r20
    2316:	66 27       	eor	r22, r22
    2318:	b0 0d       	add	r27, r0
    231a:	a1 1d       	adc	r26, r1
    231c:	66 1f       	adc	r22, r22
    231e:	82 9f       	mul	r24, r18
    2320:	22 27       	eor	r18, r18
    2322:	b0 0d       	add	r27, r0
    2324:	a1 1d       	adc	r26, r1
    2326:	62 1f       	adc	r22, r18
    2328:	73 9f       	mul	r23, r19
    232a:	b0 0d       	add	r27, r0
    232c:	a1 1d       	adc	r26, r1
    232e:	62 1f       	adc	r22, r18
    2330:	83 9f       	mul	r24, r19
    2332:	a0 0d       	add	r26, r0
    2334:	61 1d       	adc	r22, r1
    2336:	22 1f       	adc	r18, r18
    2338:	74 9f       	mul	r23, r20
    233a:	33 27       	eor	r19, r19
    233c:	a0 0d       	add	r26, r0
    233e:	61 1d       	adc	r22, r1
    2340:	23 1f       	adc	r18, r19
    2342:	84 9f       	mul	r24, r20
    2344:	60 0d       	add	r22, r0
    2346:	21 1d       	adc	r18, r1
    2348:	82 2f       	mov	r24, r18
    234a:	76 2f       	mov	r23, r22
    234c:	6a 2f       	mov	r22, r26
    234e:	11 24       	eor	r1, r1
    2350:	9f 57       	subi	r25, 0x7F	; 127
    2352:	50 40       	sbci	r21, 0x00	; 0
    2354:	8a f0       	brmi	.+34     	; 0x2378 <__mulsf3_pse+0x84>
    2356:	e1 f0       	breq	.+56     	; 0x2390 <__mulsf3_pse+0x9c>
    2358:	88 23       	and	r24, r24
    235a:	4a f0       	brmi	.+18     	; 0x236e <__mulsf3_pse+0x7a>
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	bb 1f       	adc	r27, r27
    2362:	66 1f       	adc	r22, r22
    2364:	77 1f       	adc	r23, r23
    2366:	88 1f       	adc	r24, r24
    2368:	91 50       	subi	r25, 0x01	; 1
    236a:	50 40       	sbci	r21, 0x00	; 0
    236c:	a9 f7       	brne	.-22     	; 0x2358 <__mulsf3_pse+0x64>
    236e:	9e 3f       	cpi	r25, 0xFE	; 254
    2370:	51 05       	cpc	r21, r1
    2372:	70 f0       	brcs	.+28     	; 0x2390 <__mulsf3_pse+0x9c>
    2374:	5c cf       	rjmp	.-328    	; 0x222e <__fp_inf>
    2376:	a6 cf       	rjmp	.-180    	; 0x22c4 <__fp_szero>
    2378:	5f 3f       	cpi	r21, 0xFF	; 255
    237a:	ec f3       	brlt	.-6      	; 0x2376 <__mulsf3_pse+0x82>
    237c:	98 3e       	cpi	r25, 0xE8	; 232
    237e:	dc f3       	brlt	.-10     	; 0x2376 <__mulsf3_pse+0x82>
    2380:	86 95       	lsr	r24
    2382:	77 95       	ror	r23
    2384:	67 95       	ror	r22
    2386:	b7 95       	ror	r27
    2388:	f7 95       	ror	r31
    238a:	e7 95       	ror	r30
    238c:	9f 5f       	subi	r25, 0xFF	; 255
    238e:	c1 f7       	brne	.-16     	; 0x2380 <__mulsf3_pse+0x8c>
    2390:	fe 2b       	or	r31, r30
    2392:	88 0f       	add	r24, r24
    2394:	91 1d       	adc	r25, r1
    2396:	96 95       	lsr	r25
    2398:	87 95       	ror	r24
    239a:	97 f9       	bld	r25, 7
    239c:	08 95       	ret

0000239e <__tablejump2__>:
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	00 24       	eor	r0, r0
    23a4:	00 1c       	adc	r0, r0
    23a6:	0b be       	out	0x3b, r0	; 59
    23a8:	07 90       	elpm	r0, Z+
    23aa:	f6 91       	elpm	r31, Z
    23ac:	e0 2d       	mov	r30, r0
    23ae:	09 94       	ijmp

000023b0 <atoi>:
    23b0:	fc 01       	movw	r30, r24
    23b2:	88 27       	eor	r24, r24
    23b4:	99 27       	eor	r25, r25
    23b6:	e8 94       	clt
    23b8:	21 91       	ld	r18, Z+
    23ba:	20 32       	cpi	r18, 0x20	; 32
    23bc:	e9 f3       	breq	.-6      	; 0x23b8 <atoi+0x8>
    23be:	29 30       	cpi	r18, 0x09	; 9
    23c0:	10 f0       	brcs	.+4      	; 0x23c6 <atoi+0x16>
    23c2:	2e 30       	cpi	r18, 0x0E	; 14
    23c4:	c8 f3       	brcs	.-14     	; 0x23b8 <atoi+0x8>
    23c6:	2b 32       	cpi	r18, 0x2B	; 43
    23c8:	39 f0       	breq	.+14     	; 0x23d8 <atoi+0x28>
    23ca:	2d 32       	cpi	r18, 0x2D	; 45
    23cc:	31 f4       	brne	.+12     	; 0x23da <atoi+0x2a>
    23ce:	68 94       	set
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <atoi+0x28>
    23d2:	0b d0       	rcall	.+22     	; 0x23ea <__mulhi_const_10>
    23d4:	82 0f       	add	r24, r18
    23d6:	91 1d       	adc	r25, r1
    23d8:	21 91       	ld	r18, Z+
    23da:	20 53       	subi	r18, 0x30	; 48
    23dc:	2a 30       	cpi	r18, 0x0A	; 10
    23de:	c8 f3       	brcs	.-14     	; 0x23d2 <atoi+0x22>
    23e0:	1e f4       	brtc	.+6      	; 0x23e8 <atoi+0x38>
    23e2:	90 95       	com	r25
    23e4:	81 95       	neg	r24
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	08 95       	ret

000023ea <__mulhi_const_10>:
    23ea:	7a e0       	ldi	r23, 0x0A	; 10
    23ec:	97 9f       	mul	r25, r23
    23ee:	90 2d       	mov	r25, r0
    23f0:	87 9f       	mul	r24, r23
    23f2:	80 2d       	mov	r24, r0
    23f4:	91 0d       	add	r25, r1
    23f6:	11 24       	eor	r1, r1
    23f8:	08 95       	ret

000023fa <printf>:
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	ae 01       	movw	r20, r28
    2404:	4b 5f       	subi	r20, 0xFB	; 251
    2406:	5f 4f       	sbci	r21, 0xFF	; 255
    2408:	fa 01       	movw	r30, r20
    240a:	61 91       	ld	r22, Z+
    240c:	71 91       	ld	r23, Z+
    240e:	af 01       	movw	r20, r30
    2410:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <__iob+0x2>
    2414:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <__iob+0x3>
    2418:	38 d0       	rcall	.+112    	; 0x248a <vfprintf>
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <putchar>:
    2420:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <__iob+0x2>
    2424:	70 91 fd 03 	lds	r23, 0x03FD	; 0x8003fd <__iob+0x3>
    2428:	43 c2       	rjmp	.+1158   	; 0x28b0 <fputc>

0000242a <puts>:
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <__iob+0x2>
    2436:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <__iob+0x3>
    243a:	23 81       	ldd	r18, Z+3	; 0x03
    243c:	21 ff       	sbrs	r18, 1
    243e:	1b c0       	rjmp	.+54     	; 0x2476 <puts+0x4c>
    2440:	8c 01       	movw	r16, r24
    2442:	d0 e0       	ldi	r29, 0x00	; 0
    2444:	c0 e0       	ldi	r28, 0x00	; 0
    2446:	f8 01       	movw	r30, r16
    2448:	81 91       	ld	r24, Z+
    244a:	8f 01       	movw	r16, r30
    244c:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <__iob+0x2>
    2450:	70 91 fd 03 	lds	r23, 0x03FD	; 0x8003fd <__iob+0x3>
    2454:	db 01       	movw	r26, r22
    2456:	18 96       	adiw	r26, 0x08	; 8
    2458:	ed 91       	ld	r30, X+
    245a:	fc 91       	ld	r31, X
    245c:	19 97       	sbiw	r26, 0x09	; 9
    245e:	88 23       	and	r24, r24
    2460:	31 f0       	breq	.+12     	; 0x246e <puts+0x44>
    2462:	09 95       	icall
    2464:	89 2b       	or	r24, r25
    2466:	79 f3       	breq	.-34     	; 0x2446 <puts+0x1c>
    2468:	df ef       	ldi	r29, 0xFF	; 255
    246a:	cf ef       	ldi	r28, 0xFF	; 255
    246c:	ec cf       	rjmp	.-40     	; 0x2446 <puts+0x1c>
    246e:	8a e0       	ldi	r24, 0x0A	; 10
    2470:	09 95       	icall
    2472:	89 2b       	or	r24, r25
    2474:	19 f0       	breq	.+6      	; 0x247c <puts+0x52>
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	9f ef       	ldi	r25, 0xFF	; 255
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <puts+0x56>
    247c:	8d 2f       	mov	r24, r29
    247e:	9c 2f       	mov	r25, r28
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	1f 91       	pop	r17
    2486:	0f 91       	pop	r16
    2488:	08 95       	ret

0000248a <vfprintf>:
    248a:	2f 92       	push	r2
    248c:	3f 92       	push	r3
    248e:	4f 92       	push	r4
    2490:	5f 92       	push	r5
    2492:	6f 92       	push	r6
    2494:	7f 92       	push	r7
    2496:	8f 92       	push	r8
    2498:	9f 92       	push	r9
    249a:	af 92       	push	r10
    249c:	bf 92       	push	r11
    249e:	cf 92       	push	r12
    24a0:	df 92       	push	r13
    24a2:	ef 92       	push	r14
    24a4:	ff 92       	push	r15
    24a6:	0f 93       	push	r16
    24a8:	1f 93       	push	r17
    24aa:	cf 93       	push	r28
    24ac:	df 93       	push	r29
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	2b 97       	sbiw	r28, 0x0b	; 11
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	6c 01       	movw	r12, r24
    24c0:	7b 01       	movw	r14, r22
    24c2:	8a 01       	movw	r16, r20
    24c4:	fc 01       	movw	r30, r24
    24c6:	17 82       	std	Z+7, r1	; 0x07
    24c8:	16 82       	std	Z+6, r1	; 0x06
    24ca:	83 81       	ldd	r24, Z+3	; 0x03
    24cc:	81 ff       	sbrs	r24, 1
    24ce:	bf c1       	rjmp	.+894    	; 0x284e <vfprintf+0x3c4>
    24d0:	ce 01       	movw	r24, r28
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	3c 01       	movw	r6, r24
    24d6:	f6 01       	movw	r30, r12
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	f7 01       	movw	r30, r14
    24dc:	93 fd       	sbrc	r25, 3
    24de:	85 91       	lpm	r24, Z+
    24e0:	93 ff       	sbrs	r25, 3
    24e2:	81 91       	ld	r24, Z+
    24e4:	7f 01       	movw	r14, r30
    24e6:	88 23       	and	r24, r24
    24e8:	09 f4       	brne	.+2      	; 0x24ec <vfprintf+0x62>
    24ea:	ad c1       	rjmp	.+858    	; 0x2846 <vfprintf+0x3bc>
    24ec:	85 32       	cpi	r24, 0x25	; 37
    24ee:	39 f4       	brne	.+14     	; 0x24fe <vfprintf+0x74>
    24f0:	93 fd       	sbrc	r25, 3
    24f2:	85 91       	lpm	r24, Z+
    24f4:	93 ff       	sbrs	r25, 3
    24f6:	81 91       	ld	r24, Z+
    24f8:	7f 01       	movw	r14, r30
    24fa:	85 32       	cpi	r24, 0x25	; 37
    24fc:	21 f4       	brne	.+8      	; 0x2506 <vfprintf+0x7c>
    24fe:	b6 01       	movw	r22, r12
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	d6 d1       	rcall	.+940    	; 0x28b0 <fputc>
    2504:	e8 cf       	rjmp	.-48     	; 0x24d6 <vfprintf+0x4c>
    2506:	91 2c       	mov	r9, r1
    2508:	21 2c       	mov	r2, r1
    250a:	31 2c       	mov	r3, r1
    250c:	ff e1       	ldi	r31, 0x1F	; 31
    250e:	f3 15       	cp	r31, r3
    2510:	d8 f0       	brcs	.+54     	; 0x2548 <vfprintf+0xbe>
    2512:	8b 32       	cpi	r24, 0x2B	; 43
    2514:	79 f0       	breq	.+30     	; 0x2534 <vfprintf+0xaa>
    2516:	38 f4       	brcc	.+14     	; 0x2526 <vfprintf+0x9c>
    2518:	80 32       	cpi	r24, 0x20	; 32
    251a:	79 f0       	breq	.+30     	; 0x253a <vfprintf+0xb0>
    251c:	83 32       	cpi	r24, 0x23	; 35
    251e:	a1 f4       	brne	.+40     	; 0x2548 <vfprintf+0xbe>
    2520:	23 2d       	mov	r18, r3
    2522:	20 61       	ori	r18, 0x10	; 16
    2524:	1d c0       	rjmp	.+58     	; 0x2560 <vfprintf+0xd6>
    2526:	8d 32       	cpi	r24, 0x2D	; 45
    2528:	61 f0       	breq	.+24     	; 0x2542 <vfprintf+0xb8>
    252a:	80 33       	cpi	r24, 0x30	; 48
    252c:	69 f4       	brne	.+26     	; 0x2548 <vfprintf+0xbe>
    252e:	23 2d       	mov	r18, r3
    2530:	21 60       	ori	r18, 0x01	; 1
    2532:	16 c0       	rjmp	.+44     	; 0x2560 <vfprintf+0xd6>
    2534:	83 2d       	mov	r24, r3
    2536:	82 60       	ori	r24, 0x02	; 2
    2538:	38 2e       	mov	r3, r24
    253a:	e3 2d       	mov	r30, r3
    253c:	e4 60       	ori	r30, 0x04	; 4
    253e:	3e 2e       	mov	r3, r30
    2540:	2a c0       	rjmp	.+84     	; 0x2596 <vfprintf+0x10c>
    2542:	f3 2d       	mov	r31, r3
    2544:	f8 60       	ori	r31, 0x08	; 8
    2546:	1d c0       	rjmp	.+58     	; 0x2582 <vfprintf+0xf8>
    2548:	37 fc       	sbrc	r3, 7
    254a:	2d c0       	rjmp	.+90     	; 0x25a6 <vfprintf+0x11c>
    254c:	20 ed       	ldi	r18, 0xD0	; 208
    254e:	28 0f       	add	r18, r24
    2550:	2a 30       	cpi	r18, 0x0A	; 10
    2552:	40 f0       	brcs	.+16     	; 0x2564 <vfprintf+0xda>
    2554:	8e 32       	cpi	r24, 0x2E	; 46
    2556:	b9 f4       	brne	.+46     	; 0x2586 <vfprintf+0xfc>
    2558:	36 fc       	sbrc	r3, 6
    255a:	75 c1       	rjmp	.+746    	; 0x2846 <vfprintf+0x3bc>
    255c:	23 2d       	mov	r18, r3
    255e:	20 64       	ori	r18, 0x40	; 64
    2560:	32 2e       	mov	r3, r18
    2562:	19 c0       	rjmp	.+50     	; 0x2596 <vfprintf+0x10c>
    2564:	36 fe       	sbrs	r3, 6
    2566:	06 c0       	rjmp	.+12     	; 0x2574 <vfprintf+0xea>
    2568:	8a e0       	ldi	r24, 0x0A	; 10
    256a:	98 9e       	mul	r9, r24
    256c:	20 0d       	add	r18, r0
    256e:	11 24       	eor	r1, r1
    2570:	92 2e       	mov	r9, r18
    2572:	11 c0       	rjmp	.+34     	; 0x2596 <vfprintf+0x10c>
    2574:	ea e0       	ldi	r30, 0x0A	; 10
    2576:	2e 9e       	mul	r2, r30
    2578:	20 0d       	add	r18, r0
    257a:	11 24       	eor	r1, r1
    257c:	22 2e       	mov	r2, r18
    257e:	f3 2d       	mov	r31, r3
    2580:	f0 62       	ori	r31, 0x20	; 32
    2582:	3f 2e       	mov	r3, r31
    2584:	08 c0       	rjmp	.+16     	; 0x2596 <vfprintf+0x10c>
    2586:	8c 36       	cpi	r24, 0x6C	; 108
    2588:	21 f4       	brne	.+8      	; 0x2592 <vfprintf+0x108>
    258a:	83 2d       	mov	r24, r3
    258c:	80 68       	ori	r24, 0x80	; 128
    258e:	38 2e       	mov	r3, r24
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <vfprintf+0x10c>
    2592:	88 36       	cpi	r24, 0x68	; 104
    2594:	41 f4       	brne	.+16     	; 0x25a6 <vfprintf+0x11c>
    2596:	f7 01       	movw	r30, r14
    2598:	93 fd       	sbrc	r25, 3
    259a:	85 91       	lpm	r24, Z+
    259c:	93 ff       	sbrs	r25, 3
    259e:	81 91       	ld	r24, Z+
    25a0:	7f 01       	movw	r14, r30
    25a2:	81 11       	cpse	r24, r1
    25a4:	b3 cf       	rjmp	.-154    	; 0x250c <vfprintf+0x82>
    25a6:	98 2f       	mov	r25, r24
    25a8:	9f 7d       	andi	r25, 0xDF	; 223
    25aa:	95 54       	subi	r25, 0x45	; 69
    25ac:	93 30       	cpi	r25, 0x03	; 3
    25ae:	28 f4       	brcc	.+10     	; 0x25ba <vfprintf+0x130>
    25b0:	0c 5f       	subi	r16, 0xFC	; 252
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	9f e3       	ldi	r25, 0x3F	; 63
    25b6:	99 83       	std	Y+1, r25	; 0x01
    25b8:	0d c0       	rjmp	.+26     	; 0x25d4 <vfprintf+0x14a>
    25ba:	83 36       	cpi	r24, 0x63	; 99
    25bc:	31 f0       	breq	.+12     	; 0x25ca <vfprintf+0x140>
    25be:	83 37       	cpi	r24, 0x73	; 115
    25c0:	71 f0       	breq	.+28     	; 0x25de <vfprintf+0x154>
    25c2:	83 35       	cpi	r24, 0x53	; 83
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <vfprintf+0x13e>
    25c6:	55 c0       	rjmp	.+170    	; 0x2672 <vfprintf+0x1e8>
    25c8:	20 c0       	rjmp	.+64     	; 0x260a <vfprintf+0x180>
    25ca:	f8 01       	movw	r30, r16
    25cc:	80 81       	ld	r24, Z
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	0e 5f       	subi	r16, 0xFE	; 254
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	88 24       	eor	r8, r8
    25d6:	83 94       	inc	r8
    25d8:	91 2c       	mov	r9, r1
    25da:	53 01       	movw	r10, r6
    25dc:	12 c0       	rjmp	.+36     	; 0x2602 <vfprintf+0x178>
    25de:	28 01       	movw	r4, r16
    25e0:	f2 e0       	ldi	r31, 0x02	; 2
    25e2:	4f 0e       	add	r4, r31
    25e4:	51 1c       	adc	r5, r1
    25e6:	f8 01       	movw	r30, r16
    25e8:	a0 80       	ld	r10, Z
    25ea:	b1 80       	ldd	r11, Z+1	; 0x01
    25ec:	36 fe       	sbrs	r3, 6
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <vfprintf+0x16c>
    25f0:	69 2d       	mov	r22, r9
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <vfprintf+0x170>
    25f6:	6f ef       	ldi	r22, 0xFF	; 255
    25f8:	7f ef       	ldi	r23, 0xFF	; 255
    25fa:	c5 01       	movw	r24, r10
    25fc:	4e d1       	rcall	.+668    	; 0x289a <strnlen>
    25fe:	4c 01       	movw	r8, r24
    2600:	82 01       	movw	r16, r4
    2602:	f3 2d       	mov	r31, r3
    2604:	ff 77       	andi	r31, 0x7F	; 127
    2606:	3f 2e       	mov	r3, r31
    2608:	15 c0       	rjmp	.+42     	; 0x2634 <vfprintf+0x1aa>
    260a:	28 01       	movw	r4, r16
    260c:	22 e0       	ldi	r18, 0x02	; 2
    260e:	42 0e       	add	r4, r18
    2610:	51 1c       	adc	r5, r1
    2612:	f8 01       	movw	r30, r16
    2614:	a0 80       	ld	r10, Z
    2616:	b1 80       	ldd	r11, Z+1	; 0x01
    2618:	36 fe       	sbrs	r3, 6
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <vfprintf+0x198>
    261c:	69 2d       	mov	r22, r9
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <vfprintf+0x19c>
    2622:	6f ef       	ldi	r22, 0xFF	; 255
    2624:	7f ef       	ldi	r23, 0xFF	; 255
    2626:	c5 01       	movw	r24, r10
    2628:	2d d1       	rcall	.+602    	; 0x2884 <strnlen_P>
    262a:	4c 01       	movw	r8, r24
    262c:	f3 2d       	mov	r31, r3
    262e:	f0 68       	ori	r31, 0x80	; 128
    2630:	3f 2e       	mov	r3, r31
    2632:	82 01       	movw	r16, r4
    2634:	33 fc       	sbrc	r3, 3
    2636:	19 c0       	rjmp	.+50     	; 0x266a <vfprintf+0x1e0>
    2638:	82 2d       	mov	r24, r2
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	88 16       	cp	r8, r24
    263e:	99 06       	cpc	r9, r25
    2640:	a0 f4       	brcc	.+40     	; 0x266a <vfprintf+0x1e0>
    2642:	b6 01       	movw	r22, r12
    2644:	80 e2       	ldi	r24, 0x20	; 32
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	33 d1       	rcall	.+614    	; 0x28b0 <fputc>
    264a:	2a 94       	dec	r2
    264c:	f5 cf       	rjmp	.-22     	; 0x2638 <vfprintf+0x1ae>
    264e:	f5 01       	movw	r30, r10
    2650:	37 fc       	sbrc	r3, 7
    2652:	85 91       	lpm	r24, Z+
    2654:	37 fe       	sbrs	r3, 7
    2656:	81 91       	ld	r24, Z+
    2658:	5f 01       	movw	r10, r30
    265a:	b6 01       	movw	r22, r12
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	28 d1       	rcall	.+592    	; 0x28b0 <fputc>
    2660:	21 10       	cpse	r2, r1
    2662:	2a 94       	dec	r2
    2664:	21 e0       	ldi	r18, 0x01	; 1
    2666:	82 1a       	sub	r8, r18
    2668:	91 08       	sbc	r9, r1
    266a:	81 14       	cp	r8, r1
    266c:	91 04       	cpc	r9, r1
    266e:	79 f7       	brne	.-34     	; 0x264e <vfprintf+0x1c4>
    2670:	e1 c0       	rjmp	.+450    	; 0x2834 <vfprintf+0x3aa>
    2672:	84 36       	cpi	r24, 0x64	; 100
    2674:	11 f0       	breq	.+4      	; 0x267a <vfprintf+0x1f0>
    2676:	89 36       	cpi	r24, 0x69	; 105
    2678:	39 f5       	brne	.+78     	; 0x26c8 <vfprintf+0x23e>
    267a:	f8 01       	movw	r30, r16
    267c:	37 fe       	sbrs	r3, 7
    267e:	07 c0       	rjmp	.+14     	; 0x268e <vfprintf+0x204>
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	0c 5f       	subi	r16, 0xFC	; 252
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	08 c0       	rjmp	.+16     	; 0x269e <vfprintf+0x214>
    268e:	60 81       	ld	r22, Z
    2690:	71 81       	ldd	r23, Z+1	; 0x01
    2692:	07 2e       	mov	r0, r23
    2694:	00 0c       	add	r0, r0
    2696:	88 0b       	sbc	r24, r24
    2698:	99 0b       	sbc	r25, r25
    269a:	0e 5f       	subi	r16, 0xFE	; 254
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	f3 2d       	mov	r31, r3
    26a0:	ff 76       	andi	r31, 0x6F	; 111
    26a2:	3f 2e       	mov	r3, r31
    26a4:	97 ff       	sbrs	r25, 7
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <vfprintf+0x230>
    26a8:	90 95       	com	r25
    26aa:	80 95       	com	r24
    26ac:	70 95       	com	r23
    26ae:	61 95       	neg	r22
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	8f 4f       	sbci	r24, 0xFF	; 255
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	f0 68       	ori	r31, 0x80	; 128
    26b8:	3f 2e       	mov	r3, r31
    26ba:	2a e0       	ldi	r18, 0x0A	; 10
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	a3 01       	movw	r20, r6
    26c0:	33 d1       	rcall	.+614    	; 0x2928 <__ultoa_invert>
    26c2:	88 2e       	mov	r8, r24
    26c4:	86 18       	sub	r8, r6
    26c6:	44 c0       	rjmp	.+136    	; 0x2750 <vfprintf+0x2c6>
    26c8:	85 37       	cpi	r24, 0x75	; 117
    26ca:	31 f4       	brne	.+12     	; 0x26d8 <vfprintf+0x24e>
    26cc:	23 2d       	mov	r18, r3
    26ce:	2f 7e       	andi	r18, 0xEF	; 239
    26d0:	b2 2e       	mov	r11, r18
    26d2:	2a e0       	ldi	r18, 0x0A	; 10
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	25 c0       	rjmp	.+74     	; 0x2722 <vfprintf+0x298>
    26d8:	93 2d       	mov	r25, r3
    26da:	99 7f       	andi	r25, 0xF9	; 249
    26dc:	b9 2e       	mov	r11, r25
    26de:	8f 36       	cpi	r24, 0x6F	; 111
    26e0:	c1 f0       	breq	.+48     	; 0x2712 <vfprintf+0x288>
    26e2:	18 f4       	brcc	.+6      	; 0x26ea <vfprintf+0x260>
    26e4:	88 35       	cpi	r24, 0x58	; 88
    26e6:	79 f0       	breq	.+30     	; 0x2706 <vfprintf+0x27c>
    26e8:	ae c0       	rjmp	.+348    	; 0x2846 <vfprintf+0x3bc>
    26ea:	80 37       	cpi	r24, 0x70	; 112
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <vfprintf+0x26a>
    26ee:	88 37       	cpi	r24, 0x78	; 120
    26f0:	21 f0       	breq	.+8      	; 0x26fa <vfprintf+0x270>
    26f2:	a9 c0       	rjmp	.+338    	; 0x2846 <vfprintf+0x3bc>
    26f4:	e9 2f       	mov	r30, r25
    26f6:	e0 61       	ori	r30, 0x10	; 16
    26f8:	be 2e       	mov	r11, r30
    26fa:	b4 fe       	sbrs	r11, 4
    26fc:	0d c0       	rjmp	.+26     	; 0x2718 <vfprintf+0x28e>
    26fe:	fb 2d       	mov	r31, r11
    2700:	f4 60       	ori	r31, 0x04	; 4
    2702:	bf 2e       	mov	r11, r31
    2704:	09 c0       	rjmp	.+18     	; 0x2718 <vfprintf+0x28e>
    2706:	34 fe       	sbrs	r3, 4
    2708:	0a c0       	rjmp	.+20     	; 0x271e <vfprintf+0x294>
    270a:	29 2f       	mov	r18, r25
    270c:	26 60       	ori	r18, 0x06	; 6
    270e:	b2 2e       	mov	r11, r18
    2710:	06 c0       	rjmp	.+12     	; 0x271e <vfprintf+0x294>
    2712:	28 e0       	ldi	r18, 0x08	; 8
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <vfprintf+0x298>
    2718:	20 e1       	ldi	r18, 0x10	; 16
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <vfprintf+0x298>
    271e:	20 e1       	ldi	r18, 0x10	; 16
    2720:	32 e0       	ldi	r19, 0x02	; 2
    2722:	f8 01       	movw	r30, r16
    2724:	b7 fe       	sbrs	r11, 7
    2726:	07 c0       	rjmp	.+14     	; 0x2736 <vfprintf+0x2ac>
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	0c 5f       	subi	r16, 0xFC	; 252
    2732:	1f 4f       	sbci	r17, 0xFF	; 255
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <vfprintf+0x2b8>
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 5f       	subi	r16, 0xFE	; 254
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	a3 01       	movw	r20, r6
    2744:	f1 d0       	rcall	.+482    	; 0x2928 <__ultoa_invert>
    2746:	88 2e       	mov	r8, r24
    2748:	86 18       	sub	r8, r6
    274a:	fb 2d       	mov	r31, r11
    274c:	ff 77       	andi	r31, 0x7F	; 127
    274e:	3f 2e       	mov	r3, r31
    2750:	36 fe       	sbrs	r3, 6
    2752:	0d c0       	rjmp	.+26     	; 0x276e <vfprintf+0x2e4>
    2754:	23 2d       	mov	r18, r3
    2756:	2e 7f       	andi	r18, 0xFE	; 254
    2758:	a2 2e       	mov	r10, r18
    275a:	89 14       	cp	r8, r9
    275c:	58 f4       	brcc	.+22     	; 0x2774 <vfprintf+0x2ea>
    275e:	34 fe       	sbrs	r3, 4
    2760:	0b c0       	rjmp	.+22     	; 0x2778 <vfprintf+0x2ee>
    2762:	32 fc       	sbrc	r3, 2
    2764:	09 c0       	rjmp	.+18     	; 0x2778 <vfprintf+0x2ee>
    2766:	83 2d       	mov	r24, r3
    2768:	8e 7e       	andi	r24, 0xEE	; 238
    276a:	a8 2e       	mov	r10, r24
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <vfprintf+0x2ee>
    276e:	b8 2c       	mov	r11, r8
    2770:	a3 2c       	mov	r10, r3
    2772:	03 c0       	rjmp	.+6      	; 0x277a <vfprintf+0x2f0>
    2774:	b8 2c       	mov	r11, r8
    2776:	01 c0       	rjmp	.+2      	; 0x277a <vfprintf+0x2f0>
    2778:	b9 2c       	mov	r11, r9
    277a:	a4 fe       	sbrs	r10, 4
    277c:	0f c0       	rjmp	.+30     	; 0x279c <vfprintf+0x312>
    277e:	fe 01       	movw	r30, r28
    2780:	e8 0d       	add	r30, r8
    2782:	f1 1d       	adc	r31, r1
    2784:	80 81       	ld	r24, Z
    2786:	80 33       	cpi	r24, 0x30	; 48
    2788:	21 f4       	brne	.+8      	; 0x2792 <vfprintf+0x308>
    278a:	9a 2d       	mov	r25, r10
    278c:	99 7e       	andi	r25, 0xE9	; 233
    278e:	a9 2e       	mov	r10, r25
    2790:	09 c0       	rjmp	.+18     	; 0x27a4 <vfprintf+0x31a>
    2792:	a2 fe       	sbrs	r10, 2
    2794:	06 c0       	rjmp	.+12     	; 0x27a2 <vfprintf+0x318>
    2796:	b3 94       	inc	r11
    2798:	b3 94       	inc	r11
    279a:	04 c0       	rjmp	.+8      	; 0x27a4 <vfprintf+0x31a>
    279c:	8a 2d       	mov	r24, r10
    279e:	86 78       	andi	r24, 0x86	; 134
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <vfprintf+0x31a>
    27a2:	b3 94       	inc	r11
    27a4:	a3 fc       	sbrc	r10, 3
    27a6:	10 c0       	rjmp	.+32     	; 0x27c8 <vfprintf+0x33e>
    27a8:	a0 fe       	sbrs	r10, 0
    27aa:	06 c0       	rjmp	.+12     	; 0x27b8 <vfprintf+0x32e>
    27ac:	b2 14       	cp	r11, r2
    27ae:	80 f4       	brcc	.+32     	; 0x27d0 <vfprintf+0x346>
    27b0:	28 0c       	add	r2, r8
    27b2:	92 2c       	mov	r9, r2
    27b4:	9b 18       	sub	r9, r11
    27b6:	0d c0       	rjmp	.+26     	; 0x27d2 <vfprintf+0x348>
    27b8:	b2 14       	cp	r11, r2
    27ba:	58 f4       	brcc	.+22     	; 0x27d2 <vfprintf+0x348>
    27bc:	b6 01       	movw	r22, r12
    27be:	80 e2       	ldi	r24, 0x20	; 32
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	76 d0       	rcall	.+236    	; 0x28b0 <fputc>
    27c4:	b3 94       	inc	r11
    27c6:	f8 cf       	rjmp	.-16     	; 0x27b8 <vfprintf+0x32e>
    27c8:	b2 14       	cp	r11, r2
    27ca:	18 f4       	brcc	.+6      	; 0x27d2 <vfprintf+0x348>
    27cc:	2b 18       	sub	r2, r11
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <vfprintf+0x34a>
    27d0:	98 2c       	mov	r9, r8
    27d2:	21 2c       	mov	r2, r1
    27d4:	a4 fe       	sbrs	r10, 4
    27d6:	0f c0       	rjmp	.+30     	; 0x27f6 <vfprintf+0x36c>
    27d8:	b6 01       	movw	r22, r12
    27da:	80 e3       	ldi	r24, 0x30	; 48
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	68 d0       	rcall	.+208    	; 0x28b0 <fputc>
    27e0:	a2 fe       	sbrs	r10, 2
    27e2:	16 c0       	rjmp	.+44     	; 0x2810 <vfprintf+0x386>
    27e4:	a1 fc       	sbrc	r10, 1
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <vfprintf+0x364>
    27e8:	88 e7       	ldi	r24, 0x78	; 120
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <vfprintf+0x368>
    27ee:	88 e5       	ldi	r24, 0x58	; 88
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	b6 01       	movw	r22, r12
    27f4:	0c c0       	rjmp	.+24     	; 0x280e <vfprintf+0x384>
    27f6:	8a 2d       	mov	r24, r10
    27f8:	86 78       	andi	r24, 0x86	; 134
    27fa:	51 f0       	breq	.+20     	; 0x2810 <vfprintf+0x386>
    27fc:	a1 fe       	sbrs	r10, 1
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <vfprintf+0x37a>
    2800:	8b e2       	ldi	r24, 0x2B	; 43
    2802:	01 c0       	rjmp	.+2      	; 0x2806 <vfprintf+0x37c>
    2804:	80 e2       	ldi	r24, 0x20	; 32
    2806:	a7 fc       	sbrc	r10, 7
    2808:	8d e2       	ldi	r24, 0x2D	; 45
    280a:	b6 01       	movw	r22, r12
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	50 d0       	rcall	.+160    	; 0x28b0 <fputc>
    2810:	89 14       	cp	r8, r9
    2812:	30 f4       	brcc	.+12     	; 0x2820 <vfprintf+0x396>
    2814:	b6 01       	movw	r22, r12
    2816:	80 e3       	ldi	r24, 0x30	; 48
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	4a d0       	rcall	.+148    	; 0x28b0 <fputc>
    281c:	9a 94       	dec	r9
    281e:	f8 cf       	rjmp	.-16     	; 0x2810 <vfprintf+0x386>
    2820:	8a 94       	dec	r8
    2822:	f3 01       	movw	r30, r6
    2824:	e8 0d       	add	r30, r8
    2826:	f1 1d       	adc	r31, r1
    2828:	80 81       	ld	r24, Z
    282a:	b6 01       	movw	r22, r12
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	40 d0       	rcall	.+128    	; 0x28b0 <fputc>
    2830:	81 10       	cpse	r8, r1
    2832:	f6 cf       	rjmp	.-20     	; 0x2820 <vfprintf+0x396>
    2834:	22 20       	and	r2, r2
    2836:	09 f4       	brne	.+2      	; 0x283a <vfprintf+0x3b0>
    2838:	4e ce       	rjmp	.-868    	; 0x24d6 <vfprintf+0x4c>
    283a:	b6 01       	movw	r22, r12
    283c:	80 e2       	ldi	r24, 0x20	; 32
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	37 d0       	rcall	.+110    	; 0x28b0 <fputc>
    2842:	2a 94       	dec	r2
    2844:	f7 cf       	rjmp	.-18     	; 0x2834 <vfprintf+0x3aa>
    2846:	f6 01       	movw	r30, r12
    2848:	86 81       	ldd	r24, Z+6	; 0x06
    284a:	97 81       	ldd	r25, Z+7	; 0x07
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <vfprintf+0x3c8>
    284e:	8f ef       	ldi	r24, 0xFF	; 255
    2850:	9f ef       	ldi	r25, 0xFF	; 255
    2852:	2b 96       	adiw	r28, 0x0b	; 11
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	df 90       	pop	r13
    286c:	cf 90       	pop	r12
    286e:	bf 90       	pop	r11
    2870:	af 90       	pop	r10
    2872:	9f 90       	pop	r9
    2874:	8f 90       	pop	r8
    2876:	7f 90       	pop	r7
    2878:	6f 90       	pop	r6
    287a:	5f 90       	pop	r5
    287c:	4f 90       	pop	r4
    287e:	3f 90       	pop	r3
    2880:	2f 90       	pop	r2
    2882:	08 95       	ret

00002884 <strnlen_P>:
    2884:	fc 01       	movw	r30, r24
    2886:	05 90       	lpm	r0, Z+
    2888:	61 50       	subi	r22, 0x01	; 1
    288a:	70 40       	sbci	r23, 0x00	; 0
    288c:	01 10       	cpse	r0, r1
    288e:	d8 f7       	brcc	.-10     	; 0x2886 <strnlen_P+0x2>
    2890:	80 95       	com	r24
    2892:	90 95       	com	r25
    2894:	8e 0f       	add	r24, r30
    2896:	9f 1f       	adc	r25, r31
    2898:	08 95       	ret

0000289a <strnlen>:
    289a:	fc 01       	movw	r30, r24
    289c:	61 50       	subi	r22, 0x01	; 1
    289e:	70 40       	sbci	r23, 0x00	; 0
    28a0:	01 90       	ld	r0, Z+
    28a2:	01 10       	cpse	r0, r1
    28a4:	d8 f7       	brcc	.-10     	; 0x289c <strnlen+0x2>
    28a6:	80 95       	com	r24
    28a8:	90 95       	com	r25
    28aa:	8e 0f       	add	r24, r30
    28ac:	9f 1f       	adc	r25, r31
    28ae:	08 95       	ret

000028b0 <fputc>:
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	fb 01       	movw	r30, r22
    28ba:	23 81       	ldd	r18, Z+3	; 0x03
    28bc:	21 fd       	sbrc	r18, 1
    28be:	03 c0       	rjmp	.+6      	; 0x28c6 <fputc+0x16>
    28c0:	8f ef       	ldi	r24, 0xFF	; 255
    28c2:	9f ef       	ldi	r25, 0xFF	; 255
    28c4:	2c c0       	rjmp	.+88     	; 0x291e <fputc+0x6e>
    28c6:	22 ff       	sbrs	r18, 2
    28c8:	16 c0       	rjmp	.+44     	; 0x28f6 <fputc+0x46>
    28ca:	46 81       	ldd	r20, Z+6	; 0x06
    28cc:	57 81       	ldd	r21, Z+7	; 0x07
    28ce:	24 81       	ldd	r18, Z+4	; 0x04
    28d0:	35 81       	ldd	r19, Z+5	; 0x05
    28d2:	42 17       	cp	r20, r18
    28d4:	53 07       	cpc	r21, r19
    28d6:	44 f4       	brge	.+16     	; 0x28e8 <fputc+0x38>
    28d8:	a0 81       	ld	r26, Z
    28da:	b1 81       	ldd	r27, Z+1	; 0x01
    28dc:	9d 01       	movw	r18, r26
    28de:	2f 5f       	subi	r18, 0xFF	; 255
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	31 83       	std	Z+1, r19	; 0x01
    28e4:	20 83       	st	Z, r18
    28e6:	8c 93       	st	X, r24
    28e8:	26 81       	ldd	r18, Z+6	; 0x06
    28ea:	37 81       	ldd	r19, Z+7	; 0x07
    28ec:	2f 5f       	subi	r18, 0xFF	; 255
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	37 83       	std	Z+7, r19	; 0x07
    28f2:	26 83       	std	Z+6, r18	; 0x06
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <fputc+0x6e>
    28f6:	8b 01       	movw	r16, r22
    28f8:	ec 01       	movw	r28, r24
    28fa:	fb 01       	movw	r30, r22
    28fc:	00 84       	ldd	r0, Z+8	; 0x08
    28fe:	f1 85       	ldd	r31, Z+9	; 0x09
    2900:	e0 2d       	mov	r30, r0
    2902:	09 95       	icall
    2904:	89 2b       	or	r24, r25
    2906:	e1 f6       	brne	.-72     	; 0x28c0 <fputc+0x10>
    2908:	d8 01       	movw	r26, r16
    290a:	16 96       	adiw	r26, 0x06	; 6
    290c:	8d 91       	ld	r24, X+
    290e:	9c 91       	ld	r25, X
    2910:	17 97       	sbiw	r26, 0x07	; 7
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	17 96       	adiw	r26, 0x07	; 7
    2916:	9c 93       	st	X, r25
    2918:	8e 93       	st	-X, r24
    291a:	16 97       	sbiw	r26, 0x06	; 6
    291c:	ce 01       	movw	r24, r28
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	08 95       	ret

00002928 <__ultoa_invert>:
    2928:	fa 01       	movw	r30, r20
    292a:	aa 27       	eor	r26, r26
    292c:	28 30       	cpi	r18, 0x08	; 8
    292e:	51 f1       	breq	.+84     	; 0x2984 <__ultoa_invert+0x5c>
    2930:	20 31       	cpi	r18, 0x10	; 16
    2932:	81 f1       	breq	.+96     	; 0x2994 <__ultoa_invert+0x6c>
    2934:	e8 94       	clt
    2936:	6f 93       	push	r22
    2938:	6e 7f       	andi	r22, 0xFE	; 254
    293a:	6e 5f       	subi	r22, 0xFE	; 254
    293c:	7f 4f       	sbci	r23, 0xFF	; 255
    293e:	8f 4f       	sbci	r24, 0xFF	; 255
    2940:	9f 4f       	sbci	r25, 0xFF	; 255
    2942:	af 4f       	sbci	r26, 0xFF	; 255
    2944:	b1 e0       	ldi	r27, 0x01	; 1
    2946:	3e d0       	rcall	.+124    	; 0x29c4 <__ultoa_invert+0x9c>
    2948:	b4 e0       	ldi	r27, 0x04	; 4
    294a:	3c d0       	rcall	.+120    	; 0x29c4 <__ultoa_invert+0x9c>
    294c:	67 0f       	add	r22, r23
    294e:	78 1f       	adc	r23, r24
    2950:	89 1f       	adc	r24, r25
    2952:	9a 1f       	adc	r25, r26
    2954:	a1 1d       	adc	r26, r1
    2956:	68 0f       	add	r22, r24
    2958:	79 1f       	adc	r23, r25
    295a:	8a 1f       	adc	r24, r26
    295c:	91 1d       	adc	r25, r1
    295e:	a1 1d       	adc	r26, r1
    2960:	6a 0f       	add	r22, r26
    2962:	71 1d       	adc	r23, r1
    2964:	81 1d       	adc	r24, r1
    2966:	91 1d       	adc	r25, r1
    2968:	a1 1d       	adc	r26, r1
    296a:	20 d0       	rcall	.+64     	; 0x29ac <__ultoa_invert+0x84>
    296c:	09 f4       	brne	.+2      	; 0x2970 <__ultoa_invert+0x48>
    296e:	68 94       	set
    2970:	3f 91       	pop	r19
    2972:	2a e0       	ldi	r18, 0x0A	; 10
    2974:	26 9f       	mul	r18, r22
    2976:	11 24       	eor	r1, r1
    2978:	30 19       	sub	r19, r0
    297a:	30 5d       	subi	r19, 0xD0	; 208
    297c:	31 93       	st	Z+, r19
    297e:	de f6       	brtc	.-74     	; 0x2936 <__ultoa_invert+0xe>
    2980:	cf 01       	movw	r24, r30
    2982:	08 95       	ret
    2984:	46 2f       	mov	r20, r22
    2986:	47 70       	andi	r20, 0x07	; 7
    2988:	40 5d       	subi	r20, 0xD0	; 208
    298a:	41 93       	st	Z+, r20
    298c:	b3 e0       	ldi	r27, 0x03	; 3
    298e:	0f d0       	rcall	.+30     	; 0x29ae <__ultoa_invert+0x86>
    2990:	c9 f7       	brne	.-14     	; 0x2984 <__ultoa_invert+0x5c>
    2992:	f6 cf       	rjmp	.-20     	; 0x2980 <__ultoa_invert+0x58>
    2994:	46 2f       	mov	r20, r22
    2996:	4f 70       	andi	r20, 0x0F	; 15
    2998:	40 5d       	subi	r20, 0xD0	; 208
    299a:	4a 33       	cpi	r20, 0x3A	; 58
    299c:	18 f0       	brcs	.+6      	; 0x29a4 <__ultoa_invert+0x7c>
    299e:	49 5d       	subi	r20, 0xD9	; 217
    29a0:	31 fd       	sbrc	r19, 1
    29a2:	40 52       	subi	r20, 0x20	; 32
    29a4:	41 93       	st	Z+, r20
    29a6:	02 d0       	rcall	.+4      	; 0x29ac <__ultoa_invert+0x84>
    29a8:	a9 f7       	brne	.-22     	; 0x2994 <__ultoa_invert+0x6c>
    29aa:	ea cf       	rjmp	.-44     	; 0x2980 <__ultoa_invert+0x58>
    29ac:	b4 e0       	ldi	r27, 0x04	; 4
    29ae:	a6 95       	lsr	r26
    29b0:	97 95       	ror	r25
    29b2:	87 95       	ror	r24
    29b4:	77 95       	ror	r23
    29b6:	67 95       	ror	r22
    29b8:	ba 95       	dec	r27
    29ba:	c9 f7       	brne	.-14     	; 0x29ae <__ultoa_invert+0x86>
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	61 05       	cpc	r22, r1
    29c0:	71 05       	cpc	r23, r1
    29c2:	08 95       	ret
    29c4:	9b 01       	movw	r18, r22
    29c6:	ac 01       	movw	r20, r24
    29c8:	0a 2e       	mov	r0, r26
    29ca:	06 94       	lsr	r0
    29cc:	57 95       	ror	r21
    29ce:	47 95       	ror	r20
    29d0:	37 95       	ror	r19
    29d2:	27 95       	ror	r18
    29d4:	ba 95       	dec	r27
    29d6:	c9 f7       	brne	.-14     	; 0x29ca <__ultoa_invert+0xa2>
    29d8:	62 0f       	add	r22, r18
    29da:	73 1f       	adc	r23, r19
    29dc:	84 1f       	adc	r24, r20
    29de:	95 1f       	adc	r25, r21
    29e0:	a0 1d       	adc	r26, r0
    29e2:	08 95       	ret

000029e4 <_exit>:
    29e4:	f8 94       	cli

000029e6 <__stop_program>:
    29e6:	ff cf       	rjmp	.-2      	; 0x29e6 <__stop_program>
