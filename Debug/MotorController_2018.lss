
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002268  000022fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000248  00800134  00800134  00002330  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000567b  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019b8  00000000  00000000  00007edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027c7  00000000  00000000  00009897  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e78  00000000  00000000  0000c060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015cd  00000000  00000000  0000ced8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cf5  00000000  00000000  0000e4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0001219a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c7       	rjmp	.+3912   	; 0xf62 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c7       	rjmp	.+3708   	; 0xeae <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a2 c6       	rjmp	.+3396   	; 0xd86 <__vector_16>
      42:	00 00       	nop
      44:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_17>
      48:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	cd c5       	rjmp	.+2970   	; 0xbf0 <__vector_21>
      56:	00 00       	nop
      58:	ad c5       	rjmp	.+2906   	; 0xbb4 <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c5       	rjmp	.+3040   	; 0xc62 <__vector_32>
      82:	00 00       	nop
      84:	d0 c5       	rjmp	.+2976   	; 0xc26 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	6b 09       	sbc	r22, r11
      96:	70 09       	sbc	r23, r0
      98:	76 09       	sbc	r23, r6
      9a:	7c 09       	sbc	r23, r12
      9c:	82 09       	sbc	r24, r2
      9e:	87 09       	sbc	r24, r7
      a0:	8d 09       	sbc	r24, r13
      a2:	93 09       	sbc	r25, r3

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e6       	ldi	r30, 0x68	; 104
      b8:	f2 e2       	ldi	r31, 0x22	; 34
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 33       	cpi	r26, 0x34	; 52
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	a4 e3       	ldi	r26, 0x34	; 52
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ac 37       	cpi	r26, 0x7C	; 124
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	05 d6       	rcall	.+3082   	; 0xce6 <main>
      dc:	0c 94 32 11 	jmp	0x2264	; 0x2264 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <f32_Integrator>
      e6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <f32_Integrator+0x1>
      ea:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <f32_Integrator+0x2>
      ee:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty, ControlType_t ctrlType){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (ctrlType == CURRENT)
     11c:	e1 10       	cpse	r14, r1
     11e:	7f c0       	rjmp	.+254    	; 0x21e <controller+0x12a>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     120:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     124:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     128:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     12c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	4e eb       	ldi	r20, 0xBE	; 190
     136:	52 e4       	ldi	r21, 0x42	; 66
     138:	c7 01       	movw	r24, r14
     13a:	b6 01       	movw	r22, r12
     13c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__gesf2>
     140:	88 23       	and	r24, r24
     142:	54 f4       	brge	.+20     	; 0x158 <controller+0x64>
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	48 e4       	ldi	r20, 0x48	; 72
     14a:	52 e4       	ldi	r21, 0x42	; 66
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
     154:	18 16       	cp	r1, r24
     156:	24 f0       	brlt	.+8      	; 0x160 <controller+0x6c>
		{
			b_saturation = true ;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
     15e:	02 c0       	rjmp	.+4      	; 0x164 <controller+0x70>
			} else {
			b_saturation = false;
     160:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
		}
		
		f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     164:	a3 01       	movw	r20, r6
     166:	92 01       	movw	r18, r4
     168:	c5 01       	movw	r24, r10
     16a:	b4 01       	movw	r22, r8
     16c:	0e 94 24 0c 	call	0x1848	; 0x1848 <__subsf3>
     170:	6b 01       	movw	r12, r22
     172:	7c 01       	movw	r14, r24
     174:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <f32_CurrentDelta>
     178:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <f32_CurrentDelta+0x1>
     17c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <f32_CurrentDelta+0x2>
     180:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <f32_CurrentDelta+0x3>
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     184:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     188:	81 11       	cpse	r24, r1
     18a:	1c c0       	rjmp	.+56     	; 0x1c4 <controller+0xd0>
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     18c:	2a e0       	ldi	r18, 0x0A	; 10
     18e:	37 ed       	ldi	r19, 0xD7	; 215
     190:	43 e2       	ldi	r20, 0x23	; 35
     192:	5c e3       	ldi	r21, 0x3C	; 60
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     19c:	9b 01       	movw	r18, r22
     19e:	ac 01       	movw	r20, r24
     1a0:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <f32_Integrator>
     1a4:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <f32_Integrator+0x1>
     1a8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <f32_Integrator+0x2>
     1ac:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <f32_Integrator+0x3>
     1b0:	0e 94 25 0c 	call	0x184a	; 0x184a <__addsf3>
     1b4:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <f32_Integrator>
     1b8:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <f32_Integrator+0x1>
     1bc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <f32_Integrator+0x2>
     1c0:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c4:	23 e3       	ldi	r18, 0x33	; 51
     1c6:	33 e3       	ldi	r19, 0x33	; 51
     1c8:	43 e7       	ldi	r20, 0x73	; 115
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <f32_Integrator>
     1d0:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <f32_Integrator+0x1>
     1d4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <f32_Integrator+0x2>
     1d8:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <f32_Integrator+0x3>
     1dc:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     1e0:	4b 01       	movw	r8, r22
     1e2:	5c 01       	movw	r10, r24
     1e4:	29 ef       	ldi	r18, 0xF9	; 249
     1e6:	3f e0       	ldi	r19, 0x0F	; 15
     1e8:	49 e7       	ldi	r20, 0x79	; 121
     1ea:	5f e3       	ldi	r21, 0x3F	; 63
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     1f4:	9b 01       	movw	r18, r22
     1f6:	ac 01       	movw	r20, r24
     1f8:	c5 01       	movw	r24, r10
     1fa:	b4 01       	movw	r22, r8
     1fc:	0e 94 25 0c 	call	0x184a	; 0x184a <__addsf3>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	48 e4       	ldi	r20, 0x48	; 72
     206:	52 e4       	ldi	r21, 0x42	; 66
     208:	0e 94 25 0c 	call	0x184a	; 0x184a <__addsf3>
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     21c:	12 c0       	rjmp	.+36     	; 0x242 <controller+0x14e>
	
	}else if (ctrlType == PWM)
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	e8 12       	cpse	r14, r24
     222:	0f c0       	rjmp	.+30     	; 0x242 <controller+0x14e>
	{
		f32_DutyCycleCmd = (float)*u8_duty;
     224:	f8 01       	movw	r30, r16
     226:	60 81       	ld	r22, Z
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__floatunsisf>
     232:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     236:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     242:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     246:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     24a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     24e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4e eb       	ldi	r20, 0xBE	; 190
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__gesf2>
     262:	18 16       	cp	r1, r24
     264:	6c f4       	brge	.+26     	; 0x280 <controller+0x18c>
	{
		f32_DutyCycleCmd = 95;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	ae eb       	ldi	r26, 0xBE	; 190
     26c:	b2 e4       	ldi	r27, 0x42	; 66
     26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     272:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     276:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     27a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     27e:	16 c0       	rjmp	.+44     	; 0x2ac <controller+0x1b8>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	48 e4       	ldi	r20, 0x48	; 72
     286:	52 e4       	ldi	r21, 0x42	; 66
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
     290:	88 23       	and	r24, r24
     292:	64 f4       	brge	.+24     	; 0x2ac <controller+0x1b8>
	{
		f32_DutyCycleCmd = 50;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a8 e4       	ldi	r26, 0x48	; 72
     29a:	b2 e4       	ldi	r27, 0x42	; 66
     29c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
     2ac:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     2b0:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	48 ec       	ldi	r20, 0xC8	; 200
     2ba:	52 e4       	ldi	r21, 0x42	; 66
     2bc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2c0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2cc:	0e 94 8d 0c 	call	0x191a	; 0x191a <__divsf3>
     2d0:	6b 01       	movw	r12, r22
     2d2:	7c 01       	movw	r14, r24
     2d4:	be 01       	movw	r22, r28
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__floatunsisf>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     2ea:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fixsfsi>
     2ee:	e8 e9       	ldi	r30, 0x98	; 152
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	71 83       	std	Z+1, r23	; 0x01
     2f4:	60 83       	st	Z, r22
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
     2f6:	80 81       	ld	r24, Z
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     2fe:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
	}
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     302:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     306:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     30a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     30e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     312:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fixunssfsi>
     316:	f8 01       	movw	r30, r16
     318:	60 83       	st	Z, r22
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	bf 90       	pop	r11
     32c:	af 90       	pop	r10
     32e:	9f 90       	pop	r9
     330:	8f 90       	pop	r8
     332:	7f 90       	pop	r7
     334:	6f 90       	pop	r6
     336:	5f 90       	pop	r5
     338:	4f 90       	pop	r4
     33a:	08 95       	ret

0000033c <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     33c:	24 9a       	sbi	0x04, 4	; 4
     33e:	08 95       	ret

00000340 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state)
     340:	88 23       	and	r24, r24
     342:	11 f0       	breq	.+4      	; 0x348 <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     344:	2c 9a       	sbi	0x05, 4	; 5
     346:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     348:	2c 98       	cbi	0x05, 4	; 5
     34a:	08 95       	ret

0000034c <manage_motor>:
	}
}

void manage_motor(ModuleValues_t * vals)
{
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	ef 92       	push	r14
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
	switch(vals->motor_status)
     360:	8e 89       	ldd	r24, Y+22	; 0x16
     362:	82 30       	cpi	r24, 0x02	; 2
     364:	69 f0       	breq	.+26     	; 0x380 <manage_motor+0x34>
     366:	30 f4       	brcc	.+12     	; 0x374 <manage_motor+0x28>
     368:	88 23       	and	r24, r24
     36a:	09 f4       	brne	.+2      	; 0x36e <manage_motor+0x22>
     36c:	4c c0       	rjmp	.+152    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	11 f1       	breq	.+68     	; 0x3b6 <manage_motor+0x6a>
     372:	58 c0       	rjmp	.+176    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	a9 f1       	breq	.+106    	; 0x3e2 <manage_motor+0x96>
     378:	84 30       	cpi	r24, 0x04	; 4
     37a:	09 f4       	brne	.+2      	; 0x37e <manage_motor+0x32>
     37c:	4c c0       	rjmp	.+152    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     37e:	52 c0       	rjmp	.+164    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		case BRAKE :
			drivers(1); //drivers turn on
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	de df       	rcall	.-68     	; 0x340 <drivers>
			vals->b_driver_status = 1;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	8a 8f       	std	Y+26, r24	; 0x1a
			controller(-vals->u8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle,vals->ctrl_type); //negative throttle cmd
     388:	8e 01       	movw	r16, r28
     38a:	0d 5e       	subi	r16, 0xED	; 237
     38c:	1f 4f       	sbci	r17, 0xFF	; 255
     38e:	88 80       	ld	r8, Y
     390:	99 80       	ldd	r9, Y+1	; 0x01
     392:	aa 80       	ldd	r10, Y+2	; 0x02
     394:	bb 80       	ldd	r11, Y+3	; 0x03
     396:	6a 89       	ldd	r22, Y+18	; 0x12
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	71 95       	neg	r23
     39c:	61 95       	neg	r22
     39e:	71 09       	sbc	r23, r1
     3a0:	07 2e       	mov	r0, r23
     3a2:	00 0c       	add	r0, r0
     3a4:	88 0b       	sbc	r24, r24
     3a6:	99 0b       	sbc	r25, r25
     3a8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatsisf>
     3ac:	eb 8c       	ldd	r14, Y+27	; 0x1b
     3ae:	a5 01       	movw	r20, r10
     3b0:	94 01       	movw	r18, r8
		break;
		
		case ACCEL :
			drivers(1); //drivers turn on
     3b2:	a0 de       	rcall	.-704    	; 0xf4 <controller>
     3b4:	37 c0       	rjmp	.+110    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3b6:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     3b8:	c3 df       	rcall	.-122    	; 0x340 <drivers>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type);
     3bc:	8a 8f       	std	Y+26, r24	; 0x1a
     3be:	8e 01       	movw	r16, r28
     3c0:	0d 5e       	subi	r16, 0xED	; 237
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	88 80       	ld	r8, Y
     3c6:	99 80       	ldd	r9, Y+1	; 0x01
     3c8:	aa 80       	ldd	r10, Y+2	; 0x02
     3ca:	bb 80       	ldd	r11, Y+3	; 0x03
     3cc:	6a 89       	ldd	r22, Y+18	; 0x12
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__floatunsisf>
     3d8:	eb 8c       	ldd	r14, Y+27	; 0x1b
     3da:	a5 01       	movw	r20, r10
		break;
     3dc:	94 01       	movw	r18, r8
		
		case IDLE :
			drivers(1); //drivers turn on
     3de:	8a de       	rcall	.-748    	; 0xf4 <controller>
     3e0:	21 c0       	rjmp	.+66     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     3e4:	ad df       	rcall	.-166    	; 0x340 <drivers>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
			vals->u8_throttle_cmd = 0;
     3e8:	8a 8f       	std	Y+26, r24	; 0x1a
			controller(0, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type); //current law running with 0 torque 
     3ea:	1a 8a       	std	Y+18, r1	; 0x12
     3ec:	8e 01       	movw	r16, r28
     3ee:	0d 5e       	subi	r16, 0xED	; 237
     3f0:	1f 4f       	sbci	r17, 0xFF	; 255
     3f2:	28 81       	ld	r18, Y
     3f4:	39 81       	ldd	r19, Y+1	; 0x01
     3f6:	4a 81       	ldd	r20, Y+2	; 0x02
     3f8:	5b 81       	ldd	r21, Y+3	; 0x03
     3fa:	eb 8c       	ldd	r14, Y+27	; 0x1b
     3fc:	60 e0       	ldi	r22, 0x00	; 0
			//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
		break;
     3fe:	70 e0       	ldi	r23, 0x00	; 0
		
		case OFF : // drivers disabled
			drivers(0);//drivers shutdown
     400:	cb 01       	movw	r24, r22
     402:	78 de       	rcall	.-784    	; 0xf4 <controller>
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     404:	0f c0       	rjmp	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			vals->u8_throttle_cmd = 0;
     406:	80 e0       	ldi	r24, 0x00	; 0
			vals->u8_duty_cycle = 50;
     408:	9b df       	rcall	.-202    	; 0x340 <drivers>
     40a:	1a 8e       	std	Y+26, r1	; 0x1a
		break;
     40c:	6a de       	rcall	.-812    	; 0xe2 <reset_I>
		
		case ERR :
			drivers(0);//drivers shutdown
     40e:	1a 8a       	std	Y+18, r1	; 0x12
     410:	82 e3       	ldi	r24, 0x32	; 50
     412:	8b 8b       	std	Y+19, r24	; 0x13
			vals->b_driver_status = 0;
     414:	07 c0       	rjmp	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			reset_I(); //reset integrator
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	93 df       	rcall	.-218    	; 0x340 <drivers>
			vals->u8_throttle_cmd = 0;
     41a:	1a 8e       	std	Y+26, r1	; 0x1a
			vals->u8_duty_cycle = 50 ;
     41c:	62 de       	rcall	.-828    	; 0xe2 <reset_I>
     41e:	1a 8a       	std	Y+18, r1	; 0x12
		break;
	}
     420:	82 e3       	ldi	r24, 0x32	; 50
     422:	8b 8b       	std	Y+19, r24	; 0x13
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ef 90       	pop	r14
     42e:	bf 90       	pop	r11
     430:	af 90       	pop	r10
     432:	9f 90       	pop	r9
     434:	8f 90       	pop	r8
     436:	08 95       	ret

00000438 <SPI_handler_0>:
static uint8_t u8_rxBuffer[3];

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     43e:	60 e4       	ldi	r22, 0x40	; 64
     440:	71 e0       	ldi	r23, 0x01	; 1
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	40 d7       	rcall	.+3712   	; 0x12c6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     446:	21 e0       	ldi	r18, 0x01	; 1
     448:	43 e0       	ldi	r20, 0x03	; 3
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	6d e3       	ldi	r22, 0x3D	; 61
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	80 e4       	ldi	r24, 0x40	; 64
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 c4 0b 	call	0x1788	; 0x1788 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     458:	ed e3       	ldi	r30, 0x3D	; 61
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	61 81       	ldd	r22, Z+1	; 0x01
     45e:	6f 71       	andi	r22, 0x1F	; 31
     460:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg);
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	76 2f       	mov	r23, r22
     466:	66 27       	eor	r22, r22
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	68 2b       	or	r22, r24
     46c:	ce 01       	movw	r24, r28
     46e:	90 d5       	rcall	.+2848   	; 0xf90 <handle_current_sensor>
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     47c:	60 e4       	ldi	r22, 0x40	; 64
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	21 d7       	rcall	.+3650   	; 0x12c6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	43 e0       	ldi	r20, 0x03	; 3
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	6d e3       	ldi	r22, 0x3D	; 61
     48c:	71 e0       	ldi	r23, 0x01	; 1
     48e:	80 e4       	ldi	r24, 0x40	; 64
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 c4 0b 	call	0x1788	; 0x1788 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     496:	ed e3       	ldi	r30, 0x3D	; 61
     498:	f1 e0       	ldi	r31, 0x01	; 1
     49a:	61 81       	ldd	r22, Z+1	; 0x01
     49c:	6f 71       	andi	r22, 0x1F	; 31
     49e:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg);
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	76 2f       	mov	r23, r22
     4a4:	66 27       	eor	r22, r22
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	68 2b       	or	r22, r24
     4aa:	ce 01       	movw	r24, r28
     4ac:	71 d5       	rcall	.+2786   	; 0xf90 <handle_current_sensor>
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     4ba:	60 e4       	ldi	r22, 0x40	; 64
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	02 d7       	rcall	.+3588   	; 0x12c6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	43 e0       	ldi	r20, 0x03	; 3
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	6d e3       	ldi	r22, 0x3D	; 61
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	80 e4       	ldi	r24, 0x40	; 64
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4d4:	ed e3       	ldi	r30, 0x3D	; 61
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	61 81       	ldd	r22, Z+1	; 0x01
     4da:	6f 71       	andi	r22, 0x1F	; 31
     4dc:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	76 2f       	mov	r23, r22
     4e2:	66 27       	eor	r22, r22
     4e4:	82 81       	ldd	r24, Z+2	; 0x02
     4e6:	68 2b       	or	r22, r24
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__floatunsisf>
     4f0:	23 e3       	ldi	r18, 0x33	; 51
     4f2:	33 e3       	ldi	r19, 0x33	; 51
     4f4:	44 e8       	ldi	r20, 0x84	; 132
     4f6:	52 e4       	ldi	r21, 0x42	; 66
     4f8:	0e 94 8d 0c 	call	0x191a	; 0x191a <__divsf3>
     4fc:	24 ea       	ldi	r18, 0xA4	; 164
     4fe:	30 e7       	ldi	r19, 0x70	; 112
     500:	4d eb       	ldi	r20, 0xBD	; 189
     502:	5e e3       	ldi	r21, 0x3E	; 62
     504:	0e 94 24 0c 	call	0x1848	; 0x1848 <__subsf3>
     508:	68 83       	st	Y, r22
     50a:	79 83       	std	Y+1, r23	; 0x01
     50c:	8a 83       	std	Y+2, r24	; 0x02
     50e:	9b 83       	std	Y+3, r25	; 0x03
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     51c:	60 e4       	ldi	r22, 0x40	; 64
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	d1 d6       	rcall	.+3490   	; 0x12c6 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     524:	21 e0       	ldi	r18, 0x01	; 1
     526:	43 e0       	ldi	r20, 0x03	; 3
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	6d e3       	ldi	r22, 0x3D	; 61
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	80 e4       	ldi	r24, 0x40	; 64
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 c4 0b 	call	0x1788	; 0x1788 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     536:	ed e3       	ldi	r30, 0x3D	; 61
     538:	f1 e0       	ldi	r31, 0x01	; 1
     53a:	61 81       	ldd	r22, Z+1	; 0x01
     53c:	6f 71       	andi	r22, 0x1F	; 31
     53e:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	76 2f       	mov	r23, r22
     544:	66 27       	eor	r22, r22
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	68 2b       	or	r22, r24
     54a:	ce 01       	movw	r24, r28
     54c:	91 d5       	rcall	.+2850   	; 0x1070 <handle_temp_sensor>
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <handle_can>:

///////////////////////  CAN  /////////////////////////


//receiving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	8c 01       	movw	r16, r24
     55e:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx) && vals->motor_status != ERR){
     560:	cb 01       	movw	r24, r22
     562:	0e 94 df 0a 	call	0x15be	; 0x15be <can_read_message_if_new>
     566:	88 23       	and	r24, r24
     568:	e9 f1       	breq	.+122    	; 0x5e4 <handle_can+0x90>
     56a:	f8 01       	movw	r30, r16
     56c:	86 89       	ldd	r24, Z+22	; 0x16
     56e:	84 30       	cpi	r24, 0x04	; 4
     570:	c9 f1       	breq	.+114    	; 0x5e4 <handle_can+0x90>
		switch (rx->id){
     572:	88 81       	ld	r24, Y
     574:	99 81       	ldd	r25, Y+1	; 0x01
     576:	80 33       	cpi	r24, 0x30	; 48
     578:	92 40       	sbci	r25, 0x02	; 2
     57a:	a1 f5       	brne	.+104    	; 0x5e4 <handle_can+0x90>
			case STEERING_WHEEL_CAN_ID	: //receiving can messages from the steering wheel
				
				vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ; // resetting to max value each time a message is received.
     57c:	84 e1       	ldi	r24, 0x14	; 20
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	f8 01       	movw	r30, r16
     582:	95 8b       	std	Z+21, r25	; 0x15
     584:	84 8b       	std	Z+20, r24	; 0x14

				if (rx->data.u8[3] > 10)
     586:	8e 81       	ldd	r24, Y+6	; 0x06
     588:	8b 30       	cpi	r24, 0x0B	; 11
     58a:	98 f0       	brcs	.+38     	; 0x5b2 <handle_can+0x5e>
				{
					vals->motor_status = ACCEL ;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = rx->data.u8[3]/10.0 ;
     590:	6e 81       	ldd	r22, Y+6	; 0x06
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatsisf>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e2       	ldi	r20, 0x20	; 32
     5a2:	51 e4       	ldi	r21, 0x41	; 65
     5a4:	0e 94 8d 0c 	call	0x191a	; 0x191a <__divsf3>
     5a8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fixunssfsi>
     5ac:	f8 01       	movw	r30, r16
     5ae:	62 8b       	std	Z+18, r22	; 0x12
     5b0:	19 c0       	rjmp	.+50     	; 0x5e4 <handle_can+0x90>
				} else {
					vals->motor_status = IDLE ;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	f8 01       	movw	r30, r16
     5b6:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = 0;
     5b8:	12 8a       	std	Z+18, r1	; 0x12
				}
				
				if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	8a 31       	cpi	r24, 0x1A	; 26
     5be:	90 f0       	brcs	.+36     	; 0x5e4 <handle_can+0x90>
				{
					vals->motor_status = BRAKE ;
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     5c4:	6d 81       	ldd	r22, Y+5	; 0x05
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatsisf>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e2       	ldi	r20, 0x20	; 32
     5d6:	51 e4       	ldi	r21, 0x41	; 65
     5d8:	0e 94 8d 0c 	call	0x191a	; 0x191a <__divsf3>
     5dc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fixunssfsi>
     5e0:	f8 01       	movw	r30, r16
     5e2:	62 8b       	std	Z+18, r22	; 0x12
				}
			break;
		}
	}
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
	
	txFrame.id = MOTOR_CAN_ID;
     5fa:	e3 ee       	ldi	r30, 0xE3	; 227
     5fc:	f2 e0       	ldi	r31, 0x02	; 2
     5fe:	20 e5       	ldi	r18, 0x50	; 80
     600:	34 e0       	ldi	r19, 0x04	; 4
     602:	31 83       	std	Z+1, r19	; 0x01
     604:	20 83       	st	Z, r18
	txFrame.length = 8;
     606:	28 e0       	ldi	r18, 0x08	; 8
     608:	22 83       	std	Z+2, r18	; 0x02
	
	if(*send){
     60a:	fc 01       	movw	r30, r24
     60c:	20 81       	ld	r18, Z
     60e:	22 23       	and	r18, r18
     610:	61 f1       	breq	.+88     	; 0x66a <handle_motor_status_can_msg+0x7c>
     612:	eb 01       	movw	r28, r22
     614:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     616:	0f 2e       	mov	r0, r31
     618:	f3 ee       	ldi	r31, 0xE3	; 227
     61a:	ef 2e       	mov	r14, r31
     61c:	f2 e0       	ldi	r31, 0x02	; 2
     61e:	ff 2e       	mov	r15, r31
     620:	f0 2d       	mov	r31, r0
     622:	8e 89       	ldd	r24, Y+22	; 0x16
     624:	f7 01       	movw	r30, r14
     626:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = 0;
     628:	14 82       	std	Z+4, r1	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     62a:	68 81       	ld	r22, Y
     62c:	79 81       	ldd	r23, Y+1	; 0x01
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fixunssfsi>
     636:	f7 01       	movw	r30, r14
     638:	76 83       	std	Z+6, r23	; 0x06
     63a:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = (uint16_t)(vals->f32_energy*1000) ;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	4a e7       	ldi	r20, 0x7A	; 122
     642:	54 e4       	ldi	r21, 0x44	; 68
     644:	6c 85       	ldd	r22, Y+12	; 0x0c
     646:	7d 85       	ldd	r23, Y+13	; 0x0d
     648:	8e 85       	ldd	r24, Y+14	; 0x0e
     64a:	9f 85       	ldd	r25, Y+15	; 0x0f
     64c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     650:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fixunssfsi>
     654:	f7 01       	movw	r30, r14
     656:	70 87       	std	Z+8, r23	; 0x08
     658:	67 83       	std	Z+7, r22	; 0x07
		txFrame.data.u16[3] = (uint16_t)(vals->u8_car_speed) ;
     65a:	89 89       	ldd	r24, Y+17	; 0x11
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	92 87       	std	Z+10, r25	; 0x0a
     660:	81 87       	std	Z+9, r24	; 0x09
		
		can_send_message(&txFrame);
     662:	c7 01       	movw	r24, r14
     664:	ef d7       	rcall	.+4062   	; 0x1644 <can_send_message>
		*send = 0;
     666:	f8 01       	movw	r30, r16
     668:	10 82       	st	Z, r1
	}
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	08 95       	ret

00000678 <receive_uart>:

///////////////////  UART  ////////////////////

//receiving 
void receive_uart(ModuleValues_t * vals)
{
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <receive_uart+0xa>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	fc 01       	movw	r30, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     688:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <rx0_Head>
     68c:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <rx0_Tail>
	if(uart_AvailableBytes()!=0 && vals->motor_status != ERR){
     690:	92 1b       	sub	r25, r18
     692:	9f 71       	andi	r25, 0x1F	; 31
     694:	d9 f1       	breq	.+118    	; 0x70c <receive_uart+0x94>
     696:	86 89       	ldd	r24, Z+22	; 0x16
     698:	84 30       	cpi	r24, 0x04	; 4
     69a:	c1 f1       	breq	.+112    	; 0x70c <receive_uart+0x94>
		volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     69c:	8f 01       	movw	r16, r30
     69e:	2b d2       	rcall	.+1110   	; 0xaf6 <uart0_getint>
		uart_flush();
     6a0:	9a 83       	std	Y+2, r25	; 0x02
     6a2:	89 83       	std	Y+1, r24	; 0x01
		if (vals->ctrl_type == CURRENT)
     6a4:	ad d1       	rcall	.+858    	; 0xa00 <uart0_flush>
     6a6:	f8 01       	movw	r30, r16
     6a8:	83 8d       	ldd	r24, Z+27	; 0x1b
     6aa:	81 11       	cpse	r24, r1
		{
			if (u16_data_received >10 && u16_data_received <= 20)
     6ac:	27 c0       	rjmp	.+78     	; 0x6fc <receive_uart+0x84>
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	0b 97       	sbiw	r24, 0x0b	; 11
     6b4:	50 f0       	brcs	.+20     	; 0x6ca <receive_uart+0x52>
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	45 97       	sbiw	r24, 0x15	; 21
			{
				vals->u8_throttle_cmd = u16_data_received-10 ;
     6bc:	30 f4       	brcc	.+12     	; 0x6ca <receive_uart+0x52>
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	8a 50       	subi	r24, 0x0A	; 10
				vals->motor_status = BRAKE ;
     6c4:	82 8b       	std	Z+18, r24	; 0x12
     6c6:	82 e0       	ldi	r24, 0x02	; 2
			}
			if (u16_data_received>0 && u16_data_received <= 10)
     6c8:	86 8b       	std	Z+22, r24	; 0x16
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	89 2b       	or	r24, r25
     6d0:	51 f0       	breq	.+20     	; 0x6e6 <receive_uart+0x6e>
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	0b 97       	sbiw	r24, 0x0b	; 11
			{
				vals->u8_throttle_cmd = u16_data_received ;
     6d8:	30 f4       	brcc	.+12     	; 0x6e6 <receive_uart+0x6e>
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	f8 01       	movw	r30, r16
				vals->motor_status = ACCEL;
     6e0:	82 8b       	std	Z+18, r24	; 0x12
     6e2:	81 e0       	ldi	r24, 0x01	; 1
			}
			if (u16_data_received == 0)
     6e4:	86 8b       	std	Z+22, r24	; 0x16
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	89 2b       	or	r24, r25
			{
				vals->u8_throttle_cmd = u16_data_received ;
     6ec:	79 f4       	brne	.+30     	; 0x70c <receive_uart+0x94>
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	9a 81       	ldd	r25, Y+2	; 0x02
     6f2:	f8 01       	movw	r30, r16
				vals->motor_status = IDLE;
     6f4:	82 8b       	std	Z+18, r24	; 0x12
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	86 8b       	std	Z+22, r24	; 0x16
			}
		}else if (vals->ctrl_type == PWM)
     6fa:	08 c0       	rjmp	.+16     	; 0x70c <receive_uart+0x94>
     6fc:	81 30       	cpi	r24, 0x01	; 1
		{
			vals->u8_duty_cycle = u16_data_received;
     6fe:	31 f4       	brne	.+12     	; 0x70c <receive_uart+0x94>
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	f8 01       	movw	r30, r16
			vals->motor_status = ACCEL;
     706:	83 8b       	std	Z+19, r24	; 0x13
     708:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     70a:	86 8b       	std	Z+22, r24	; 0x16
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(ModuleValues_t vals)
{
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	fa 8c       	ldd	r15, Y+26	; 0x1a
// 	printf(",");
// 	printf("%u",(uint16_t)(vals.f32_batt_volt*1000));
// 	printf(",");
// 	printf("%u",vals.u8_car_speed);
// 	printf(",");
	printf("%u",(uint16_t)(vals.f32_batt_volt)*100);
     72a:	68 89       	ldd	r22, Y+16	; 0x10
     72c:	79 89       	ldd	r23, Y+17	; 0x11
     72e:	8a 89       	ldd	r24, Y+18	; 0x12
     730:	9b 89       	ldd	r25, Y+19	; 0x13
     732:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fixunssfsi>
     736:	24 e6       	ldi	r18, 0x64	; 100
     738:	26 9f       	mul	r18, r22
     73a:	a0 01       	movw	r20, r0
     73c:	27 9f       	mul	r18, r23
     73e:	50 0d       	add	r21, r0
     740:	11 24       	eor	r1, r1
     742:	5f 93       	push	r21
     744:	4f 93       	push	r20
     746:	0e e2       	ldi	r16, 0x2E	; 46
     748:	11 e0       	ldi	r17, 0x01	; 1
     74a:	1f 93       	push	r17
     74c:	0f 93       	push	r16
     74e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <printf>
 	printf(",");
     752:	8c e2       	ldi	r24, 0x2C	; 44
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <putchar>
 	printf("%u",vals.u8_duty_cycle*10);
     75a:	2b 8d       	ldd	r18, Y+27	; 0x1b
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	c9 01       	movw	r24, r18
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	1f 93       	push	r17
     77a:	0f 93       	push	r16
     77c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <printf>
 	printf(",");
     780:	8c e2       	ldi	r24, 0x2C	; 44
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <putchar>
// 	printf("%u",vals.u8_motor_temp);
// 	printf(",");
 	if (vals.motor_status == BRAKE)
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	8e 8d       	ldd	r24, Y+30	; 0x1e
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	a1 f4       	brne	.+40     	; 0x7c0 <send_uart+0xa6>
 	{
 		printf("%i",-vals.u8_throttle_cmd*1000);
     798:	28 e1       	ldi	r18, 0x18	; 24
     79a:	3c ef       	ldi	r19, 0xFC	; 252
     79c:	f2 9e       	mul	r15, r18
     79e:	c0 01       	movw	r24, r0
     7a0:	f3 9e       	mul	r15, r19
     7a2:	90 0d       	add	r25, r0
     7a4:	11 24       	eor	r1, r1
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	81 e3       	ldi	r24, 0x31	; 49
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	9f 93       	push	r25
     7b0:	8f 93       	push	r24
     7b2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <printf>
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	13 c0       	rjmp	.+38     	; 0x7e6 <send_uart+0xcc>
 	}else
 	{
 		printf("%i",vals.u8_throttle_cmd*1000);
     7c0:	28 ee       	ldi	r18, 0xE8	; 232
     7c2:	33 e0       	ldi	r19, 0x03	; 3
     7c4:	f2 9e       	mul	r15, r18
     7c6:	c0 01       	movw	r24, r0
     7c8:	f3 9e       	mul	r15, r19
     7ca:	90 0d       	add	r25, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	81 e3       	ldi	r24, 0x31	; 49
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <printf>
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
 	}
	printf(",");
     7e6:	8c e2       	ldi	r24, 0x2C	; 44
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <putchar>
	printf("%i",(int16_t)(vals.f32_motor_current*1000));
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	4a e7       	ldi	r20, 0x7A	; 122
     7f4:	54 e4       	ldi	r21, 0x44	; 68
     7f6:	68 85       	ldd	r22, Y+8	; 0x08
     7f8:	79 85       	ldd	r23, Y+9	; 0x09
     7fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     7fc:	9b 85       	ldd	r25, Y+11	; 0x0b
     7fe:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     802:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fixsfsi>
     806:	7f 93       	push	r23
     808:	6f 93       	push	r22
     80a:	81 e3       	ldi	r24, 0x31	; 49
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <printf>
	printf("\n");
     816:	8a e0       	ldi	r24, 0x0A	; 10
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <putchar>
}
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	08 95       	ret

00000832 <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(ModuleValues_t vals)
{	
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     83a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	c9 f0       	breq	.+50     	; 0x872 <manage_LEDs+0x40>
     840:	28 f4       	brcc	.+10     	; 0x84c <manage_LEDs+0x1a>
     842:	88 23       	and	r24, r24
     844:	41 f0       	breq	.+16     	; 0x856 <manage_LEDs+0x24>
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	69 f0       	breq	.+26     	; 0x864 <manage_LEDs+0x32>
     84a:	27 c0       	rjmp	.+78     	; 0x89a <manage_LEDs+0x68>
     84c:	83 30       	cpi	r24, 0x03	; 3
     84e:	c1 f0       	breq	.+48     	; 0x880 <manage_LEDs+0x4e>
     850:	84 30       	cpi	r24, 0x04	; 4
     852:	e9 f0       	breq	.+58     	; 0x88e <manage_LEDs+0x5c>
     854:	22 c0       	rjmp	.+68     	; 0x89a <manage_LEDs+0x68>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     856:	80 e4       	ldi	r24, 0x40	; 64
			rgbled_turn_off(LED_RED);
     858:	73 d7       	rcall	.+3814   	; 0x1740 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     85a:	80 e2       	ldi	r24, 0x20	; 32
     85c:	71 d7       	rcall	.+3810   	; 0x1740 <rgbled_turn_off>
		break ;
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     85e:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     860:	79 d7       	rcall	.+3826   	; 0x1754 <rgbled_turn_on>
     862:	1b c0       	rjmp	.+54     	; 0x89a <manage_LEDs+0x68>
			rgbled_toggle(LED_GREEN);
     864:	80 e2       	ldi	r24, 0x20	; 32
		break;
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     866:	6c d7       	rcall	.+3800   	; 0x1740 <rgbled_turn_off>
     868:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     86a:	6a d7       	rcall	.+3796   	; 0x1740 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     86c:	80 e4       	ldi	r24, 0x40	; 64
		break;
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     86e:	77 d7       	rcall	.+3822   	; 0x175e <rgbled_toggle>
			rgbled_turn_off(LED_BLUE);
     870:	14 c0       	rjmp	.+40     	; 0x89a <manage_LEDs+0x68>
     872:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_on(LED_GREEN);
     874:	65 d7       	rcall	.+3786   	; 0x1740 <rgbled_turn_off>
     876:	80 e8       	ldi	r24, 0x80	; 128
     878:	63 d7       	rcall	.+3782   	; 0x1740 <rgbled_turn_off>
		break;
     87a:	80 e4       	ldi	r24, 0x40	; 64
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     87c:	70 d7       	rcall	.+3808   	; 0x175e <rgbled_toggle>
     87e:	0d c0       	rjmp	.+26     	; 0x89a <manage_LEDs+0x68>
     880:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_off(LED_BLUE);
     882:	5e d7       	rcall	.+3772   	; 0x1740 <rgbled_turn_off>
     884:	80 e8       	ldi	r24, 0x80	; 128
     886:	5c d7       	rcall	.+3768   	; 0x1740 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     888:	80 e4       	ldi	r24, 0x40	; 64
     88a:	64 d7       	rcall	.+3784   	; 0x1754 <rgbled_turn_on>
     88c:	06 c0       	rjmp	.+12     	; 0x89a <manage_LEDs+0x68>
		break;
	}
     88e:	80 e4       	ldi	r24, 0x40	; 64
     890:	57 d7       	rcall	.+3758   	; 0x1740 <rgbled_turn_off>
     892:	80 e8       	ldi	r24, 0x80	; 128
     894:	55 d7       	rcall	.+3754   	; 0x1740 <rgbled_turn_off>
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	5d d7       	rcall	.+3770   	; 0x1754 <rgbled_turn_on>
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     8a0:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     8a2:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     8a4:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     8a6:	ea e6       	ldi	r30, 0x6A	; 106
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	8c 60       	ori	r24, 0x0C	; 12
     8ae:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     8b0:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     8b2:	ed 9a       	sbi	0x1d, 5	; 29
     8b4:	08 95       	ret

000008b6 <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint16_t u16_period) // period in ms
{
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	1f 92       	push	r1
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	6c 01       	movw	r12, r24
     8d6:	7b 01       	movw	r14, r22
     8d8:	8a 01       	movw	r16, r20
	volatile uint8_t u8_new_speed = (uint8_t)(((float)*u16_counter)*D_WHEEL*PI/N_MAG/u16_period); // speed calculated in mm/ms
     8da:	fb 01       	movw	r30, r22
     8dc:	60 81       	ld	r22, Z
     8de:	71 81       	ldd	r23, Z+1	; 0x01
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__floatunsisf>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	4a ef       	ldi	r20, 0xFA	; 250
     8ee:	53 e4       	ldi	r21, 0x43	; 67
     8f0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     8f4:	23 ec       	ldi	r18, 0xC3	; 195
     8f6:	35 ef       	ldi	r19, 0xF5	; 245
     8f8:	48 e4       	ldi	r20, 0x48	; 72
     8fa:	50 e4       	ldi	r21, 0x40	; 64
     8fc:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     900:	4b 01       	movw	r8, r22
     902:	5c 01       	movw	r10, r24
     904:	b8 01       	movw	r22, r16
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__floatunsisf>
     90e:	9b 01       	movw	r18, r22
     910:	ac 01       	movw	r20, r24
     912:	c5 01       	movw	r24, r10
     914:	b4 01       	movw	r22, r8
     916:	0e 94 8d 0c 	call	0x191a	; 0x191a <__divsf3>
     91a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fixunssfsi>
     91e:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	f6 01       	movw	r30, r12
     924:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     926:	f7 01       	movw	r30, r14
     928:	11 82       	std	Z+1, r1	; 0x01
     92a:	10 82       	st	Z, r1
}
     92c:	0f 90       	pop	r0
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	af 90       	pop	r10
     942:	9f 90       	pop	r9
     944:	8f 90       	pop	r8
     946:	08 95       	ret

00000948 <pwm_init>:
#include <avr/io.h>

void pwm_init(void){
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     948:	8e b1       	in	r24, 0x0e	; 14
     94a:	87 7e       	andi	r24, 0xE7	; 231
     94c:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     94e:	8d b1       	in	r24, 0x0d	; 13
     950:	88 61       	ori	r24, 0x18	; 24
     952:	8d b9       	out	0x0d, r24	; 13
	
	if (SW_MODE == BIPOLAR)
	{
		//Timer 3 fast pwm, mode 14, TOP at ICR
		TCCR3B |= (1<<WGM33)|(1<<WGM32);
     954:	a1 e9       	ldi	r26, 0x91	; 145
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	8c 91       	ld	r24, X
     95a:	88 61       	ori	r24, 0x18	; 24
     95c:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     95e:	e0 e9       	ldi	r30, 0x90	; 144
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	82 60       	ori	r24, 0x02	; 2
     966:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     968:	80 81       	ld	r24, Z
     96a:	8e 7f       	andi	r24, 0xFE	; 254
     96c:	80 83       	st	Z, r24
		
		// Non inverted PWM for A
		TCCR3A |= (1<<COM3A1);
     96e:	80 81       	ld	r24, Z
     970:	80 68       	ori	r24, 0x80	; 128
     972:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     974:	80 81       	ld	r24, Z
     976:	8f 7b       	andi	r24, 0xBF	; 191
     978:	80 83       	st	Z, r24
		
		// Inverted PWM for B
		TCCR3A |= (1<<COM3B1);
     97a:	80 81       	ld	r24, Z
     97c:	80 62       	ori	r24, 0x20	; 32
     97e:	80 83       	st	Z, r24
		TCCR3A |= (1<<COM3B0);
     980:	80 81       	ld	r24, Z
     982:	80 61       	ori	r24, 0x10	; 16
     984:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		
		TCCR3B |= (1<<CS30);
     986:	8c 91       	ld	r24, X
     988:	81 60       	ori	r24, 0x01	; 1
     98a:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     98c:	8c 91       	ld	r24, X
     98e:	89 7f       	andi	r24, 0xF9	; 249
     990:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x199; //20kHz
     992:	e6 e9       	ldi	r30, 0x96	; 150
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	89 e9       	ldi	r24, 0x99	; 153
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
		
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3 (non inverted)
     99e:	60 81       	ld	r22, Z
     9a0:	71 81       	ldd	r23, Z+1	; 0x01
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__floatunsisf>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	5f e3       	ldi	r21, 0x3F	; 63
     9b2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     9b6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fixsfsi>
     9ba:	e8 e9       	ldi	r30, 0x98	; 152
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	71 83       	std	Z+1, r23	; 0x01
     9c0:	60 83       	st	Z, r22
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     9ca:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     9ce:	08 95       	ret

000009d0 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     9d0:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <tx0_Head>
     9d4:	9f 5f       	subi	r25, 0xFF	; 255
     9d6:	9f 71       	andi	r25, 0x1F	; 31
     9d8:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <tx0_Tail>
     9dc:	92 17       	cp	r25, r18
     9de:	e1 f3       	breq	.-8      	; 0x9d8 <uart0_putc+0x8>
     9e0:	e9 2f       	mov	r30, r25
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	ea 5a       	subi	r30, 0xAA	; 170
     9e6:	fc 4f       	sbci	r31, 0xFC	; 252
     9e8:	80 83       	st	Z, r24
     9ea:	2f b7       	in	r18, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <tx0_Head>
     9f2:	e1 ec       	ldi	r30, 0xC1	; 193
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	80 62       	ori	r24, 0x20	; 32
     9fa:	80 83       	st	Z, r24
     9fc:	2f bf       	out	0x3f, r18	; 63
     9fe:	08 95       	ret

00000a00 <uart0_flush>:
     a00:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <tx0_Tail>
     a04:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <tx0_Head>
     a08:	98 13       	cpse	r25, r24
     a0a:	fa cf       	rjmp	.-12     	; 0xa00 <uart0_flush>
     a0c:	08 95       	ret

00000a0e <uart1_putc>:
     a0e:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <tx1_Head>
     a12:	9f 5f       	subi	r25, 0xFF	; 255
     a14:	9f 71       	andi	r25, 0x1F	; 31
     a16:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <tx1_Tail>
     a1a:	92 17       	cp	r25, r18
     a1c:	e1 f3       	breq	.-8      	; 0xa16 <uart1_putc+0x8>
     a1e:	e9 2f       	mov	r30, r25
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	ef 5e       	subi	r30, 0xEF	; 239
     a24:	fc 4f       	sbci	r31, 0xFC	; 252
     a26:	80 83       	st	Z, r24
     a28:	2f b7       	in	r18, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <tx1_Head>
     a30:	e9 ec       	ldi	r30, 0xC9	; 201
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	80 62       	ori	r24, 0x20	; 32
     a38:	80 83       	st	Z, r24
     a3a:	2f bf       	out	0x3f, r18	; 63
     a3c:	08 95       	ret

00000a3e <uart_putchar>:
     a3e:	cf 93       	push	r28
     a40:	c8 2f       	mov	r28, r24
     a42:	fb 01       	movw	r30, r22
     a44:	84 85       	ldd	r24, Z+12	; 0x0c
     a46:	95 85       	ldd	r25, Z+13	; 0x0d
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	39 f0       	breq	.+14     	; 0xa5a <uart_putchar+0x1c>
     a4c:	ca 30       	cpi	r28, 0x0A	; 10
     a4e:	11 f4       	brne	.+4      	; 0xa54 <uart_putchar+0x16>
     a50:	8d e0       	ldi	r24, 0x0D	; 13
     a52:	be df       	rcall	.-132    	; 0x9d0 <uart0_putc>
     a54:	8c 2f       	mov	r24, r28
     a56:	bc df       	rcall	.-136    	; 0x9d0 <uart0_putc>
     a58:	06 c0       	rjmp	.+12     	; 0xa66 <uart_putchar+0x28>
     a5a:	ca 30       	cpi	r28, 0x0A	; 10
     a5c:	11 f4       	brne	.+4      	; 0xa62 <uart_putchar+0x24>
     a5e:	8d e0       	ldi	r24, 0x0D	; 13
     a60:	d6 df       	rcall	.-84     	; 0xa0e <uart1_putc>
     a62:	8c 2f       	mov	r24, r28
     a64:	d4 df       	rcall	.-88     	; 0xa0e <uart1_putc>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <uart0_getc>:
     a6e:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <rx0_Tail>
     a72:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <rx0_Head>
     a76:	89 17       	cp	r24, r25
     a78:	59 f0       	breq	.+22     	; 0xa90 <uart0_getc+0x22>
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	98 2f       	mov	r25, r24
     a7e:	9f 71       	andi	r25, 0x1F	; 31
     a80:	e9 2f       	mov	r30, r25
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	e2 51       	subi	r30, 0x12	; 18
     a86:	fd 4f       	sbci	r31, 0xFD	; 253
     a88:	80 81       	ld	r24, Z
     a8a:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <rx0_Tail>
     a8e:	08 95       	ret
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret

00000a94 <uart0_getlnToFirstWhiteSpace>:
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	7c 01       	movw	r14, r24
     aa2:	16 2f       	mov	r17, r22
     aa4:	e4 df       	rcall	.-56     	; 0xa6e <uart0_getc>
     aa6:	f7 01       	movw	r30, r14
     aa8:	80 83       	st	Z, r24
     aaa:	81 32       	cpi	r24, 0x21	; 33
     aac:	d8 f3       	brcs	.-10     	; 0xaa4 <uart0_getlnToFirstWhiteSpace+0x10>
     aae:	e7 01       	movw	r28, r14
     ab0:	21 96       	adiw	r28, 0x01	; 1
     ab2:	12 30       	cpi	r17, 0x02	; 2
     ab4:	c1 f0       	breq	.+48     	; 0xae6 <uart0_getlnToFirstWhiteSpace+0x52>
     ab6:	13 50       	subi	r17, 0x03	; 3
     ab8:	81 2f       	mov	r24, r17
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 96       	adiw	r24, 0x02	; 2
     abe:	87 01       	movw	r16, r14
     ac0:	08 0f       	add	r16, r24
     ac2:	19 1f       	adc	r17, r25
     ac4:	d4 df       	rcall	.-88     	; 0xa6e <uart0_getc>
     ac6:	88 83       	st	Y, r24
     ac8:	88 23       	and	r24, r24
     aca:	e1 f3       	breq	.-8      	; 0xac4 <uart0_getlnToFirstWhiteSpace+0x30>
     acc:	8d 30       	cpi	r24, 0x0D	; 13
     ace:	21 f4       	brne	.+8      	; 0xad8 <uart0_getlnToFirstWhiteSpace+0x44>
     ad0:	ce df       	rcall	.-100    	; 0xa6e <uart0_getc>
     ad2:	88 23       	and	r24, r24
     ad4:	e9 f3       	breq	.-6      	; 0xad0 <uart0_getlnToFirstWhiteSpace+0x3c>
     ad6:	07 c0       	rjmp	.+14     	; 0xae6 <uart0_getlnToFirstWhiteSpace+0x52>
     ad8:	81 32       	cpi	r24, 0x21	; 33
     ada:	28 f0       	brcs	.+10     	; 0xae6 <uart0_getlnToFirstWhiteSpace+0x52>
     adc:	21 96       	adiw	r28, 0x01	; 1
     ade:	0c 17       	cp	r16, r28
     ae0:	1d 07       	cpc	r17, r29
     ae2:	81 f7       	brne	.-32     	; 0xac4 <uart0_getlnToFirstWhiteSpace+0x30>
     ae4:	e8 01       	movw	r28, r16
     ae6:	18 82       	st	Y, r1
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	08 95       	ret

00000af6 <uart0_getint>:
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	27 97       	sbiw	r28, 0x07	; 7
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	67 e0       	ldi	r22, 0x07	; 7
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	c1 df       	rcall	.-126    	; 0xa94 <uart0_getlnToFirstWhiteSpace>
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <atoi>
     b1a:	27 96       	adiw	r28, 0x07	; 7
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <uart0_getData>:
     b2c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <rx0_Tail>
     b30:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <rx0_Head>
     b34:	89 17       	cp	r24, r25
     b36:	61 f0       	breq	.+24     	; 0xb50 <uart0_getData+0x24>
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	8f 71       	andi	r24, 0x1F	; 31
     b3c:	e8 2f       	mov	r30, r24
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	e2 51       	subi	r30, 0x12	; 18
     b42:	fd 4f       	sbci	r31, 0xFD	; 253
     b44:	90 81       	ld	r25, Z
     b46:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <rx0_Tail>
     b4a:	89 2f       	mov	r24, r25
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	08 95       	ret
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	9f ef       	ldi	r25, 0xFF	; 255
     b54:	08 95       	ret

00000b56 <uart1_getData>:
     b56:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <rx1_Tail>
     b5a:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <rx1_Head>
     b5e:	89 17       	cp	r24, r25
     b60:	61 f0       	breq	.+24     	; 0xb7a <uart1_getData+0x24>
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	8f 71       	andi	r24, 0x1F	; 31
     b66:	e8 2f       	mov	r30, r24
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	ee 5c       	subi	r30, 0xCE	; 206
     b6c:	fc 4f       	sbci	r31, 0xFC	; 252
     b6e:	90 81       	ld	r25, Z
     b70:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <rx1_Tail>
     b74:	89 2f       	mov	r24, r25
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	08 95       	ret
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	08 95       	ret

00000b80 <uart_getchar>:
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	fc 01       	movw	r30, r24
     b86:	84 85       	ldd	r24, Z+12	; 0x0c
     b88:	95 85       	ldd	r25, Z+13	; 0x0d
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	41 f0       	breq	.+16     	; 0xb9e <uart_getchar+0x1e>
     b8e:	ce df       	rcall	.-100    	; 0xb2c <uart0_getData>
     b90:	ec 01       	movw	r28, r24
     b92:	99 23       	and	r25, r25
     b94:	e4 f3       	brlt	.-8      	; 0xb8e <uart_getchar+0xe>
     b96:	1c df       	rcall	.-456    	; 0x9d0 <uart0_putc>
     b98:	ce 01       	movw	r24, r28
     b9a:	99 27       	eor	r25, r25
     b9c:	07 c0       	rjmp	.+14     	; 0xbac <uart_getchar+0x2c>
     b9e:	db df       	rcall	.-74     	; 0xb56 <uart1_getData>
     ba0:	ec 01       	movw	r28, r24
     ba2:	99 23       	and	r25, r25
     ba4:	e4 f3       	brlt	.-8      	; 0xb9e <uart_getchar+0x1e>
     ba6:	33 df       	rcall	.-410    	; 0xa0e <uart1_putc>
     ba8:	ce 01       	movw	r24, r28
     baa:	99 27       	eor	r25, r25
     bac:	99 27       	eor	r25, r25
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     bb4:	0f 93       	push	r16
     bb6:	0f b7       	in	r16, 0x3f	; 63
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
     bbc:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <tx0_Tail>
     bc0:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <tx0_Head>
     bc4:	e3 95       	inc	r30
     bc6:	ef 71       	andi	r30, 0x1F	; 31
     bc8:	ef 13       	cpse	r30, r31
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <USART0_TX_CONTINUE>
     bcc:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     bd0:	ff 7d       	andi	r31, 0xDF	; 223
     bd2:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000bd6 <USART0_TX_CONTINUE>:
     bd6:	e0 93 0f 03 	sts	0x030F, r30	; 0x80030f <tx0_Tail>
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	ea 5a       	subi	r30, 0xAA	; 170
     bde:	fc 4f       	sbci	r31, 0xFC	; 252
     be0:	e0 81       	ld	r30, Z
     be2:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000be6 <USART0_TX_EXIT>:
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	0f bf       	out	0x3f, r16	; 63
     bec:	0f 91       	pop	r16
     bee:	18 95       	reti

00000bf0 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     bf0:	0f 93       	push	r16
     bf2:	0f b7       	in	r16, 0x3f	; 63
     bf4:	9f 93       	push	r25
     bf6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <rx0_Head>
     c02:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <rx0_Tail>
     c06:	e3 95       	inc	r30
     c08:	ef 71       	andi	r30, 0x1F	; 31
     c0a:	fe 17       	cp	r31, r30
     c0c:	31 f0       	breq	.+12     	; 0xc1a <USART0_RX_EXIT>
     c0e:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <rx0_Head>
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e2 51       	subi	r30, 0x12	; 18
     c16:	fd 4f       	sbci	r31, 0xFD	; 253
     c18:	90 83       	st	Z, r25

00000c1a <USART0_RX_EXIT>:
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	9f 91       	pop	r25
     c20:	0f bf       	out	0x3f, r16	; 63
     c22:	0f 91       	pop	r16
     c24:	18 95       	reti

00000c26 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     c26:	0f 93       	push	r16
     c28:	0f b7       	in	r16, 0x3f	; 63
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
     c2e:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <tx1_Tail>
     c32:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <tx1_Head>
     c36:	e3 95       	inc	r30
     c38:	ef 71       	andi	r30, 0x1F	; 31
     c3a:	ef 13       	cpse	r30, r31
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <USART1_TX_CONTINUE>
     c3e:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     c42:	ff 7d       	andi	r31, 0xDF	; 223
     c44:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000c48 <USART1_TX_CONTINUE>:
     c48:	e0 93 53 03 	sts	0x0353, r30	; 0x800353 <tx1_Tail>
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ef 5e       	subi	r30, 0xEF	; 239
     c50:	fc 4f       	sbci	r31, 0xFC	; 252
     c52:	e0 81       	ld	r30, Z
     c54:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000c58 <USART1_TX_EXIT>:
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	0f bf       	out	0x3f, r16	; 63
     c5e:	0f 91       	pop	r16
     c60:	18 95       	reti

00000c62 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     c62:	0f 93       	push	r16
     c64:	0f b7       	in	r16, 0x3f	; 63
     c66:	9f 93       	push	r25
     c68:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
     c70:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <rx1_Head>
     c74:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <rx1_Tail>
     c78:	e3 95       	inc	r30
     c7a:	ef 71       	andi	r30, 0x1F	; 31
     c7c:	fe 17       	cp	r31, r30
     c7e:	31 f0       	breq	.+12     	; 0xc8c <USART1_RX_EXIT>
     c80:	e0 93 54 03 	sts	0x0354, r30	; 0x800354 <rx1_Head>
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	ee 5c       	subi	r30, 0xCE	; 206
     c88:	fc 4f       	sbci	r31, 0xFC	; 252
     c8a:	90 83       	st	Z, r25

00000c8c <USART1_RX_EXIT>:
     c8c:	ff 91       	pop	r31
     c8e:	ef 91       	pop	r30
     c90:	9f 91       	pop	r25
     c92:	0f bf       	out	0x3f, r16	; 63
     c94:	0f 91       	pop	r16
     c96:	18 95       	reti

00000c98 <timer1_init_ts>:
//for speed
static uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     c98:	e1 e8       	ldi	r30, 0x81	; 129
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	83 60       	ori	r24, 0x03	; 3
     ca0:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     ca2:	80 81       	ld	r24, Z
     ca4:	88 60       	ori	r24, 0x08	; 8
     ca6:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     ca8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     cac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     cb0:	ef e6       	ldi	r30, 0x6F	; 111
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	82 60       	ori	r24, 0x02	; 2
     cb8:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     cba:	8d e7       	ldi	r24, 0x7D	; 125
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     cc2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     cc6:	08 95       	ret

00000cc8 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     cc8:	84 b5       	in	r24, 0x24	; 36
     cca:	85 60       	ori	r24, 0x05	; 5
     ccc:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     cce:	84 b5       	in	r24, 0x24	; 36
     cd0:	88 60       	ori	r24, 0x08	; 8
     cd2:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     cd4:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     cd6:	ee e6       	ldi	r30, 0x6E	; 110
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms
     ce0:	87 e2       	ldi	r24, 0x27	; 39
     ce2:	87 bd       	out	0x27, r24	; 39
     ce4:	08 95       	ret

00000ce6 <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
     ce6:	f8 94       	cli
     ce8:	2f d5       	rcall	.+2654   	; 0x1748 <rgbled_init>
	can_init(0,0);
     cea:	2e de       	rcall	.-932    	; 0x948 <pwm_init>
     cec:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     cee:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
     cf4:	0f d4       	rcall	.+2078   	; 0x1514 <can_init>
     cf6:	d0 df       	rcall	.-96     	; 0xc98 <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     cf8:	e7 df       	rcall	.-50     	; 0xcc8 <timer0_init_ts>
     cfa:	d2 dd       	rcall	.-1116   	; 0x8a0 <speed_init>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     cfe:	33 d5       	rcall	.+2662   	; 0x1766 <spi_init>
     d00:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     d04:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     d08:	88 e9       	ldi	r24, 0x98	; 152
     d0a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     d0e:	e6 e7       	ldi	r30, 0x76	; 118
     d10:	f3 e0       	ldi	r31, 0x03	; 3
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	91 e0       	ldi	r25, 0x01	; 1
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     d16:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
     d18:	82 83       	std	Z+2, r24	; 0x02
     d1a:	91 83       	std	Z+1, r25	; 0x01
	
	sei();
     d1c:	80 83       	st	Z, r24
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues); //send CAN
     d1e:	0e db       	rcall	.-2532   	; 0x33c <drivers_init>
     d20:	78 94       	sei
     d22:	62 e1       	ldi	r22, 0x12	; 18
     d24:	71 e0       	ldi	r23, 0x01	; 1
     d26:	86 e4       	ldi	r24, 0x46	; 70
		handle_can(&ComValues, &rxFrame); //receive CAN
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	61 dc       	rcall	.-1854   	; 0x5ee <handle_motor_status_can_msg>
     d2c:	68 ed       	ldi	r22, 0xD8	; 216
     d2e:	72 e0       	ldi	r23, 0x02	; 2
     d30:	82 e1       	ldi	r24, 0x12	; 18
     d32:	91 e0       	ldi	r25, 0x01	; 1
		
		if (b_send_uart)
     d34:	0f dc       	rcall	.-2018   	; 0x554 <handle_can>
     d36:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <b_send_uart>
     d3a:	88 23       	and	r24, r24
		{
			send_uart(ComValues);
     d3c:	e9 f0       	breq	.+58     	; 0xd78 <main+0x92>
     d3e:	8d b7       	in	r24, 0x3d	; 61
     d40:	9e b7       	in	r25, 0x3e	; 62
     d42:	4c 97       	sbiw	r24, 0x1c	; 28
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	9e bf       	out	0x3e, r25	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	8d bf       	out	0x3d, r24	; 61
     d4e:	ad b7       	in	r26, 0x3d	; 61
     d50:	be b7       	in	r27, 0x3e	; 62
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	8c e1       	ldi	r24, 0x1C	; 28
     d56:	e2 e1       	ldi	r30, 0x12	; 18
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	01 90       	ld	r0, Z+
     d5c:	0d 92       	st	X+, r0
     d5e:	8a 95       	dec	r24
     d60:	e1 f7       	brne	.-8      	; 0xd5a <main+0x74>
			b_send_uart = 0;
     d62:	db dc       	rcall	.-1610   	; 0x71a <send_uart>
     d64:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <b_send_uart>
     d68:	8d b7       	in	r24, 0x3d	; 61
     d6a:	9e b7       	in	r25, 0x3e	; 62
     d6c:	4c 96       	adiw	r24, 0x1c	; 28
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
		}
		receive_uart(&ComValues);
     d72:	9e bf       	out	0x3e, r25	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	8d bf       	out	0x3d, r24	; 61
     d78:	82 e1       	ldi	r24, 0x12	; 18
		
		err_check(&ComValues); //verifying current, temperature and voltage
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	7d dc       	rcall	.-1798   	; 0x678 <receive_uart>
     d7e:	82 e1       	ldi	r24, 0x12	; 18
     d80:	91 e0       	ldi	r25, 0x01	; 1
	}
     d82:	2f d2       	rcall	.+1118   	; 0x11e2 <err_check>
     d84:	ce cf       	rjmp	.-100    	; 0xd22 <main+0x3c>

00000d86 <__vector_16>:
}


ISR(TIMER0_COMP_vect){ // every 5ms
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	0b b6       	in	r0, 0x3b	; 59
     d92:	0f 92       	push	r0
     d94:	ef 92       	push	r14
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
	
	if (systic_counter_fast == 1) // every 10ms
     db2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <systic_counter_fast>
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	41 f5       	brne	.+80     	; 0xe0a <__vector_16+0x84>
	{
		b_send_uart = 1;
     dba:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <b_send_uart>
		if (ComValues.u16_watchdog == 0)
     dbe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ComValues+0x14>
     dc2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ComValues+0x15>
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	39 f4       	brne	.+14     	; 0xdd8 <__vector_16+0x52>
		{
			if (ComValues.motor_status != ERR)
     dca:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ComValues+0x16>
     dce:	84 30       	cpi	r24, 0x04	; 4
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__vector_16+0x5c>
			{
				ComValues.motor_status = OFF ;
     dd2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ComValues+0x16>
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__vector_16+0x5c>
			}
			}else{
			ComValues.u16_watchdog -- ;
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ComValues+0x15>
     dde:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ComValues+0x14>
		}
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;		
     de2:	e2 e1       	ldi	r30, 0x12	; 18
     de4:	f1 e0       	ldi	r31, 0x01	; 1
     de6:	00 85       	ldd	r16, Z+8	; 0x08
     de8:	11 85       	ldd	r17, Z+9	; 0x09
     dea:	22 85       	ldd	r18, Z+10	; 0x0a
     dec:	33 85       	ldd	r19, Z+11	; 0x0b
     dee:	44 81       	ldd	r20, Z+4	; 0x04
     df0:	55 81       	ldd	r21, Z+5	; 0x05
     df2:	66 81       	ldd	r22, Z+6	; 0x06
     df4:	77 81       	ldd	r23, Z+7	; 0x07
     df6:	0f 2e       	mov	r0, r31
     df8:	fa e0       	ldi	r31, 0x0A	; 10
     dfa:	ef 2e       	mov	r14, r31
     dfc:	f0 2d       	mov	r31, r0
     dfe:	8e e1       	ldi	r24, 0x1E	; 30
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	b8 d1       	rcall	.+880    	; 0x1174 <handle_joulemeter>
		systic_counter_fast = 0;
     e04:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <systic_counter_fast>
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <__vector_16+0x8a>
	} else {
		systic_counter_fast ++;
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
     e10:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <systic_counter_slow>
     e14:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <systic_counter_slow+0x1>
     e18:	84 36       	cpi	r24, 0x64	; 100
     e1a:	91 05       	cpc	r25, r1
     e1c:	51 f5       	brne	.+84     	; 0xe72 <__vector_16+0xec>
	{
		send_can = 1;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <send_can>
		handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 500.0);
     e24:	44 ef       	ldi	r20, 0xF4	; 244
     e26:	51 e0       	ldi	r21, 0x01	; 1
     e28:	62 e4       	ldi	r22, 0x42	; 66
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	83 e2       	ldi	r24, 0x23	; 35
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	42 dd       	rcall	.-1404   	; 0x8b6 <handle_speed_sensor>
		manage_LEDs(ComValues); //UM LED according to motor state
     e32:	8d b7       	in	r24, 0x3d	; 61
     e34:	9e b7       	in	r25, 0x3e	; 62
     e36:	4c 97       	sbiw	r24, 0x1c	; 28
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	9e bf       	out	0x3e, r25	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	8d bf       	out	0x3d, r24	; 61
     e42:	ad b7       	in	r26, 0x3d	; 61
     e44:	be b7       	in	r27, 0x3e	; 62
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	8c e1       	ldi	r24, 0x1C	; 28
     e4a:	e2 e1       	ldi	r30, 0x12	; 18
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	01 90       	ld	r0, Z+
     e50:	0d 92       	st	X+, r0
     e52:	8a 95       	dec	r24
     e54:	e1 f7       	brne	.-8      	; 0xe4e <__vector_16+0xc8>
     e56:	ed dc       	rcall	.-1574   	; 0x832 <manage_LEDs>
		systic_counter_slow = 0;
     e58:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <systic_counter_slow+0x1>
     e5c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <systic_counter_slow>
     e60:	8d b7       	in	r24, 0x3d	; 61
     e62:	9e b7       	in	r25, 0x3e	; 62
     e64:	4c 96       	adiw	r24, 0x1c	; 28
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	9e bf       	out	0x3e, r25	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	8d bf       	out	0x3d, r24	; 61
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <__vector_16+0xf6>
		} else {
		systic_counter_slow ++;
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <systic_counter_slow+0x1>
     e78:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <systic_counter_slow>
	}
	
	manage_motor(&ComValues);
     e7c:	82 e1       	ldi	r24, 0x12	; 18
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	65 da       	rcall	.-2870   	; 0x34c <manage_motor>
}
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ef 90       	pop	r14
     ea0:	0f 90       	pop	r0
     ea2:	0b be       	out	0x3b, r0	; 59
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	0b b6       	in	r0, 0x3b	; 59
     eba:	0f 92       	push	r0
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
	
	if (u8_SPI_count == 4)
     ed4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	31 f4       	brne	.+12     	; 0xee8 <__vector_12+0x3a>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
     edc:	82 e2       	ldi	r24, 0x22	; 34
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	1a db       	rcall	.-2508   	; 0x516 <SPI_handler_4>
		u8_SPI_count = 0 ;
     ee2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <u8_SPI_count>
     ee6:	12 c0       	rjmp	.+36     	; 0xf0c <__vector_12+0x5e>
	}
	
	if (u8_SPI_count == 3)
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	21 f4       	brne	.+8      	; 0xef4 <__vector_12+0x46>
	{
		u8_SPI_count ++ ;
     eec:	84 e0       	ldi	r24, 0x04	; 4
     eee:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
     ef2:	18 c0       	rjmp	.+48     	; 0xf24 <__vector_12+0x76>
	}
	
	if (u8_SPI_count == 2)
     ef4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	41 f4       	brne	.+16     	; 0xf0c <__vector_12+0x5e>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
     efc:	8a e1       	ldi	r24, 0x1A	; 26
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	d9 da       	rcall	.-2638   	; 0x4b4 <SPI_handler_2>
		u8_SPI_count ++ ;
     f02:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     f0c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f10:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
     f12:	41 f4       	brne	.+16     	; 0xf24 <__vector_12+0x76>
     f14:	86 e1       	ldi	r24, 0x16	; 22
     f16:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     f18:	ae da       	rcall	.-2724   	; 0x476 <SPI_handler_1>
     f1a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
     f24:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
     f28:	81 11       	cpse	r24, r1
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <__vector_12+0x8e>
     f2c:	82 e1       	ldi	r24, 0x12	; 18
     f2e:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     f30:	83 da       	rcall	.-2810   	; 0x438 <SPI_handler_0>
     f32:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}
}
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	bf 91       	pop	r27
     f42:	af 91       	pop	r26
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	7f 91       	pop	r23
     f4a:	6f 91       	pop	r22
     f4c:	5f 91       	pop	r21
     f4e:	4f 91       	pop	r20
     f50:	3f 91       	pop	r19
     f52:	2f 91       	pop	r18
     f54:	0f 90       	pop	r0
     f56:	0b be       	out	0x3b, r0	; 59
     f58:	0f 90       	pop	r0
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	0f 90       	pop	r0
     f5e:	1f 90       	pop	r1
     f60:	18 95       	reti

00000f62 <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in frot of the reed switch)
{
     f62:	1f 92       	push	r1
     f64:	0f 92       	push	r0
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	0f 92       	push	r0
     f6a:	11 24       	eor	r1, r1
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
	u16_speed_count ++ ;
     f70:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16_speed_count>
     f74:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16_speed_count+0x1>
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <u16_speed_count+0x1>
     f7e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u16_speed_count>
}
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	0f 90       	pop	r0
     f8c:	1f 90       	pop	r1
     f8e:	18 95       	reti

00000f90 <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.254
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     f90:	8f 92       	push	r8
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <handle_current_sensor+0x1a>
     faa:	00 d0       	rcall	.+0      	; 0xfac <handle_current_sensor+0x1c>
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	4a d5       	rcall	.+2708   	; 0x1a4c <__floatunsisf>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 ea       	ldi	r20, 0xA0	; 160
     fbe:	50 e4       	ldi	r21, 0x40	; 64
     fc0:	fb d5       	rcall	.+3062   	; 0x1bb8 <__mulsf3>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	59 e3       	ldi	r21, 0x39	; 57
     fca:	f6 d5       	rcall	.+3052   	; 0x1bb8 <__mulsf3>
     fcc:	29 e8       	ldi	r18, 0x89	; 137
     fce:	31 e4       	ldi	r19, 0x41	; 65
     fd0:	40 e1       	ldi	r20, 0x10	; 16
     fd2:	50 e4       	ldi	r21, 0x40	; 64
     fd4:	39 d4       	rcall	.+2162   	; 0x1848 <__subsf3>
     fd6:	23 ec       	ldi	r18, 0xC3	; 195
     fd8:	34 e6       	ldi	r19, 0x64	; 100
     fda:	4a e2       	ldi	r20, 0x2A	; 42
     fdc:	5d e3       	ldi	r21, 0x3D	; 61
     fde:	9d d4       	rcall	.+2362   	; 0x191a <__divsf3>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e4       	ldi	r20, 0x40	; 64
     fe6:	50 e4       	ldi	r21, 0x40	; 64
     fe8:	98 d4       	rcall	.+2352   	; 0x191a <__divsf3>
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current-1.76);// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     ff2:	69 81       	ldd	r22, Y+1	; 0x01
     ff4:	7a 81       	ldd	r23, Y+2	; 0x02
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	2e ea       	ldi	r18, 0xAE	; 174
     ffc:	37 e4       	ldi	r19, 0x47	; 71
     ffe:	41 ee       	ldi	r20, 0xE1	; 225
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	22 d4       	rcall	.+2116   	; 0x1848 <__subsf3>
    1004:	69 83       	std	Y+1, r22	; 0x01
    1006:	7a 83       	std	Y+2, r23	; 0x02
    1008:	8b 83       	std	Y+3, r24	; 0x03
    100a:	9c 83       	std	Y+4, r25	; 0x04
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    100c:	89 80       	ldd	r8, Y+1	; 0x01
    100e:	9a 80       	ldd	r9, Y+2	; 0x02
    1010:	ab 80       	ldd	r10, Y+3	; 0x03
    1012:	bc 80       	ldd	r11, Y+4	; 0x04
    1014:	26 e6       	ldi	r18, 0x66	; 102
    1016:	36 e6       	ldi	r19, 0x66	; 102
    1018:	46 e6       	ldi	r20, 0x66	; 102
    101a:	5f e3       	ldi	r21, 0x3F	; 63
    101c:	f8 01       	movw	r30, r16
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	c8 d5       	rcall	.+2960   	; 0x1bb8 <__mulsf3>
    1028:	6b 01       	movw	r12, r22
    102a:	7c 01       	movw	r14, r24
    102c:	2d ec       	ldi	r18, 0xCD	; 205
    102e:	3c ec       	ldi	r19, 0xCC	; 204
    1030:	4c ec       	ldi	r20, 0xCC	; 204
    1032:	5d e3       	ldi	r21, 0x3D	; 61
    1034:	c5 01       	movw	r24, r10
    1036:	b4 01       	movw	r22, r8
    1038:	bf d5       	rcall	.+2942   	; 0x1bb8 <__mulsf3>
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	03 d4       	rcall	.+2054   	; 0x184a <__addsf3>
    1044:	f8 01       	movw	r30, r16
    1046:	60 83       	st	Z, r22
    1048:	71 83       	std	Z+1, r23	; 0x01
    104a:	82 83       	std	Z+2, r24	; 0x02
    104c:	93 83       	std	Z+3, r25	; 0x03
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	8f 90       	pop	r8
    106e:	08 95       	ret

00001070 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	00 d0       	rcall	.+0      	; 0x107a <handle_temp_sensor+0xa>
    107a:	00 d0       	rcall	.+0      	; 0x107c <handle_temp_sensor+0xc>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	e2 d4       	rcall	.+2500   	; 0x1a4c <__floatunsisf>
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 ea       	ldi	r20, 0xA0	; 160
    108e:	50 e4       	ldi	r21, 0x40	; 64
    1090:	93 d5       	rcall	.+2854   	; 0x1bb8 <__mulsf3>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	59 e3       	ldi	r21, 0x39	; 57
    109a:	8e d5       	rcall	.+2844   	; 0x1bb8 <__mulsf3>
    109c:	69 83       	std	Y+1, r22	; 0x01
    109e:	7a 83       	std	Y+2, r23	; 0x02
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	9c 83       	std	Y+4, r25	; 0x04
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    10a4:	69 81       	ldd	r22, Y+1	; 0x01
    10a6:	7a 81       	ldd	r23, Y+2	; 0x02
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	2d ec       	ldi	r18, 0xCD	; 205
    10ae:	3c ec       	ldi	r19, 0xCC	; 204
    10b0:	4c e6       	ldi	r20, 0x6C	; 108
    10b2:	50 e4       	ldi	r21, 0x40	; 64
    10b4:	2e d4       	rcall	.+2140   	; 0x1912 <__cmpsf2>
    10b6:	18 16       	cp	r1, r24
    10b8:	8c f0       	brlt	.+34     	; 0x10dc <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
    10ba:	69 81       	ldd	r22, Y+1	; 0x01
    10bc:	7a 81       	ldd	r23, Y+2	; 0x02
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 ea       	ldi	r20, 0xA0	; 160
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	76 d5       	rcall	.+2796   	; 0x1bb8 <__mulsf3>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 eb       	ldi	r20, 0xB0	; 176
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	b9 d3       	rcall	.+1906   	; 0x1848 <__subsf3>
    10d6:	8e d4       	rcall	.+2332   	; 0x19f4 <__fixunssfsi>
    10d8:	f8 01       	movw	r30, r16
    10da:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    10dc:	69 81       	ldd	r22, Y+1	; 0x01
    10de:	7a 81       	ldd	r23, Y+2	; 0x02
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	26 e6       	ldi	r18, 0x66	; 102
    10e6:	36 e6       	ldi	r19, 0x66	; 102
    10e8:	46 e9       	ldi	r20, 0x96	; 150
    10ea:	50 e4       	ldi	r21, 0x40	; 64
    10ec:	12 d4       	rcall	.+2084   	; 0x1912 <__cmpsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	e4 f0       	brlt	.+56     	; 0x112a <__stack+0x2b>
    10f2:	69 81       	ldd	r22, Y+1	; 0x01
    10f4:	7a 81       	ldd	r23, Y+2	; 0x02
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	2d ec       	ldi	r18, 0xCD	; 205
    10fc:	3c ec       	ldi	r19, 0xCC	; 204
    10fe:	4c e6       	ldi	r20, 0x6C	; 108
    1100:	50 e4       	ldi	r21, 0x40	; 64
    1102:	56 d5       	rcall	.+2732   	; 0x1bb0 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    1104:	18 16       	cp	r1, r24
    1106:	8c f4       	brge	.+34     	; 0x112a <__stack+0x2b>
    1108:	69 81       	ldd	r22, Y+1	; 0x01
    110a:	7a 81       	ldd	r23, Y+2	; 0x02
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4e e5       	ldi	r20, 0x5E	; 94
    1116:	52 e4       	ldi	r21, 0x42	; 66
    1118:	4f d5       	rcall	.+2718   	; 0x1bb8 <__mulsf3>
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e8       	ldi	r19, 0x80	; 128
    111e:	4b e1       	ldi	r20, 0x1B	; 27
    1120:	53 e4       	ldi	r21, 0x43	; 67
    1122:	92 d3       	rcall	.+1828   	; 0x1848 <__subsf3>
    1124:	67 d4       	rcall	.+2254   	; 0x19f4 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
    1126:	f8 01       	movw	r30, r16
    1128:	60 83       	st	Z, r22
    112a:	69 81       	ldd	r22, Y+1	; 0x01
    112c:	7a 81       	ldd	r23, Y+2	; 0x02
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	26 e6       	ldi	r18, 0x66	; 102
    1134:	36 e6       	ldi	r19, 0x66	; 102
    1136:	46 e9       	ldi	r20, 0x96	; 150
    1138:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
    113a:	3a d5       	rcall	.+2676   	; 0x1bb0 <__gesf2>
    113c:	18 16       	cp	r1, r24
    113e:	8c f4       	brge	.+34     	; 0x1162 <__stack+0x63>
    1140:	69 81       	ldd	r22, Y+1	; 0x01
    1142:	7a 81       	ldd	r23, Y+2	; 0x02
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	48 e4       	ldi	r20, 0x48	; 72
    114e:	53 e4       	ldi	r21, 0x43	; 67
    1150:	33 d5       	rcall	.+2662   	; 0x1bb8 <__mulsf3>
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	42 e5       	ldi	r20, 0x52	; 82
    1158:	54 e4       	ldi	r21, 0x44	; 68
    115a:	76 d3       	rcall	.+1772   	; 0x1848 <__subsf3>
    115c:	4b d4       	rcall	.+2198   	; 0x19f4 <__fixunssfsi>
	}
}
    115e:	f8 01       	movw	r30, r16
    1160:	60 83       	st	Z, r22
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    1174:	8f 92       	push	r8
    1176:	9f 92       	push	r9
    1178:	af 92       	push	r10
    117a:	bf 92       	push	r11
    117c:	ef 92       	push	r14
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24
    1188:	4a 01       	movw	r8, r20
    118a:	5b 01       	movw	r10, r22
    118c:	c9 01       	movw	r24, r18
    118e:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    1190:	a5 01       	movw	r20, r10
    1192:	94 01       	movw	r18, r8
    1194:	11 d5       	rcall	.+2594   	; 0x1bb8 <__mulsf3>
    1196:	4b 01       	movw	r8, r22
    1198:	5c 01       	movw	r10, r24
    119a:	6e 2d       	mov	r22, r14
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	54 d4       	rcall	.+2216   	; 0x1a4c <__floatunsisf>
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
    11a8:	c5 01       	movw	r24, r10
    11aa:	b4 01       	movw	r22, r8
    11ac:	05 d5       	rcall	.+2570   	; 0x1bb8 <__mulsf3>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a e7       	ldi	r20, 0x7A	; 122
    11b4:	54 e4       	ldi	r21, 0x44	; 68
    11b6:	b1 d3       	rcall	.+1890   	; 0x191a <__divsf3>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	68 81       	ld	r22, Y
    11be:	79 81       	ldd	r23, Y+1	; 0x01
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	42 d3       	rcall	.+1668   	; 0x184a <__addsf3>
    11c6:	68 83       	st	Y, r22
    11c8:	79 83       	std	Y+1, r23	; 0x01
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	9b 83       	std	Y+3, r25	; 0x03
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ef 90       	pop	r14
    11d8:	bf 90       	pop	r11
    11da:	af 90       	pop	r10
    11dc:	9f 90       	pop	r9
    11de:	8f 90       	pop	r8
    11e0:	08 95       	ret

000011e2 <err_check>:

void err_check(ModuleValues_t * vals) 
{
    11e2:	8f 92       	push	r8
    11e4:	9f 92       	push	r9
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
	if ((vals->f32_batt_volt < MAX_AMP || vals->f32_batt_volt > 100.0) && vals->motor_status != ERR) //under voltage. When the voltage is too low, the external ADC is not working properly and gives a huge voltage value.
    11f8:	c8 84       	ldd	r12, Y+8	; 0x08
    11fa:	d9 84       	ldd	r13, Y+9	; 0x09
    11fc:	ea 84       	ldd	r14, Y+10	; 0x0a
    11fe:	fb 84       	ldd	r15, Y+11	; 0x0b
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e7       	ldi	r20, 0x70	; 112
    1206:	51 e4       	ldi	r21, 0x41	; 65
    1208:	c7 01       	movw	r24, r14
    120a:	b6 01       	movw	r22, r12
    120c:	82 d3       	rcall	.+1796   	; 0x1912 <__cmpsf2>
    120e:	88 23       	and	r24, r24
    1210:	4c f0       	brlt	.+18     	; 0x1224 <err_check+0x42>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	48 ec       	ldi	r20, 0xC8	; 200
    1218:	52 e4       	ldi	r21, 0x42	; 66
    121a:	c7 01       	movw	r24, r14
    121c:	b6 01       	movw	r22, r12
    121e:	c8 d4       	rcall	.+2448   	; 0x1bb0 <__gesf2>
    1220:	18 16       	cp	r1, r24
    1222:	24 f4       	brge	.+8      	; 0x122c <err_check+0x4a>
    1224:	8e 89       	ldd	r24, Y+22	; 0x16
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	09 f0       	breq	.+2      	; 0x122c <err_check+0x4a>
	{
		vals->motor_status = OFF;
    122a:	1e 8a       	std	Y+22, r1	; 0x16
	}
	
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
    122c:	88 80       	ld	r8, Y
    122e:	99 80       	ldd	r9, Y+1	; 0x01
    1230:	aa 80       	ldd	r10, Y+2	; 0x02
    1232:	bb 80       	ldd	r11, Y+3	; 0x03
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e7       	ldi	r20, 0x70	; 112
    123a:	51 e4       	ldi	r21, 0x41	; 65
    123c:	c5 01       	movw	r24, r10
    123e:	b4 01       	movw	r22, r8
    1240:	b7 d4       	rcall	.+2414   	; 0x1bb0 <__gesf2>
    1242:	88 23       	and	r24, r24
    1244:	b4 f4       	brge	.+44     	; 0x1272 <err_check+0x90>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	4c e5       	ldi	r20, 0x5C	; 92
    124c:	52 e4       	ldi	r21, 0x42	; 66
    124e:	c7 01       	movw	r24, r14
    1250:	b6 01       	movw	r22, r12
    1252:	ae d4       	rcall	.+2396   	; 0x1bb0 <__gesf2>
    1254:	18 16       	cp	r1, r24
    1256:	4c f4       	brge	.+18     	; 0x126a <err_check+0x88>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	48 ec       	ldi	r20, 0xC8	; 200
    125e:	52 e4       	ldi	r21, 0x42	; 66
    1260:	c7 01       	movw	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	56 d3       	rcall	.+1708   	; 0x1912 <__cmpsf2>
    1266:	88 23       	and	r24, r24
    1268:	24 f0       	brlt	.+8      	; 0x1272 <err_check+0x90>
    126a:	88 89       	ldd	r24, Y+16	; 0x10
    126c:	84 36       	cpi	r24, 0x64	; 100
    126e:	f0 f4       	brcc	.+60     	; 0x12ac <err_check+0xca>
    1270:	19 c0       	rjmp	.+50     	; 0x12a4 <err_check+0xc2>
	{
		vals->motor_status = ERR;
    1272:	84 e0       	ldi	r24, 0x04	; 4
    1274:	8e 8b       	std	Y+22, r24	; 0x16
	}
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
    1276:	88 89       	ldd	r24, Y+16	; 0x10
    1278:	84 36       	cpi	r24, 0x64	; 100
    127a:	d0 f4       	brcc	.+52     	; 0x12b0 <err_check+0xce>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e7       	ldi	r20, 0x70	; 112
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	c5 01       	movw	r24, r10
    1286:	b4 01       	movw	r22, r8
    1288:	44 d3       	rcall	.+1672   	; 0x1912 <__cmpsf2>
    128a:	88 23       	and	r24, r24
    128c:	8c f4       	brge	.+34     	; 0x12b0 <err_check+0xce>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4c e5       	ldi	r20, 0x5C	; 92
    1294:	52 e4       	ldi	r21, 0x42	; 66
    1296:	c7 01       	movw	r24, r14
    1298:	b6 01       	movw	r22, r12
    129a:	3b d3       	rcall	.+1654   	; 0x1912 <__cmpsf2>
    129c:	18 16       	cp	r1, r24
	{
		vals->motor_status = OFF;
    129e:	44 f0       	brlt	.+16     	; 0x12b0 <err_check+0xce>
	}
    12a0:	1e 8a       	std	Y+22, r1	; 0x16
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		vals->motor_status = ERR;
	}
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
    12a2:	06 c0       	rjmp	.+12     	; 0x12b0 <err_check+0xce>
    12a4:	8e 89       	ldd	r24, Y+22	; 0x16
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	19 f4       	brne	.+6      	; 0x12b0 <err_check+0xce>
		vals->motor_status = OFF;
	}
	
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		vals->motor_status = ERR;
    12aa:	e8 cf       	rjmp	.-48     	; 0x127c <err_check+0x9a>
    12ac:	84 e0       	ldi	r24, 0x04	; 4
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
	{
		vals->motor_status = OFF;
	}
    12ae:	8e 8b       	std	Y+22, r24	; 0x16
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	9f 90       	pop	r9
    12c2:	8f 90       	pop	r8
    12c4:	08 95       	ret

000012c6 <Set_ADC_Channel_ext>:
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	88 30       	cpi	r24, 0x08	; 8
    12ca:	91 05       	cpc	r25, r1
    12cc:	88 f5       	brcc	.+98     	; 0x1330 <Set_ADC_Channel_ext+0x6a>
    12ce:	fc 01       	movw	r30, r24
    12d0:	e6 5b       	subi	r30, 0xB6	; 182
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	d4 c4       	rjmp	.+2472   	; 0x1c7e <__tablejump2__>
    12d6:	86 e0       	ldi	r24, 0x06	; 6
    12d8:	fb 01       	movw	r30, r22
    12da:	80 83       	st	Z, r24
    12dc:	11 82       	std	Z+1, r1	; 0x01
    12de:	08 95       	ret
    12e0:	86 e0       	ldi	r24, 0x06	; 6
    12e2:	fb 01       	movw	r30, r22
    12e4:	80 83       	st	Z, r24
    12e6:	80 e4       	ldi	r24, 0x40	; 64
    12e8:	81 83       	std	Z+1, r24	; 0x01
    12ea:	08 95       	ret
    12ec:	86 e0       	ldi	r24, 0x06	; 6
    12ee:	fb 01       	movw	r30, r22
    12f0:	80 83       	st	Z, r24
    12f2:	80 e8       	ldi	r24, 0x80	; 128
    12f4:	81 83       	std	Z+1, r24	; 0x01
    12f6:	08 95       	ret
    12f8:	86 e0       	ldi	r24, 0x06	; 6
    12fa:	fb 01       	movw	r30, r22
    12fc:	80 83       	st	Z, r24
    12fe:	80 ec       	ldi	r24, 0xC0	; 192
    1300:	81 83       	std	Z+1, r24	; 0x01
    1302:	08 95       	ret
    1304:	87 e0       	ldi	r24, 0x07	; 7
    1306:	fb 01       	movw	r30, r22
    1308:	80 83       	st	Z, r24
    130a:	11 82       	std	Z+1, r1	; 0x01
    130c:	08 95       	ret
    130e:	87 e0       	ldi	r24, 0x07	; 7
    1310:	fb 01       	movw	r30, r22
    1312:	80 83       	st	Z, r24
    1314:	80 e4       	ldi	r24, 0x40	; 64
    1316:	81 83       	std	Z+1, r24	; 0x01
    1318:	08 95       	ret
    131a:	87 e0       	ldi	r24, 0x07	; 7
    131c:	fb 01       	movw	r30, r22
    131e:	80 83       	st	Z, r24
    1320:	80 e8       	ldi	r24, 0x80	; 128
    1322:	81 83       	std	Z+1, r24	; 0x01
    1324:	08 95       	ret
    1326:	87 e0       	ldi	r24, 0x07	; 7
    1328:	fb 01       	movw	r30, r22
    132a:	80 83       	st	Z, r24
    132c:	80 ec       	ldi	r24, 0xC0	; 192
    132e:	81 83       	std	Z+1, r24	; 0x01
    1330:	08 95       	ret

00001332 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    1332:	1f 92       	push	r1
    1334:	0f 92       	push	r0
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	0f 92       	push	r0
    133a:	11 24       	eor	r1, r1
    133c:	0b b6       	in	r0, 0x3b	; 59
    133e:	0f 92       	push	r0
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	1f 92       	push	r1
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    1360:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    1364:	80 ff       	sbrs	r24, 0
    1366:	47 c0       	rjmp	.+142    	; 0x13f6 <__vector_18+0xc4>
    1368:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    136c:	90 ff       	sbrs	r25, 0
    136e:	43 c0       	rjmp	.+134    	; 0x13f6 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    1370:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    1374:	ee ee       	ldi	r30, 0xEE	; 238
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    137c:	80 81       	ld	r24, Z
    137e:	8f 7b       	andi	r24, 0xBF	; 191
    1380:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    1382:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tx_off>
    1386:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <tx_on>
    138a:	98 17       	cp	r25, r24
    138c:	89 f1       	breq	.+98     	; 0x13f0 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    138e:	8f 70       	andi	r24, 0x0F	; 15
    1390:	2b e0       	ldi	r18, 0x0B	; 11
    1392:	82 9f       	mul	r24, r18
    1394:	c0 01       	movw	r24, r0
    1396:	11 24       	eor	r1, r1
    1398:	fc 01       	movw	r30, r24
    139a:	e0 50       	subi	r30, 0x00	; 0
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	20 81       	ld	r18, Z
    13a0:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    13a4:	20 81       	ld	r18, Z
    13a6:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    13aa:	21 81       	ldd	r18, Z+1	; 0x01
    13ac:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    13b0:	23 81       	ldd	r18, Z+3	; 0x03
    13b2:	aa ef       	ldi	r26, 0xFA	; 250
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    13b8:	24 81       	ldd	r18, Z+4	; 0x04
    13ba:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    13bc:	25 81       	ldd	r18, Z+5	; 0x05
    13be:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    13c0:	26 81       	ldd	r18, Z+6	; 0x06
    13c2:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    13c4:	27 81       	ldd	r18, Z+7	; 0x07
    13c6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    13c8:	20 85       	ldd	r18, Z+8	; 0x08
    13ca:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    13cc:	21 85       	ldd	r18, Z+9	; 0x09
    13ce:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    13d0:	22 85       	ldd	r18, Z+10	; 0x0a
    13d2:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    13d4:	fc 01       	movw	r30, r24
    13d6:	ee 5f       	subi	r30, 0xFE	; 254
    13d8:	fd 4f       	sbci	r31, 0xFD	; 253
    13da:	80 81       	ld	r24, Z
    13dc:	8f 70       	andi	r24, 0x0F	; 15
    13de:	80 64       	ori	r24, 0x40	; 64
    13e0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    13e4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tx_off>
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_off>
    13ee:	7d c0       	rjmp	.+250    	; 0x14ea <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    13f0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <tx_busy>
    13f4:	7a c0       	rjmp	.+244    	; 0x14ea <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    13f6:	81 ff       	sbrs	r24, 1
    13f8:	78 c0       	rjmp	.+240    	; 0x14ea <__vector_18+0x1b8>
    13fa:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    13fe:	81 ff       	sbrs	r24, 1
    1400:	74 c0       	rjmp	.+232    	; 0x14ea <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    1402:	80 e1       	ldi	r24, 0x10	; 16
    1404:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    1408:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rx_on>
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <rx_off>
    1414:	29 1b       	sub	r18, r25
    1416:	31 09       	sbc	r19, r1
    1418:	2f 77       	andi	r18, 0x7F	; 127
    141a:	33 27       	eor	r19, r19
    141c:	20 31       	cpi	r18, 0x10	; 16
    141e:	31 05       	cpc	r19, r1
    1420:	0c f0       	brlt	.+2      	; 0x1424 <__vector_18+0xf2>
    1422:	58 c0       	rjmp	.+176    	; 0x14d4 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    1424:	e8 2f       	mov	r30, r24
    1426:	ef 70       	andi	r30, 0x0F	; 15
    1428:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    142c:	2e 2f       	mov	r18, r30
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4b e0       	ldi	r20, 0x0B	; 11
    1432:	e4 9f       	mul	r30, r20
    1434:	f0 01       	movw	r30, r0
    1436:	11 24       	eor	r1, r1
    1438:	e0 5b       	subi	r30, 0xB0	; 176
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	9f 70       	andi	r25, 0x0F	; 15
    143e:	42 81       	ldd	r20, Z+2	; 0x02
    1440:	40 7f       	andi	r20, 0xF0	; 240
    1442:	94 2b       	or	r25, r20
    1444:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    1446:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    144a:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    144e:	40 7e       	andi	r20, 0xE0	; 224
    1450:	97 70       	andi	r25, 0x07	; 7
    1452:	94 2b       	or	r25, r20
    1454:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    1456:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    145a:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    145c:	aa ef       	ldi	r26, 0xFA	; 250
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	9c 91       	ld	r25, X
    1462:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    1464:	9c 91       	ld	r25, X
    1466:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    1468:	9c 91       	ld	r25, X
    146a:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    146c:	9c 91       	ld	r25, X
    146e:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    1470:	9c 91       	ld	r25, X
    1472:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    1474:	9c 91       	ld	r25, X
    1476:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    1478:	9c 91       	ld	r25, X
    147a:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    147c:	9c 91       	ld	r25, X
    147e:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    1486:	40 81       	ld	r20, Z
    1488:	42 95       	swap	r20
    148a:	46 95       	lsr	r20
    148c:	47 70       	andi	r20, 0x07	; 7
    148e:	51 81       	ldd	r21, Z+1	; 0x01
    1490:	65 2f       	mov	r22, r21
    1492:	66 0f       	add	r22, r22
    1494:	66 0f       	add	r22, r22
    1496:	66 0f       	add	r22, r22
    1498:	86 2f       	mov	r24, r22
    149a:	84 2b       	or	r24, r20
    149c:	95 2f       	mov	r25, r21
    149e:	92 95       	swap	r25
    14a0:	96 95       	lsr	r25
    14a2:	97 70       	andi	r25, 0x07	; 7
    14a4:	89 2b       	or	r24, r25
    14a6:	b1 f4       	brne	.+44     	; 0x14d4 <__vector_18+0x1a2>
    14a8:	8b e0       	ldi	r24, 0x0B	; 11
    14aa:	82 9f       	mul	r24, r18
    14ac:	f0 01       	movw	r30, r0
    14ae:	83 9f       	mul	r24, r19
    14b0:	f0 0d       	add	r31, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	e0 5b       	subi	r30, 0xB0	; 176
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	83 81       	ldd	r24, Z+3	; 0x03
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	59 f4       	brne	.+22     	; 0x14d4 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    14be:	98 e0       	ldi	r25, 0x08	; 8
    14c0:	88 e1       	ldi	r24, 0x18	; 24
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	a8 95       	wdr
    14c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14d2:	ff cf       	rjmp	.-2      	; 0x14d2 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    14d4:	ee ee       	ldi	r30, 0xEE	; 238
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    14de:	80 81       	ld	r24, Z
    14e0:	8f 7d       	andi	r24, 0xDF	; 223
    14e2:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    14e4:	80 e8       	ldi	r24, 0x80	; 128
    14e6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    14ea:	0f 90       	pop	r0
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	ff 91       	pop	r31
    14f2:	ef 91       	pop	r30
    14f4:	bf 91       	pop	r27
    14f6:	af 91       	pop	r26
    14f8:	9f 91       	pop	r25
    14fa:	8f 91       	pop	r24
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0b be       	out	0x3b, r0	; 59
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    1518:	e8 ed       	ldi	r30, 0xD8	; 216
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    1520:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    1524:	2c e0       	ldi	r18, 0x0C	; 12
    1526:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    152a:	27 e3       	ldi	r18, 0x37	; 55
    152c:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    1530:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    1534:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    1538:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    153c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    1540:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    1544:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    1548:	cd ee       	ldi	r28, 0xED	; 237
    154a:	d0 e0       	ldi	r29, 0x00	; 0
    154c:	18 82       	st	Y, r1
	CANSTMOB = 0;
    154e:	ae ee       	ldi	r26, 0xEE	; 238
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    1554:	20 e1       	ldi	r18, 0x10	; 16
    1556:	28 83       	st	Y, r18
	CANSTMOB = 0;
    1558:	1c 92       	st	X, r1
	CANIDM4 = 0;
    155a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    155e:	28 2f       	mov	r18, r24
    1560:	22 95       	swap	r18
    1562:	22 0f       	add	r18, r18
    1564:	20 7e       	andi	r18, 0xE0	; 224
    1566:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    156a:	96 95       	lsr	r25
    156c:	87 95       	ror	r24
    156e:	96 95       	lsr	r25
    1570:	87 95       	ror	r24
    1572:	96 95       	lsr	r25
    1574:	87 95       	ror	r24
    1576:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    157a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    157e:	86 2f       	mov	r24, r22
    1580:	82 95       	swap	r24
    1582:	88 0f       	add	r24, r24
    1584:	80 7e       	andi	r24, 0xE0	; 224
    1586:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    158a:	76 95       	lsr	r23
    158c:	67 95       	ror	r22
    158e:	76 95       	lsr	r23
    1590:	67 95       	ror	r22
    1592:	76 95       	lsr	r23
    1594:	67 95       	ror	r22
    1596:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    159a:	80 e8       	ldi	r24, 0x80	; 128
    159c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    15a6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    15aa:	80 eb       	ldi	r24, 0xB0	; 176
    15ac:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	80 83       	st	Z, r24

	reset = 0;
    15b4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <reset>
}
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    15c4:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <rx_off>
    15c8:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <rx_on>
    15cc:	24 17       	cp	r18, r20
    15ce:	89 f1       	breq	.+98     	; 0x1632 <can_read_message_if_new+0x74>
    15d0:	a4 2f       	mov	r26, r20
    15d2:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    15d4:	8b e0       	ldi	r24, 0x0B	; 11
    15d6:	a8 9f       	mul	r26, r24
    15d8:	b0 01       	movw	r22, r0
    15da:	11 24       	eor	r1, r1
    15dc:	fb 01       	movw	r30, r22
    15de:	e0 5b       	subi	r30, 0xB0	; 176
    15e0:	fe 4f       	sbci	r31, 0xFE	; 254
    15e2:	20 81       	ld	r18, Z
    15e4:	22 95       	swap	r18
    15e6:	26 95       	lsr	r18
    15e8:	27 70       	andi	r18, 0x07	; 7
    15ea:	31 81       	ldd	r19, Z+1	; 0x01
    15ec:	53 2f       	mov	r21, r19
    15ee:	55 0f       	add	r21, r21
    15f0:	55 0f       	add	r21, r21
    15f2:	55 0f       	add	r21, r21
    15f4:	25 2b       	or	r18, r21
    15f6:	32 95       	swap	r19
    15f8:	36 95       	lsr	r19
    15fa:	37 70       	andi	r19, 0x07	; 7
    15fc:	28 83       	st	Y, r18
    15fe:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1600:	fb 01       	movw	r30, r22
    1602:	ee 5a       	subi	r30, 0xAE	; 174
    1604:	fe 4f       	sbci	r31, 0xFE	; 254
    1606:	20 81       	ld	r18, Z
    1608:	2f 70       	andi	r18, 0x0F	; 15
    160a:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    160c:	22 23       	and	r18, r18
    160e:	99 f0       	breq	.+38     	; 0x1636 <can_read_message_if_new+0x78>
    1610:	db 01       	movw	r26, r22
    1612:	ad 5a       	subi	r26, 0xAD	; 173
    1614:	be 4f       	sbci	r27, 0xFE	; 254
    1616:	fe 01       	movw	r30, r28
    1618:	33 96       	adiw	r30, 0x03	; 3
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	2d 5f       	subi	r18, 0xFD	; 253
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	ce 01       	movw	r24, r28
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    1626:	2d 91       	ld	r18, X+
    1628:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    162a:	e8 17       	cp	r30, r24
    162c:	f9 07       	cpc	r31, r25
    162e:	d9 f7       	brne	.-10     	; 0x1626 <can_read_message_if_new+0x68>
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	04 c0       	rjmp	.+8      	; 0x163e <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    1636:	4f 5f       	subi	r20, 0xFF	; 255
    1638:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <rx_off>
	}

	return true;
    163c:	81 e0       	ldi	r24, 0x01	; 1
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    164a:	ab ed       	ldi	r26, 0xDB	; 219
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	8c 91       	ld	r24, X
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	8c 93       	st	X, r24

	if (!tx_busy) {
    1654:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <tx_busy>
    1658:	81 11       	cpse	r24, r1
    165a:	27 c0       	rjmp	.+78     	; 0x16aa <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    165c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    1660:	80 81       	ld	r24, Z
    1662:	82 95       	swap	r24
    1664:	88 0f       	add	r24, r24
    1666:	80 7e       	andi	r24, 0xE0	; 224
    1668:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	96 95       	lsr	r25
    1672:	87 95       	ror	r24
    1674:	96 95       	lsr	r25
    1676:	87 95       	ror	r24
    1678:	96 95       	lsr	r25
    167a:	87 95       	ror	r24
    167c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1680:	df 01       	movw	r26, r30
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	9f 01       	movw	r18, r30
    1686:	25 5f       	subi	r18, 0xF5	; 245
    1688:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    168a:	ca ef       	ldi	r28, 0xFA	; 250
    168c:	d0 e0       	ldi	r29, 0x00	; 0
    168e:	9d 91       	ld	r25, X+
    1690:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1692:	a2 17       	cp	r26, r18
    1694:	b3 07       	cpc	r27, r19
    1696:	d9 f7       	brne	.-10     	; 0x168e <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	80 64       	ori	r24, 0x40	; 64
    16a2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	43 c0       	rjmp	.+134    	; 0x1730 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    16aa:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <tx_on>
    16ae:	82 2f       	mov	r24, r18
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <tx_off>
    16b6:	83 1b       	sub	r24, r19
    16b8:	91 09       	sbc	r25, r1
    16ba:	8f 77       	andi	r24, 0x7F	; 127
    16bc:	99 27       	eor	r25, r25
    16be:	40 97       	sbiw	r24, 0x10	; 16
    16c0:	b1 f1       	breq	.+108    	; 0x172e <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    16c2:	a2 2f       	mov	r26, r18
    16c4:	af 70       	andi	r26, 0x0F	; 15
    16c6:	8b e0       	ldi	r24, 0x0B	; 11
    16c8:	a8 9f       	mul	r26, r24
    16ca:	d0 01       	movw	r26, r0
    16cc:	11 24       	eor	r1, r1
    16ce:	ed 01       	movw	r28, r26
    16d0:	c0 50       	subi	r28, 0x00	; 0
    16d2:	de 4f       	sbci	r29, 0xFE	; 254
    16d4:	80 81       	ld	r24, Z
    16d6:	98 2f       	mov	r25, r24
    16d8:	92 95       	swap	r25
    16da:	99 0f       	add	r25, r25
    16dc:	90 7e       	andi	r25, 0xE0	; 224
    16de:	88 81       	ld	r24, Y
    16e0:	8f 71       	andi	r24, 0x1F	; 31
    16e2:	89 2b       	or	r24, r25
    16e4:	88 83       	st	Y, r24
    16e6:	80 81       	ld	r24, Z
    16e8:	98 2f       	mov	r25, r24
    16ea:	96 95       	lsr	r25
    16ec:	96 95       	lsr	r25
    16ee:	96 95       	lsr	r25
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	80 7e       	andi	r24, 0xE0	; 224
    16f4:	89 2b       	or	r24, r25
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	92 95       	swap	r25
    16fc:	99 0f       	add	r25, r25
    16fe:	90 7e       	andi	r25, 0xE0	; 224
    1700:	8f 71       	andi	r24, 0x1F	; 31
    1702:	89 2b       	or	r24, r25
    1704:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	98 2f       	mov	r25, r24
    170a:	9f 70       	andi	r25, 0x0F	; 15
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 7f       	andi	r24, 0xF0	; 240
    1710:	89 2b       	or	r24, r25
    1712:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1714:	ad 5f       	subi	r26, 0xFD	; 253
    1716:	bd 4f       	sbci	r27, 0xFD	; 253
    1718:	33 96       	adiw	r30, 0x03	; 3
    171a:	88 e0       	ldi	r24, 0x08	; 8
    171c:	01 90       	ld	r0, Z+
    171e:	0d 92       	st	X+, r0
    1720:	8a 95       	dec	r24
    1722:	e1 f7       	brne	.-8      	; 0x171c <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    1724:	2f 5f       	subi	r18, 0xFF	; 255
    1726:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <tx_on>
		result = true;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    172e:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1730:	eb ed       	ldi	r30, 0xDB	; 219
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	90 81       	ld	r25, Z
    1736:	90 68       	ori	r25, 0x80	; 128
    1738:	90 83       	st	Z, r25

	return result;
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <rgbled_turn_off>:
    1740:	95 b1       	in	r25, 0x05	; 5
    1742:	89 2b       	or	r24, r25
    1744:	85 b9       	out	0x05, r24	; 5
    1746:	08 95       	ret

00001748 <rgbled_init>:
    1748:	84 b1       	in	r24, 0x04	; 4
    174a:	80 6e       	ori	r24, 0xE0	; 224
    174c:	84 b9       	out	0x04, r24	; 4
    174e:	80 ee       	ldi	r24, 0xE0	; 224
    1750:	f7 cf       	rjmp	.-18     	; 0x1740 <rgbled_turn_off>
    1752:	08 95       	ret

00001754 <rgbled_turn_on>:
    1754:	95 b1       	in	r25, 0x05	; 5
    1756:	80 95       	com	r24
    1758:	98 23       	and	r25, r24
    175a:	95 b9       	out	0x05, r25	; 5
    175c:	08 95       	ret

0000175e <rgbled_toggle>:
    175e:	95 b1       	in	r25, 0x05	; 5
    1760:	89 27       	eor	r24, r25
    1762:	85 b9       	out	0x05, r24	; 5
    1764:	08 95       	ret

00001766 <spi_init>:
    1766:	94 b1       	in	r25, 0x04	; 4
    1768:	97 60       	ori	r25, 0x07	; 7
    176a:	94 b9       	out	0x04, r25	; 4
    176c:	82 fb       	bst	r24, 2
    176e:	99 27       	eor	r25, r25
    1770:	90 f9       	bld	r25, 0
    1772:	28 2f       	mov	r18, r24
    1774:	22 70       	andi	r18, 0x02	; 2
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	80 65       	ori	r24, 0x50	; 80
    177a:	82 2b       	or	r24, r18
    177c:	8c bd       	out	0x2c, r24	; 44
    177e:	8c b5       	in	r24, 0x2c	; 44
    1780:	83 7f       	andi	r24, 0xF3	; 243
    1782:	8c bd       	out	0x2c, r24	; 44
    1784:	9d bd       	out	0x2d, r25	; 45
    1786:	08 95       	ret

00001788 <spi_trancieve>:
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	ec 01       	movw	r28, r24
    178e:	28 98       	cbi	0x05, 0	; 5
    1790:	41 15       	cp	r20, r1
    1792:	51 05       	cpc	r21, r1
    1794:	c1 f0       	breq	.+48     	; 0x17c6 <spi_trancieve+0x3e>
    1796:	fb 01       	movw	r30, r22
    1798:	dc 01       	movw	r26, r24
    179a:	46 0f       	add	r20, r22
    179c:	57 1f       	adc	r21, r23
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	20 97       	sbiw	r28, 0x00	; 0
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <spi_trancieve+0x20>
    17a4:	9c 91       	ld	r25, X
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <spi_trancieve+0x22>
    17a8:	98 2f       	mov	r25, r24
    17aa:	9e bd       	out	0x2e, r25	; 46
    17ac:	0d b4       	in	r0, 0x2d	; 45
    17ae:	07 fe       	sbrs	r0, 7
    17b0:	fd cf       	rjmp	.-6      	; 0x17ac <spi_trancieve+0x24>
    17b2:	61 15       	cp	r22, r1
    17b4:	71 05       	cpc	r23, r1
    17b6:	11 f0       	breq	.+4      	; 0x17bc <spi_trancieve+0x34>
    17b8:	9e b5       	in	r25, 0x2e	; 46
    17ba:	90 83       	st	Z, r25
    17bc:	31 96       	adiw	r30, 0x01	; 1
    17be:	11 96       	adiw	r26, 0x01	; 1
    17c0:	e4 17       	cp	r30, r20
    17c2:	f5 07       	cpc	r31, r21
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <spi_trancieve+0x18>
    17c6:	21 11       	cpse	r18, r1
    17c8:	28 9a       	sbi	0x05, 0	; 5
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <__vector_17>:
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	0b b6       	in	r0, 0x3b	; 59
    17dc:	0f 92       	push	r0
    17de:	2f 93       	push	r18
    17e0:	3f 93       	push	r19
    17e2:	4f 93       	push	r20
    17e4:	5f 93       	push	r21
    17e6:	6f 93       	push	r22
    17e8:	7f 93       	push	r23
    17ea:	8f 93       	push	r24
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	a0 ed       	ldi	r26, 0xD0	; 208
    17f6:	b2 e0       	ldi	r27, 0x02	; 2
    17f8:	e0 eb       	ldi	r30, 0xB0	; 176
    17fa:	f2 e0       	ldi	r31, 0x02	; 2
    17fc:	20 ed       	ldi	r18, 0xD0	; 208
    17fe:	32 e0       	ldi	r19, 0x02	; 2
    1800:	8d 91       	ld	r24, X+
    1802:	88 23       	and	r24, r24
    1804:	59 f0       	breq	.+22     	; 0x181c <__vector_17+0x4c>
    1806:	40 81       	ld	r20, Z
    1808:	51 81       	ldd	r21, Z+1	; 0x01
    180a:	62 81       	ldd	r22, Z+2	; 0x02
    180c:	73 81       	ldd	r23, Z+3	; 0x03
    180e:	50 5e       	subi	r21, 0xE0	; 224
    1810:	6f 4f       	sbci	r22, 0xFF	; 255
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	40 83       	st	Z, r20
    1816:	51 83       	std	Z+1, r21	; 0x01
    1818:	62 83       	std	Z+2, r22	; 0x02
    181a:	73 83       	std	Z+3, r23	; 0x03
    181c:	34 96       	adiw	r30, 0x04	; 4
    181e:	e2 17       	cp	r30, r18
    1820:	f3 07       	cpc	r31, r19
    1822:	71 f7       	brne	.-36     	; 0x1800 <__vector_17+0x30>
    1824:	ff 91       	pop	r31
    1826:	ef 91       	pop	r30
    1828:	bf 91       	pop	r27
    182a:	af 91       	pop	r26
    182c:	8f 91       	pop	r24
    182e:	7f 91       	pop	r23
    1830:	6f 91       	pop	r22
    1832:	5f 91       	pop	r21
    1834:	4f 91       	pop	r20
    1836:	3f 91       	pop	r19
    1838:	2f 91       	pop	r18
    183a:	0f 90       	pop	r0
    183c:	0b be       	out	0x3b, r0	; 59
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <__subsf3>:
    1848:	50 58       	subi	r21, 0x80	; 128

0000184a <__addsf3>:
    184a:	bb 27       	eor	r27, r27
    184c:	aa 27       	eor	r26, r26
    184e:	0e d0       	rcall	.+28     	; 0x186c <__addsf3x>
    1850:	75 c1       	rjmp	.+746    	; 0x1b3c <__fp_round>
    1852:	66 d1       	rcall	.+716    	; 0x1b20 <__fp_pscA>
    1854:	30 f0       	brcs	.+12     	; 0x1862 <__addsf3+0x18>
    1856:	6b d1       	rcall	.+726    	; 0x1b2e <__fp_pscB>
    1858:	20 f0       	brcs	.+8      	; 0x1862 <__addsf3+0x18>
    185a:	31 f4       	brne	.+12     	; 0x1868 <__addsf3+0x1e>
    185c:	9f 3f       	cpi	r25, 0xFF	; 255
    185e:	11 f4       	brne	.+4      	; 0x1864 <__addsf3+0x1a>
    1860:	1e f4       	brtc	.+6      	; 0x1868 <__addsf3+0x1e>
    1862:	5b c1       	rjmp	.+694    	; 0x1b1a <__fp_nan>
    1864:	0e f4       	brtc	.+2      	; 0x1868 <__addsf3+0x1e>
    1866:	e0 95       	com	r30
    1868:	e7 fb       	bst	r30, 7
    186a:	51 c1       	rjmp	.+674    	; 0x1b0e <__fp_inf>

0000186c <__addsf3x>:
    186c:	e9 2f       	mov	r30, r25
    186e:	77 d1       	rcall	.+750    	; 0x1b5e <__fp_split3>
    1870:	80 f3       	brcs	.-32     	; 0x1852 <__addsf3+0x8>
    1872:	ba 17       	cp	r27, r26
    1874:	62 07       	cpc	r22, r18
    1876:	73 07       	cpc	r23, r19
    1878:	84 07       	cpc	r24, r20
    187a:	95 07       	cpc	r25, r21
    187c:	18 f0       	brcs	.+6      	; 0x1884 <__addsf3x+0x18>
    187e:	71 f4       	brne	.+28     	; 0x189c <__addsf3x+0x30>
    1880:	9e f5       	brtc	.+102    	; 0x18e8 <__addsf3x+0x7c>
    1882:	8f c1       	rjmp	.+798    	; 0x1ba2 <__fp_zero>
    1884:	0e f4       	brtc	.+2      	; 0x1888 <__addsf3x+0x1c>
    1886:	e0 95       	com	r30
    1888:	0b 2e       	mov	r0, r27
    188a:	ba 2f       	mov	r27, r26
    188c:	a0 2d       	mov	r26, r0
    188e:	0b 01       	movw	r0, r22
    1890:	b9 01       	movw	r22, r18
    1892:	90 01       	movw	r18, r0
    1894:	0c 01       	movw	r0, r24
    1896:	ca 01       	movw	r24, r20
    1898:	a0 01       	movw	r20, r0
    189a:	11 24       	eor	r1, r1
    189c:	ff 27       	eor	r31, r31
    189e:	59 1b       	sub	r21, r25
    18a0:	99 f0       	breq	.+38     	; 0x18c8 <__addsf3x+0x5c>
    18a2:	59 3f       	cpi	r21, 0xF9	; 249
    18a4:	50 f4       	brcc	.+20     	; 0x18ba <__addsf3x+0x4e>
    18a6:	50 3e       	cpi	r21, 0xE0	; 224
    18a8:	68 f1       	brcs	.+90     	; 0x1904 <__addsf3x+0x98>
    18aa:	1a 16       	cp	r1, r26
    18ac:	f0 40       	sbci	r31, 0x00	; 0
    18ae:	a2 2f       	mov	r26, r18
    18b0:	23 2f       	mov	r18, r19
    18b2:	34 2f       	mov	r19, r20
    18b4:	44 27       	eor	r20, r20
    18b6:	58 5f       	subi	r21, 0xF8	; 248
    18b8:	f3 cf       	rjmp	.-26     	; 0x18a0 <__addsf3x+0x34>
    18ba:	46 95       	lsr	r20
    18bc:	37 95       	ror	r19
    18be:	27 95       	ror	r18
    18c0:	a7 95       	ror	r26
    18c2:	f0 40       	sbci	r31, 0x00	; 0
    18c4:	53 95       	inc	r21
    18c6:	c9 f7       	brne	.-14     	; 0x18ba <__addsf3x+0x4e>
    18c8:	7e f4       	brtc	.+30     	; 0x18e8 <__addsf3x+0x7c>
    18ca:	1f 16       	cp	r1, r31
    18cc:	ba 0b       	sbc	r27, r26
    18ce:	62 0b       	sbc	r22, r18
    18d0:	73 0b       	sbc	r23, r19
    18d2:	84 0b       	sbc	r24, r20
    18d4:	ba f0       	brmi	.+46     	; 0x1904 <__addsf3x+0x98>
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	a1 f0       	breq	.+40     	; 0x1902 <__addsf3x+0x96>
    18da:	ff 0f       	add	r31, r31
    18dc:	bb 1f       	adc	r27, r27
    18de:	66 1f       	adc	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	88 1f       	adc	r24, r24
    18e4:	c2 f7       	brpl	.-16     	; 0x18d6 <__addsf3x+0x6a>
    18e6:	0e c0       	rjmp	.+28     	; 0x1904 <__addsf3x+0x98>
    18e8:	ba 0f       	add	r27, r26
    18ea:	62 1f       	adc	r22, r18
    18ec:	73 1f       	adc	r23, r19
    18ee:	84 1f       	adc	r24, r20
    18f0:	48 f4       	brcc	.+18     	; 0x1904 <__addsf3x+0x98>
    18f2:	87 95       	ror	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	b7 95       	ror	r27
    18fa:	f7 95       	ror	r31
    18fc:	9e 3f       	cpi	r25, 0xFE	; 254
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <__addsf3x+0x96>
    1900:	b3 cf       	rjmp	.-154    	; 0x1868 <__addsf3+0x1e>
    1902:	93 95       	inc	r25
    1904:	88 0f       	add	r24, r24
    1906:	08 f0       	brcs	.+2      	; 0x190a <__addsf3x+0x9e>
    1908:	99 27       	eor	r25, r25
    190a:	ee 0f       	add	r30, r30
    190c:	97 95       	ror	r25
    190e:	87 95       	ror	r24
    1910:	08 95       	ret

00001912 <__cmpsf2>:
    1912:	d9 d0       	rcall	.+434    	; 0x1ac6 <__fp_cmp>
    1914:	08 f4       	brcc	.+2      	; 0x1918 <__cmpsf2+0x6>
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret

0000191a <__divsf3>:
    191a:	0c d0       	rcall	.+24     	; 0x1934 <__divsf3x>
    191c:	0f c1       	rjmp	.+542    	; 0x1b3c <__fp_round>
    191e:	07 d1       	rcall	.+526    	; 0x1b2e <__fp_pscB>
    1920:	40 f0       	brcs	.+16     	; 0x1932 <__divsf3+0x18>
    1922:	fe d0       	rcall	.+508    	; 0x1b20 <__fp_pscA>
    1924:	30 f0       	brcs	.+12     	; 0x1932 <__divsf3+0x18>
    1926:	21 f4       	brne	.+8      	; 0x1930 <__divsf3+0x16>
    1928:	5f 3f       	cpi	r21, 0xFF	; 255
    192a:	19 f0       	breq	.+6      	; 0x1932 <__divsf3+0x18>
    192c:	f0 c0       	rjmp	.+480    	; 0x1b0e <__fp_inf>
    192e:	51 11       	cpse	r21, r1
    1930:	39 c1       	rjmp	.+626    	; 0x1ba4 <__fp_szero>
    1932:	f3 c0       	rjmp	.+486    	; 0x1b1a <__fp_nan>

00001934 <__divsf3x>:
    1934:	14 d1       	rcall	.+552    	; 0x1b5e <__fp_split3>
    1936:	98 f3       	brcs	.-26     	; 0x191e <__divsf3+0x4>

00001938 <__divsf3_pse>:
    1938:	99 23       	and	r25, r25
    193a:	c9 f3       	breq	.-14     	; 0x192e <__divsf3+0x14>
    193c:	55 23       	and	r21, r21
    193e:	b1 f3       	breq	.-20     	; 0x192c <__divsf3+0x12>
    1940:	95 1b       	sub	r25, r21
    1942:	55 0b       	sbc	r21, r21
    1944:	bb 27       	eor	r27, r27
    1946:	aa 27       	eor	r26, r26
    1948:	62 17       	cp	r22, r18
    194a:	73 07       	cpc	r23, r19
    194c:	84 07       	cpc	r24, r20
    194e:	38 f0       	brcs	.+14     	; 0x195e <__divsf3_pse+0x26>
    1950:	9f 5f       	subi	r25, 0xFF	; 255
    1952:	5f 4f       	sbci	r21, 0xFF	; 255
    1954:	22 0f       	add	r18, r18
    1956:	33 1f       	adc	r19, r19
    1958:	44 1f       	adc	r20, r20
    195a:	aa 1f       	adc	r26, r26
    195c:	a9 f3       	breq	.-22     	; 0x1948 <__divsf3_pse+0x10>
    195e:	33 d0       	rcall	.+102    	; 0x19c6 <__divsf3_pse+0x8e>
    1960:	0e 2e       	mov	r0, r30
    1962:	3a f0       	brmi	.+14     	; 0x1972 <__divsf3_pse+0x3a>
    1964:	e0 e8       	ldi	r30, 0x80	; 128
    1966:	30 d0       	rcall	.+96     	; 0x19c8 <__divsf3_pse+0x90>
    1968:	91 50       	subi	r25, 0x01	; 1
    196a:	50 40       	sbci	r21, 0x00	; 0
    196c:	e6 95       	lsr	r30
    196e:	00 1c       	adc	r0, r0
    1970:	ca f7       	brpl	.-14     	; 0x1964 <__divsf3_pse+0x2c>
    1972:	29 d0       	rcall	.+82     	; 0x19c6 <__divsf3_pse+0x8e>
    1974:	fe 2f       	mov	r31, r30
    1976:	27 d0       	rcall	.+78     	; 0x19c6 <__divsf3_pse+0x8e>
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	bb 1f       	adc	r27, r27
    1980:	26 17       	cp	r18, r22
    1982:	37 07       	cpc	r19, r23
    1984:	48 07       	cpc	r20, r24
    1986:	ab 07       	cpc	r26, r27
    1988:	b0 e8       	ldi	r27, 0x80	; 128
    198a:	09 f0       	breq	.+2      	; 0x198e <__divsf3_pse+0x56>
    198c:	bb 0b       	sbc	r27, r27
    198e:	80 2d       	mov	r24, r0
    1990:	bf 01       	movw	r22, r30
    1992:	ff 27       	eor	r31, r31
    1994:	93 58       	subi	r25, 0x83	; 131
    1996:	5f 4f       	sbci	r21, 0xFF	; 255
    1998:	2a f0       	brmi	.+10     	; 0x19a4 <__divsf3_pse+0x6c>
    199a:	9e 3f       	cpi	r25, 0xFE	; 254
    199c:	51 05       	cpc	r21, r1
    199e:	68 f0       	brcs	.+26     	; 0x19ba <__divsf3_pse+0x82>
    19a0:	b6 c0       	rjmp	.+364    	; 0x1b0e <__fp_inf>
    19a2:	00 c1       	rjmp	.+512    	; 0x1ba4 <__fp_szero>
    19a4:	5f 3f       	cpi	r21, 0xFF	; 255
    19a6:	ec f3       	brlt	.-6      	; 0x19a2 <__divsf3_pse+0x6a>
    19a8:	98 3e       	cpi	r25, 0xE8	; 232
    19aa:	dc f3       	brlt	.-10     	; 0x19a2 <__divsf3_pse+0x6a>
    19ac:	86 95       	lsr	r24
    19ae:	77 95       	ror	r23
    19b0:	67 95       	ror	r22
    19b2:	b7 95       	ror	r27
    19b4:	f7 95       	ror	r31
    19b6:	9f 5f       	subi	r25, 0xFF	; 255
    19b8:	c9 f7       	brne	.-14     	; 0x19ac <__divsf3_pse+0x74>
    19ba:	88 0f       	add	r24, r24
    19bc:	91 1d       	adc	r25, r1
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret
    19c6:	e1 e0       	ldi	r30, 0x01	; 1
    19c8:	66 0f       	add	r22, r22
    19ca:	77 1f       	adc	r23, r23
    19cc:	88 1f       	adc	r24, r24
    19ce:	bb 1f       	adc	r27, r27
    19d0:	62 17       	cp	r22, r18
    19d2:	73 07       	cpc	r23, r19
    19d4:	84 07       	cpc	r24, r20
    19d6:	ba 07       	cpc	r27, r26
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <__divsf3_pse+0xaa>
    19da:	62 1b       	sub	r22, r18
    19dc:	73 0b       	sbc	r23, r19
    19de:	84 0b       	sbc	r24, r20
    19e0:	ba 0b       	sbc	r27, r26
    19e2:	ee 1f       	adc	r30, r30
    19e4:	88 f7       	brcc	.-30     	; 0x19c8 <__divsf3_pse+0x90>
    19e6:	e0 95       	com	r30
    19e8:	08 95       	ret

000019ea <__fixsfsi>:
    19ea:	04 d0       	rcall	.+8      	; 0x19f4 <__fixunssfsi>
    19ec:	68 94       	set
    19ee:	b1 11       	cpse	r27, r1
    19f0:	d9 c0       	rjmp	.+434    	; 0x1ba4 <__fp_szero>
    19f2:	08 95       	ret

000019f4 <__fixunssfsi>:
    19f4:	bc d0       	rcall	.+376    	; 0x1b6e <__fp_splitA>
    19f6:	88 f0       	brcs	.+34     	; 0x1a1a <__fixunssfsi+0x26>
    19f8:	9f 57       	subi	r25, 0x7F	; 127
    19fa:	90 f0       	brcs	.+36     	; 0x1a20 <__fixunssfsi+0x2c>
    19fc:	b9 2f       	mov	r27, r25
    19fe:	99 27       	eor	r25, r25
    1a00:	b7 51       	subi	r27, 0x17	; 23
    1a02:	a0 f0       	brcs	.+40     	; 0x1a2c <__fixunssfsi+0x38>
    1a04:	d1 f0       	breq	.+52     	; 0x1a3a <__fixunssfsi+0x46>
    1a06:	66 0f       	add	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	1a f0       	brmi	.+6      	; 0x1a16 <__fixunssfsi+0x22>
    1a10:	ba 95       	dec	r27
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <__fixunssfsi+0x12>
    1a14:	12 c0       	rjmp	.+36     	; 0x1a3a <__fixunssfsi+0x46>
    1a16:	b1 30       	cpi	r27, 0x01	; 1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <__fixunssfsi+0x46>
    1a1a:	c3 d0       	rcall	.+390    	; 0x1ba2 <__fp_zero>
    1a1c:	b1 e0       	ldi	r27, 0x01	; 1
    1a1e:	08 95       	ret
    1a20:	c0 c0       	rjmp	.+384    	; 0x1ba2 <__fp_zero>
    1a22:	67 2f       	mov	r22, r23
    1a24:	78 2f       	mov	r23, r24
    1a26:	88 27       	eor	r24, r24
    1a28:	b8 5f       	subi	r27, 0xF8	; 248
    1a2a:	39 f0       	breq	.+14     	; 0x1a3a <__fixunssfsi+0x46>
    1a2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1a2e:	cc f3       	brlt	.-14     	; 0x1a22 <__fixunssfsi+0x2e>
    1a30:	86 95       	lsr	r24
    1a32:	77 95       	ror	r23
    1a34:	67 95       	ror	r22
    1a36:	b3 95       	inc	r27
    1a38:	d9 f7       	brne	.-10     	; 0x1a30 <__fixunssfsi+0x3c>
    1a3a:	3e f4       	brtc	.+14     	; 0x1a4a <__fixunssfsi+0x56>
    1a3c:	90 95       	com	r25
    1a3e:	80 95       	com	r24
    1a40:	70 95       	com	r23
    1a42:	61 95       	neg	r22
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	8f 4f       	sbci	r24, 0xFF	; 255
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	08 95       	ret

00001a4c <__floatunsisf>:
    1a4c:	e8 94       	clt
    1a4e:	09 c0       	rjmp	.+18     	; 0x1a62 <__floatsisf+0x12>

00001a50 <__floatsisf>:
    1a50:	97 fb       	bst	r25, 7
    1a52:	3e f4       	brtc	.+14     	; 0x1a62 <__floatsisf+0x12>
    1a54:	90 95       	com	r25
    1a56:	80 95       	com	r24
    1a58:	70 95       	com	r23
    1a5a:	61 95       	neg	r22
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	99 23       	and	r25, r25
    1a64:	a9 f0       	breq	.+42     	; 0x1a90 <__floatsisf+0x40>
    1a66:	f9 2f       	mov	r31, r25
    1a68:	96 e9       	ldi	r25, 0x96	; 150
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	93 95       	inc	r25
    1a6e:	f6 95       	lsr	r31
    1a70:	87 95       	ror	r24
    1a72:	77 95       	ror	r23
    1a74:	67 95       	ror	r22
    1a76:	b7 95       	ror	r27
    1a78:	f1 11       	cpse	r31, r1
    1a7a:	f8 cf       	rjmp	.-16     	; 0x1a6c <__floatsisf+0x1c>
    1a7c:	fa f4       	brpl	.+62     	; 0x1abc <__floatsisf+0x6c>
    1a7e:	bb 0f       	add	r27, r27
    1a80:	11 f4       	brne	.+4      	; 0x1a86 <__floatsisf+0x36>
    1a82:	60 ff       	sbrs	r22, 0
    1a84:	1b c0       	rjmp	.+54     	; 0x1abc <__floatsisf+0x6c>
    1a86:	6f 5f       	subi	r22, 0xFF	; 255
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <__floatsisf+0x6c>
    1a90:	88 23       	and	r24, r24
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <__floatsisf+0x48>
    1a94:	96 e9       	ldi	r25, 0x96	; 150
    1a96:	11 c0       	rjmp	.+34     	; 0x1aba <__floatsisf+0x6a>
    1a98:	77 23       	and	r23, r23
    1a9a:	21 f0       	breq	.+8      	; 0x1aa4 <__floatsisf+0x54>
    1a9c:	9e e8       	ldi	r25, 0x8E	; 142
    1a9e:	87 2f       	mov	r24, r23
    1aa0:	76 2f       	mov	r23, r22
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <__floatsisf+0x5e>
    1aa4:	66 23       	and	r22, r22
    1aa6:	71 f0       	breq	.+28     	; 0x1ac4 <__floatsisf+0x74>
    1aa8:	96 e8       	ldi	r25, 0x86	; 134
    1aaa:	86 2f       	mov	r24, r22
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	2a f0       	brmi	.+10     	; 0x1abc <__floatsisf+0x6c>
    1ab2:	9a 95       	dec	r25
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	da f7       	brpl	.-10     	; 0x1ab2 <__floatsisf+0x62>
    1abc:	88 0f       	add	r24, r24
    1abe:	96 95       	lsr	r25
    1ac0:	87 95       	ror	r24
    1ac2:	97 f9       	bld	r25, 7
    1ac4:	08 95       	ret

00001ac6 <__fp_cmp>:
    1ac6:	99 0f       	add	r25, r25
    1ac8:	00 08       	sbc	r0, r0
    1aca:	55 0f       	add	r21, r21
    1acc:	aa 0b       	sbc	r26, r26
    1ace:	e0 e8       	ldi	r30, 0x80	; 128
    1ad0:	fe ef       	ldi	r31, 0xFE	; 254
    1ad2:	16 16       	cp	r1, r22
    1ad4:	17 06       	cpc	r1, r23
    1ad6:	e8 07       	cpc	r30, r24
    1ad8:	f9 07       	cpc	r31, r25
    1ada:	c0 f0       	brcs	.+48     	; 0x1b0c <__fp_cmp+0x46>
    1adc:	12 16       	cp	r1, r18
    1ade:	13 06       	cpc	r1, r19
    1ae0:	e4 07       	cpc	r30, r20
    1ae2:	f5 07       	cpc	r31, r21
    1ae4:	98 f0       	brcs	.+38     	; 0x1b0c <__fp_cmp+0x46>
    1ae6:	62 1b       	sub	r22, r18
    1ae8:	73 0b       	sbc	r23, r19
    1aea:	84 0b       	sbc	r24, r20
    1aec:	95 0b       	sbc	r25, r21
    1aee:	39 f4       	brne	.+14     	; 0x1afe <__fp_cmp+0x38>
    1af0:	0a 26       	eor	r0, r26
    1af2:	61 f0       	breq	.+24     	; 0x1b0c <__fp_cmp+0x46>
    1af4:	23 2b       	or	r18, r19
    1af6:	24 2b       	or	r18, r20
    1af8:	25 2b       	or	r18, r21
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <__fp_cmp+0x3e>
    1afc:	08 95       	ret
    1afe:	0a 26       	eor	r0, r26
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <__fp_cmp+0x3e>
    1b02:	a1 40       	sbci	r26, 0x01	; 1
    1b04:	a6 95       	lsr	r26
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	81 1d       	adc	r24, r1
    1b0a:	81 1d       	adc	r24, r1
    1b0c:	08 95       	ret

00001b0e <__fp_inf>:
    1b0e:	97 f9       	bld	r25, 7
    1b10:	9f 67       	ori	r25, 0x7F	; 127
    1b12:	80 e8       	ldi	r24, 0x80	; 128
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	08 95       	ret

00001b1a <__fp_nan>:
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
    1b1c:	80 ec       	ldi	r24, 0xC0	; 192
    1b1e:	08 95       	ret

00001b20 <__fp_pscA>:
    1b20:	00 24       	eor	r0, r0
    1b22:	0a 94       	dec	r0
    1b24:	16 16       	cp	r1, r22
    1b26:	17 06       	cpc	r1, r23
    1b28:	18 06       	cpc	r1, r24
    1b2a:	09 06       	cpc	r0, r25
    1b2c:	08 95       	ret

00001b2e <__fp_pscB>:
    1b2e:	00 24       	eor	r0, r0
    1b30:	0a 94       	dec	r0
    1b32:	12 16       	cp	r1, r18
    1b34:	13 06       	cpc	r1, r19
    1b36:	14 06       	cpc	r1, r20
    1b38:	05 06       	cpc	r0, r21
    1b3a:	08 95       	ret

00001b3c <__fp_round>:
    1b3c:	09 2e       	mov	r0, r25
    1b3e:	03 94       	inc	r0
    1b40:	00 0c       	add	r0, r0
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <__fp_round+0xc>
    1b44:	88 23       	and	r24, r24
    1b46:	52 f0       	brmi	.+20     	; 0x1b5c <__fp_round+0x20>
    1b48:	bb 0f       	add	r27, r27
    1b4a:	40 f4       	brcc	.+16     	; 0x1b5c <__fp_round+0x20>
    1b4c:	bf 2b       	or	r27, r31
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <__fp_round+0x18>
    1b50:	60 ff       	sbrs	r22, 0
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <__fp_round+0x20>
    1b54:	6f 5f       	subi	r22, 0xFF	; 255
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	08 95       	ret

00001b5e <__fp_split3>:
    1b5e:	57 fd       	sbrc	r21, 7
    1b60:	90 58       	subi	r25, 0x80	; 128
    1b62:	44 0f       	add	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	59 f0       	breq	.+22     	; 0x1b7e <__fp_splitA+0x10>
    1b68:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6a:	71 f0       	breq	.+28     	; 0x1b88 <__fp_splitA+0x1a>
    1b6c:	47 95       	ror	r20

00001b6e <__fp_splitA>:
    1b6e:	88 0f       	add	r24, r24
    1b70:	97 fb       	bst	r25, 7
    1b72:	99 1f       	adc	r25, r25
    1b74:	61 f0       	breq	.+24     	; 0x1b8e <__fp_splitA+0x20>
    1b76:	9f 3f       	cpi	r25, 0xFF	; 255
    1b78:	79 f0       	breq	.+30     	; 0x1b98 <__fp_splitA+0x2a>
    1b7a:	87 95       	ror	r24
    1b7c:	08 95       	ret
    1b7e:	12 16       	cp	r1, r18
    1b80:	13 06       	cpc	r1, r19
    1b82:	14 06       	cpc	r1, r20
    1b84:	55 1f       	adc	r21, r21
    1b86:	f2 cf       	rjmp	.-28     	; 0x1b6c <__fp_split3+0xe>
    1b88:	46 95       	lsr	r20
    1b8a:	f1 df       	rcall	.-30     	; 0x1b6e <__fp_splitA>
    1b8c:	08 c0       	rjmp	.+16     	; 0x1b9e <__fp_splitA+0x30>
    1b8e:	16 16       	cp	r1, r22
    1b90:	17 06       	cpc	r1, r23
    1b92:	18 06       	cpc	r1, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	f1 cf       	rjmp	.-30     	; 0x1b7a <__fp_splitA+0xc>
    1b98:	86 95       	lsr	r24
    1b9a:	71 05       	cpc	r23, r1
    1b9c:	61 05       	cpc	r22, r1
    1b9e:	08 94       	sec
    1ba0:	08 95       	ret

00001ba2 <__fp_zero>:
    1ba2:	e8 94       	clt

00001ba4 <__fp_szero>:
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	66 27       	eor	r22, r22
    1ba8:	77 27       	eor	r23, r23
    1baa:	cb 01       	movw	r24, r22
    1bac:	97 f9       	bld	r25, 7
    1bae:	08 95       	ret

00001bb0 <__gesf2>:
    1bb0:	8a df       	rcall	.-236    	; 0x1ac6 <__fp_cmp>
    1bb2:	08 f4       	brcc	.+2      	; 0x1bb6 <__gesf2+0x6>
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	08 95       	ret

00001bb8 <__mulsf3>:
    1bb8:	0b d0       	rcall	.+22     	; 0x1bd0 <__mulsf3x>
    1bba:	c0 cf       	rjmp	.-128    	; 0x1b3c <__fp_round>
    1bbc:	b1 df       	rcall	.-158    	; 0x1b20 <__fp_pscA>
    1bbe:	28 f0       	brcs	.+10     	; 0x1bca <__mulsf3+0x12>
    1bc0:	b6 df       	rcall	.-148    	; 0x1b2e <__fp_pscB>
    1bc2:	18 f0       	brcs	.+6      	; 0x1bca <__mulsf3+0x12>
    1bc4:	95 23       	and	r25, r21
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <__mulsf3+0x12>
    1bc8:	a2 cf       	rjmp	.-188    	; 0x1b0e <__fp_inf>
    1bca:	a7 cf       	rjmp	.-178    	; 0x1b1a <__fp_nan>
    1bcc:	11 24       	eor	r1, r1
    1bce:	ea cf       	rjmp	.-44     	; 0x1ba4 <__fp_szero>

00001bd0 <__mulsf3x>:
    1bd0:	c6 df       	rcall	.-116    	; 0x1b5e <__fp_split3>
    1bd2:	a0 f3       	brcs	.-24     	; 0x1bbc <__mulsf3+0x4>

00001bd4 <__mulsf3_pse>:
    1bd4:	95 9f       	mul	r25, r21
    1bd6:	d1 f3       	breq	.-12     	; 0x1bcc <__mulsf3+0x14>
    1bd8:	95 0f       	add	r25, r21
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	55 1f       	adc	r21, r21
    1bde:	62 9f       	mul	r22, r18
    1be0:	f0 01       	movw	r30, r0
    1be2:	72 9f       	mul	r23, r18
    1be4:	bb 27       	eor	r27, r27
    1be6:	f0 0d       	add	r31, r0
    1be8:	b1 1d       	adc	r27, r1
    1bea:	63 9f       	mul	r22, r19
    1bec:	aa 27       	eor	r26, r26
    1bee:	f0 0d       	add	r31, r0
    1bf0:	b1 1d       	adc	r27, r1
    1bf2:	aa 1f       	adc	r26, r26
    1bf4:	64 9f       	mul	r22, r20
    1bf6:	66 27       	eor	r22, r22
    1bf8:	b0 0d       	add	r27, r0
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	66 1f       	adc	r22, r22
    1bfe:	82 9f       	mul	r24, r18
    1c00:	22 27       	eor	r18, r18
    1c02:	b0 0d       	add	r27, r0
    1c04:	a1 1d       	adc	r26, r1
    1c06:	62 1f       	adc	r22, r18
    1c08:	73 9f       	mul	r23, r19
    1c0a:	b0 0d       	add	r27, r0
    1c0c:	a1 1d       	adc	r26, r1
    1c0e:	62 1f       	adc	r22, r18
    1c10:	83 9f       	mul	r24, r19
    1c12:	a0 0d       	add	r26, r0
    1c14:	61 1d       	adc	r22, r1
    1c16:	22 1f       	adc	r18, r18
    1c18:	74 9f       	mul	r23, r20
    1c1a:	33 27       	eor	r19, r19
    1c1c:	a0 0d       	add	r26, r0
    1c1e:	61 1d       	adc	r22, r1
    1c20:	23 1f       	adc	r18, r19
    1c22:	84 9f       	mul	r24, r20
    1c24:	60 0d       	add	r22, r0
    1c26:	21 1d       	adc	r18, r1
    1c28:	82 2f       	mov	r24, r18
    1c2a:	76 2f       	mov	r23, r22
    1c2c:	6a 2f       	mov	r22, r26
    1c2e:	11 24       	eor	r1, r1
    1c30:	9f 57       	subi	r25, 0x7F	; 127
    1c32:	50 40       	sbci	r21, 0x00	; 0
    1c34:	8a f0       	brmi	.+34     	; 0x1c58 <__mulsf3_pse+0x84>
    1c36:	e1 f0       	breq	.+56     	; 0x1c70 <__mulsf3_pse+0x9c>
    1c38:	88 23       	and	r24, r24
    1c3a:	4a f0       	brmi	.+18     	; 0x1c4e <__mulsf3_pse+0x7a>
    1c3c:	ee 0f       	add	r30, r30
    1c3e:	ff 1f       	adc	r31, r31
    1c40:	bb 1f       	adc	r27, r27
    1c42:	66 1f       	adc	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	91 50       	subi	r25, 0x01	; 1
    1c4a:	50 40       	sbci	r21, 0x00	; 0
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__mulsf3_pse+0x64>
    1c4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c50:	51 05       	cpc	r21, r1
    1c52:	70 f0       	brcs	.+28     	; 0x1c70 <__mulsf3_pse+0x9c>
    1c54:	5c cf       	rjmp	.-328    	; 0x1b0e <__fp_inf>
    1c56:	a6 cf       	rjmp	.-180    	; 0x1ba4 <__fp_szero>
    1c58:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5a:	ec f3       	brlt	.-6      	; 0x1c56 <__mulsf3_pse+0x82>
    1c5c:	98 3e       	cpi	r25, 0xE8	; 232
    1c5e:	dc f3       	brlt	.-10     	; 0x1c56 <__mulsf3_pse+0x82>
    1c60:	86 95       	lsr	r24
    1c62:	77 95       	ror	r23
    1c64:	67 95       	ror	r22
    1c66:	b7 95       	ror	r27
    1c68:	f7 95       	ror	r31
    1c6a:	e7 95       	ror	r30
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	c1 f7       	brne	.-16     	; 0x1c60 <__mulsf3_pse+0x8c>
    1c70:	fe 2b       	or	r31, r30
    1c72:	88 0f       	add	r24, r24
    1c74:	91 1d       	adc	r25, r1
    1c76:	96 95       	lsr	r25
    1c78:	87 95       	ror	r24
    1c7a:	97 f9       	bld	r25, 7
    1c7c:	08 95       	ret

00001c7e <__tablejump2__>:
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	00 24       	eor	r0, r0
    1c84:	00 1c       	adc	r0, r0
    1c86:	0b be       	out	0x3b, r0	; 59
    1c88:	07 90       	elpm	r0, Z+
    1c8a:	f6 91       	elpm	r31, Z
    1c8c:	e0 2d       	mov	r30, r0
    1c8e:	09 94       	ijmp

00001c90 <atoi>:
    1c90:	fc 01       	movw	r30, r24
    1c92:	88 27       	eor	r24, r24
    1c94:	99 27       	eor	r25, r25
    1c96:	e8 94       	clt
    1c98:	21 91       	ld	r18, Z+
    1c9a:	20 32       	cpi	r18, 0x20	; 32
    1c9c:	e9 f3       	breq	.-6      	; 0x1c98 <atoi+0x8>
    1c9e:	29 30       	cpi	r18, 0x09	; 9
    1ca0:	10 f0       	brcs	.+4      	; 0x1ca6 <atoi+0x16>
    1ca2:	2e 30       	cpi	r18, 0x0E	; 14
    1ca4:	c8 f3       	brcs	.-14     	; 0x1c98 <atoi+0x8>
    1ca6:	2b 32       	cpi	r18, 0x2B	; 43
    1ca8:	39 f0       	breq	.+14     	; 0x1cb8 <atoi+0x28>
    1caa:	2d 32       	cpi	r18, 0x2D	; 45
    1cac:	31 f4       	brne	.+12     	; 0x1cba <atoi+0x2a>
    1cae:	68 94       	set
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <atoi+0x28>
    1cb2:	0b d0       	rcall	.+22     	; 0x1cca <__mulhi_const_10>
    1cb4:	82 0f       	add	r24, r18
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	21 91       	ld	r18, Z+
    1cba:	20 53       	subi	r18, 0x30	; 48
    1cbc:	2a 30       	cpi	r18, 0x0A	; 10
    1cbe:	c8 f3       	brcs	.-14     	; 0x1cb2 <atoi+0x22>
    1cc0:	1e f4       	brtc	.+6      	; 0x1cc8 <atoi+0x38>
    1cc2:	90 95       	com	r25
    1cc4:	81 95       	neg	r24
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	08 95       	ret

00001cca <__mulhi_const_10>:
    1cca:	7a e0       	ldi	r23, 0x0A	; 10
    1ccc:	97 9f       	mul	r25, r23
    1cce:	90 2d       	mov	r25, r0
    1cd0:	87 9f       	mul	r24, r23
    1cd2:	80 2d       	mov	r24, r0
    1cd4:	91 0d       	add	r25, r1
    1cd6:	11 24       	eor	r1, r1
    1cd8:	08 95       	ret

00001cda <printf>:
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	ae 01       	movw	r20, r28
    1ce4:	4b 5f       	subi	r20, 0xFB	; 251
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	fa 01       	movw	r30, r20
    1cea:	61 91       	ld	r22, Z+
    1cec:	71 91       	ld	r23, Z+
    1cee:	af 01       	movw	r20, r30
    1cf0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <__iob+0x2>
    1cf4:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <__iob+0x3>
    1cf8:	08 d0       	rcall	.+16     	; 0x1d0a <vfprintf>
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <putchar>:
    1d00:	60 91 78 03 	lds	r22, 0x0378	; 0x800378 <__iob+0x2>
    1d04:	70 91 79 03 	lds	r23, 0x0379	; 0x800379 <__iob+0x3>
    1d08:	13 c2       	rjmp	.+1062   	; 0x2130 <fputc>

00001d0a <vfprintf>:
    1d0a:	2f 92       	push	r2
    1d0c:	3f 92       	push	r3
    1d0e:	4f 92       	push	r4
    1d10:	5f 92       	push	r5
    1d12:	6f 92       	push	r6
    1d14:	7f 92       	push	r7
    1d16:	8f 92       	push	r8
    1d18:	9f 92       	push	r9
    1d1a:	af 92       	push	r10
    1d1c:	bf 92       	push	r11
    1d1e:	cf 92       	push	r12
    1d20:	df 92       	push	r13
    1d22:	ef 92       	push	r14
    1d24:	ff 92       	push	r15
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	2b 97       	sbiw	r28, 0x0b	; 11
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	6c 01       	movw	r12, r24
    1d40:	7b 01       	movw	r14, r22
    1d42:	8a 01       	movw	r16, r20
    1d44:	fc 01       	movw	r30, r24
    1d46:	17 82       	std	Z+7, r1	; 0x07
    1d48:	16 82       	std	Z+6, r1	; 0x06
    1d4a:	83 81       	ldd	r24, Z+3	; 0x03
    1d4c:	81 ff       	sbrs	r24, 1
    1d4e:	bf c1       	rjmp	.+894    	; 0x20ce <vfprintf+0x3c4>
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	3c 01       	movw	r6, r24
    1d56:	f6 01       	movw	r30, r12
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	f7 01       	movw	r30, r14
    1d5c:	93 fd       	sbrc	r25, 3
    1d5e:	85 91       	lpm	r24, Z+
    1d60:	93 ff       	sbrs	r25, 3
    1d62:	81 91       	ld	r24, Z+
    1d64:	7f 01       	movw	r14, r30
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <vfprintf+0x62>
    1d6a:	ad c1       	rjmp	.+858    	; 0x20c6 <vfprintf+0x3bc>
    1d6c:	85 32       	cpi	r24, 0x25	; 37
    1d6e:	39 f4       	brne	.+14     	; 0x1d7e <vfprintf+0x74>
    1d70:	93 fd       	sbrc	r25, 3
    1d72:	85 91       	lpm	r24, Z+
    1d74:	93 ff       	sbrs	r25, 3
    1d76:	81 91       	ld	r24, Z+
    1d78:	7f 01       	movw	r14, r30
    1d7a:	85 32       	cpi	r24, 0x25	; 37
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <vfprintf+0x7c>
    1d7e:	b6 01       	movw	r22, r12
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	d6 d1       	rcall	.+940    	; 0x2130 <fputc>
    1d84:	e8 cf       	rjmp	.-48     	; 0x1d56 <vfprintf+0x4c>
    1d86:	91 2c       	mov	r9, r1
    1d88:	21 2c       	mov	r2, r1
    1d8a:	31 2c       	mov	r3, r1
    1d8c:	ff e1       	ldi	r31, 0x1F	; 31
    1d8e:	f3 15       	cp	r31, r3
    1d90:	d8 f0       	brcs	.+54     	; 0x1dc8 <vfprintf+0xbe>
    1d92:	8b 32       	cpi	r24, 0x2B	; 43
    1d94:	79 f0       	breq	.+30     	; 0x1db4 <vfprintf+0xaa>
    1d96:	38 f4       	brcc	.+14     	; 0x1da6 <vfprintf+0x9c>
    1d98:	80 32       	cpi	r24, 0x20	; 32
    1d9a:	79 f0       	breq	.+30     	; 0x1dba <vfprintf+0xb0>
    1d9c:	83 32       	cpi	r24, 0x23	; 35
    1d9e:	a1 f4       	brne	.+40     	; 0x1dc8 <vfprintf+0xbe>
    1da0:	23 2d       	mov	r18, r3
    1da2:	20 61       	ori	r18, 0x10	; 16
    1da4:	1d c0       	rjmp	.+58     	; 0x1de0 <vfprintf+0xd6>
    1da6:	8d 32       	cpi	r24, 0x2D	; 45
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <vfprintf+0xb8>
    1daa:	80 33       	cpi	r24, 0x30	; 48
    1dac:	69 f4       	brne	.+26     	; 0x1dc8 <vfprintf+0xbe>
    1dae:	23 2d       	mov	r18, r3
    1db0:	21 60       	ori	r18, 0x01	; 1
    1db2:	16 c0       	rjmp	.+44     	; 0x1de0 <vfprintf+0xd6>
    1db4:	83 2d       	mov	r24, r3
    1db6:	82 60       	ori	r24, 0x02	; 2
    1db8:	38 2e       	mov	r3, r24
    1dba:	e3 2d       	mov	r30, r3
    1dbc:	e4 60       	ori	r30, 0x04	; 4
    1dbe:	3e 2e       	mov	r3, r30
    1dc0:	2a c0       	rjmp	.+84     	; 0x1e16 <vfprintf+0x10c>
    1dc2:	f3 2d       	mov	r31, r3
    1dc4:	f8 60       	ori	r31, 0x08	; 8
    1dc6:	1d c0       	rjmp	.+58     	; 0x1e02 <vfprintf+0xf8>
    1dc8:	37 fc       	sbrc	r3, 7
    1dca:	2d c0       	rjmp	.+90     	; 0x1e26 <vfprintf+0x11c>
    1dcc:	20 ed       	ldi	r18, 0xD0	; 208
    1dce:	28 0f       	add	r18, r24
    1dd0:	2a 30       	cpi	r18, 0x0A	; 10
    1dd2:	40 f0       	brcs	.+16     	; 0x1de4 <vfprintf+0xda>
    1dd4:	8e 32       	cpi	r24, 0x2E	; 46
    1dd6:	b9 f4       	brne	.+46     	; 0x1e06 <vfprintf+0xfc>
    1dd8:	36 fc       	sbrc	r3, 6
    1dda:	75 c1       	rjmp	.+746    	; 0x20c6 <vfprintf+0x3bc>
    1ddc:	23 2d       	mov	r18, r3
    1dde:	20 64       	ori	r18, 0x40	; 64
    1de0:	32 2e       	mov	r3, r18
    1de2:	19 c0       	rjmp	.+50     	; 0x1e16 <vfprintf+0x10c>
    1de4:	36 fe       	sbrs	r3, 6
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <vfprintf+0xea>
    1de8:	8a e0       	ldi	r24, 0x0A	; 10
    1dea:	98 9e       	mul	r9, r24
    1dec:	20 0d       	add	r18, r0
    1dee:	11 24       	eor	r1, r1
    1df0:	92 2e       	mov	r9, r18
    1df2:	11 c0       	rjmp	.+34     	; 0x1e16 <vfprintf+0x10c>
    1df4:	ea e0       	ldi	r30, 0x0A	; 10
    1df6:	2e 9e       	mul	r2, r30
    1df8:	20 0d       	add	r18, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	22 2e       	mov	r2, r18
    1dfe:	f3 2d       	mov	r31, r3
    1e00:	f0 62       	ori	r31, 0x20	; 32
    1e02:	3f 2e       	mov	r3, r31
    1e04:	08 c0       	rjmp	.+16     	; 0x1e16 <vfprintf+0x10c>
    1e06:	8c 36       	cpi	r24, 0x6C	; 108
    1e08:	21 f4       	brne	.+8      	; 0x1e12 <vfprintf+0x108>
    1e0a:	83 2d       	mov	r24, r3
    1e0c:	80 68       	ori	r24, 0x80	; 128
    1e0e:	38 2e       	mov	r3, r24
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <vfprintf+0x10c>
    1e12:	88 36       	cpi	r24, 0x68	; 104
    1e14:	41 f4       	brne	.+16     	; 0x1e26 <vfprintf+0x11c>
    1e16:	f7 01       	movw	r30, r14
    1e18:	93 fd       	sbrc	r25, 3
    1e1a:	85 91       	lpm	r24, Z+
    1e1c:	93 ff       	sbrs	r25, 3
    1e1e:	81 91       	ld	r24, Z+
    1e20:	7f 01       	movw	r14, r30
    1e22:	81 11       	cpse	r24, r1
    1e24:	b3 cf       	rjmp	.-154    	; 0x1d8c <vfprintf+0x82>
    1e26:	98 2f       	mov	r25, r24
    1e28:	9f 7d       	andi	r25, 0xDF	; 223
    1e2a:	95 54       	subi	r25, 0x45	; 69
    1e2c:	93 30       	cpi	r25, 0x03	; 3
    1e2e:	28 f4       	brcc	.+10     	; 0x1e3a <vfprintf+0x130>
    1e30:	0c 5f       	subi	r16, 0xFC	; 252
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	9f e3       	ldi	r25, 0x3F	; 63
    1e36:	99 83       	std	Y+1, r25	; 0x01
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <vfprintf+0x14a>
    1e3a:	83 36       	cpi	r24, 0x63	; 99
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <vfprintf+0x140>
    1e3e:	83 37       	cpi	r24, 0x73	; 115
    1e40:	71 f0       	breq	.+28     	; 0x1e5e <vfprintf+0x154>
    1e42:	83 35       	cpi	r24, 0x53	; 83
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <vfprintf+0x13e>
    1e46:	55 c0       	rjmp	.+170    	; 0x1ef2 <vfprintf+0x1e8>
    1e48:	20 c0       	rjmp	.+64     	; 0x1e8a <vfprintf+0x180>
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	80 81       	ld	r24, Z
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	0e 5f       	subi	r16, 0xFE	; 254
    1e52:	1f 4f       	sbci	r17, 0xFF	; 255
    1e54:	88 24       	eor	r8, r8
    1e56:	83 94       	inc	r8
    1e58:	91 2c       	mov	r9, r1
    1e5a:	53 01       	movw	r10, r6
    1e5c:	12 c0       	rjmp	.+36     	; 0x1e82 <vfprintf+0x178>
    1e5e:	28 01       	movw	r4, r16
    1e60:	f2 e0       	ldi	r31, 0x02	; 2
    1e62:	4f 0e       	add	r4, r31
    1e64:	51 1c       	adc	r5, r1
    1e66:	f8 01       	movw	r30, r16
    1e68:	a0 80       	ld	r10, Z
    1e6a:	b1 80       	ldd	r11, Z+1	; 0x01
    1e6c:	36 fe       	sbrs	r3, 6
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <vfprintf+0x16c>
    1e70:	69 2d       	mov	r22, r9
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <vfprintf+0x170>
    1e76:	6f ef       	ldi	r22, 0xFF	; 255
    1e78:	7f ef       	ldi	r23, 0xFF	; 255
    1e7a:	c5 01       	movw	r24, r10
    1e7c:	4e d1       	rcall	.+668    	; 0x211a <strnlen>
    1e7e:	4c 01       	movw	r8, r24
    1e80:	82 01       	movw	r16, r4
    1e82:	f3 2d       	mov	r31, r3
    1e84:	ff 77       	andi	r31, 0x7F	; 127
    1e86:	3f 2e       	mov	r3, r31
    1e88:	15 c0       	rjmp	.+42     	; 0x1eb4 <vfprintf+0x1aa>
    1e8a:	28 01       	movw	r4, r16
    1e8c:	22 e0       	ldi	r18, 0x02	; 2
    1e8e:	42 0e       	add	r4, r18
    1e90:	51 1c       	adc	r5, r1
    1e92:	f8 01       	movw	r30, r16
    1e94:	a0 80       	ld	r10, Z
    1e96:	b1 80       	ldd	r11, Z+1	; 0x01
    1e98:	36 fe       	sbrs	r3, 6
    1e9a:	03 c0       	rjmp	.+6      	; 0x1ea2 <vfprintf+0x198>
    1e9c:	69 2d       	mov	r22, r9
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <vfprintf+0x19c>
    1ea2:	6f ef       	ldi	r22, 0xFF	; 255
    1ea4:	7f ef       	ldi	r23, 0xFF	; 255
    1ea6:	c5 01       	movw	r24, r10
    1ea8:	2d d1       	rcall	.+602    	; 0x2104 <strnlen_P>
    1eaa:	4c 01       	movw	r8, r24
    1eac:	f3 2d       	mov	r31, r3
    1eae:	f0 68       	ori	r31, 0x80	; 128
    1eb0:	3f 2e       	mov	r3, r31
    1eb2:	82 01       	movw	r16, r4
    1eb4:	33 fc       	sbrc	r3, 3
    1eb6:	19 c0       	rjmp	.+50     	; 0x1eea <vfprintf+0x1e0>
    1eb8:	82 2d       	mov	r24, r2
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	88 16       	cp	r8, r24
    1ebe:	99 06       	cpc	r9, r25
    1ec0:	a0 f4       	brcc	.+40     	; 0x1eea <vfprintf+0x1e0>
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	80 e2       	ldi	r24, 0x20	; 32
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	33 d1       	rcall	.+614    	; 0x2130 <fputc>
    1eca:	2a 94       	dec	r2
    1ecc:	f5 cf       	rjmp	.-22     	; 0x1eb8 <vfprintf+0x1ae>
    1ece:	f5 01       	movw	r30, r10
    1ed0:	37 fc       	sbrc	r3, 7
    1ed2:	85 91       	lpm	r24, Z+
    1ed4:	37 fe       	sbrs	r3, 7
    1ed6:	81 91       	ld	r24, Z+
    1ed8:	5f 01       	movw	r10, r30
    1eda:	b6 01       	movw	r22, r12
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	28 d1       	rcall	.+592    	; 0x2130 <fputc>
    1ee0:	21 10       	cpse	r2, r1
    1ee2:	2a 94       	dec	r2
    1ee4:	21 e0       	ldi	r18, 0x01	; 1
    1ee6:	82 1a       	sub	r8, r18
    1ee8:	91 08       	sbc	r9, r1
    1eea:	81 14       	cp	r8, r1
    1eec:	91 04       	cpc	r9, r1
    1eee:	79 f7       	brne	.-34     	; 0x1ece <vfprintf+0x1c4>
    1ef0:	e1 c0       	rjmp	.+450    	; 0x20b4 <vfprintf+0x3aa>
    1ef2:	84 36       	cpi	r24, 0x64	; 100
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <vfprintf+0x1f0>
    1ef6:	89 36       	cpi	r24, 0x69	; 105
    1ef8:	39 f5       	brne	.+78     	; 0x1f48 <vfprintf+0x23e>
    1efa:	f8 01       	movw	r30, r16
    1efc:	37 fe       	sbrs	r3, 7
    1efe:	07 c0       	rjmp	.+14     	; 0x1f0e <vfprintf+0x204>
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	0c 5f       	subi	r16, 0xFC	; 252
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <vfprintf+0x214>
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	07 2e       	mov	r0, r23
    1f14:	00 0c       	add	r0, r0
    1f16:	88 0b       	sbc	r24, r24
    1f18:	99 0b       	sbc	r25, r25
    1f1a:	0e 5f       	subi	r16, 0xFE	; 254
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	f3 2d       	mov	r31, r3
    1f20:	ff 76       	andi	r31, 0x6F	; 111
    1f22:	3f 2e       	mov	r3, r31
    1f24:	97 ff       	sbrs	r25, 7
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <vfprintf+0x230>
    1f28:	90 95       	com	r25
    1f2a:	80 95       	com	r24
    1f2c:	70 95       	com	r23
    1f2e:	61 95       	neg	r22
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	8f 4f       	sbci	r24, 0xFF	; 255
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	f0 68       	ori	r31, 0x80	; 128
    1f38:	3f 2e       	mov	r3, r31
    1f3a:	2a e0       	ldi	r18, 0x0A	; 10
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	a3 01       	movw	r20, r6
    1f40:	33 d1       	rcall	.+614    	; 0x21a8 <__ultoa_invert>
    1f42:	88 2e       	mov	r8, r24
    1f44:	86 18       	sub	r8, r6
    1f46:	44 c0       	rjmp	.+136    	; 0x1fd0 <vfprintf+0x2c6>
    1f48:	85 37       	cpi	r24, 0x75	; 117
    1f4a:	31 f4       	brne	.+12     	; 0x1f58 <vfprintf+0x24e>
    1f4c:	23 2d       	mov	r18, r3
    1f4e:	2f 7e       	andi	r18, 0xEF	; 239
    1f50:	b2 2e       	mov	r11, r18
    1f52:	2a e0       	ldi	r18, 0x0A	; 10
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	25 c0       	rjmp	.+74     	; 0x1fa2 <vfprintf+0x298>
    1f58:	93 2d       	mov	r25, r3
    1f5a:	99 7f       	andi	r25, 0xF9	; 249
    1f5c:	b9 2e       	mov	r11, r25
    1f5e:	8f 36       	cpi	r24, 0x6F	; 111
    1f60:	c1 f0       	breq	.+48     	; 0x1f92 <vfprintf+0x288>
    1f62:	18 f4       	brcc	.+6      	; 0x1f6a <vfprintf+0x260>
    1f64:	88 35       	cpi	r24, 0x58	; 88
    1f66:	79 f0       	breq	.+30     	; 0x1f86 <vfprintf+0x27c>
    1f68:	ae c0       	rjmp	.+348    	; 0x20c6 <vfprintf+0x3bc>
    1f6a:	80 37       	cpi	r24, 0x70	; 112
    1f6c:	19 f0       	breq	.+6      	; 0x1f74 <vfprintf+0x26a>
    1f6e:	88 37       	cpi	r24, 0x78	; 120
    1f70:	21 f0       	breq	.+8      	; 0x1f7a <vfprintf+0x270>
    1f72:	a9 c0       	rjmp	.+338    	; 0x20c6 <vfprintf+0x3bc>
    1f74:	e9 2f       	mov	r30, r25
    1f76:	e0 61       	ori	r30, 0x10	; 16
    1f78:	be 2e       	mov	r11, r30
    1f7a:	b4 fe       	sbrs	r11, 4
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <vfprintf+0x28e>
    1f7e:	fb 2d       	mov	r31, r11
    1f80:	f4 60       	ori	r31, 0x04	; 4
    1f82:	bf 2e       	mov	r11, r31
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <vfprintf+0x28e>
    1f86:	34 fe       	sbrs	r3, 4
    1f88:	0a c0       	rjmp	.+20     	; 0x1f9e <vfprintf+0x294>
    1f8a:	29 2f       	mov	r18, r25
    1f8c:	26 60       	ori	r18, 0x06	; 6
    1f8e:	b2 2e       	mov	r11, r18
    1f90:	06 c0       	rjmp	.+12     	; 0x1f9e <vfprintf+0x294>
    1f92:	28 e0       	ldi	r18, 0x08	; 8
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <vfprintf+0x298>
    1f98:	20 e1       	ldi	r18, 0x10	; 16
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <vfprintf+0x298>
    1f9e:	20 e1       	ldi	r18, 0x10	; 16
    1fa0:	32 e0       	ldi	r19, 0x02	; 2
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	b7 fe       	sbrs	r11, 7
    1fa6:	07 c0       	rjmp	.+14     	; 0x1fb6 <vfprintf+0x2ac>
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	0c 5f       	subi	r16, 0xFC	; 252
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <vfprintf+0x2b8>
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 5f       	subi	r16, 0xFE	; 254
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	a3 01       	movw	r20, r6
    1fc4:	f1 d0       	rcall	.+482    	; 0x21a8 <__ultoa_invert>
    1fc6:	88 2e       	mov	r8, r24
    1fc8:	86 18       	sub	r8, r6
    1fca:	fb 2d       	mov	r31, r11
    1fcc:	ff 77       	andi	r31, 0x7F	; 127
    1fce:	3f 2e       	mov	r3, r31
    1fd0:	36 fe       	sbrs	r3, 6
    1fd2:	0d c0       	rjmp	.+26     	; 0x1fee <vfprintf+0x2e4>
    1fd4:	23 2d       	mov	r18, r3
    1fd6:	2e 7f       	andi	r18, 0xFE	; 254
    1fd8:	a2 2e       	mov	r10, r18
    1fda:	89 14       	cp	r8, r9
    1fdc:	58 f4       	brcc	.+22     	; 0x1ff4 <vfprintf+0x2ea>
    1fde:	34 fe       	sbrs	r3, 4
    1fe0:	0b c0       	rjmp	.+22     	; 0x1ff8 <vfprintf+0x2ee>
    1fe2:	32 fc       	sbrc	r3, 2
    1fe4:	09 c0       	rjmp	.+18     	; 0x1ff8 <vfprintf+0x2ee>
    1fe6:	83 2d       	mov	r24, r3
    1fe8:	8e 7e       	andi	r24, 0xEE	; 238
    1fea:	a8 2e       	mov	r10, r24
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <vfprintf+0x2ee>
    1fee:	b8 2c       	mov	r11, r8
    1ff0:	a3 2c       	mov	r10, r3
    1ff2:	03 c0       	rjmp	.+6      	; 0x1ffa <vfprintf+0x2f0>
    1ff4:	b8 2c       	mov	r11, r8
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <vfprintf+0x2f0>
    1ff8:	b9 2c       	mov	r11, r9
    1ffa:	a4 fe       	sbrs	r10, 4
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <vfprintf+0x312>
    1ffe:	fe 01       	movw	r30, r28
    2000:	e8 0d       	add	r30, r8
    2002:	f1 1d       	adc	r31, r1
    2004:	80 81       	ld	r24, Z
    2006:	80 33       	cpi	r24, 0x30	; 48
    2008:	21 f4       	brne	.+8      	; 0x2012 <vfprintf+0x308>
    200a:	9a 2d       	mov	r25, r10
    200c:	99 7e       	andi	r25, 0xE9	; 233
    200e:	a9 2e       	mov	r10, r25
    2010:	09 c0       	rjmp	.+18     	; 0x2024 <vfprintf+0x31a>
    2012:	a2 fe       	sbrs	r10, 2
    2014:	06 c0       	rjmp	.+12     	; 0x2022 <vfprintf+0x318>
    2016:	b3 94       	inc	r11
    2018:	b3 94       	inc	r11
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <vfprintf+0x31a>
    201c:	8a 2d       	mov	r24, r10
    201e:	86 78       	andi	r24, 0x86	; 134
    2020:	09 f0       	breq	.+2      	; 0x2024 <vfprintf+0x31a>
    2022:	b3 94       	inc	r11
    2024:	a3 fc       	sbrc	r10, 3
    2026:	10 c0       	rjmp	.+32     	; 0x2048 <vfprintf+0x33e>
    2028:	a0 fe       	sbrs	r10, 0
    202a:	06 c0       	rjmp	.+12     	; 0x2038 <vfprintf+0x32e>
    202c:	b2 14       	cp	r11, r2
    202e:	80 f4       	brcc	.+32     	; 0x2050 <vfprintf+0x346>
    2030:	28 0c       	add	r2, r8
    2032:	92 2c       	mov	r9, r2
    2034:	9b 18       	sub	r9, r11
    2036:	0d c0       	rjmp	.+26     	; 0x2052 <vfprintf+0x348>
    2038:	b2 14       	cp	r11, r2
    203a:	58 f4       	brcc	.+22     	; 0x2052 <vfprintf+0x348>
    203c:	b6 01       	movw	r22, r12
    203e:	80 e2       	ldi	r24, 0x20	; 32
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	76 d0       	rcall	.+236    	; 0x2130 <fputc>
    2044:	b3 94       	inc	r11
    2046:	f8 cf       	rjmp	.-16     	; 0x2038 <vfprintf+0x32e>
    2048:	b2 14       	cp	r11, r2
    204a:	18 f4       	brcc	.+6      	; 0x2052 <vfprintf+0x348>
    204c:	2b 18       	sub	r2, r11
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x34a>
    2050:	98 2c       	mov	r9, r8
    2052:	21 2c       	mov	r2, r1
    2054:	a4 fe       	sbrs	r10, 4
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <vfprintf+0x36c>
    2058:	b6 01       	movw	r22, r12
    205a:	80 e3       	ldi	r24, 0x30	; 48
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	68 d0       	rcall	.+208    	; 0x2130 <fputc>
    2060:	a2 fe       	sbrs	r10, 2
    2062:	16 c0       	rjmp	.+44     	; 0x2090 <vfprintf+0x386>
    2064:	a1 fc       	sbrc	r10, 1
    2066:	03 c0       	rjmp	.+6      	; 0x206e <vfprintf+0x364>
    2068:	88 e7       	ldi	r24, 0x78	; 120
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <vfprintf+0x368>
    206e:	88 e5       	ldi	r24, 0x58	; 88
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	b6 01       	movw	r22, r12
    2074:	0c c0       	rjmp	.+24     	; 0x208e <vfprintf+0x384>
    2076:	8a 2d       	mov	r24, r10
    2078:	86 78       	andi	r24, 0x86	; 134
    207a:	51 f0       	breq	.+20     	; 0x2090 <vfprintf+0x386>
    207c:	a1 fe       	sbrs	r10, 1
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <vfprintf+0x37a>
    2080:	8b e2       	ldi	r24, 0x2B	; 43
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <vfprintf+0x37c>
    2084:	80 e2       	ldi	r24, 0x20	; 32
    2086:	a7 fc       	sbrc	r10, 7
    2088:	8d e2       	ldi	r24, 0x2D	; 45
    208a:	b6 01       	movw	r22, r12
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	50 d0       	rcall	.+160    	; 0x2130 <fputc>
    2090:	89 14       	cp	r8, r9
    2092:	30 f4       	brcc	.+12     	; 0x20a0 <vfprintf+0x396>
    2094:	b6 01       	movw	r22, r12
    2096:	80 e3       	ldi	r24, 0x30	; 48
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	4a d0       	rcall	.+148    	; 0x2130 <fputc>
    209c:	9a 94       	dec	r9
    209e:	f8 cf       	rjmp	.-16     	; 0x2090 <vfprintf+0x386>
    20a0:	8a 94       	dec	r8
    20a2:	f3 01       	movw	r30, r6
    20a4:	e8 0d       	add	r30, r8
    20a6:	f1 1d       	adc	r31, r1
    20a8:	80 81       	ld	r24, Z
    20aa:	b6 01       	movw	r22, r12
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	40 d0       	rcall	.+128    	; 0x2130 <fputc>
    20b0:	81 10       	cpse	r8, r1
    20b2:	f6 cf       	rjmp	.-20     	; 0x20a0 <vfprintf+0x396>
    20b4:	22 20       	and	r2, r2
    20b6:	09 f4       	brne	.+2      	; 0x20ba <vfprintf+0x3b0>
    20b8:	4e ce       	rjmp	.-868    	; 0x1d56 <vfprintf+0x4c>
    20ba:	b6 01       	movw	r22, r12
    20bc:	80 e2       	ldi	r24, 0x20	; 32
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	37 d0       	rcall	.+110    	; 0x2130 <fputc>
    20c2:	2a 94       	dec	r2
    20c4:	f7 cf       	rjmp	.-18     	; 0x20b4 <vfprintf+0x3aa>
    20c6:	f6 01       	movw	r30, r12
    20c8:	86 81       	ldd	r24, Z+6	; 0x06
    20ca:	97 81       	ldd	r25, Z+7	; 0x07
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <vfprintf+0x3c8>
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
    20d0:	9f ef       	ldi	r25, 0xFF	; 255
    20d2:	2b 96       	adiw	r28, 0x0b	; 11
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	7f 90       	pop	r7
    20f8:	6f 90       	pop	r6
    20fa:	5f 90       	pop	r5
    20fc:	4f 90       	pop	r4
    20fe:	3f 90       	pop	r3
    2100:	2f 90       	pop	r2
    2102:	08 95       	ret

00002104 <strnlen_P>:
    2104:	fc 01       	movw	r30, r24
    2106:	05 90       	lpm	r0, Z+
    2108:	61 50       	subi	r22, 0x01	; 1
    210a:	70 40       	sbci	r23, 0x00	; 0
    210c:	01 10       	cpse	r0, r1
    210e:	d8 f7       	brcc	.-10     	; 0x2106 <strnlen_P+0x2>
    2110:	80 95       	com	r24
    2112:	90 95       	com	r25
    2114:	8e 0f       	add	r24, r30
    2116:	9f 1f       	adc	r25, r31
    2118:	08 95       	ret

0000211a <strnlen>:
    211a:	fc 01       	movw	r30, r24
    211c:	61 50       	subi	r22, 0x01	; 1
    211e:	70 40       	sbci	r23, 0x00	; 0
    2120:	01 90       	ld	r0, Z+
    2122:	01 10       	cpse	r0, r1
    2124:	d8 f7       	brcc	.-10     	; 0x211c <strnlen+0x2>
    2126:	80 95       	com	r24
    2128:	90 95       	com	r25
    212a:	8e 0f       	add	r24, r30
    212c:	9f 1f       	adc	r25, r31
    212e:	08 95       	ret

00002130 <fputc>:
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	fb 01       	movw	r30, r22
    213a:	23 81       	ldd	r18, Z+3	; 0x03
    213c:	21 fd       	sbrc	r18, 1
    213e:	03 c0       	rjmp	.+6      	; 0x2146 <fputc+0x16>
    2140:	8f ef       	ldi	r24, 0xFF	; 255
    2142:	9f ef       	ldi	r25, 0xFF	; 255
    2144:	2c c0       	rjmp	.+88     	; 0x219e <fputc+0x6e>
    2146:	22 ff       	sbrs	r18, 2
    2148:	16 c0       	rjmp	.+44     	; 0x2176 <fputc+0x46>
    214a:	46 81       	ldd	r20, Z+6	; 0x06
    214c:	57 81       	ldd	r21, Z+7	; 0x07
    214e:	24 81       	ldd	r18, Z+4	; 0x04
    2150:	35 81       	ldd	r19, Z+5	; 0x05
    2152:	42 17       	cp	r20, r18
    2154:	53 07       	cpc	r21, r19
    2156:	44 f4       	brge	.+16     	; 0x2168 <fputc+0x38>
    2158:	a0 81       	ld	r26, Z
    215a:	b1 81       	ldd	r27, Z+1	; 0x01
    215c:	9d 01       	movw	r18, r26
    215e:	2f 5f       	subi	r18, 0xFF	; 255
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	31 83       	std	Z+1, r19	; 0x01
    2164:	20 83       	st	Z, r18
    2166:	8c 93       	st	X, r24
    2168:	26 81       	ldd	r18, Z+6	; 0x06
    216a:	37 81       	ldd	r19, Z+7	; 0x07
    216c:	2f 5f       	subi	r18, 0xFF	; 255
    216e:	3f 4f       	sbci	r19, 0xFF	; 255
    2170:	37 83       	std	Z+7, r19	; 0x07
    2172:	26 83       	std	Z+6, r18	; 0x06
    2174:	14 c0       	rjmp	.+40     	; 0x219e <fputc+0x6e>
    2176:	8b 01       	movw	r16, r22
    2178:	ec 01       	movw	r28, r24
    217a:	fb 01       	movw	r30, r22
    217c:	00 84       	ldd	r0, Z+8	; 0x08
    217e:	f1 85       	ldd	r31, Z+9	; 0x09
    2180:	e0 2d       	mov	r30, r0
    2182:	09 95       	icall
    2184:	89 2b       	or	r24, r25
    2186:	e1 f6       	brne	.-72     	; 0x2140 <fputc+0x10>
    2188:	d8 01       	movw	r26, r16
    218a:	16 96       	adiw	r26, 0x06	; 6
    218c:	8d 91       	ld	r24, X+
    218e:	9c 91       	ld	r25, X
    2190:	17 97       	sbiw	r26, 0x07	; 7
    2192:	01 96       	adiw	r24, 0x01	; 1
    2194:	17 96       	adiw	r26, 0x07	; 7
    2196:	9c 93       	st	X, r25
    2198:	8e 93       	st	-X, r24
    219a:	16 97       	sbiw	r26, 0x06	; 6
    219c:	ce 01       	movw	r24, r28
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	08 95       	ret

000021a8 <__ultoa_invert>:
    21a8:	fa 01       	movw	r30, r20
    21aa:	aa 27       	eor	r26, r26
    21ac:	28 30       	cpi	r18, 0x08	; 8
    21ae:	51 f1       	breq	.+84     	; 0x2204 <__ultoa_invert+0x5c>
    21b0:	20 31       	cpi	r18, 0x10	; 16
    21b2:	81 f1       	breq	.+96     	; 0x2214 <__ultoa_invert+0x6c>
    21b4:	e8 94       	clt
    21b6:	6f 93       	push	r22
    21b8:	6e 7f       	andi	r22, 0xFE	; 254
    21ba:	6e 5f       	subi	r22, 0xFE	; 254
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	8f 4f       	sbci	r24, 0xFF	; 255
    21c0:	9f 4f       	sbci	r25, 0xFF	; 255
    21c2:	af 4f       	sbci	r26, 0xFF	; 255
    21c4:	b1 e0       	ldi	r27, 0x01	; 1
    21c6:	3e d0       	rcall	.+124    	; 0x2244 <__ultoa_invert+0x9c>
    21c8:	b4 e0       	ldi	r27, 0x04	; 4
    21ca:	3c d0       	rcall	.+120    	; 0x2244 <__ultoa_invert+0x9c>
    21cc:	67 0f       	add	r22, r23
    21ce:	78 1f       	adc	r23, r24
    21d0:	89 1f       	adc	r24, r25
    21d2:	9a 1f       	adc	r25, r26
    21d4:	a1 1d       	adc	r26, r1
    21d6:	68 0f       	add	r22, r24
    21d8:	79 1f       	adc	r23, r25
    21da:	8a 1f       	adc	r24, r26
    21dc:	91 1d       	adc	r25, r1
    21de:	a1 1d       	adc	r26, r1
    21e0:	6a 0f       	add	r22, r26
    21e2:	71 1d       	adc	r23, r1
    21e4:	81 1d       	adc	r24, r1
    21e6:	91 1d       	adc	r25, r1
    21e8:	a1 1d       	adc	r26, r1
    21ea:	20 d0       	rcall	.+64     	; 0x222c <__ultoa_invert+0x84>
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__ultoa_invert+0x48>
    21ee:	68 94       	set
    21f0:	3f 91       	pop	r19
    21f2:	2a e0       	ldi	r18, 0x0A	; 10
    21f4:	26 9f       	mul	r18, r22
    21f6:	11 24       	eor	r1, r1
    21f8:	30 19       	sub	r19, r0
    21fa:	30 5d       	subi	r19, 0xD0	; 208
    21fc:	31 93       	st	Z+, r19
    21fe:	de f6       	brtc	.-74     	; 0x21b6 <__ultoa_invert+0xe>
    2200:	cf 01       	movw	r24, r30
    2202:	08 95       	ret
    2204:	46 2f       	mov	r20, r22
    2206:	47 70       	andi	r20, 0x07	; 7
    2208:	40 5d       	subi	r20, 0xD0	; 208
    220a:	41 93       	st	Z+, r20
    220c:	b3 e0       	ldi	r27, 0x03	; 3
    220e:	0f d0       	rcall	.+30     	; 0x222e <__ultoa_invert+0x86>
    2210:	c9 f7       	brne	.-14     	; 0x2204 <__ultoa_invert+0x5c>
    2212:	f6 cf       	rjmp	.-20     	; 0x2200 <__ultoa_invert+0x58>
    2214:	46 2f       	mov	r20, r22
    2216:	4f 70       	andi	r20, 0x0F	; 15
    2218:	40 5d       	subi	r20, 0xD0	; 208
    221a:	4a 33       	cpi	r20, 0x3A	; 58
    221c:	18 f0       	brcs	.+6      	; 0x2224 <__ultoa_invert+0x7c>
    221e:	49 5d       	subi	r20, 0xD9	; 217
    2220:	31 fd       	sbrc	r19, 1
    2222:	40 52       	subi	r20, 0x20	; 32
    2224:	41 93       	st	Z+, r20
    2226:	02 d0       	rcall	.+4      	; 0x222c <__ultoa_invert+0x84>
    2228:	a9 f7       	brne	.-22     	; 0x2214 <__ultoa_invert+0x6c>
    222a:	ea cf       	rjmp	.-44     	; 0x2200 <__ultoa_invert+0x58>
    222c:	b4 e0       	ldi	r27, 0x04	; 4
    222e:	a6 95       	lsr	r26
    2230:	97 95       	ror	r25
    2232:	87 95       	ror	r24
    2234:	77 95       	ror	r23
    2236:	67 95       	ror	r22
    2238:	ba 95       	dec	r27
    223a:	c9 f7       	brne	.-14     	; 0x222e <__ultoa_invert+0x86>
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	61 05       	cpc	r22, r1
    2240:	71 05       	cpc	r23, r1
    2242:	08 95       	ret
    2244:	9b 01       	movw	r18, r22
    2246:	ac 01       	movw	r20, r24
    2248:	0a 2e       	mov	r0, r26
    224a:	06 94       	lsr	r0
    224c:	57 95       	ror	r21
    224e:	47 95       	ror	r20
    2250:	37 95       	ror	r19
    2252:	27 95       	ror	r18
    2254:	ba 95       	dec	r27
    2256:	c9 f7       	brne	.-14     	; 0x224a <__ultoa_invert+0xa2>
    2258:	62 0f       	add	r22, r18
    225a:	73 1f       	adc	r23, r19
    225c:	84 1f       	adc	r24, r20
    225e:	95 1f       	adc	r25, r21
    2260:	a0 1d       	adc	r26, r0
    2262:	08 95       	ret

00002264 <_exit>:
    2264:	f8 94       	cli

00002266 <__stop_program>:
    2266:	ff cf       	rjmp	.-2      	; 0x2266 <__stop_program>
