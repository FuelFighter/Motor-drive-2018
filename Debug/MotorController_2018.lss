
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001efe  00001f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001efe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  0080012e  0080012e  00001fc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000201c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f4c  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001943  00000000  00000000  00007430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002568  00000000  00000000  00008d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e00  00000000  00000000  0000b2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000155e  00000000  00000000  0000c0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b27  00000000  00000000  0000d63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00011161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c6       	rjmp	.+3144   	; 0xc62 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	be c5       	rjmp	.+2940   	; 0xbae <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	58 c5       	rjmp	.+2736   	; 0xaf2 <__vector_16>
      42:	00 00       	nop
      44:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_17>
      48:	82 c7       	rjmp	.+3844   	; 0xf4e <__vector_18>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	85 c4       	rjmp	.+2314   	; 0x960 <__vector_21>
      56:	00 00       	nop
      58:	65 c4       	rjmp	.+2250   	; 0x924 <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c4       	rjmp	.+2384   	; 0x9d2 <__vector_32>
      82:	00 00       	nop
      84:	88 c4       	rjmp	.+2320   	; 0x996 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	79 07       	cpc	r23, r25
      96:	7e 07       	cpc	r23, r30
      98:	84 07       	cpc	r24, r20
      9a:	8a 07       	cpc	r24, r26
      9c:	90 07       	cpc	r25, r16
      9e:	95 07       	cpc	r25, r21
      a0:	9b 07       	cpc	r25, r27
      a2:	a1 07       	cpc	r26, r17

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee ef       	ldi	r30, 0xFE	; 254
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	ae 32       	cpi	r26, 0x2E	; 46
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	ae e2       	ldi	r26, 0x2E	; 46
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a4 37       	cpi	r26, 0x74	; 116
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	bd d4       	rcall	.+2426   	; 0xa56 <main>
      dc:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <f32_Integrator>
      e6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <f32_Integrator+0x1>
      ea:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <f32_Integrator+0x2>
      ee:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     11c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     120:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     124:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     128:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4e eb       	ldi	r20, 0xBE	; 190
     132:	52 e4       	ldi	r21, 0x42	; 66
     134:	c7 01       	movw	r24, r14
     136:	b6 01       	movw	r22, r12
     138:	0e 94 23 0c 	call	0x1846	; 0x1846 <__gesf2>
     13c:	88 23       	and	r24, r24
     13e:	54 f4       	brge	.+20     	; 0x154 <controller+0x60>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	48 e4       	ldi	r20, 0x48	; 72
     146:	52 e4       	ldi	r21, 0x42	; 66
     148:	c7 01       	movw	r24, r14
     14a:	b6 01       	movw	r22, r12
     14c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__cmpsf2>
     150:	18 16       	cp	r1, r24
     152:	24 f0       	brlt	.+8      	; 0x15c <controller+0x68>
	{
		b_saturation = true ;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
     15a:	02 c0       	rjmp	.+4      	; 0x160 <controller+0x6c>
		} else {
		b_saturation = false;
     15c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	}
	
	f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     160:	a3 01       	movw	r20, r6
     162:	92 01       	movw	r18, r4
     164:	c5 01       	movw	r24, r10
     166:	b4 01       	movw	r22, r8
     168:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     16c:	6b 01       	movw	r12, r22
     16e:	7c 01       	movw	r14, r24
     170:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <f32_CurrentDelta>
     174:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <f32_CurrentDelta+0x1>
     178:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <f32_CurrentDelta+0x2>
     17c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <f32_CurrentDelta+0x3>
	
	if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) intgral windup protection
     180:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     184:	81 11       	cpse	r24, r1
     186:	1c c0       	rjmp	.+56     	; 0x1c0 <controller+0xcc>
	{
		f32_Integrator+=f32_CurrentDelta*TimeStep ;
     188:	2a e0       	ldi	r18, 0x0A	; 10
     18a:	37 ed       	ldi	r19, 0xD7	; 215
     18c:	43 e2       	ldi	r20, 0x23	; 35
     18e:	5c e3       	ldi	r21, 0x3C	; 60
     190:	c7 01       	movw	r24, r14
     192:	b6 01       	movw	r22, r12
     194:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3>
     198:	9b 01       	movw	r18, r22
     19a:	ac 01       	movw	r20, r24
     19c:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <f32_Integrator>
     1a0:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <f32_Integrator+0x1>
     1a4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <f32_Integrator+0x2>
     1a8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <f32_Integrator+0x3>
     1ac:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     1b0:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <f32_Integrator>
     1b4:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <f32_Integrator+0x1>
     1b8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <f32_Integrator+0x2>
     1bc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <f32_Integrator+0x3>
	}
	
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
	f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c0:	23 e3       	ldi	r18, 0x33	; 51
     1c2:	33 e3       	ldi	r19, 0x33	; 51
     1c4:	43 e7       	ldi	r20, 0x73	; 115
     1c6:	52 e4       	ldi	r21, 0x42	; 66
     1c8:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <f32_Integrator>
     1cc:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <f32_Integrator+0x1>
     1d0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <f32_Integrator+0x2>
     1d4:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <f32_Integrator+0x3>
     1d8:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3>
     1dc:	4b 01       	movw	r8, r22
     1de:	5c 01       	movw	r10, r24
     1e0:	29 ef       	ldi	r18, 0xF9	; 249
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 e7       	ldi	r20, 0x79	; 121
     1e6:	5f e3       	ldi	r21, 0x3F	; 63
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3>
     1f0:	9b 01       	movw	r18, r22
     1f2:	ac 01       	movw	r20, r24
     1f4:	c5 01       	movw	r24, r10
     1f6:	b4 01       	movw	r22, r8
     1f8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	48 e4       	ldi	r20, 0x48	; 72
     202:	52 e4       	ldi	r21, 0x42	; 66
     204:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     208:	6b 01       	movw	r12, r22
     20a:	7c 01       	movw	r14, r24
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4e eb       	ldi	r20, 0xBE	; 190
     222:	52 e4       	ldi	r21, 0x42	; 66
     224:	0e 94 23 0c 	call	0x1846	; 0x1846 <__gesf2>
     228:	18 16       	cp	r1, r24
     22a:	6c f4       	brge	.+26     	; 0x246 <controller+0x152>
	{
		f32_DutyCycleCmd = 95;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	ae eb       	ldi	r26, 0xBE	; 190
     232:	b2 e4       	ldi	r27, 0x42	; 66
     234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     238:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     23c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     240:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     244:	16 c0       	rjmp	.+44     	; 0x272 <controller+0x17e>
	}
	
	if (f32_DutyCycleCmd < 50)
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	48 e4       	ldi	r20, 0x48	; 72
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__cmpsf2>
     256:	88 23       	and	r24, r24
     258:	64 f4       	brge	.+24     	; 0x272 <controller+0x17e>
	{
		f32_DutyCycleCmd = 50;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a8 e4       	ldi	r26, 0x48	; 72
     260:	b2 e4       	ldi	r27, 0x42	; 66
     262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     26a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     26e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
     272:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     276:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	48 ec       	ldi	r20, 0xC8	; 200
     280:	52 e4       	ldi	r21, 0x42	; 66
     282:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     286:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     28e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     292:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	be 01       	movw	r22, r28
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__floatunsisf>
     2a4:	9b 01       	movw	r18, r22
     2a6:	ac 01       	movw	r20, r24
     2a8:	c7 01       	movw	r24, r14
     2aa:	b6 01       	movw	r22, r12
     2ac:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3>
     2b0:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fixsfsi>
     2b4:	e8 e9       	ldi	r30, 0x98	; 152
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	71 83       	std	Z+1, r23	; 0x01
     2ba:	60 83       	st	Z, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     2c4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ;
     2c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2d8:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixunssfsi>
     2dc:	f8 01       	movw	r30, r16
     2de:	60 83       	st	Z, r22
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	7f 90       	pop	r7
     2fa:	6f 90       	pop	r6
     2fc:	5f 90       	pop	r5
     2fe:	4f 90       	pop	r4
     300:	08 95       	ret

00000302 <drivers_init>:

void drivers_init()
{
	DDRB |= (1 << PB4) ;
     302:	24 9a       	sbi	0x04, 4	; 4
     304:	08 95       	ret

00000306 <drivers>:
}
void drivers(uint8_t b_state)
{
	if (b_state)
     306:	88 23       	and	r24, r24
     308:	11 f0       	breq	.+4      	; 0x30e <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     30a:	2c 9a       	sbi	0x05, 4	; 5
     30c:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     30e:	2c 98       	cbi	0x05, 4	; 5
     310:	08 95       	ret

00000312 <manage_motor>:
	}
}

void manage_motor(ModuleValues_t * vals)
{
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
		if (vals->f32_batt_volt > 15.0) //if motor controller card powered
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e7       	ldi	r20, 0x70	; 112
     32a:	51 e4       	ldi	r21, 0x41	; 65
     32c:	68 85       	ldd	r22, Y+8	; 0x08
     32e:	79 85       	ldd	r23, Y+9	; 0x09
     330:	8a 85       	ldd	r24, Y+10	; 0x0a
     332:	9b 85       	ldd	r25, Y+11	; 0x0b
     334:	0e 94 23 0c 	call	0x1846	; 0x1846 <__gesf2>
     338:	18 16       	cp	r1, r24
     33a:	0c f0       	brlt	.+2      	; 0x33e <manage_motor+0x2c>
     33c:	47 c0       	rjmp	.+142    	; 0x3cc <manage_motor+0xba>
	{
		if (vals->motor_status == FW_BRAKE || vals->motor_status == BW_ACCEL)
     33e:	8e 89       	ldd	r24, Y+22	; 0x16
     340:	82 50       	subi	r24, 0x02	; 2
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	d8 f4       	brcc	.+54     	; 0x37c <manage_motor+0x6a>
		{
			vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     346:	84 ef       	ldi	r24, 0xF4	; 244
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	9d 8b       	std	Y+21, r25	; 0x15
     34c:	8c 8b       	std	Y+20, r24	; 0x14
			drivers(1); //drivers turn on
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	da df       	rcall	.-76     	; 0x306 <drivers>
			controller(-vals->u8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle);
     352:	c8 80       	ld	r12, Y
     354:	d9 80       	ldd	r13, Y+1	; 0x01
     356:	ea 80       	ldd	r14, Y+2	; 0x02
     358:	fb 80       	ldd	r15, Y+3	; 0x03
     35a:	6a 89       	ldd	r22, Y+18	; 0x12
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	71 95       	neg	r23
     360:	61 95       	neg	r22
     362:	71 09       	sbc	r23, r1
     364:	07 2e       	mov	r0, r23
     366:	00 0c       	add	r0, r0
     368:	88 0b       	sbc	r24, r24
     36a:	99 0b       	sbc	r25, r25
     36c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatsisf>
     370:	8e 01       	movw	r16, r28
     372:	0d 5e       	subi	r16, 0xED	; 237
     374:	1f 4f       	sbci	r17, 0xFF	; 255
     376:	a7 01       	movw	r20, r14
     378:	96 01       	movw	r18, r12
     37a:	bc de       	rcall	.-648    	; 0xf4 <controller>
		}
	
		if (/*vals->motor_status == BW_BRAKE || */vals->motor_status == FW_ACCEL)
     37c:	8e 89       	ldd	r24, Y+22	; 0x16
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	b1 f4       	brne	.+44     	; 0x3ae <manage_motor+0x9c>
		{
			vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ;
     382:	84 ef       	ldi	r24, 0xF4	; 244
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	9d 8b       	std	Y+21, r25	; 0x15
			drivers(1); //drivers turn on
     388:	8c 8b       	std	Y+20, r24	; 0x14
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	bc df       	rcall	.-136    	; 0x306 <drivers>
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle);
     38e:	c8 80       	ld	r12, Y
     390:	d9 80       	ldd	r13, Y+1	; 0x01
     392:	ea 80       	ldd	r14, Y+2	; 0x02
     394:	fb 80       	ldd	r15, Y+3	; 0x03
     396:	6a 89       	ldd	r22, Y+18	; 0x12
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__floatunsisf>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0d 5e       	subi	r16, 0xED	; 237
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	a3 de       	rcall	.-698    	; 0xf4 <controller>
		}
		if (vals->motor_status == IDLE)
     3ae:	8e 89       	ldd	r24, Y+22	; 0x16
     3b0:	81 11       	cpse	r24, r1
     3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <manage_motor+0xc0>
				drivers(0);//drivers shutdown
				reset_I(); //reset integrator
			}else{
				vals->u16_watchdog -- ;
			}*/
			controller(0.0, vals->f32_motor_current,&vals->u8_duty_cycle);		
     3b4:	8e 01       	movw	r16, r28
     3b6:	0d 5e       	subi	r16, 0xED	; 237
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	28 81       	ld	r18, Y
     3bc:	39 81       	ldd	r19, Y+1	; 0x01
     3be:	4a 81       	ldd	r20, Y+2	; 0x02
     3c0:	5b 81       	ldd	r21, Y+3	; 0x03
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	cb 01       	movw	r24, r22
		}
	}else{
		drivers(0);//drivers shutdown
     3c8:	95 de       	rcall	.-726    	; 0xf4 <controller>
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <manage_motor+0xc0>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
		reset_I(); //reset integrator
     3ce:	9b df       	rcall	.-202    	; 0x306 <drivers>
     3d0:	88 de       	rcall	.-752    	; 0xe2 <reset_I>
	}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <SPI_handler_0>:
}

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     3ea:	6a e3       	ldi	r22, 0x3A	; 58
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	78 d5       	rcall	.+2800   	; 0xee2 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	43 e0       	ldi	r20, 0x03	; 3
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	67 e3       	ldi	r22, 0x37	; 55
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	8a e3       	ldi	r24, 0x3A	; 58
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 0f 0a 	call	0x141e	; 0x141e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     404:	e7 e3       	ldi	r30, 0x37	; 55
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	61 81       	ldd	r22, Z+1	; 0x01
     40a:	6f 71       	andi	r22, 0x1F	; 31
     40c:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg);
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	76 2f       	mov	r23, r22
     412:	66 27       	eor	r22, r22
     414:	82 81       	ldd	r24, Z+2	; 0x02
     416:	68 2b       	or	r22, r24
     418:	ce 01       	movw	r24, r28
     41a:	3a d4       	rcall	.+2164   	; 0xc90 <handle_current_sensor>
}
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     428:	6a e3       	ldi	r22, 0x3A	; 58
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	59 d5       	rcall	.+2738   	; 0xee2 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	43 e0       	ldi	r20, 0x03	; 3
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	67 e3       	ldi	r22, 0x37	; 55
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	8a e3       	ldi	r24, 0x3A	; 58
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	ef d7       	rcall	.+4062   	; 0x141e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     440:	e7 e3       	ldi	r30, 0x37	; 55
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	61 81       	ldd	r22, Z+1	; 0x01
     446:	6f 71       	andi	r22, 0x1F	; 31
     448:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg);
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	76 2f       	mov	r23, r22
     44e:	66 27       	eor	r22, r22
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	68 2b       	or	r22, r24
     454:	ce 01       	movw	r24, r28
     456:	1c d4       	rcall	.+2104   	; 0xc90 <handle_current_sensor>
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     464:	6a e3       	ldi	r22, 0x3A	; 58
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	3b d5       	rcall	.+2678   	; 0xee2 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	43 e0       	ldi	r20, 0x03	; 3
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	67 e3       	ldi	r22, 0x37	; 55
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	8a e3       	ldi	r24, 0x3A	; 58
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	d1 d7       	rcall	.+4002   	; 0x141e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     47c:	e7 e3       	ldi	r30, 0x37	; 55
     47e:	f1 e0       	ldi	r31, 0x01	; 1
     480:	61 81       	ldd	r22, Z+1	; 0x01
     482:	6f 71       	andi	r22, 0x1F	; 31
     484:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	76 2f       	mov	r23, r22
     48a:	66 27       	eor	r22, r22
     48c:	82 81       	ldd	r24, Z+2	; 0x02
     48e:	68 2b       	or	r22, r24
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__floatunsisf>
     498:	23 e3       	ldi	r18, 0x33	; 51
     49a:	33 e3       	ldi	r19, 0x33	; 51
     49c:	44 e8       	ldi	r20, 0x84	; 132
     49e:	52 e4       	ldi	r21, 0x42	; 66
     4a0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     4a4:	24 ea       	ldi	r18, 0xA4	; 164
     4a6:	30 e7       	ldi	r19, 0x70	; 112
     4a8:	4d eb       	ldi	r20, 0xBD	; 189
     4aa:	5e e3       	ldi	r21, 0x3E	; 62
     4ac:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     4b0:	68 83       	st	Y, r22
     4b2:	79 83       	std	Y+1, r23	; 0x01
     4b4:	8a 83       	std	Y+2, r24	; 0x02
     4b6:	9b 83       	std	Y+3, r25	; 0x03
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     4c4:	6a e3       	ldi	r22, 0x3A	; 58
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	84 e0       	ldi	r24, 0x04	; 4
     4ca:	0b d5       	rcall	.+2582   	; 0xee2 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	43 e0       	ldi	r20, 0x03	; 3
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	67 e3       	ldi	r22, 0x37	; 55
     4d4:	71 e0       	ldi	r23, 0x01	; 1
     4d6:	8a e3       	ldi	r24, 0x3A	; 58
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	a1 d7       	rcall	.+3906   	; 0x141e <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4dc:	e7 e3       	ldi	r30, 0x37	; 55
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	61 81       	ldd	r22, Z+1	; 0x01
     4e2:	6f 71       	andi	r22, 0x1F	; 31
     4e4:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	76 2f       	mov	r23, r22
     4ea:	66 27       	eor	r22, r22
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	68 2b       	or	r22, r24
     4f0:	ce 01       	movw	r24, r28
     4f2:	3e d4       	rcall	.+2172   	; 0xd70 <handle_temp_sensor>
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <handle_can>:

///////////////////////  CAN  /////////////////////////


//recieving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	8c 01       	movw	r16, r24
     504:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     506:	cb 01       	movw	r24, r22
     508:	68 d6       	rcall	.+3280   	; 0x11da <can_read_message_if_new>
     50a:	88 23       	and	r24, r24
     50c:	09 f4       	brne	.+2      	; 0x510 <handle_can+0x16>
     50e:	45 c0       	rjmp	.+138    	; 0x59a <handle_can+0xa0>
		switch (rx->id){
     510:	88 81       	ld	r24, Y
     512:	99 81       	ldd	r25, Y+1	; 0x01
     514:	80 31       	cpi	r24, 0x10	; 16
     516:	21 e0       	ldi	r18, 0x01	; 1
     518:	92 07       	cpc	r25, r18
     51a:	09 f1       	breq	.+66     	; 0x55e <handle_can+0x64>
     51c:	80 33       	cpi	r24, 0x30	; 48
     51e:	92 40       	sbci	r25, 0x02	; 2
     520:	e1 f5       	brne	.+120    	; 0x59a <handle_can+0xa0>
			case FORWARD_CAN_ID:
			
			if (rx->data.u8[3] > 10)
     522:	8e 81       	ldd	r24, Y+6	; 0x06
     524:	8b 30       	cpi	r24, 0x0B	; 11
     526:	a0 f0       	brcs	.+40     	; 0x550 <handle_can+0x56>
			{
				vals->motor_status = FW_ACCEL ;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	f8 01       	movw	r30, r16
     52c:	86 8b       	std	Z+22, r24	; 0x16
				vals->u8_throttle_cmd = rx->data.u8[3]/10.0 ;
     52e:	6e 81       	ldd	r22, Y+6	; 0x06
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatsisf>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e2       	ldi	r20, 0x20	; 32
     540:	51 e4       	ldi	r21, 0x41	; 65
     542:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     546:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixunssfsi>
     54a:	f8 01       	movw	r30, r16
     54c:	62 8b       	std	Z+18, r22	; 0x12
     54e:	25 c0       	rjmp	.+74     	; 0x59a <handle_can+0xa0>
				} else {
				vals->motor_status = IDLE ;
     550:	f8 01       	movw	r30, r16
     552:	16 8a       	std	Z+22, r1	; 0x16
				vals->u8_throttle_cmd = 0;
     554:	12 8a       	std	Z+18, r1	; 0x12
			}
			
			if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	8a 31       	cpi	r24, 0x1A	; 26
     55a:	60 f4       	brcc	.+24     	; 0x574 <handle_can+0x7a>
     55c:	1e c0       	rjmp	.+60     	; 0x59a <handle_can+0xa0>
			
			
			break;
			
			case BRAKE_CAN_ID:
			if (vals->Direction == FORWARD)
     55e:	f8 01       	movw	r30, r16
     560:	87 89       	ldd	r24, Z+23	; 0x17
     562:	81 11       	cpse	r24, r1
     564:	03 c0       	rjmp	.+6      	; 0x56c <handle_can+0x72>
			{
				vals->motor_status = FW_BRAKE;
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	86 8b       	std	Z+22, r24	; 0x16
     56a:	17 c0       	rjmp	.+46     	; 0x59a <handle_can+0xa0>
				} else {
				vals->motor_status = BW_BRAKE;
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	f8 01       	movw	r30, r16
     570:	86 8b       	std	Z+22, r24	; 0x16
			}
			break;
		}
	}
}
     572:	13 c0       	rjmp	.+38     	; 0x59a <handle_can+0xa0>
				vals->u8_throttle_cmd = 0;
			}
			
			if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
			{
				vals->motor_status = FW_BRAKE ;
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	f8 01       	movw	r30, r16
     578:	86 8b       	std	Z+22, r24	; 0x16
				vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     57a:	6d 81       	ldd	r22, Y+5	; 0x05
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatsisf>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e2       	ldi	r20, 0x20	; 32
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     592:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixunssfsi>
     596:	f8 01       	movw	r30, r16
     598:	62 8b       	std	Z+18, r22	; 0x12
				vals->motor_status = BW_BRAKE;
			}
			break;
		}
	}
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
	if(*send){
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 81       	ld	r18, Z
     5b4:	22 23       	and	r18, r18
     5b6:	61 f1       	breq	.+88     	; 0x610 <handle_motor_status_can_msg+0x6c>
     5b8:	eb 01       	movw	r28, r22
     5ba:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     5bc:	0f 2e       	mov	r0, r31
     5be:	fb ed       	ldi	r31, 0xDB	; 219
     5c0:	ef 2e       	mov	r14, r31
     5c2:	f2 e0       	ldi	r31, 0x02	; 2
     5c4:	ff 2e       	mov	r15, r31
     5c6:	f0 2d       	mov	r31, r0
     5c8:	8e 89       	ldd	r24, Y+22	; 0x16
     5ca:	f7 01       	movw	r30, r14
     5cc:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = 0;
     5ce:	14 82       	std	Z+4, r1	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     5d0:	68 81       	ld	r22, Y
     5d2:	79 81       	ldd	r23, Y+1	; 0x01
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	9b 81       	ldd	r25, Y+3	; 0x03
     5d8:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixunssfsi>
     5dc:	f7 01       	movw	r30, r14
     5de:	76 83       	std	Z+6, r23	; 0x06
     5e0:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = (uint16_t)(vals->f32_energy*1000) ;
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	4a e7       	ldi	r20, 0x7A	; 122
     5e8:	54 e4       	ldi	r21, 0x44	; 68
     5ea:	6c 85       	ldd	r22, Y+12	; 0x0c
     5ec:	7d 85       	ldd	r23, Y+13	; 0x0d
     5ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     5f0:	9f 85       	ldd	r25, Y+15	; 0x0f
     5f2:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3>
     5f6:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixunssfsi>
     5fa:	f7 01       	movw	r30, r14
     5fc:	70 87       	std	Z+8, r23	; 0x08
     5fe:	67 83       	std	Z+7, r22	; 0x07
		txFrame.data.u16[3] = vals->u8_car_speed;
     600:	89 89       	ldd	r24, Y+17	; 0x11
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	92 87       	std	Z+10, r25	; 0x0a
     606:	81 87       	std	Z+9, r24	; 0x09
		
		can_send_message(&txFrame);
     608:	c7 01       	movw	r24, r14
     60a:	2a d6       	rcall	.+3156   	; 0x1260 <can_send_message>
		*send = 0;
     60c:	f8 01       	movw	r30, r16
     60e:	10 82       	st	Z, r1
	}
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret

0000061e <receive_uart>:

///////////////////  UART  ////////////////////

void receive_uart(ModuleValues_t * vals)
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <receive_uart+0xa>
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	ac 01       	movw	r20, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     62e:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <rx0_Head>
     632:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <rx0_Tail>
	if(uart_AvailableBytes()!=0){
     636:	92 1b       	sub	r25, r18
     638:	9f 71       	andi	r25, 0x1F	; 31
     63a:	59 f1       	breq	.+86     	; 0x692 <receive_uart+0x74>
		volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     63c:	8a 01       	movw	r16, r20
     63e:	13 d1       	rcall	.+550    	; 0x866 <uart0_getint>
		uart_flush();
     640:	9a 83       	std	Y+2, r25	; 0x02
     642:	89 83       	std	Y+1, r24	; 0x01
		if (u16_data_received >10 && u16_data_received <= 20)
     644:	95 d0       	rcall	.+298    	; 0x770 <uart0_flush>
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	9a 81       	ldd	r25, Y+2	; 0x02
     64a:	0b 97       	sbiw	r24, 0x0b	; 11
     64c:	58 f0       	brcs	.+22     	; 0x664 <receive_uart+0x46>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	45 97       	sbiw	r24, 0x15	; 21
		{
			vals->u8_throttle_cmd = u16_data_received-10 ;
     654:	38 f4       	brcc	.+14     	; 0x664 <receive_uart+0x46>
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	9a 81       	ldd	r25, Y+2	; 0x02
     65a:	8a 50       	subi	r24, 0x0A	; 10
     65c:	f8 01       	movw	r30, r16
			vals->motor_status = FW_BRAKE ;
     65e:	82 8b       	std	Z+18, r24	; 0x12
     660:	82 e0       	ldi	r24, 0x02	; 2
		}
		if (u16_data_received>0 && u16_data_received <= 10)
     662:	86 8b       	std	Z+22, r24	; 0x16
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	89 2b       	or	r24, r25
     66a:	51 f0       	breq	.+20     	; 0x680 <receive_uart+0x62>
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	0b 97       	sbiw	r24, 0x0b	; 11
		{
			vals->u8_throttle_cmd = u16_data_received ;
     672:	30 f4       	brcc	.+12     	; 0x680 <receive_uart+0x62>
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	f8 01       	movw	r30, r16
			vals->motor_status = FW_ACCEL;
     67a:	82 8b       	std	Z+18, r24	; 0x12
     67c:	81 e0       	ldi	r24, 0x01	; 1
		}
		if (u16_data_received == 0)
     67e:	86 8b       	std	Z+22, r24	; 0x16
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	89 2b       	or	r24, r25
		{
			vals->u8_throttle_cmd = u16_data_received ;
     686:	29 f4       	brne	.+10     	; 0x692 <receive_uart+0x74>
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	9a 81       	ldd	r25, Y+2	; 0x02
     68c:	f8 01       	movw	r30, r16
			vals->motor_status = IDLE;
     68e:	82 8b       	std	Z+18, r24	; 0x12
		}
	}
     690:	16 8a       	std	Z+22, r1	; 0x16
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     6a0:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     6a2:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     6a4:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     6a6:	ea e6       	ldi	r30, 0x6A	; 106
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	8c 60       	ori	r24, 0x0C	; 12
     6ae:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     6b0:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     6b2:	ed 9a       	sbi	0x1d, 5	; 29
     6b4:	08 95       	ret

000006b6 <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint16_t u16_period) // period in ms
{
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	1f 92       	push	r1
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	6c 01       	movw	r12, r24
     6d6:	7b 01       	movw	r14, r22
     6d8:	8a 01       	movw	r16, r20
	volatile uint8_t u8_new_speed = (uint8_t)(((float)*u16_counter)*D_WHEEL*PI/N_MAG/u16_period); // speed calculated in mm/ms
     6da:	fb 01       	movw	r30, r22
     6dc:	60 81       	ld	r22, Z
     6de:	71 81       	ldd	r23, Z+1	; 0x01
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	fe d7       	rcall	.+4092   	; 0x16e2 <__floatunsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	4a ef       	ldi	r20, 0xFA	; 250
     6ec:	53 e4       	ldi	r21, 0x43	; 67
     6ee:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3>
     6f2:	23 ec       	ldi	r18, 0xC3	; 195
     6f4:	35 ef       	ldi	r19, 0xF5	; 245
     6f6:	48 e4       	ldi	r20, 0x48	; 72
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3>
     6fe:	4b 01       	movw	r8, r22
     700:	5c 01       	movw	r10, r24
     702:	b8 01       	movw	r22, r16
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	ec d7       	rcall	.+4056   	; 0x16e2 <__floatunsisf>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	c5 01       	movw	r24, r10
     710:	b4 01       	movw	r22, r8
     712:	4e d7       	rcall	.+3740   	; 0x15b0 <__divsf3>
     714:	ba d7       	rcall	.+3956   	; 0x168a <__fixunssfsi>
     716:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	f6 01       	movw	r30, r12
     71c:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     71e:	f7 01       	movw	r30, r14
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	10 82       	st	Z, r1
}
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	08 95       	ret

00000740 <uart0_putc>:
     740:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <tx0_Head>
     744:	9f 5f       	subi	r25, 0xFF	; 255
     746:	9f 71       	andi	r25, 0x1F	; 31
     748:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <tx0_Tail>
     74c:	92 17       	cp	r25, r18
     74e:	e1 f3       	breq	.-8      	; 0x748 <uart0_putc+0x8>
     750:	e9 2f       	mov	r30, r25
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	e2 5b       	subi	r30, 0xB2	; 178
     756:	fc 4f       	sbci	r31, 0xFC	; 252
     758:	80 83       	st	Z, r24
     75a:	2f b7       	in	r18, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <tx0_Head>
     762:	e1 ec       	ldi	r30, 0xC1	; 193
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	80 62       	ori	r24, 0x20	; 32
     76a:	80 83       	st	Z, r24
     76c:	2f bf       	out	0x3f, r18	; 63
     76e:	08 95       	ret

00000770 <uart0_flush>:
     770:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <tx0_Tail>
     774:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <tx0_Head>
     778:	98 13       	cpse	r25, r24
     77a:	fa cf       	rjmp	.-12     	; 0x770 <uart0_flush>
     77c:	08 95       	ret

0000077e <uart1_putc>:
     77e:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <tx1_Head>
     782:	9f 5f       	subi	r25, 0xFF	; 255
     784:	9f 71       	andi	r25, 0x1F	; 31
     786:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <tx1_Tail>
     78a:	92 17       	cp	r25, r18
     78c:	e1 f3       	breq	.-8      	; 0x786 <uart1_putc+0x8>
     78e:	e9 2f       	mov	r30, r25
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	e7 5f       	subi	r30, 0xF7	; 247
     794:	fc 4f       	sbci	r31, 0xFC	; 252
     796:	80 83       	st	Z, r24
     798:	2f b7       	in	r18, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <tx1_Head>
     7a0:	e9 ec       	ldi	r30, 0xC9	; 201
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	80 62       	ori	r24, 0x20	; 32
     7a8:	80 83       	st	Z, r24
     7aa:	2f bf       	out	0x3f, r18	; 63
     7ac:	08 95       	ret

000007ae <uart_putchar>:
     7ae:	cf 93       	push	r28
     7b0:	c8 2f       	mov	r28, r24
     7b2:	fb 01       	movw	r30, r22
     7b4:	84 85       	ldd	r24, Z+12	; 0x0c
     7b6:	95 85       	ldd	r25, Z+13	; 0x0d
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	39 f0       	breq	.+14     	; 0x7ca <uart_putchar+0x1c>
     7bc:	ca 30       	cpi	r28, 0x0A	; 10
     7be:	11 f4       	brne	.+4      	; 0x7c4 <uart_putchar+0x16>
     7c0:	8d e0       	ldi	r24, 0x0D	; 13
     7c2:	be df       	rcall	.-132    	; 0x740 <uart0_putc>
     7c4:	8c 2f       	mov	r24, r28
     7c6:	bc df       	rcall	.-136    	; 0x740 <uart0_putc>
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <uart_putchar+0x28>
     7ca:	ca 30       	cpi	r28, 0x0A	; 10
     7cc:	11 f4       	brne	.+4      	; 0x7d2 <uart_putchar+0x24>
     7ce:	8d e0       	ldi	r24, 0x0D	; 13
     7d0:	d6 df       	rcall	.-84     	; 0x77e <uart1_putc>
     7d2:	8c 2f       	mov	r24, r28
     7d4:	d4 df       	rcall	.-88     	; 0x77e <uart1_putc>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <uart0_getc>:
     7de:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <rx0_Tail>
     7e2:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <rx0_Head>
     7e6:	89 17       	cp	r24, r25
     7e8:	59 f0       	breq	.+22     	; 0x800 <uart0_getc+0x22>
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	98 2f       	mov	r25, r24
     7ee:	9f 71       	andi	r25, 0x1F	; 31
     7f0:	e9 2f       	mov	r30, r25
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	ea 51       	subi	r30, 0x1A	; 26
     7f6:	fd 4f       	sbci	r31, 0xFD	; 253
     7f8:	80 81       	ld	r24, Z
     7fa:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <rx0_Tail>
     7fe:	08 95       	ret
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	08 95       	ret

00000804 <uart0_getlnToFirstWhiteSpace>:
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	7c 01       	movw	r14, r24
     812:	16 2f       	mov	r17, r22
     814:	e4 df       	rcall	.-56     	; 0x7de <uart0_getc>
     816:	f7 01       	movw	r30, r14
     818:	80 83       	st	Z, r24
     81a:	81 32       	cpi	r24, 0x21	; 33
     81c:	d8 f3       	brcs	.-10     	; 0x814 <uart0_getlnToFirstWhiteSpace+0x10>
     81e:	e7 01       	movw	r28, r14
     820:	21 96       	adiw	r28, 0x01	; 1
     822:	12 30       	cpi	r17, 0x02	; 2
     824:	c1 f0       	breq	.+48     	; 0x856 <uart0_getlnToFirstWhiteSpace+0x52>
     826:	13 50       	subi	r17, 0x03	; 3
     828:	81 2f       	mov	r24, r17
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	02 96       	adiw	r24, 0x02	; 2
     82e:	87 01       	movw	r16, r14
     830:	08 0f       	add	r16, r24
     832:	19 1f       	adc	r17, r25
     834:	d4 df       	rcall	.-88     	; 0x7de <uart0_getc>
     836:	88 83       	st	Y, r24
     838:	88 23       	and	r24, r24
     83a:	e1 f3       	breq	.-8      	; 0x834 <uart0_getlnToFirstWhiteSpace+0x30>
     83c:	8d 30       	cpi	r24, 0x0D	; 13
     83e:	21 f4       	brne	.+8      	; 0x848 <uart0_getlnToFirstWhiteSpace+0x44>
     840:	ce df       	rcall	.-100    	; 0x7de <uart0_getc>
     842:	88 23       	and	r24, r24
     844:	e9 f3       	breq	.-6      	; 0x840 <uart0_getlnToFirstWhiteSpace+0x3c>
     846:	07 c0       	rjmp	.+14     	; 0x856 <uart0_getlnToFirstWhiteSpace+0x52>
     848:	81 32       	cpi	r24, 0x21	; 33
     84a:	28 f0       	brcs	.+10     	; 0x856 <uart0_getlnToFirstWhiteSpace+0x52>
     84c:	21 96       	adiw	r28, 0x01	; 1
     84e:	0c 17       	cp	r16, r28
     850:	1d 07       	cpc	r17, r29
     852:	81 f7       	brne	.-32     	; 0x834 <uart0_getlnToFirstWhiteSpace+0x30>
     854:	e8 01       	movw	r28, r16
     856:	18 82       	st	Y, r1
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	08 95       	ret

00000866 <uart0_getint>:
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	27 97       	sbiw	r28, 0x07	; 7
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	67 e0       	ldi	r22, 0x07	; 7
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	c1 df       	rcall	.-126    	; 0x804 <uart0_getlnToFirstWhiteSpace>
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	0e 94 93 0c 	call	0x1926	; 0x1926 <atoi>
     88a:	27 96       	adiw	r28, 0x07	; 7
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <uart0_getData>:
     89c:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <rx0_Tail>
     8a0:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <rx0_Head>
     8a4:	89 17       	cp	r24, r25
     8a6:	61 f0       	breq	.+24     	; 0x8c0 <uart0_getData+0x24>
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	8f 71       	andi	r24, 0x1F	; 31
     8ac:	e8 2f       	mov	r30, r24
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ea 51       	subi	r30, 0x1A	; 26
     8b2:	fd 4f       	sbci	r31, 0xFD	; 253
     8b4:	90 81       	ld	r25, Z
     8b6:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <rx0_Tail>
     8ba:	89 2f       	mov	r24, r25
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	08 95       	ret
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	9f ef       	ldi	r25, 0xFF	; 255
     8c4:	08 95       	ret

000008c6 <uart1_getData>:
     8c6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <rx1_Tail>
     8ca:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <rx1_Head>
     8ce:	89 17       	cp	r24, r25
     8d0:	61 f0       	breq	.+24     	; 0x8ea <uart1_getData+0x24>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	8f 71       	andi	r24, 0x1F	; 31
     8d6:	e8 2f       	mov	r30, r24
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	e6 5d       	subi	r30, 0xD6	; 214
     8dc:	fc 4f       	sbci	r31, 0xFC	; 252
     8de:	90 81       	ld	r25, Z
     8e0:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <rx1_Tail>
     8e4:	89 2f       	mov	r24, r25
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	08 95       	ret
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	9f ef       	ldi	r25, 0xFF	; 255
     8ee:	08 95       	ret

000008f0 <uart_getchar>:
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	fc 01       	movw	r30, r24
     8f6:	84 85       	ldd	r24, Z+12	; 0x0c
     8f8:	95 85       	ldd	r25, Z+13	; 0x0d
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	41 f0       	breq	.+16     	; 0x90e <uart_getchar+0x1e>
     8fe:	ce df       	rcall	.-100    	; 0x89c <uart0_getData>
     900:	ec 01       	movw	r28, r24
     902:	99 23       	and	r25, r25
     904:	e4 f3       	brlt	.-8      	; 0x8fe <uart_getchar+0xe>
     906:	1c df       	rcall	.-456    	; 0x740 <uart0_putc>
     908:	ce 01       	movw	r24, r28
     90a:	99 27       	eor	r25, r25
     90c:	07 c0       	rjmp	.+14     	; 0x91c <uart_getchar+0x2c>
     90e:	db df       	rcall	.-74     	; 0x8c6 <uart1_getData>
     910:	ec 01       	movw	r28, r24
     912:	99 23       	and	r25, r25
     914:	e4 f3       	brlt	.-8      	; 0x90e <uart_getchar+0x1e>
     916:	33 df       	rcall	.-410    	; 0x77e <uart1_putc>
     918:	ce 01       	movw	r24, r28
     91a:	99 27       	eor	r25, r25
     91c:	99 27       	eor	r25, r25
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <__vector_22>:
     924:	0f 93       	push	r16
     926:	0f b7       	in	r16, 0x3f	; 63
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
     92c:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <tx0_Tail>
     930:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <tx0_Head>
     934:	e3 95       	inc	r30
     936:	ef 71       	andi	r30, 0x1F	; 31
     938:	ef 13       	cpse	r30, r31
     93a:	05 c0       	rjmp	.+10     	; 0x946 <USART0_TX_CONTINUE>
     93c:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     940:	ff 7d       	andi	r31, 0xDF	; 223
     942:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000946 <USART0_TX_CONTINUE>:
     946:	e0 93 07 03 	sts	0x0307, r30	; 0x800307 <tx0_Tail>
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	e2 5b       	subi	r30, 0xB2	; 178
     94e:	fc 4f       	sbci	r31, 0xFC	; 252
     950:	e0 81       	ld	r30, Z
     952:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000956 <USART0_TX_EXIT>:
     956:	ff 91       	pop	r31
     958:	ef 91       	pop	r30
     95a:	0f bf       	out	0x3f, r16	; 63
     95c:	0f 91       	pop	r16
     95e:	18 95       	reti

00000960 <__vector_21>:
     960:	0f 93       	push	r16
     962:	0f b7       	in	r16, 0x3f	; 63
     964:	9f 93       	push	r25
     966:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
     96e:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <rx0_Head>
     972:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <rx0_Tail>
     976:	e3 95       	inc	r30
     978:	ef 71       	andi	r30, 0x1F	; 31
     97a:	fe 17       	cp	r31, r30
     97c:	31 f0       	breq	.+12     	; 0x98a <USART0_RX_EXIT>
     97e:	e0 93 4a 03 	sts	0x034A, r30	; 0x80034a <rx0_Head>
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	ea 51       	subi	r30, 0x1A	; 26
     986:	fd 4f       	sbci	r31, 0xFD	; 253
     988:	90 83       	st	Z, r25

0000098a <USART0_RX_EXIT>:
     98a:	ff 91       	pop	r31
     98c:	ef 91       	pop	r30
     98e:	9f 91       	pop	r25
     990:	0f bf       	out	0x3f, r16	; 63
     992:	0f 91       	pop	r16
     994:	18 95       	reti

00000996 <__vector_33>:
     996:	0f 93       	push	r16
     998:	0f b7       	in	r16, 0x3f	; 63
     99a:	ef 93       	push	r30
     99c:	ff 93       	push	r31
     99e:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <tx1_Tail>
     9a2:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <tx1_Head>
     9a6:	e3 95       	inc	r30
     9a8:	ef 71       	andi	r30, 0x1F	; 31
     9aa:	ef 13       	cpse	r30, r31
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <USART1_TX_CONTINUE>
     9ae:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     9b2:	ff 7d       	andi	r31, 0xDF	; 223
     9b4:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

000009b8 <USART1_TX_CONTINUE>:
     9b8:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <tx1_Tail>
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	e7 5f       	subi	r30, 0xF7	; 247
     9c0:	fc 4f       	sbci	r31, 0xFC	; 252
     9c2:	e0 81       	ld	r30, Z
     9c4:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

000009c8 <USART1_TX_EXIT>:
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	0f bf       	out	0x3f, r16	; 63
     9ce:	0f 91       	pop	r16
     9d0:	18 95       	reti

000009d2 <__vector_32>:
     9d2:	0f 93       	push	r16
     9d4:	0f b7       	in	r16, 0x3f	; 63
     9d6:	9f 93       	push	r25
     9d8:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
     9e0:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <rx1_Head>
     9e4:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <rx1_Tail>
     9e8:	e3 95       	inc	r30
     9ea:	ef 71       	andi	r30, 0x1F	; 31
     9ec:	fe 17       	cp	r31, r30
     9ee:	31 f0       	breq	.+12     	; 0x9fc <USART1_RX_EXIT>
     9f0:	e0 93 4c 03 	sts	0x034C, r30	; 0x80034c <rx1_Head>
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	e6 5d       	subi	r30, 0xD6	; 214
     9f8:	fc 4f       	sbci	r31, 0xFC	; 252
     9fa:	90 83       	st	Z, r25

000009fc <USART1_RX_EXIT>:
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	9f 91       	pop	r25
     a02:	0f bf       	out	0x3f, r16	; 63
     a04:	0f 91       	pop	r16
     a06:	18 95       	reti

00000a08 <timer1_init_ts>:

//for speed
static uint16_t u16_speed_count = 0;

void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     a08:	e1 e8       	ldi	r30, 0x81	; 129
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	83 60       	ori	r24, 0x03	; 3
     a10:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     a12:	80 81       	ld	r24, Z
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     a18:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a1c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     a20:	ef e6       	ldi	r30, 0x6F	; 111
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	82 60       	ori	r24, 0x02	; 2
     a28:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     a2a:	8d e7       	ldi	r24, 0x7D	; 125
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a32:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a36:	08 95       	ret

00000a38 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     a38:	84 b5       	in	r24, 0x24	; 36
     a3a:	85 60       	ori	r24, 0x05	; 5
     a3c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     a3e:	84 b5       	in	r24, 0x24	; 36
     a40:	88 60       	ori	r24, 0x08	; 8
     a42:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     a44:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     a46:	ee e6       	ldi	r30, 0x6E	; 110
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	82 60       	ori	r24, 0x02	; 2
     a4e:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms
     a50:	87 e2       	ldi	r24, 0x27	; 39
     a52:	87 bd       	out	0x27, r24	; 39
     a54:	08 95       	ret

00000a56 <main>:
};

int main(void)	
{
	cli();
	pwm_init();
     a56:	f8 94       	cli
	can_init(0,0);
     a58:	81 d4       	rcall	.+2306   	; 0x135c <pwm_init>
     a5a:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
	timer0_init_ts();
     a5c:	70 e0       	ldi	r23, 0x00	; 0
	speed_init();
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     a62:	66 d3       	rcall	.+1740   	; 0x1130 <can_init>
     a64:	d1 df       	rcall	.-94     	; 0xa08 <timer1_init_ts>
     a66:	e8 df       	rcall	.-48     	; 0xa38 <timer0_init_ts>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     a68:	1b de       	rcall	.-970    	; 0x6a0 <speed_init>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     a6c:	c7 d4       	rcall	.+2446   	; 0x13fc <spi_init>
     a6e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     a72:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     a76:	88 e9       	ldi	r24, 0x98	; 152
     a78:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     a7c:	ee e6       	ldi	r30, 0x6E	; 110
	
	rgbled_init();
     a7e:	f3 e0       	ldi	r31, 0x03	; 3
     a80:	84 e0       	ldi	r24, 0x04	; 4
	drivers_init();
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	93 83       	std	Z+3, r25	; 0x03
	sei();
	
	rgbled_turn_on(LED_BLUE);
     a86:	82 83       	std	Z+2, r24	; 0x02
     a88:	91 83       	std	Z+1, r25	; 0x01
		
		handle_motor_status_can_msg(&send_can, &ComValues);
		handle_can(&ComValues, &rxFrame);
	
		//sends motor current and current cmd through USB
		printf("%i",ComValues.u8_car_speed);
     a8a:	80 83       	st	Z, r24
	
	rgbled_turn_on(LED_BLUE);

    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     a8c:	ac d4       	rcall	.+2392   	; 0x13e6 <rgbled_init>
     a8e:	39 dc       	rcall	.-1934   	; 0x302 <drivers_init>
     a90:	78 94       	sei
     a92:	80 e8       	ldi	r24, 0x80	; 128
     a94:	ae d4       	rcall	.+2396   	; 0x13f2 <rgbled_turn_on>
		handle_can(&ComValues, &rxFrame);
     a96:	cb e2       	ldi	r28, 0x2B	; 43
     a98:	d1 e0       	ldi	r29, 0x01	; 1
     a9a:	62 e1       	ldi	r22, 0x12	; 18
     a9c:	71 e0       	ldi	r23, 0x01	; 1
	
		//sends motor current and current cmd through USB
		printf("%i",ComValues.u8_car_speed);
     a9e:	8f e3       	ldi	r24, 0x3F	; 63
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	80 dd       	rcall	.-1280   	; 0x5a4 <handle_motor_status_can_msg>
     aa4:	60 ed       	ldi	r22, 0xD0	; 208
     aa6:	72 e0       	ldi	r23, 0x02	; 2
     aa8:	82 e1       	ldi	r24, 0x12	; 18
     aaa:	91 e0       	ldi	r25, 0x01	; 1
		printf(",");
     aac:	26 dd       	rcall	.-1460   	; 0x4fa <handle_can>
     aae:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <ComValues+0x11>
		printf("%i",u16_speed_count);
     ab2:	1f 92       	push	r1
     ab4:	8f 93       	push	r24
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	5a d7       	rcall	.+3764   	; 0x1970 <printf>
     abc:	8c e2       	ldi	r24, 0x2C	; 44
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	6a d7       	rcall	.+3796   	; 0x1996 <putchar>
     ac2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <u16_speed_count+0x1>
		printf("\n");
     ac6:	8f 93       	push	r24
     ac8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u16_speed_count>
		printf("%u",ComValues.u8_throttle_cmd*1000);
		printf(",");
		printf("%u",(uint16_t)(ComValues.u8_duty_cycle*10.0));
		printf("\n");
		*/
		receive_uart(&ComValues);
     acc:	8f 93       	push	r24
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	4e d7       	rcall	.+3740   	; 0x1970 <printf>
     ad4:	8a e0       	ldi	r24, 0x0A	; 10
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	5e d7       	rcall	.+3772   	; 0x1996 <putchar>
     ada:	82 e1       	ldi	r24, 0x12	; 18
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	9f dd       	rcall	.-1218   	; 0x61e <receive_uart>
     ae0:	8d b7       	in	r24, 0x3d	; 61
     ae2:	9e b7       	in	r25, 0x3e	; 62
     ae4:	08 96       	adiw	r24, 0x08	; 8
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	9e bf       	out	0x3e, r25	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	8d bf       	out	0x3d, r24	; 61
     af0:	d4 cf       	rjmp	.-88     	; 0xa9a <main+0x44>

00000af2 <__vector_16>:
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	0b b6       	in	r0, 0x3b	; 59
     afe:	0f 92       	push	r0
     b00:	ef 92       	push	r14
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	2f 93       	push	r18
     b08:	3f 93       	push	r19
     b0a:	4f 93       	push	r20
     b0c:	5f 93       	push	r21
     b0e:	6f 93       	push	r22
     b10:	7f 93       	push	r23
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	af 93       	push	r26
     b18:	bf 93       	push	r27
     b1a:	ef 93       	push	r30
     b1c:	ff 93       	push	r31
	
	if (can_sender_counter == 1) // every 10ms
     b1e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <can_sender_counter>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	b9 f4       	brne	.+46     	; 0xb54 <__vector_16+0x62>
	{
		//handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 10.0);
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;
     b26:	e2 e1       	ldi	r30, 0x12	; 18
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	00 85       	ldd	r16, Z+8	; 0x08
     b2c:	11 85       	ldd	r17, Z+9	; 0x09
     b2e:	22 85       	ldd	r18, Z+10	; 0x0a
     b30:	33 85       	ldd	r19, Z+11	; 0x0b
     b32:	44 81       	ldd	r20, Z+4	; 0x04
     b34:	55 81       	ldd	r21, Z+5	; 0x05
     b36:	66 81       	ldd	r22, Z+6	; 0x06
     b38:	77 81       	ldd	r23, Z+7	; 0x07
     b3a:	0f 2e       	mov	r0, r31
     b3c:	fa e0       	ldi	r31, 0x0A	; 10
     b3e:	ef 2e       	mov	r14, r31
     b40:	f0 2d       	mov	r31, r0
     b42:	8e e1       	ldi	r24, 0x1E	; 30
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	96 d1       	rcall	.+812    	; 0xe74 <handle_joulemeter>
		send_can = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <send_can>
		can_sender_counter = 0;
     b4e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <can_sender_counter>
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <__vector_16+0x68>
	} else {
		can_sender_counter ++;
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <can_sender_counter>
	}
	
	if (speed_handler_counter == 100) // every 1s
     b5a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <speed_handler_counter>
     b5e:	84 36       	cpi	r24, 0x64	; 100
     b60:	51 f4       	brne	.+20     	; 0xb76 <__vector_16+0x84>
	{
		handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 1000);
     b62:	48 ee       	ldi	r20, 0xE8	; 232
     b64:	53 e0       	ldi	r21, 0x03	; 3
     b66:	6c e3       	ldi	r22, 0x3C	; 60
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	83 e2       	ldi	r24, 0x23	; 35
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	a3 dd       	rcall	.-1210   	; 0x6b6 <handle_speed_sensor>
		speed_handler_counter = 0;
     b70:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <speed_handler_counter>
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <__vector_16+0x8a>
		} else {
		speed_handler_counter ++;
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <speed_handler_counter>
	}
	
	manage_motor(&ComValues);
     b7c:	82 e1       	ldi	r24, 0x12	; 18
     b7e:	91 e0       	ldi	r25, 0x01	; 1
}
     b80:	c8 db       	rcall	.-2160   	; 0x312 <manage_motor>
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ef 90       	pop	r14
     ba0:	0f 90       	pop	r0
     ba2:	0b be       	out	0x3b, r0	; 59
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     bae:	1f 92       	push	r1
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	0b b6       	in	r0, 0x3b	; 59
     bba:	0f 92       	push	r0
     bbc:	2f 93       	push	r18
     bbe:	3f 93       	push	r19
     bc0:	4f 93       	push	r20
     bc2:	5f 93       	push	r21
     bc4:	6f 93       	push	r22
     bc6:	7f 93       	push	r23
     bc8:	8f 93       	push	r24
     bca:	9f 93       	push	r25
     bcc:	af 93       	push	r26
     bce:	bf 93       	push	r27
     bd0:	ef 93       	push	r30
     bd2:	ff 93       	push	r31

	if (u8_SPI_count == 4)
     bd4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	31 f4       	brne	.+12     	; 0xbe8 <__vector_12+0x3a>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
     bdc:	82 e2       	ldi	r24, 0x22	; 34
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	6e dc       	rcall	.-1828   	; 0x4be <SPI_handler_4>
		u8_SPI_count = 0 ;
     be2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <u8_SPI_count>
     be6:	12 c0       	rjmp	.+36     	; 0xc0c <__vector_12+0x5e>
	}
	
	if (u8_SPI_count == 3)
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	21 f4       	brne	.+8      	; 0xbf4 <__vector_12+0x46>
	{
		u8_SPI_count ++ ;
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
     bf2:	18 c0       	rjmp	.+48     	; 0xc24 <__vector_12+0x76>
	}
	
	if (u8_SPI_count == 2)
     bf4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	41 f4       	brne	.+16     	; 0xc0c <__vector_12+0x5e>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
     bfc:	8a e1       	ldi	r24, 0x1A	; 26
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	2e dc       	rcall	.-1956   	; 0x45e <SPI_handler_2>
		u8_SPI_count ++ ;
     c02:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     c0c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c10:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
     c12:	41 f4       	brne	.+16     	; 0xc24 <__vector_12+0x76>
     c14:	86 e1       	ldi	r24, 0x16	; 22
     c16:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     c18:	04 dc       	rcall	.-2040   	; 0x422 <SPI_handler_1>
     c1a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c1e:	8f 5f       	subi	r24, 0xFF	; 255
     c20:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
     c24:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
     c28:	81 11       	cpse	r24, r1
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <__vector_12+0x8e>
     c2c:	82 e1       	ldi	r24, 0x12	; 18
     c2e:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     c30:	d9 db       	rcall	.-2126   	; 0x3e4 <SPI_handler_0>
     c32:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_SPI_count>
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_SPI_count>
	}
}
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	0f 90       	pop	r0
     c56:	0b be       	out	0x3b, r0	; 59
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_6>:


ISR(INT5_vect)
{
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
	u16_speed_count ++ ;
     c70:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u16_speed_count>
     c74:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <u16_speed_count+0x1>
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <u16_speed_count+0x1>
     c7e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u16_speed_count>
}
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.26
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     c90:	8f 92       	push	r8
     c92:	9f 92       	push	r9
     c94:	af 92       	push	r10
     c96:	bf 92       	push	r11
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <handle_current_sensor+0x1a>
     caa:	00 d0       	rcall	.+0      	; 0xcac <handle_current_sensor+0x1c>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	15 d5       	rcall	.+2602   	; 0x16e2 <__floatunsisf>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 ea       	ldi	r20, 0xA0	; 160
     cbe:	50 e4       	ldi	r21, 0x40	; 64
     cc0:	c6 d5       	rcall	.+2956   	; 0x184e <__mulsf3>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e8       	ldi	r20, 0x80	; 128
     cc8:	59 e3       	ldi	r21, 0x39	; 57
     cca:	c1 d5       	rcall	.+2946   	; 0x184e <__mulsf3>
     ccc:	27 ed       	ldi	r18, 0xD7	; 215
     cce:	33 ea       	ldi	r19, 0xA3	; 163
     cd0:	40 e1       	ldi	r20, 0x10	; 16
     cd2:	50 e4       	ldi	r21, 0x40	; 64
     cd4:	04 d4       	rcall	.+2056   	; 0x14de <__subsf3>
     cd6:	23 ec       	ldi	r18, 0xC3	; 195
     cd8:	34 e6       	ldi	r19, 0x64	; 100
     cda:	4a e2       	ldi	r20, 0x2A	; 42
     cdc:	5d e3       	ldi	r21, 0x3D	; 61
     cde:	68 d4       	rcall	.+2256   	; 0x15b0 <__divsf3>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e4       	ldi	r20, 0x40	; 64
     ce6:	50 e4       	ldi	r21, 0x40	; 64
     ce8:	63 d4       	rcall	.+2246   	; 0x15b0 <__divsf3>
     cea:	69 83       	std	Y+1, r22	; 0x01
     cec:	7a 83       	std	Y+2, r23	; 0x02
     cee:	8b 83       	std	Y+3, r24	; 0x03
     cf0:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current-1.76);// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     cf2:	69 81       	ldd	r22, Y+1	; 0x01
     cf4:	7a 81       	ldd	r23, Y+2	; 0x02
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	2e ea       	ldi	r18, 0xAE	; 174
     cfc:	37 e4       	ldi	r19, 0x47	; 71
     cfe:	41 ee       	ldi	r20, 0xE1	; 225
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	ed d3       	rcall	.+2010   	; 0x14de <__subsf3>
     d04:	69 83       	std	Y+1, r22	; 0x01
     d06:	7a 83       	std	Y+2, r23	; 0x02
     d08:	8b 83       	std	Y+3, r24	; 0x03
     d0a:	9c 83       	std	Y+4, r25	; 0x04
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
     d0c:	89 80       	ldd	r8, Y+1	; 0x01
     d0e:	9a 80       	ldd	r9, Y+2	; 0x02
     d10:	ab 80       	ldd	r10, Y+3	; 0x03
     d12:	bc 80       	ldd	r11, Y+4	; 0x04
     d14:	26 e6       	ldi	r18, 0x66	; 102
     d16:	36 e6       	ldi	r19, 0x66	; 102
     d18:	46 e6       	ldi	r20, 0x66	; 102
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	f8 01       	movw	r30, r16
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	93 d5       	rcall	.+2854   	; 0x184e <__mulsf3>
     d28:	6b 01       	movw	r12, r22
     d2a:	7c 01       	movw	r14, r24
     d2c:	2d ec       	ldi	r18, 0xCD	; 205
     d2e:	3c ec       	ldi	r19, 0xCC	; 204
     d30:	4c ec       	ldi	r20, 0xCC	; 204
     d32:	5d e3       	ldi	r21, 0x3D	; 61
     d34:	c5 01       	movw	r24, r10
     d36:	b4 01       	movw	r22, r8
     d38:	8a d5       	rcall	.+2836   	; 0x184e <__mulsf3>
     d3a:	9b 01       	movw	r18, r22
     d3c:	ac 01       	movw	r20, r24
     d3e:	c7 01       	movw	r24, r14
     d40:	b6 01       	movw	r22, r12
     d42:	ce d3       	rcall	.+1948   	; 0x14e0 <__addsf3>
     d44:	f8 01       	movw	r30, r16
     d46:	60 83       	st	Z, r22
     d48:	71 83       	std	Z+1, r23	; 0x01
     d4a:	82 83       	std	Z+2, r24	; 0x02
     d4c:	93 83       	std	Z+3, r25	; 0x03
}
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	08 95       	ret

00000d70 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	00 d0       	rcall	.+0      	; 0xd7a <handle_temp_sensor+0xa>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <handle_temp_sensor+0xc>
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	ad d4       	rcall	.+2394   	; 0x16e2 <__floatunsisf>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 ea       	ldi	r20, 0xA0	; 160
     d8e:	50 e4       	ldi	r21, 0x40	; 64
     d90:	5e d5       	rcall	.+2748   	; 0x184e <__mulsf3>
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	59 e3       	ldi	r21, 0x39	; 57
     d9a:	59 d5       	rcall	.+2738   	; 0x184e <__mulsf3>
     d9c:	69 83       	std	Y+1, r22	; 0x01
     d9e:	7a 83       	std	Y+2, r23	; 0x02
     da0:	8b 83       	std	Y+3, r24	; 0x03
     da2:	9c 83       	std	Y+4, r25	; 0x04
	// 0 -> 3.7V => T = 20*V-22
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit.
	
	if (f_sens_volt <= 3.7)
     da4:	69 81       	ldd	r22, Y+1	; 0x01
     da6:	7a 81       	ldd	r23, Y+2	; 0x02
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	2d ec       	ldi	r18, 0xCD	; 205
     dae:	3c ec       	ldi	r19, 0xCC	; 204
     db0:	4c e6       	ldi	r20, 0x6C	; 108
     db2:	50 e4       	ldi	r21, 0x40	; 64
     db4:	f9 d3       	rcall	.+2034   	; 0x15a8 <__cmpsf2>
     db6:	18 16       	cp	r1, r24
     db8:	8c f0       	brlt	.+34     	; 0xddc <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     dba:	69 81       	ldd	r22, Y+1	; 0x01
     dbc:	7a 81       	ldd	r23, Y+2	; 0x02
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 ea       	ldi	r20, 0xA0	; 160
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	41 d5       	rcall	.+2690   	; 0x184e <__mulsf3>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 eb       	ldi	r20, 0xB0	; 176
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	84 d3       	rcall	.+1800   	; 0x14de <__subsf3>
     dd6:	59 d4       	rcall	.+2226   	; 0x168a <__fixunssfsi>
     dd8:	f8 01       	movw	r30, r16
     dda:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     ddc:	69 81       	ldd	r22, Y+1	; 0x01
     dde:	7a 81       	ldd	r23, Y+2	; 0x02
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	26 e6       	ldi	r18, 0x66	; 102
     de6:	36 e6       	ldi	r19, 0x66	; 102
     de8:	46 e9       	ldi	r20, 0x96	; 150
     dea:	50 e4       	ldi	r21, 0x40	; 64
     dec:	dd d3       	rcall	.+1978   	; 0x15a8 <__cmpsf2>
     dee:	18 16       	cp	r1, r24
     df0:	e4 f0       	brlt	.+56     	; 0xe2a <handle_temp_sensor+0xba>
     df2:	69 81       	ldd	r22, Y+1	; 0x01
     df4:	7a 81       	ldd	r23, Y+2	; 0x02
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	2d ec       	ldi	r18, 0xCD	; 205
     dfc:	3c ec       	ldi	r19, 0xCC	; 204
     dfe:	4c e6       	ldi	r20, 0x6C	; 108
     e00:	50 e4       	ldi	r21, 0x40	; 64
     e02:	21 d5       	rcall	.+2626   	; 0x1846 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     e04:	18 16       	cp	r1, r24
     e06:	8c f4       	brge	.+34     	; 0xe2a <handle_temp_sensor+0xba>
     e08:	69 81       	ldd	r22, Y+1	; 0x01
     e0a:	7a 81       	ldd	r23, Y+2	; 0x02
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	4e e5       	ldi	r20, 0x5E	; 94
     e16:	52 e4       	ldi	r21, 0x42	; 66
     e18:	1a d5       	rcall	.+2612   	; 0x184e <__mulsf3>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e8       	ldi	r19, 0x80	; 128
     e1e:	4b e1       	ldi	r20, 0x1B	; 27
     e20:	53 e4       	ldi	r21, 0x43	; 67
     e22:	5d d3       	rcall	.+1722   	; 0x14de <__subsf3>
     e24:	32 d4       	rcall	.+2148   	; 0x168a <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     e26:	f8 01       	movw	r30, r16
     e28:	60 83       	st	Z, r22
     e2a:	69 81       	ldd	r22, Y+1	; 0x01
     e2c:	7a 81       	ldd	r23, Y+2	; 0x02
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	26 e6       	ldi	r18, 0x66	; 102
     e34:	36 e6       	ldi	r19, 0x66	; 102
     e36:	46 e9       	ldi	r20, 0x96	; 150
     e38:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     e3a:	05 d5       	rcall	.+2570   	; 0x1846 <__gesf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	8c f4       	brge	.+34     	; 0xe62 <handle_temp_sensor+0xf2>
     e40:	69 81       	ldd	r22, Y+1	; 0x01
     e42:	7a 81       	ldd	r23, Y+2	; 0x02
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	48 e4       	ldi	r20, 0x48	; 72
     e4e:	53 e4       	ldi	r21, 0x43	; 67
     e50:	fe d4       	rcall	.+2556   	; 0x184e <__mulsf3>
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	42 e5       	ldi	r20, 0x52	; 82
     e58:	54 e4       	ldi	r21, 0x44	; 68
     e5a:	41 d3       	rcall	.+1666   	; 0x14de <__subsf3>
     e5c:	16 d4       	rcall	.+2092   	; 0x168a <__fixunssfsi>
	}
}
     e5e:	f8 01       	movw	r30, r16
     e60:	60 83       	st	Z, r22
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	08 95       	ret

00000e74 <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
     e74:	8f 92       	push	r8
     e76:	9f 92       	push	r9
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	ef 92       	push	r14
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	ec 01       	movw	r28, r24
     e88:	4a 01       	movw	r8, r20
     e8a:	5b 01       	movw	r10, r22
     e8c:	c9 01       	movw	r24, r18
     e8e:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
     e90:	a5 01       	movw	r20, r10
     e92:	94 01       	movw	r18, r8
     e94:	dc d4       	rcall	.+2488   	; 0x184e <__mulsf3>
     e96:	4b 01       	movw	r8, r22
     e98:	5c 01       	movw	r10, r24
     e9a:	6e 2d       	mov	r22, r14
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	1f d4       	rcall	.+2110   	; 0x16e2 <__floatunsisf>
     ea4:	9b 01       	movw	r18, r22
     ea6:	ac 01       	movw	r20, r24
     ea8:	c5 01       	movw	r24, r10
     eaa:	b4 01       	movw	r22, r8
     eac:	d0 d4       	rcall	.+2464   	; 0x184e <__mulsf3>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4a e7       	ldi	r20, 0x7A	; 122
     eb4:	54 e4       	ldi	r21, 0x44	; 68
     eb6:	7c d3       	rcall	.+1784   	; 0x15b0 <__divsf3>
     eb8:	9b 01       	movw	r18, r22
     eba:	ac 01       	movw	r20, r24
     ebc:	68 81       	ld	r22, Y
     ebe:	79 81       	ldd	r23, Y+1	; 0x01
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	9b 81       	ldd	r25, Y+3	; 0x03
     ec4:	0d d3       	rcall	.+1562   	; 0x14e0 <__addsf3>
     ec6:	68 83       	st	Y, r22
     ec8:	79 83       	std	Y+1, r23	; 0x01
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ef 90       	pop	r14
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	9f 90       	pop	r9
     ede:	8f 90       	pop	r8
     ee0:	08 95       	ret

00000ee2 <Set_ADC_Channel_ext>:
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 30       	cpi	r24, 0x08	; 8
     ee6:	91 05       	cpc	r25, r1
     ee8:	88 f5       	brcc	.+98     	; 0xf4c <Set_ADC_Channel_ext+0x6a>
     eea:	fc 01       	movw	r30, r24
     eec:	e6 5b       	subi	r30, 0xB6	; 182
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	11 c5       	rjmp	.+2594   	; 0x1914 <__tablejump2__>
     ef2:	86 e0       	ldi	r24, 0x06	; 6
     ef4:	fb 01       	movw	r30, r22
     ef6:	80 83       	st	Z, r24
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	08 95       	ret
     efc:	86 e0       	ldi	r24, 0x06	; 6
     efe:	fb 01       	movw	r30, r22
     f00:	80 83       	st	Z, r24
     f02:	80 e4       	ldi	r24, 0x40	; 64
     f04:	81 83       	std	Z+1, r24	; 0x01
     f06:	08 95       	ret
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	fb 01       	movw	r30, r22
     f0c:	80 83       	st	Z, r24
     f0e:	80 e8       	ldi	r24, 0x80	; 128
     f10:	81 83       	std	Z+1, r24	; 0x01
     f12:	08 95       	ret
     f14:	86 e0       	ldi	r24, 0x06	; 6
     f16:	fb 01       	movw	r30, r22
     f18:	80 83       	st	Z, r24
     f1a:	80 ec       	ldi	r24, 0xC0	; 192
     f1c:	81 83       	std	Z+1, r24	; 0x01
     f1e:	08 95       	ret
     f20:	87 e0       	ldi	r24, 0x07	; 7
     f22:	fb 01       	movw	r30, r22
     f24:	80 83       	st	Z, r24
     f26:	11 82       	std	Z+1, r1	; 0x01
     f28:	08 95       	ret
     f2a:	87 e0       	ldi	r24, 0x07	; 7
     f2c:	fb 01       	movw	r30, r22
     f2e:	80 83       	st	Z, r24
     f30:	80 e4       	ldi	r24, 0x40	; 64
     f32:	81 83       	std	Z+1, r24	; 0x01
     f34:	08 95       	ret
     f36:	87 e0       	ldi	r24, 0x07	; 7
     f38:	fb 01       	movw	r30, r22
     f3a:	80 83       	st	Z, r24
     f3c:	80 e8       	ldi	r24, 0x80	; 128
     f3e:	81 83       	std	Z+1, r24	; 0x01
     f40:	08 95       	ret
     f42:	87 e0       	ldi	r24, 0x07	; 7
     f44:	fb 01       	movw	r30, r22
     f46:	80 83       	st	Z, r24
     f48:	80 ec       	ldi	r24, 0xC0	; 192
     f4a:	81 83       	std	Z+1, r24	; 0x01
     f4c:	08 95       	ret

00000f4e <__vector_18>:
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	0b b6       	in	r0, 0x3b	; 59
     f5a:	0f 92       	push	r0
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	1f 92       	push	r1
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     f80:	80 ff       	sbrs	r24, 0
     f82:	47 c0       	rjmp	.+142    	; 0x1012 <__vector_18+0xc4>
     f84:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     f88:	90 ff       	sbrs	r25, 0
     f8a:	43 c0       	rjmp	.+134    	; 0x1012 <__vector_18+0xc4>
     f8c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     f90:	ee ee       	ldi	r30, 0xEE	; 238
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7b       	andi	r24, 0xBF	; 191
     f9c:	80 83       	st	Z, r24
     f9e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tx_off>
     fa2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <tx_on>
     fa6:	98 17       	cp	r25, r24
     fa8:	89 f1       	breq	.+98     	; 0x100c <__vector_18+0xbe>
     faa:	8f 70       	andi	r24, 0x0F	; 15
     fac:	2b e0       	ldi	r18, 0x0B	; 11
     fae:	82 9f       	mul	r24, r18
     fb0:	c0 01       	movw	r24, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	fc 01       	movw	r30, r24
     fb6:	e8 50       	subi	r30, 0x08	; 8
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	20 81       	ld	r18, Z
     fbc:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     fc0:	20 81       	ld	r18, Z
     fc2:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     fc6:	21 81       	ldd	r18, Z+1	; 0x01
     fc8:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     fcc:	23 81       	ldd	r18, Z+3	; 0x03
     fce:	aa ef       	ldi	r26, 0xFA	; 250
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	2c 93       	st	X, r18
     fd4:	24 81       	ldd	r18, Z+4	; 0x04
     fd6:	2c 93       	st	X, r18
     fd8:	25 81       	ldd	r18, Z+5	; 0x05
     fda:	2c 93       	st	X, r18
     fdc:	26 81       	ldd	r18, Z+6	; 0x06
     fde:	2c 93       	st	X, r18
     fe0:	27 81       	ldd	r18, Z+7	; 0x07
     fe2:	2c 93       	st	X, r18
     fe4:	20 85       	ldd	r18, Z+8	; 0x08
     fe6:	2c 93       	st	X, r18
     fe8:	21 85       	ldd	r18, Z+9	; 0x09
     fea:	2c 93       	st	X, r18
     fec:	22 85       	ldd	r18, Z+10	; 0x0a
     fee:	2c 93       	st	X, r18
     ff0:	fc 01       	movw	r30, r24
     ff2:	e6 50       	subi	r30, 0x06	; 6
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 70       	andi	r24, 0x0F	; 15
     ffa:	80 64       	ori	r24, 0x40	; 64
     ffc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1000:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tx_off>
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <tx_off>
    100a:	7d c0       	rjmp	.+250    	; 0x1106 <__stack+0x7>
    100c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tx_busy>
    1010:	7a c0       	rjmp	.+244    	; 0x1106 <__stack+0x7>
    1012:	81 ff       	sbrs	r24, 1
    1014:	78 c0       	rjmp	.+240    	; 0x1106 <__stack+0x7>
    1016:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    101a:	81 ff       	sbrs	r24, 1
    101c:	74 c0       	rjmp	.+232    	; 0x1106 <__stack+0x7>
    101e:	80 e1       	ldi	r24, 0x10	; 16
    1020:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1024:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rx_on>
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rx_off>
    1030:	29 1b       	sub	r18, r25
    1032:	31 09       	sbc	r19, r1
    1034:	2f 77       	andi	r18, 0x7F	; 127
    1036:	33 27       	eor	r19, r19
    1038:	20 31       	cpi	r18, 0x10	; 16
    103a:	31 05       	cpc	r19, r1
    103c:	0c f0       	brlt	.+2      	; 0x1040 <__vector_18+0xf2>
    103e:	58 c0       	rjmp	.+176    	; 0x10f0 <__vector_18+0x1a2>
    1040:	e8 2f       	mov	r30, r24
    1042:	ef 70       	andi	r30, 0x0F	; 15
    1044:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1048:	2e 2f       	mov	r18, r30
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4b e0       	ldi	r20, 0x0B	; 11
    104e:	e4 9f       	mul	r30, r20
    1050:	f0 01       	movw	r30, r0
    1052:	11 24       	eor	r1, r1
    1054:	e8 5b       	subi	r30, 0xB8	; 184
    1056:	fe 4f       	sbci	r31, 0xFE	; 254
    1058:	9f 70       	andi	r25, 0x0F	; 15
    105a:	42 81       	ldd	r20, Z+2	; 0x02
    105c:	40 7f       	andi	r20, 0xF0	; 240
    105e:	94 2b       	or	r25, r20
    1060:	92 83       	std	Z+2, r25	; 0x02
    1062:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1066:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    106a:	40 7e       	andi	r20, 0xE0	; 224
    106c:	97 70       	andi	r25, 0x07	; 7
    106e:	94 2b       	or	r25, r20
    1070:	90 83       	st	Z, r25
    1072:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	aa ef       	ldi	r26, 0xFA	; 250
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	9c 91       	ld	r25, X
    107e:	93 83       	std	Z+3, r25	; 0x03
    1080:	9c 91       	ld	r25, X
    1082:	94 83       	std	Z+4, r25	; 0x04
    1084:	9c 91       	ld	r25, X
    1086:	95 83       	std	Z+5, r25	; 0x05
    1088:	9c 91       	ld	r25, X
    108a:	96 83       	std	Z+6, r25	; 0x06
    108c:	9c 91       	ld	r25, X
    108e:	97 83       	std	Z+7, r25	; 0x07
    1090:	9c 91       	ld	r25, X
    1092:	90 87       	std	Z+8, r25	; 0x08
    1094:	9c 91       	ld	r25, X
    1096:	91 87       	std	Z+9, r25	; 0x09
    1098:	9c 91       	ld	r25, X
    109a:	92 87       	std	Z+10, r25	; 0x0a
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_on>
    10a2:	40 81       	ld	r20, Z
    10a4:	42 95       	swap	r20
    10a6:	46 95       	lsr	r20
    10a8:	47 70       	andi	r20, 0x07	; 7
    10aa:	51 81       	ldd	r21, Z+1	; 0x01
    10ac:	65 2f       	mov	r22, r21
    10ae:	66 0f       	add	r22, r22
    10b0:	66 0f       	add	r22, r22
    10b2:	66 0f       	add	r22, r22
    10b4:	86 2f       	mov	r24, r22
    10b6:	84 2b       	or	r24, r20
    10b8:	95 2f       	mov	r25, r21
    10ba:	92 95       	swap	r25
    10bc:	96 95       	lsr	r25
    10be:	97 70       	andi	r25, 0x07	; 7
    10c0:	89 2b       	or	r24, r25
    10c2:	b1 f4       	brne	.+44     	; 0x10f0 <__vector_18+0x1a2>
    10c4:	8b e0       	ldi	r24, 0x0B	; 11
    10c6:	82 9f       	mul	r24, r18
    10c8:	f0 01       	movw	r30, r0
    10ca:	83 9f       	mul	r24, r19
    10cc:	f0 0d       	add	r31, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	e8 5b       	subi	r30, 0xB8	; 184
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	83 81       	ldd	r24, Z+3	; 0x03
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	59 f4       	brne	.+22     	; 0x10f0 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    10da:	98 e0       	ldi	r25, 0x08	; 8
    10dc:	88 e1       	ldi	r24, 0x18	; 24
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	a8 95       	wdr
    10e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    10ee:	ff cf       	rjmp	.-2      	; 0x10ee <__vector_18+0x1a0>
    10f0:	ee ee       	ldi	r30, 0xEE	; 238
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 7d       	andi	r24, 0xDF	; 223
    10fe:	80 83       	st	Z, r24
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0b be       	out	0x3b, r0	; 59
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	0f 90       	pop	r0
    112c:	1f 90       	pop	r1
    112e:	18 95       	reti

00001130 <can_init>:
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	e8 ed       	ldi	r30, 0xD8	; 216
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	20 83       	st	Z, r18
    113c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1140:	2c e0       	ldi	r18, 0x0C	; 12
    1142:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1146:	27 e3       	ldi	r18, 0x37	; 55
    1148:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    114c:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    1150:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
    1154:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1158:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    115c:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1160:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1164:	cd ee       	ldi	r28, 0xED	; 237
    1166:	d0 e0       	ldi	r29, 0x00	; 0
    1168:	18 82       	st	Y, r1
    116a:	ae ee       	ldi	r26, 0xEE	; 238
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	1c 92       	st	X, r1
    1170:	20 e1       	ldi	r18, 0x10	; 16
    1172:	28 83       	st	Y, r18
    1174:	1c 92       	st	X, r1
    1176:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
    117a:	28 2f       	mov	r18, r24
    117c:	22 95       	swap	r18
    117e:	22 0f       	add	r18, r18
    1180:	20 7e       	andi	r18, 0xE0	; 224
    1182:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	96 95       	lsr	r25
    118c:	87 95       	ror	r24
    118e:	96 95       	lsr	r25
    1190:	87 95       	ror	r24
    1192:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1196:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    119a:	86 2f       	mov	r24, r22
    119c:	82 95       	swap	r24
    119e:	88 0f       	add	r24, r24
    11a0:	80 7e       	andi	r24, 0xE0	; 224
    11a2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    11a6:	76 95       	lsr	r23
    11a8:	67 95       	ror	r22
    11aa:	76 95       	lsr	r23
    11ac:	67 95       	ror	r22
    11ae:	76 95       	lsr	r23
    11b0:	67 95       	ror	r22
    11b2:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    11b6:	80 e8       	ldi	r24, 0x80	; 128
    11b8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    11c2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    11c6:	80 eb       	ldi	r24, 0xB0	; 176
    11c8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	80 83       	st	Z, r24
    11d0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <reset>
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <can_read_message_if_new>:
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
    11e0:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <rx_off>
    11e4:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <rx_on>
    11e8:	24 17       	cp	r18, r20
    11ea:	89 f1       	breq	.+98     	; 0x124e <can_read_message_if_new+0x74>
    11ec:	a4 2f       	mov	r26, r20
    11ee:	af 70       	andi	r26, 0x0F	; 15
    11f0:	8b e0       	ldi	r24, 0x0B	; 11
    11f2:	a8 9f       	mul	r26, r24
    11f4:	b0 01       	movw	r22, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	fb 01       	movw	r30, r22
    11fa:	e8 5b       	subi	r30, 0xB8	; 184
    11fc:	fe 4f       	sbci	r31, 0xFE	; 254
    11fe:	20 81       	ld	r18, Z
    1200:	22 95       	swap	r18
    1202:	26 95       	lsr	r18
    1204:	27 70       	andi	r18, 0x07	; 7
    1206:	31 81       	ldd	r19, Z+1	; 0x01
    1208:	53 2f       	mov	r21, r19
    120a:	55 0f       	add	r21, r21
    120c:	55 0f       	add	r21, r21
    120e:	55 0f       	add	r21, r21
    1210:	25 2b       	or	r18, r21
    1212:	32 95       	swap	r19
    1214:	36 95       	lsr	r19
    1216:	37 70       	andi	r19, 0x07	; 7
    1218:	28 83       	st	Y, r18
    121a:	39 83       	std	Y+1, r19	; 0x01
    121c:	fb 01       	movw	r30, r22
    121e:	e6 5b       	subi	r30, 0xB6	; 182
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	20 81       	ld	r18, Z
    1224:	2f 70       	andi	r18, 0x0F	; 15
    1226:	2a 83       	std	Y+2, r18	; 0x02
    1228:	22 23       	and	r18, r18
    122a:	99 f0       	breq	.+38     	; 0x1252 <can_read_message_if_new+0x78>
    122c:	db 01       	movw	r26, r22
    122e:	a5 5b       	subi	r26, 0xB5	; 181
    1230:	be 4f       	sbci	r27, 0xFE	; 254
    1232:	fe 01       	movw	r30, r28
    1234:	33 96       	adiw	r30, 0x03	; 3
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	2d 5f       	subi	r18, 0xFD	; 253
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	ce 01       	movw	r24, r28
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	2d 91       	ld	r18, X+
    1244:	21 93       	st	Z+, r18
    1246:	e8 17       	cp	r30, r24
    1248:	f9 07       	cpc	r31, r25
    124a:	d9 f7       	brne	.-10     	; 0x1242 <can_read_message_if_new+0x68>
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <can_read_message_if_new+0x78>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	04 c0       	rjmp	.+8      	; 0x125a <can_read_message_if_new+0x80>
    1252:	4f 5f       	subi	r20, 0xFF	; 255
    1254:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <rx_off>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <can_send_message>:
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	fc 01       	movw	r30, r24
    1266:	ab ed       	ldi	r26, 0xDB	; 219
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	8c 91       	ld	r24, X
    126c:	8f 77       	andi	r24, 0x7F	; 127
    126e:	8c 93       	st	X, r24
    1270:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <tx_busy>
    1274:	81 11       	cpse	r24, r1
    1276:	27 c0       	rjmp	.+78     	; 0x12c6 <can_send_message+0x66>
    1278:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    127c:	80 81       	ld	r24, Z
    127e:	82 95       	swap	r24
    1280:	88 0f       	add	r24, r24
    1282:	80 7e       	andi	r24, 0xE0	; 224
    1284:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	96 95       	lsr	r25
    1292:	87 95       	ror	r24
    1294:	96 95       	lsr	r25
    1296:	87 95       	ror	r24
    1298:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    129c:	df 01       	movw	r26, r30
    129e:	13 96       	adiw	r26, 0x03	; 3
    12a0:	9f 01       	movw	r18, r30
    12a2:	25 5f       	subi	r18, 0xF5	; 245
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	ca ef       	ldi	r28, 0xFA	; 250
    12a8:	d0 e0       	ldi	r29, 0x00	; 0
    12aa:	9d 91       	ld	r25, X+
    12ac:	98 83       	st	Y, r25
    12ae:	a2 17       	cp	r26, r18
    12b0:	b3 07       	cpc	r27, r19
    12b2:	d9 f7       	brne	.-10     	; 0x12aa <can_send_message+0x4a>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <tx_busy>
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	80 64       	ori	r24, 0x40	; 64
    12be:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	43 c0       	rjmp	.+134    	; 0x134c <can_send_message+0xec>
    12c6:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <tx_on>
    12ca:	82 2f       	mov	r24, r18
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <tx_off>
    12d2:	83 1b       	sub	r24, r19
    12d4:	91 09       	sbc	r25, r1
    12d6:	8f 77       	andi	r24, 0x7F	; 127
    12d8:	99 27       	eor	r25, r25
    12da:	40 97       	sbiw	r24, 0x10	; 16
    12dc:	b1 f1       	breq	.+108    	; 0x134a <can_send_message+0xea>
    12de:	a2 2f       	mov	r26, r18
    12e0:	af 70       	andi	r26, 0x0F	; 15
    12e2:	8b e0       	ldi	r24, 0x0B	; 11
    12e4:	a8 9f       	mul	r26, r24
    12e6:	d0 01       	movw	r26, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	ed 01       	movw	r28, r26
    12ec:	c8 50       	subi	r28, 0x08	; 8
    12ee:	de 4f       	sbci	r29, 0xFE	; 254
    12f0:	80 81       	ld	r24, Z
    12f2:	98 2f       	mov	r25, r24
    12f4:	92 95       	swap	r25
    12f6:	99 0f       	add	r25, r25
    12f8:	90 7e       	andi	r25, 0xE0	; 224
    12fa:	88 81       	ld	r24, Y
    12fc:	8f 71       	andi	r24, 0x1F	; 31
    12fe:	89 2b       	or	r24, r25
    1300:	88 83       	st	Y, r24
    1302:	80 81       	ld	r24, Z
    1304:	98 2f       	mov	r25, r24
    1306:	96 95       	lsr	r25
    1308:	96 95       	lsr	r25
    130a:	96 95       	lsr	r25
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	80 7e       	andi	r24, 0xE0	; 224
    1310:	89 2b       	or	r24, r25
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	91 81       	ldd	r25, Z+1	; 0x01
    1316:	92 95       	swap	r25
    1318:	99 0f       	add	r25, r25
    131a:	90 7e       	andi	r25, 0xE0	; 224
    131c:	8f 71       	andi	r24, 0x1F	; 31
    131e:	89 2b       	or	r24, r25
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	98 2f       	mov	r25, r24
    1326:	9f 70       	andi	r25, 0x0F	; 15
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 7f       	andi	r24, 0xF0	; 240
    132c:	89 2b       	or	r24, r25
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	a5 50       	subi	r26, 0x05	; 5
    1332:	be 4f       	sbci	r27, 0xFE	; 254
    1334:	33 96       	adiw	r30, 0x03	; 3
    1336:	88 e0       	ldi	r24, 0x08	; 8
    1338:	01 90       	ld	r0, Z+
    133a:	0d 92       	st	X+, r0
    133c:	8a 95       	dec	r24
    133e:	e1 f7       	brne	.-8      	; 0x1338 <can_send_message+0xd8>
    1340:	2f 5f       	subi	r18, 0xFF	; 255
    1342:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <tx_on>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	01 c0       	rjmp	.+2      	; 0x134c <can_send_message+0xec>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	eb ed       	ldi	r30, 0xDB	; 219
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	90 81       	ld	r25, Z
    1352:	90 68       	ori	r25, 0x80	; 128
    1354:	90 83       	st	Z, r25
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <pwm_init>:
    135c:	8e b1       	in	r24, 0x0e	; 14
    135e:	87 7e       	andi	r24, 0xE7	; 231
    1360:	8e b9       	out	0x0e, r24	; 14
    1362:	8d b1       	in	r24, 0x0d	; 13
    1364:	88 61       	ori	r24, 0x18	; 24
    1366:	8d b9       	out	0x0d, r24	; 13
    1368:	a1 e9       	ldi	r26, 0x91	; 145
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	8c 91       	ld	r24, X
    136e:	88 61       	ori	r24, 0x18	; 24
    1370:	8c 93       	st	X, r24
    1372:	e0 e9       	ldi	r30, 0x90	; 144
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	82 60       	ori	r24, 0x02	; 2
    137a:	80 83       	st	Z, r24
    137c:	80 81       	ld	r24, Z
    137e:	8e 7f       	andi	r24, 0xFE	; 254
    1380:	80 83       	st	Z, r24
    1382:	80 81       	ld	r24, Z
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	80 83       	st	Z, r24
    1388:	80 81       	ld	r24, Z
    138a:	8f 7b       	andi	r24, 0xBF	; 191
    138c:	80 83       	st	Z, r24
    138e:	80 81       	ld	r24, Z
    1390:	80 62       	ori	r24, 0x20	; 32
    1392:	80 83       	st	Z, r24
    1394:	80 81       	ld	r24, Z
    1396:	80 61       	ori	r24, 0x10	; 16
    1398:	80 83       	st	Z, r24
    139a:	8c 91       	ld	r24, X
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	8c 93       	st	X, r24
    13a0:	8c 91       	ld	r24, X
    13a2:	89 7f       	andi	r24, 0xF9	; 249
    13a4:	8c 93       	st	X, r24
    13a6:	e6 e9       	ldi	r30, 0x96	; 150
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	89 e9       	ldi	r24, 0x99	; 153
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	93 d1       	rcall	.+806    	; 0x16e2 <__floatunsisf>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	44 d2       	rcall	.+1160   	; 0x184e <__mulsf3>
    13c6:	5c d1       	rcall	.+696    	; 0x1680 <__fixsfsi>
    13c8:	e8 e9       	ldi	r30, 0x98	; 152
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	71 83       	std	Z+1, r23	; 0x01
    13ce:	60 83       	st	Z, r22
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    13d8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    13dc:	08 95       	ret

000013de <rgbled_turn_off>:
    13de:	95 b1       	in	r25, 0x05	; 5
    13e0:	89 2b       	or	r24, r25
    13e2:	85 b9       	out	0x05, r24	; 5
    13e4:	08 95       	ret

000013e6 <rgbled_init>:
    13e6:	84 b1       	in	r24, 0x04	; 4
    13e8:	80 6e       	ori	r24, 0xE0	; 224
    13ea:	84 b9       	out	0x04, r24	; 4
    13ec:	80 ee       	ldi	r24, 0xE0	; 224
    13ee:	f7 cf       	rjmp	.-18     	; 0x13de <rgbled_turn_off>
    13f0:	08 95       	ret

000013f2 <rgbled_turn_on>:
    13f2:	95 b1       	in	r25, 0x05	; 5
    13f4:	80 95       	com	r24
    13f6:	98 23       	and	r25, r24
    13f8:	95 b9       	out	0x05, r25	; 5
    13fa:	08 95       	ret

000013fc <spi_init>:
    13fc:	94 b1       	in	r25, 0x04	; 4
    13fe:	97 60       	ori	r25, 0x07	; 7
    1400:	94 b9       	out	0x04, r25	; 4
    1402:	82 fb       	bst	r24, 2
    1404:	99 27       	eor	r25, r25
    1406:	90 f9       	bld	r25, 0
    1408:	28 2f       	mov	r18, r24
    140a:	22 70       	andi	r18, 0x02	; 2
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	80 65       	ori	r24, 0x50	; 80
    1410:	82 2b       	or	r24, r18
    1412:	8c bd       	out	0x2c, r24	; 44
    1414:	8c b5       	in	r24, 0x2c	; 44
    1416:	83 7f       	andi	r24, 0xF3	; 243
    1418:	8c bd       	out	0x2c, r24	; 44
    141a:	9d bd       	out	0x2d, r25	; 45
    141c:	08 95       	ret

0000141e <spi_trancieve>:
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
    1424:	28 98       	cbi	0x05, 0	; 5
    1426:	41 15       	cp	r20, r1
    1428:	51 05       	cpc	r21, r1
    142a:	c1 f0       	breq	.+48     	; 0x145c <spi_trancieve+0x3e>
    142c:	fb 01       	movw	r30, r22
    142e:	dc 01       	movw	r26, r24
    1430:	46 0f       	add	r20, r22
    1432:	57 1f       	adc	r21, r23
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	20 97       	sbiw	r28, 0x00	; 0
    1438:	11 f0       	breq	.+4      	; 0x143e <spi_trancieve+0x20>
    143a:	9c 91       	ld	r25, X
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <spi_trancieve+0x22>
    143e:	98 2f       	mov	r25, r24
    1440:	9e bd       	out	0x2e, r25	; 46
    1442:	0d b4       	in	r0, 0x2d	; 45
    1444:	07 fe       	sbrs	r0, 7
    1446:	fd cf       	rjmp	.-6      	; 0x1442 <spi_trancieve+0x24>
    1448:	61 15       	cp	r22, r1
    144a:	71 05       	cpc	r23, r1
    144c:	11 f0       	breq	.+4      	; 0x1452 <spi_trancieve+0x34>
    144e:	9e b5       	in	r25, 0x2e	; 46
    1450:	90 83       	st	Z, r25
    1452:	31 96       	adiw	r30, 0x01	; 1
    1454:	11 96       	adiw	r26, 0x01	; 1
    1456:	e4 17       	cp	r30, r20
    1458:	f5 07       	cpc	r31, r21
    145a:	69 f7       	brne	.-38     	; 0x1436 <spi_trancieve+0x18>
    145c:	21 11       	cpse	r18, r1
    145e:	28 9a       	sbi	0x05, 0	; 5
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <__vector_17>:
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	0b b6       	in	r0, 0x3b	; 59
    1472:	0f 92       	push	r0
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	af 93       	push	r26
    1484:	bf 93       	push	r27
    1486:	ef 93       	push	r30
    1488:	ff 93       	push	r31
    148a:	a8 ec       	ldi	r26, 0xC8	; 200
    148c:	b2 e0       	ldi	r27, 0x02	; 2
    148e:	e8 ea       	ldi	r30, 0xA8	; 168
    1490:	f2 e0       	ldi	r31, 0x02	; 2
    1492:	28 ec       	ldi	r18, 0xC8	; 200
    1494:	32 e0       	ldi	r19, 0x02	; 2
    1496:	8d 91       	ld	r24, X+
    1498:	88 23       	and	r24, r24
    149a:	59 f0       	breq	.+22     	; 0x14b2 <__vector_17+0x4c>
    149c:	40 81       	ld	r20, Z
    149e:	51 81       	ldd	r21, Z+1	; 0x01
    14a0:	62 81       	ldd	r22, Z+2	; 0x02
    14a2:	73 81       	ldd	r23, Z+3	; 0x03
    14a4:	50 5e       	subi	r21, 0xE0	; 224
    14a6:	6f 4f       	sbci	r22, 0xFF	; 255
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	40 83       	st	Z, r20
    14ac:	51 83       	std	Z+1, r21	; 0x01
    14ae:	62 83       	std	Z+2, r22	; 0x02
    14b0:	73 83       	std	Z+3, r23	; 0x03
    14b2:	34 96       	adiw	r30, 0x04	; 4
    14b4:	e2 17       	cp	r30, r18
    14b6:	f3 07       	cpc	r31, r19
    14b8:	71 f7       	brne	.-36     	; 0x1496 <__vector_17+0x30>
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	bf 91       	pop	r27
    14c0:	af 91       	pop	r26
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	0f 90       	pop	r0
    14d2:	0b be       	out	0x3b, r0	; 59
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <__subsf3>:
    14de:	50 58       	subi	r21, 0x80	; 128

000014e0 <__addsf3>:
    14e0:	bb 27       	eor	r27, r27
    14e2:	aa 27       	eor	r26, r26
    14e4:	0e d0       	rcall	.+28     	; 0x1502 <__addsf3x>
    14e6:	75 c1       	rjmp	.+746    	; 0x17d2 <__fp_round>
    14e8:	66 d1       	rcall	.+716    	; 0x17b6 <__fp_pscA>
    14ea:	30 f0       	brcs	.+12     	; 0x14f8 <__addsf3+0x18>
    14ec:	6b d1       	rcall	.+726    	; 0x17c4 <__fp_pscB>
    14ee:	20 f0       	brcs	.+8      	; 0x14f8 <__addsf3+0x18>
    14f0:	31 f4       	brne	.+12     	; 0x14fe <__addsf3+0x1e>
    14f2:	9f 3f       	cpi	r25, 0xFF	; 255
    14f4:	11 f4       	brne	.+4      	; 0x14fa <__addsf3+0x1a>
    14f6:	1e f4       	brtc	.+6      	; 0x14fe <__addsf3+0x1e>
    14f8:	5b c1       	rjmp	.+694    	; 0x17b0 <__fp_nan>
    14fa:	0e f4       	brtc	.+2      	; 0x14fe <__addsf3+0x1e>
    14fc:	e0 95       	com	r30
    14fe:	e7 fb       	bst	r30, 7
    1500:	51 c1       	rjmp	.+674    	; 0x17a4 <__fp_inf>

00001502 <__addsf3x>:
    1502:	e9 2f       	mov	r30, r25
    1504:	77 d1       	rcall	.+750    	; 0x17f4 <__fp_split3>
    1506:	80 f3       	brcs	.-32     	; 0x14e8 <__addsf3+0x8>
    1508:	ba 17       	cp	r27, r26
    150a:	62 07       	cpc	r22, r18
    150c:	73 07       	cpc	r23, r19
    150e:	84 07       	cpc	r24, r20
    1510:	95 07       	cpc	r25, r21
    1512:	18 f0       	brcs	.+6      	; 0x151a <__addsf3x+0x18>
    1514:	71 f4       	brne	.+28     	; 0x1532 <__addsf3x+0x30>
    1516:	9e f5       	brtc	.+102    	; 0x157e <__addsf3x+0x7c>
    1518:	8f c1       	rjmp	.+798    	; 0x1838 <__fp_zero>
    151a:	0e f4       	brtc	.+2      	; 0x151e <__addsf3x+0x1c>
    151c:	e0 95       	com	r30
    151e:	0b 2e       	mov	r0, r27
    1520:	ba 2f       	mov	r27, r26
    1522:	a0 2d       	mov	r26, r0
    1524:	0b 01       	movw	r0, r22
    1526:	b9 01       	movw	r22, r18
    1528:	90 01       	movw	r18, r0
    152a:	0c 01       	movw	r0, r24
    152c:	ca 01       	movw	r24, r20
    152e:	a0 01       	movw	r20, r0
    1530:	11 24       	eor	r1, r1
    1532:	ff 27       	eor	r31, r31
    1534:	59 1b       	sub	r21, r25
    1536:	99 f0       	breq	.+38     	; 0x155e <__addsf3x+0x5c>
    1538:	59 3f       	cpi	r21, 0xF9	; 249
    153a:	50 f4       	brcc	.+20     	; 0x1550 <__addsf3x+0x4e>
    153c:	50 3e       	cpi	r21, 0xE0	; 224
    153e:	68 f1       	brcs	.+90     	; 0x159a <__addsf3x+0x98>
    1540:	1a 16       	cp	r1, r26
    1542:	f0 40       	sbci	r31, 0x00	; 0
    1544:	a2 2f       	mov	r26, r18
    1546:	23 2f       	mov	r18, r19
    1548:	34 2f       	mov	r19, r20
    154a:	44 27       	eor	r20, r20
    154c:	58 5f       	subi	r21, 0xF8	; 248
    154e:	f3 cf       	rjmp	.-26     	; 0x1536 <__addsf3x+0x34>
    1550:	46 95       	lsr	r20
    1552:	37 95       	ror	r19
    1554:	27 95       	ror	r18
    1556:	a7 95       	ror	r26
    1558:	f0 40       	sbci	r31, 0x00	; 0
    155a:	53 95       	inc	r21
    155c:	c9 f7       	brne	.-14     	; 0x1550 <__addsf3x+0x4e>
    155e:	7e f4       	brtc	.+30     	; 0x157e <__addsf3x+0x7c>
    1560:	1f 16       	cp	r1, r31
    1562:	ba 0b       	sbc	r27, r26
    1564:	62 0b       	sbc	r22, r18
    1566:	73 0b       	sbc	r23, r19
    1568:	84 0b       	sbc	r24, r20
    156a:	ba f0       	brmi	.+46     	; 0x159a <__addsf3x+0x98>
    156c:	91 50       	subi	r25, 0x01	; 1
    156e:	a1 f0       	breq	.+40     	; 0x1598 <__addsf3x+0x96>
    1570:	ff 0f       	add	r31, r31
    1572:	bb 1f       	adc	r27, r27
    1574:	66 1f       	adc	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	88 1f       	adc	r24, r24
    157a:	c2 f7       	brpl	.-16     	; 0x156c <__addsf3x+0x6a>
    157c:	0e c0       	rjmp	.+28     	; 0x159a <__addsf3x+0x98>
    157e:	ba 0f       	add	r27, r26
    1580:	62 1f       	adc	r22, r18
    1582:	73 1f       	adc	r23, r19
    1584:	84 1f       	adc	r24, r20
    1586:	48 f4       	brcc	.+18     	; 0x159a <__addsf3x+0x98>
    1588:	87 95       	ror	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b7 95       	ror	r27
    1590:	f7 95       	ror	r31
    1592:	9e 3f       	cpi	r25, 0xFE	; 254
    1594:	08 f0       	brcs	.+2      	; 0x1598 <__addsf3x+0x96>
    1596:	b3 cf       	rjmp	.-154    	; 0x14fe <__addsf3+0x1e>
    1598:	93 95       	inc	r25
    159a:	88 0f       	add	r24, r24
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <__addsf3x+0x9e>
    159e:	99 27       	eor	r25, r25
    15a0:	ee 0f       	add	r30, r30
    15a2:	97 95       	ror	r25
    15a4:	87 95       	ror	r24
    15a6:	08 95       	ret

000015a8 <__cmpsf2>:
    15a8:	d9 d0       	rcall	.+434    	; 0x175c <__fp_cmp>
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <__cmpsf2+0x6>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	08 95       	ret

000015b0 <__divsf3>:
    15b0:	0c d0       	rcall	.+24     	; 0x15ca <__divsf3x>
    15b2:	0f c1       	rjmp	.+542    	; 0x17d2 <__fp_round>
    15b4:	07 d1       	rcall	.+526    	; 0x17c4 <__fp_pscB>
    15b6:	40 f0       	brcs	.+16     	; 0x15c8 <__divsf3+0x18>
    15b8:	fe d0       	rcall	.+508    	; 0x17b6 <__fp_pscA>
    15ba:	30 f0       	brcs	.+12     	; 0x15c8 <__divsf3+0x18>
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <__divsf3+0x16>
    15be:	5f 3f       	cpi	r21, 0xFF	; 255
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <__divsf3+0x18>
    15c2:	f0 c0       	rjmp	.+480    	; 0x17a4 <__fp_inf>
    15c4:	51 11       	cpse	r21, r1
    15c6:	39 c1       	rjmp	.+626    	; 0x183a <__fp_szero>
    15c8:	f3 c0       	rjmp	.+486    	; 0x17b0 <__fp_nan>

000015ca <__divsf3x>:
    15ca:	14 d1       	rcall	.+552    	; 0x17f4 <__fp_split3>
    15cc:	98 f3       	brcs	.-26     	; 0x15b4 <__divsf3+0x4>

000015ce <__divsf3_pse>:
    15ce:	99 23       	and	r25, r25
    15d0:	c9 f3       	breq	.-14     	; 0x15c4 <__divsf3+0x14>
    15d2:	55 23       	and	r21, r21
    15d4:	b1 f3       	breq	.-20     	; 0x15c2 <__divsf3+0x12>
    15d6:	95 1b       	sub	r25, r21
    15d8:	55 0b       	sbc	r21, r21
    15da:	bb 27       	eor	r27, r27
    15dc:	aa 27       	eor	r26, r26
    15de:	62 17       	cp	r22, r18
    15e0:	73 07       	cpc	r23, r19
    15e2:	84 07       	cpc	r24, r20
    15e4:	38 f0       	brcs	.+14     	; 0x15f4 <__divsf3_pse+0x26>
    15e6:	9f 5f       	subi	r25, 0xFF	; 255
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	22 0f       	add	r18, r18
    15ec:	33 1f       	adc	r19, r19
    15ee:	44 1f       	adc	r20, r20
    15f0:	aa 1f       	adc	r26, r26
    15f2:	a9 f3       	breq	.-22     	; 0x15de <__divsf3_pse+0x10>
    15f4:	33 d0       	rcall	.+102    	; 0x165c <__divsf3_pse+0x8e>
    15f6:	0e 2e       	mov	r0, r30
    15f8:	3a f0       	brmi	.+14     	; 0x1608 <__divsf3_pse+0x3a>
    15fa:	e0 e8       	ldi	r30, 0x80	; 128
    15fc:	30 d0       	rcall	.+96     	; 0x165e <__divsf3_pse+0x90>
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	50 40       	sbci	r21, 0x00	; 0
    1602:	e6 95       	lsr	r30
    1604:	00 1c       	adc	r0, r0
    1606:	ca f7       	brpl	.-14     	; 0x15fa <__divsf3_pse+0x2c>
    1608:	29 d0       	rcall	.+82     	; 0x165c <__divsf3_pse+0x8e>
    160a:	fe 2f       	mov	r31, r30
    160c:	27 d0       	rcall	.+78     	; 0x165c <__divsf3_pse+0x8e>
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	bb 1f       	adc	r27, r27
    1616:	26 17       	cp	r18, r22
    1618:	37 07       	cpc	r19, r23
    161a:	48 07       	cpc	r20, r24
    161c:	ab 07       	cpc	r26, r27
    161e:	b0 e8       	ldi	r27, 0x80	; 128
    1620:	09 f0       	breq	.+2      	; 0x1624 <__divsf3_pse+0x56>
    1622:	bb 0b       	sbc	r27, r27
    1624:	80 2d       	mov	r24, r0
    1626:	bf 01       	movw	r22, r30
    1628:	ff 27       	eor	r31, r31
    162a:	93 58       	subi	r25, 0x83	; 131
    162c:	5f 4f       	sbci	r21, 0xFF	; 255
    162e:	2a f0       	brmi	.+10     	; 0x163a <__divsf3_pse+0x6c>
    1630:	9e 3f       	cpi	r25, 0xFE	; 254
    1632:	51 05       	cpc	r21, r1
    1634:	68 f0       	brcs	.+26     	; 0x1650 <__divsf3_pse+0x82>
    1636:	b6 c0       	rjmp	.+364    	; 0x17a4 <__fp_inf>
    1638:	00 c1       	rjmp	.+512    	; 0x183a <__fp_szero>
    163a:	5f 3f       	cpi	r21, 0xFF	; 255
    163c:	ec f3       	brlt	.-6      	; 0x1638 <__divsf3_pse+0x6a>
    163e:	98 3e       	cpi	r25, 0xE8	; 232
    1640:	dc f3       	brlt	.-10     	; 0x1638 <__divsf3_pse+0x6a>
    1642:	86 95       	lsr	r24
    1644:	77 95       	ror	r23
    1646:	67 95       	ror	r22
    1648:	b7 95       	ror	r27
    164a:	f7 95       	ror	r31
    164c:	9f 5f       	subi	r25, 0xFF	; 255
    164e:	c9 f7       	brne	.-14     	; 0x1642 <__divsf3_pse+0x74>
    1650:	88 0f       	add	r24, r24
    1652:	91 1d       	adc	r25, r1
    1654:	96 95       	lsr	r25
    1656:	87 95       	ror	r24
    1658:	97 f9       	bld	r25, 7
    165a:	08 95       	ret
    165c:	e1 e0       	ldi	r30, 0x01	; 1
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	bb 1f       	adc	r27, r27
    1666:	62 17       	cp	r22, r18
    1668:	73 07       	cpc	r23, r19
    166a:	84 07       	cpc	r24, r20
    166c:	ba 07       	cpc	r27, r26
    166e:	20 f0       	brcs	.+8      	; 0x1678 <__divsf3_pse+0xaa>
    1670:	62 1b       	sub	r22, r18
    1672:	73 0b       	sbc	r23, r19
    1674:	84 0b       	sbc	r24, r20
    1676:	ba 0b       	sbc	r27, r26
    1678:	ee 1f       	adc	r30, r30
    167a:	88 f7       	brcc	.-30     	; 0x165e <__divsf3_pse+0x90>
    167c:	e0 95       	com	r30
    167e:	08 95       	ret

00001680 <__fixsfsi>:
    1680:	04 d0       	rcall	.+8      	; 0x168a <__fixunssfsi>
    1682:	68 94       	set
    1684:	b1 11       	cpse	r27, r1
    1686:	d9 c0       	rjmp	.+434    	; 0x183a <__fp_szero>
    1688:	08 95       	ret

0000168a <__fixunssfsi>:
    168a:	bc d0       	rcall	.+376    	; 0x1804 <__fp_splitA>
    168c:	88 f0       	brcs	.+34     	; 0x16b0 <__fixunssfsi+0x26>
    168e:	9f 57       	subi	r25, 0x7F	; 127
    1690:	90 f0       	brcs	.+36     	; 0x16b6 <__fixunssfsi+0x2c>
    1692:	b9 2f       	mov	r27, r25
    1694:	99 27       	eor	r25, r25
    1696:	b7 51       	subi	r27, 0x17	; 23
    1698:	a0 f0       	brcs	.+40     	; 0x16c2 <__fixunssfsi+0x38>
    169a:	d1 f0       	breq	.+52     	; 0x16d0 <__fixunssfsi+0x46>
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	88 1f       	adc	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	1a f0       	brmi	.+6      	; 0x16ac <__fixunssfsi+0x22>
    16a6:	ba 95       	dec	r27
    16a8:	c9 f7       	brne	.-14     	; 0x169c <__fixunssfsi+0x12>
    16aa:	12 c0       	rjmp	.+36     	; 0x16d0 <__fixunssfsi+0x46>
    16ac:	b1 30       	cpi	r27, 0x01	; 1
    16ae:	81 f0       	breq	.+32     	; 0x16d0 <__fixunssfsi+0x46>
    16b0:	c3 d0       	rcall	.+390    	; 0x1838 <__fp_zero>
    16b2:	b1 e0       	ldi	r27, 0x01	; 1
    16b4:	08 95       	ret
    16b6:	c0 c0       	rjmp	.+384    	; 0x1838 <__fp_zero>
    16b8:	67 2f       	mov	r22, r23
    16ba:	78 2f       	mov	r23, r24
    16bc:	88 27       	eor	r24, r24
    16be:	b8 5f       	subi	r27, 0xF8	; 248
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <__fixunssfsi+0x46>
    16c2:	b9 3f       	cpi	r27, 0xF9	; 249
    16c4:	cc f3       	brlt	.-14     	; 0x16b8 <__fixunssfsi+0x2e>
    16c6:	86 95       	lsr	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b3 95       	inc	r27
    16ce:	d9 f7       	brne	.-10     	; 0x16c6 <__fixunssfsi+0x3c>
    16d0:	3e f4       	brtc	.+14     	; 0x16e0 <__fixunssfsi+0x56>
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	08 95       	ret

000016e2 <__floatunsisf>:
    16e2:	e8 94       	clt
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <__floatsisf+0x12>

000016e6 <__floatsisf>:
    16e6:	97 fb       	bst	r25, 7
    16e8:	3e f4       	brtc	.+14     	; 0x16f8 <__floatsisf+0x12>
    16ea:	90 95       	com	r25
    16ec:	80 95       	com	r24
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	99 23       	and	r25, r25
    16fa:	a9 f0       	breq	.+42     	; 0x1726 <__floatsisf+0x40>
    16fc:	f9 2f       	mov	r31, r25
    16fe:	96 e9       	ldi	r25, 0x96	; 150
    1700:	bb 27       	eor	r27, r27
    1702:	93 95       	inc	r25
    1704:	f6 95       	lsr	r31
    1706:	87 95       	ror	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	b7 95       	ror	r27
    170e:	f1 11       	cpse	r31, r1
    1710:	f8 cf       	rjmp	.-16     	; 0x1702 <__floatsisf+0x1c>
    1712:	fa f4       	brpl	.+62     	; 0x1752 <__floatsisf+0x6c>
    1714:	bb 0f       	add	r27, r27
    1716:	11 f4       	brne	.+4      	; 0x171c <__floatsisf+0x36>
    1718:	60 ff       	sbrs	r22, 0
    171a:	1b c0       	rjmp	.+54     	; 0x1752 <__floatsisf+0x6c>
    171c:	6f 5f       	subi	r22, 0xFF	; 255
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	16 c0       	rjmp	.+44     	; 0x1752 <__floatsisf+0x6c>
    1726:	88 23       	and	r24, r24
    1728:	11 f0       	breq	.+4      	; 0x172e <__floatsisf+0x48>
    172a:	96 e9       	ldi	r25, 0x96	; 150
    172c:	11 c0       	rjmp	.+34     	; 0x1750 <__floatsisf+0x6a>
    172e:	77 23       	and	r23, r23
    1730:	21 f0       	breq	.+8      	; 0x173a <__floatsisf+0x54>
    1732:	9e e8       	ldi	r25, 0x8E	; 142
    1734:	87 2f       	mov	r24, r23
    1736:	76 2f       	mov	r23, r22
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__floatsisf+0x5e>
    173a:	66 23       	and	r22, r22
    173c:	71 f0       	breq	.+28     	; 0x175a <__floatsisf+0x74>
    173e:	96 e8       	ldi	r25, 0x86	; 134
    1740:	86 2f       	mov	r24, r22
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	2a f0       	brmi	.+10     	; 0x1752 <__floatsisf+0x6c>
    1748:	9a 95       	dec	r25
    174a:	66 0f       	add	r22, r22
    174c:	77 1f       	adc	r23, r23
    174e:	88 1f       	adc	r24, r24
    1750:	da f7       	brpl	.-10     	; 0x1748 <__floatsisf+0x62>
    1752:	88 0f       	add	r24, r24
    1754:	96 95       	lsr	r25
    1756:	87 95       	ror	r24
    1758:	97 f9       	bld	r25, 7
    175a:	08 95       	ret

0000175c <__fp_cmp>:
    175c:	99 0f       	add	r25, r25
    175e:	00 08       	sbc	r0, r0
    1760:	55 0f       	add	r21, r21
    1762:	aa 0b       	sbc	r26, r26
    1764:	e0 e8       	ldi	r30, 0x80	; 128
    1766:	fe ef       	ldi	r31, 0xFE	; 254
    1768:	16 16       	cp	r1, r22
    176a:	17 06       	cpc	r1, r23
    176c:	e8 07       	cpc	r30, r24
    176e:	f9 07       	cpc	r31, r25
    1770:	c0 f0       	brcs	.+48     	; 0x17a2 <__fp_cmp+0x46>
    1772:	12 16       	cp	r1, r18
    1774:	13 06       	cpc	r1, r19
    1776:	e4 07       	cpc	r30, r20
    1778:	f5 07       	cpc	r31, r21
    177a:	98 f0       	brcs	.+38     	; 0x17a2 <__fp_cmp+0x46>
    177c:	62 1b       	sub	r22, r18
    177e:	73 0b       	sbc	r23, r19
    1780:	84 0b       	sbc	r24, r20
    1782:	95 0b       	sbc	r25, r21
    1784:	39 f4       	brne	.+14     	; 0x1794 <__fp_cmp+0x38>
    1786:	0a 26       	eor	r0, r26
    1788:	61 f0       	breq	.+24     	; 0x17a2 <__fp_cmp+0x46>
    178a:	23 2b       	or	r18, r19
    178c:	24 2b       	or	r18, r20
    178e:	25 2b       	or	r18, r21
    1790:	21 f4       	brne	.+8      	; 0x179a <__fp_cmp+0x3e>
    1792:	08 95       	ret
    1794:	0a 26       	eor	r0, r26
    1796:	09 f4       	brne	.+2      	; 0x179a <__fp_cmp+0x3e>
    1798:	a1 40       	sbci	r26, 0x01	; 1
    179a:	a6 95       	lsr	r26
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	81 1d       	adc	r24, r1
    17a0:	81 1d       	adc	r24, r1
    17a2:	08 95       	ret

000017a4 <__fp_inf>:
    17a4:	97 f9       	bld	r25, 7
    17a6:	9f 67       	ori	r25, 0x7F	; 127
    17a8:	80 e8       	ldi	r24, 0x80	; 128
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	08 95       	ret

000017b0 <__fp_nan>:
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	80 ec       	ldi	r24, 0xC0	; 192
    17b4:	08 95       	ret

000017b6 <__fp_pscA>:
    17b6:	00 24       	eor	r0, r0
    17b8:	0a 94       	dec	r0
    17ba:	16 16       	cp	r1, r22
    17bc:	17 06       	cpc	r1, r23
    17be:	18 06       	cpc	r1, r24
    17c0:	09 06       	cpc	r0, r25
    17c2:	08 95       	ret

000017c4 <__fp_pscB>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	12 16       	cp	r1, r18
    17ca:	13 06       	cpc	r1, r19
    17cc:	14 06       	cpc	r1, r20
    17ce:	05 06       	cpc	r0, r21
    17d0:	08 95       	ret

000017d2 <__fp_round>:
    17d2:	09 2e       	mov	r0, r25
    17d4:	03 94       	inc	r0
    17d6:	00 0c       	add	r0, r0
    17d8:	11 f4       	brne	.+4      	; 0x17de <__fp_round+0xc>
    17da:	88 23       	and	r24, r24
    17dc:	52 f0       	brmi	.+20     	; 0x17f2 <__fp_round+0x20>
    17de:	bb 0f       	add	r27, r27
    17e0:	40 f4       	brcc	.+16     	; 0x17f2 <__fp_round+0x20>
    17e2:	bf 2b       	or	r27, r31
    17e4:	11 f4       	brne	.+4      	; 0x17ea <__fp_round+0x18>
    17e6:	60 ff       	sbrs	r22, 0
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <__fp_round+0x20>
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	08 95       	ret

000017f4 <__fp_split3>:
    17f4:	57 fd       	sbrc	r21, 7
    17f6:	90 58       	subi	r25, 0x80	; 128
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	59 f0       	breq	.+22     	; 0x1814 <__fp_splitA+0x10>
    17fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1800:	71 f0       	breq	.+28     	; 0x181e <__fp_splitA+0x1a>
    1802:	47 95       	ror	r20

00001804 <__fp_splitA>:
    1804:	88 0f       	add	r24, r24
    1806:	97 fb       	bst	r25, 7
    1808:	99 1f       	adc	r25, r25
    180a:	61 f0       	breq	.+24     	; 0x1824 <__fp_splitA+0x20>
    180c:	9f 3f       	cpi	r25, 0xFF	; 255
    180e:	79 f0       	breq	.+30     	; 0x182e <__fp_splitA+0x2a>
    1810:	87 95       	ror	r24
    1812:	08 95       	ret
    1814:	12 16       	cp	r1, r18
    1816:	13 06       	cpc	r1, r19
    1818:	14 06       	cpc	r1, r20
    181a:	55 1f       	adc	r21, r21
    181c:	f2 cf       	rjmp	.-28     	; 0x1802 <__fp_split3+0xe>
    181e:	46 95       	lsr	r20
    1820:	f1 df       	rcall	.-30     	; 0x1804 <__fp_splitA>
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <__fp_splitA+0x30>
    1824:	16 16       	cp	r1, r22
    1826:	17 06       	cpc	r1, r23
    1828:	18 06       	cpc	r1, r24
    182a:	99 1f       	adc	r25, r25
    182c:	f1 cf       	rjmp	.-30     	; 0x1810 <__fp_splitA+0xc>
    182e:	86 95       	lsr	r24
    1830:	71 05       	cpc	r23, r1
    1832:	61 05       	cpc	r22, r1
    1834:	08 94       	sec
    1836:	08 95       	ret

00001838 <__fp_zero>:
    1838:	e8 94       	clt

0000183a <__fp_szero>:
    183a:	bb 27       	eor	r27, r27
    183c:	66 27       	eor	r22, r22
    183e:	77 27       	eor	r23, r23
    1840:	cb 01       	movw	r24, r22
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret

00001846 <__gesf2>:
    1846:	8a df       	rcall	.-236    	; 0x175c <__fp_cmp>
    1848:	08 f4       	brcc	.+2      	; 0x184c <__gesf2+0x6>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	08 95       	ret

0000184e <__mulsf3>:
    184e:	0b d0       	rcall	.+22     	; 0x1866 <__mulsf3x>
    1850:	c0 cf       	rjmp	.-128    	; 0x17d2 <__fp_round>
    1852:	b1 df       	rcall	.-158    	; 0x17b6 <__fp_pscA>
    1854:	28 f0       	brcs	.+10     	; 0x1860 <__mulsf3+0x12>
    1856:	b6 df       	rcall	.-148    	; 0x17c4 <__fp_pscB>
    1858:	18 f0       	brcs	.+6      	; 0x1860 <__mulsf3+0x12>
    185a:	95 23       	and	r25, r21
    185c:	09 f0       	breq	.+2      	; 0x1860 <__mulsf3+0x12>
    185e:	a2 cf       	rjmp	.-188    	; 0x17a4 <__fp_inf>
    1860:	a7 cf       	rjmp	.-178    	; 0x17b0 <__fp_nan>
    1862:	11 24       	eor	r1, r1
    1864:	ea cf       	rjmp	.-44     	; 0x183a <__fp_szero>

00001866 <__mulsf3x>:
    1866:	c6 df       	rcall	.-116    	; 0x17f4 <__fp_split3>
    1868:	a0 f3       	brcs	.-24     	; 0x1852 <__mulsf3+0x4>

0000186a <__mulsf3_pse>:
    186a:	95 9f       	mul	r25, r21
    186c:	d1 f3       	breq	.-12     	; 0x1862 <__mulsf3+0x14>
    186e:	95 0f       	add	r25, r21
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	55 1f       	adc	r21, r21
    1874:	62 9f       	mul	r22, r18
    1876:	f0 01       	movw	r30, r0
    1878:	72 9f       	mul	r23, r18
    187a:	bb 27       	eor	r27, r27
    187c:	f0 0d       	add	r31, r0
    187e:	b1 1d       	adc	r27, r1
    1880:	63 9f       	mul	r22, r19
    1882:	aa 27       	eor	r26, r26
    1884:	f0 0d       	add	r31, r0
    1886:	b1 1d       	adc	r27, r1
    1888:	aa 1f       	adc	r26, r26
    188a:	64 9f       	mul	r22, r20
    188c:	66 27       	eor	r22, r22
    188e:	b0 0d       	add	r27, r0
    1890:	a1 1d       	adc	r26, r1
    1892:	66 1f       	adc	r22, r22
    1894:	82 9f       	mul	r24, r18
    1896:	22 27       	eor	r18, r18
    1898:	b0 0d       	add	r27, r0
    189a:	a1 1d       	adc	r26, r1
    189c:	62 1f       	adc	r22, r18
    189e:	73 9f       	mul	r23, r19
    18a0:	b0 0d       	add	r27, r0
    18a2:	a1 1d       	adc	r26, r1
    18a4:	62 1f       	adc	r22, r18
    18a6:	83 9f       	mul	r24, r19
    18a8:	a0 0d       	add	r26, r0
    18aa:	61 1d       	adc	r22, r1
    18ac:	22 1f       	adc	r18, r18
    18ae:	74 9f       	mul	r23, r20
    18b0:	33 27       	eor	r19, r19
    18b2:	a0 0d       	add	r26, r0
    18b4:	61 1d       	adc	r22, r1
    18b6:	23 1f       	adc	r18, r19
    18b8:	84 9f       	mul	r24, r20
    18ba:	60 0d       	add	r22, r0
    18bc:	21 1d       	adc	r18, r1
    18be:	82 2f       	mov	r24, r18
    18c0:	76 2f       	mov	r23, r22
    18c2:	6a 2f       	mov	r22, r26
    18c4:	11 24       	eor	r1, r1
    18c6:	9f 57       	subi	r25, 0x7F	; 127
    18c8:	50 40       	sbci	r21, 0x00	; 0
    18ca:	8a f0       	brmi	.+34     	; 0x18ee <__mulsf3_pse+0x84>
    18cc:	e1 f0       	breq	.+56     	; 0x1906 <__mulsf3_pse+0x9c>
    18ce:	88 23       	and	r24, r24
    18d0:	4a f0       	brmi	.+18     	; 0x18e4 <__mulsf3_pse+0x7a>
    18d2:	ee 0f       	add	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	bb 1f       	adc	r27, r27
    18d8:	66 1f       	adc	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	88 1f       	adc	r24, r24
    18de:	91 50       	subi	r25, 0x01	; 1
    18e0:	50 40       	sbci	r21, 0x00	; 0
    18e2:	a9 f7       	brne	.-22     	; 0x18ce <__mulsf3_pse+0x64>
    18e4:	9e 3f       	cpi	r25, 0xFE	; 254
    18e6:	51 05       	cpc	r21, r1
    18e8:	70 f0       	brcs	.+28     	; 0x1906 <__mulsf3_pse+0x9c>
    18ea:	5c cf       	rjmp	.-328    	; 0x17a4 <__fp_inf>
    18ec:	a6 cf       	rjmp	.-180    	; 0x183a <__fp_szero>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	ec f3       	brlt	.-6      	; 0x18ec <__mulsf3_pse+0x82>
    18f2:	98 3e       	cpi	r25, 0xE8	; 232
    18f4:	dc f3       	brlt	.-10     	; 0x18ec <__mulsf3_pse+0x82>
    18f6:	86 95       	lsr	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b7 95       	ror	r27
    18fe:	f7 95       	ror	r31
    1900:	e7 95       	ror	r30
    1902:	9f 5f       	subi	r25, 0xFF	; 255
    1904:	c1 f7       	brne	.-16     	; 0x18f6 <__mulsf3_pse+0x8c>
    1906:	fe 2b       	or	r31, r30
    1908:	88 0f       	add	r24, r24
    190a:	91 1d       	adc	r25, r1
    190c:	96 95       	lsr	r25
    190e:	87 95       	ror	r24
    1910:	97 f9       	bld	r25, 7
    1912:	08 95       	ret

00001914 <__tablejump2__>:
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	00 24       	eor	r0, r0
    191a:	00 1c       	adc	r0, r0
    191c:	0b be       	out	0x3b, r0	; 59
    191e:	07 90       	elpm	r0, Z+
    1920:	f6 91       	elpm	r31, Z
    1922:	e0 2d       	mov	r30, r0
    1924:	09 94       	ijmp

00001926 <atoi>:
    1926:	fc 01       	movw	r30, r24
    1928:	88 27       	eor	r24, r24
    192a:	99 27       	eor	r25, r25
    192c:	e8 94       	clt
    192e:	21 91       	ld	r18, Z+
    1930:	20 32       	cpi	r18, 0x20	; 32
    1932:	e9 f3       	breq	.-6      	; 0x192e <atoi+0x8>
    1934:	29 30       	cpi	r18, 0x09	; 9
    1936:	10 f0       	brcs	.+4      	; 0x193c <atoi+0x16>
    1938:	2e 30       	cpi	r18, 0x0E	; 14
    193a:	c8 f3       	brcs	.-14     	; 0x192e <atoi+0x8>
    193c:	2b 32       	cpi	r18, 0x2B	; 43
    193e:	39 f0       	breq	.+14     	; 0x194e <atoi+0x28>
    1940:	2d 32       	cpi	r18, 0x2D	; 45
    1942:	31 f4       	brne	.+12     	; 0x1950 <atoi+0x2a>
    1944:	68 94       	set
    1946:	03 c0       	rjmp	.+6      	; 0x194e <atoi+0x28>
    1948:	0b d0       	rcall	.+22     	; 0x1960 <__mulhi_const_10>
    194a:	82 0f       	add	r24, r18
    194c:	91 1d       	adc	r25, r1
    194e:	21 91       	ld	r18, Z+
    1950:	20 53       	subi	r18, 0x30	; 48
    1952:	2a 30       	cpi	r18, 0x0A	; 10
    1954:	c8 f3       	brcs	.-14     	; 0x1948 <atoi+0x22>
    1956:	1e f4       	brtc	.+6      	; 0x195e <atoi+0x38>
    1958:	90 95       	com	r25
    195a:	81 95       	neg	r24
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	08 95       	ret

00001960 <__mulhi_const_10>:
    1960:	7a e0       	ldi	r23, 0x0A	; 10
    1962:	97 9f       	mul	r25, r23
    1964:	90 2d       	mov	r25, r0
    1966:	87 9f       	mul	r24, r23
    1968:	80 2d       	mov	r24, r0
    196a:	91 0d       	add	r25, r1
    196c:	11 24       	eor	r1, r1
    196e:	08 95       	ret

00001970 <printf>:
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	ae 01       	movw	r20, r28
    197a:	4b 5f       	subi	r20, 0xFB	; 251
    197c:	5f 4f       	sbci	r21, 0xFF	; 255
    197e:	fa 01       	movw	r30, r20
    1980:	61 91       	ld	r22, Z+
    1982:	71 91       	ld	r23, Z+
    1984:	af 01       	movw	r20, r30
    1986:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <__iob+0x2>
    198a:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <__iob+0x3>
    198e:	08 d0       	rcall	.+16     	; 0x19a0 <vfprintf>
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <putchar>:
    1996:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <__iob+0x2>
    199a:	70 91 71 03 	lds	r23, 0x0371	; 0x800371 <__iob+0x3>
    199e:	13 c2       	rjmp	.+1062   	; 0x1dc6 <fputc>

000019a0 <vfprintf>:
    19a0:	2f 92       	push	r2
    19a2:	3f 92       	push	r3
    19a4:	4f 92       	push	r4
    19a6:	5f 92       	push	r5
    19a8:	6f 92       	push	r6
    19aa:	7f 92       	push	r7
    19ac:	8f 92       	push	r8
    19ae:	9f 92       	push	r9
    19b0:	af 92       	push	r10
    19b2:	bf 92       	push	r11
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	2b 97       	sbiw	r28, 0x0b	; 11
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	6c 01       	movw	r12, r24
    19d6:	7b 01       	movw	r14, r22
    19d8:	8a 01       	movw	r16, r20
    19da:	fc 01       	movw	r30, r24
    19dc:	17 82       	std	Z+7, r1	; 0x07
    19de:	16 82       	std	Z+6, r1	; 0x06
    19e0:	83 81       	ldd	r24, Z+3	; 0x03
    19e2:	81 ff       	sbrs	r24, 1
    19e4:	bf c1       	rjmp	.+894    	; 0x1d64 <vfprintf+0x3c4>
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	3c 01       	movw	r6, r24
    19ec:	f6 01       	movw	r30, r12
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	f7 01       	movw	r30, r14
    19f2:	93 fd       	sbrc	r25, 3
    19f4:	85 91       	lpm	r24, Z+
    19f6:	93 ff       	sbrs	r25, 3
    19f8:	81 91       	ld	r24, Z+
    19fa:	7f 01       	movw	r14, r30
    19fc:	88 23       	and	r24, r24
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <vfprintf+0x62>
    1a00:	ad c1       	rjmp	.+858    	; 0x1d5c <vfprintf+0x3bc>
    1a02:	85 32       	cpi	r24, 0x25	; 37
    1a04:	39 f4       	brne	.+14     	; 0x1a14 <vfprintf+0x74>
    1a06:	93 fd       	sbrc	r25, 3
    1a08:	85 91       	lpm	r24, Z+
    1a0a:	93 ff       	sbrs	r25, 3
    1a0c:	81 91       	ld	r24, Z+
    1a0e:	7f 01       	movw	r14, r30
    1a10:	85 32       	cpi	r24, 0x25	; 37
    1a12:	21 f4       	brne	.+8      	; 0x1a1c <vfprintf+0x7c>
    1a14:	b6 01       	movw	r22, r12
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	d6 d1       	rcall	.+940    	; 0x1dc6 <fputc>
    1a1a:	e8 cf       	rjmp	.-48     	; 0x19ec <vfprintf+0x4c>
    1a1c:	91 2c       	mov	r9, r1
    1a1e:	21 2c       	mov	r2, r1
    1a20:	31 2c       	mov	r3, r1
    1a22:	ff e1       	ldi	r31, 0x1F	; 31
    1a24:	f3 15       	cp	r31, r3
    1a26:	d8 f0       	brcs	.+54     	; 0x1a5e <vfprintf+0xbe>
    1a28:	8b 32       	cpi	r24, 0x2B	; 43
    1a2a:	79 f0       	breq	.+30     	; 0x1a4a <vfprintf+0xaa>
    1a2c:	38 f4       	brcc	.+14     	; 0x1a3c <vfprintf+0x9c>
    1a2e:	80 32       	cpi	r24, 0x20	; 32
    1a30:	79 f0       	breq	.+30     	; 0x1a50 <vfprintf+0xb0>
    1a32:	83 32       	cpi	r24, 0x23	; 35
    1a34:	a1 f4       	brne	.+40     	; 0x1a5e <vfprintf+0xbe>
    1a36:	23 2d       	mov	r18, r3
    1a38:	20 61       	ori	r18, 0x10	; 16
    1a3a:	1d c0       	rjmp	.+58     	; 0x1a76 <vfprintf+0xd6>
    1a3c:	8d 32       	cpi	r24, 0x2D	; 45
    1a3e:	61 f0       	breq	.+24     	; 0x1a58 <vfprintf+0xb8>
    1a40:	80 33       	cpi	r24, 0x30	; 48
    1a42:	69 f4       	brne	.+26     	; 0x1a5e <vfprintf+0xbe>
    1a44:	23 2d       	mov	r18, r3
    1a46:	21 60       	ori	r18, 0x01	; 1
    1a48:	16 c0       	rjmp	.+44     	; 0x1a76 <vfprintf+0xd6>
    1a4a:	83 2d       	mov	r24, r3
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	38 2e       	mov	r3, r24
    1a50:	e3 2d       	mov	r30, r3
    1a52:	e4 60       	ori	r30, 0x04	; 4
    1a54:	3e 2e       	mov	r3, r30
    1a56:	2a c0       	rjmp	.+84     	; 0x1aac <vfprintf+0x10c>
    1a58:	f3 2d       	mov	r31, r3
    1a5a:	f8 60       	ori	r31, 0x08	; 8
    1a5c:	1d c0       	rjmp	.+58     	; 0x1a98 <vfprintf+0xf8>
    1a5e:	37 fc       	sbrc	r3, 7
    1a60:	2d c0       	rjmp	.+90     	; 0x1abc <vfprintf+0x11c>
    1a62:	20 ed       	ldi	r18, 0xD0	; 208
    1a64:	28 0f       	add	r18, r24
    1a66:	2a 30       	cpi	r18, 0x0A	; 10
    1a68:	40 f0       	brcs	.+16     	; 0x1a7a <vfprintf+0xda>
    1a6a:	8e 32       	cpi	r24, 0x2E	; 46
    1a6c:	b9 f4       	brne	.+46     	; 0x1a9c <vfprintf+0xfc>
    1a6e:	36 fc       	sbrc	r3, 6
    1a70:	75 c1       	rjmp	.+746    	; 0x1d5c <vfprintf+0x3bc>
    1a72:	23 2d       	mov	r18, r3
    1a74:	20 64       	ori	r18, 0x40	; 64
    1a76:	32 2e       	mov	r3, r18
    1a78:	19 c0       	rjmp	.+50     	; 0x1aac <vfprintf+0x10c>
    1a7a:	36 fe       	sbrs	r3, 6
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0xea>
    1a7e:	8a e0       	ldi	r24, 0x0A	; 10
    1a80:	98 9e       	mul	r9, r24
    1a82:	20 0d       	add	r18, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	92 2e       	mov	r9, r18
    1a88:	11 c0       	rjmp	.+34     	; 0x1aac <vfprintf+0x10c>
    1a8a:	ea e0       	ldi	r30, 0x0A	; 10
    1a8c:	2e 9e       	mul	r2, r30
    1a8e:	20 0d       	add	r18, r0
    1a90:	11 24       	eor	r1, r1
    1a92:	22 2e       	mov	r2, r18
    1a94:	f3 2d       	mov	r31, r3
    1a96:	f0 62       	ori	r31, 0x20	; 32
    1a98:	3f 2e       	mov	r3, r31
    1a9a:	08 c0       	rjmp	.+16     	; 0x1aac <vfprintf+0x10c>
    1a9c:	8c 36       	cpi	r24, 0x6C	; 108
    1a9e:	21 f4       	brne	.+8      	; 0x1aa8 <vfprintf+0x108>
    1aa0:	83 2d       	mov	r24, r3
    1aa2:	80 68       	ori	r24, 0x80	; 128
    1aa4:	38 2e       	mov	r3, r24
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <vfprintf+0x10c>
    1aa8:	88 36       	cpi	r24, 0x68	; 104
    1aaa:	41 f4       	brne	.+16     	; 0x1abc <vfprintf+0x11c>
    1aac:	f7 01       	movw	r30, r14
    1aae:	93 fd       	sbrc	r25, 3
    1ab0:	85 91       	lpm	r24, Z+
    1ab2:	93 ff       	sbrs	r25, 3
    1ab4:	81 91       	ld	r24, Z+
    1ab6:	7f 01       	movw	r14, r30
    1ab8:	81 11       	cpse	r24, r1
    1aba:	b3 cf       	rjmp	.-154    	; 0x1a22 <vfprintf+0x82>
    1abc:	98 2f       	mov	r25, r24
    1abe:	9f 7d       	andi	r25, 0xDF	; 223
    1ac0:	95 54       	subi	r25, 0x45	; 69
    1ac2:	93 30       	cpi	r25, 0x03	; 3
    1ac4:	28 f4       	brcc	.+10     	; 0x1ad0 <vfprintf+0x130>
    1ac6:	0c 5f       	subi	r16, 0xFC	; 252
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	9f e3       	ldi	r25, 0x3F	; 63
    1acc:	99 83       	std	Y+1, r25	; 0x01
    1ace:	0d c0       	rjmp	.+26     	; 0x1aea <vfprintf+0x14a>
    1ad0:	83 36       	cpi	r24, 0x63	; 99
    1ad2:	31 f0       	breq	.+12     	; 0x1ae0 <vfprintf+0x140>
    1ad4:	83 37       	cpi	r24, 0x73	; 115
    1ad6:	71 f0       	breq	.+28     	; 0x1af4 <vfprintf+0x154>
    1ad8:	83 35       	cpi	r24, 0x53	; 83
    1ada:	09 f0       	breq	.+2      	; 0x1ade <vfprintf+0x13e>
    1adc:	55 c0       	rjmp	.+170    	; 0x1b88 <vfprintf+0x1e8>
    1ade:	20 c0       	rjmp	.+64     	; 0x1b20 <vfprintf+0x180>
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	80 81       	ld	r24, Z
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	0e 5f       	subi	r16, 0xFE	; 254
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	88 24       	eor	r8, r8
    1aec:	83 94       	inc	r8
    1aee:	91 2c       	mov	r9, r1
    1af0:	53 01       	movw	r10, r6
    1af2:	12 c0       	rjmp	.+36     	; 0x1b18 <vfprintf+0x178>
    1af4:	28 01       	movw	r4, r16
    1af6:	f2 e0       	ldi	r31, 0x02	; 2
    1af8:	4f 0e       	add	r4, r31
    1afa:	51 1c       	adc	r5, r1
    1afc:	f8 01       	movw	r30, r16
    1afe:	a0 80       	ld	r10, Z
    1b00:	b1 80       	ldd	r11, Z+1	; 0x01
    1b02:	36 fe       	sbrs	r3, 6
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <vfprintf+0x16c>
    1b06:	69 2d       	mov	r22, r9
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0x170>
    1b0c:	6f ef       	ldi	r22, 0xFF	; 255
    1b0e:	7f ef       	ldi	r23, 0xFF	; 255
    1b10:	c5 01       	movw	r24, r10
    1b12:	4e d1       	rcall	.+668    	; 0x1db0 <strnlen>
    1b14:	4c 01       	movw	r8, r24
    1b16:	82 01       	movw	r16, r4
    1b18:	f3 2d       	mov	r31, r3
    1b1a:	ff 77       	andi	r31, 0x7F	; 127
    1b1c:	3f 2e       	mov	r3, r31
    1b1e:	15 c0       	rjmp	.+42     	; 0x1b4a <vfprintf+0x1aa>
    1b20:	28 01       	movw	r4, r16
    1b22:	22 e0       	ldi	r18, 0x02	; 2
    1b24:	42 0e       	add	r4, r18
    1b26:	51 1c       	adc	r5, r1
    1b28:	f8 01       	movw	r30, r16
    1b2a:	a0 80       	ld	r10, Z
    1b2c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b2e:	36 fe       	sbrs	r3, 6
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <vfprintf+0x198>
    1b32:	69 2d       	mov	r22, r9
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <vfprintf+0x19c>
    1b38:	6f ef       	ldi	r22, 0xFF	; 255
    1b3a:	7f ef       	ldi	r23, 0xFF	; 255
    1b3c:	c5 01       	movw	r24, r10
    1b3e:	2d d1       	rcall	.+602    	; 0x1d9a <strnlen_P>
    1b40:	4c 01       	movw	r8, r24
    1b42:	f3 2d       	mov	r31, r3
    1b44:	f0 68       	ori	r31, 0x80	; 128
    1b46:	3f 2e       	mov	r3, r31
    1b48:	82 01       	movw	r16, r4
    1b4a:	33 fc       	sbrc	r3, 3
    1b4c:	19 c0       	rjmp	.+50     	; 0x1b80 <vfprintf+0x1e0>
    1b4e:	82 2d       	mov	r24, r2
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	88 16       	cp	r8, r24
    1b54:	99 06       	cpc	r9, r25
    1b56:	a0 f4       	brcc	.+40     	; 0x1b80 <vfprintf+0x1e0>
    1b58:	b6 01       	movw	r22, r12
    1b5a:	80 e2       	ldi	r24, 0x20	; 32
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	33 d1       	rcall	.+614    	; 0x1dc6 <fputc>
    1b60:	2a 94       	dec	r2
    1b62:	f5 cf       	rjmp	.-22     	; 0x1b4e <vfprintf+0x1ae>
    1b64:	f5 01       	movw	r30, r10
    1b66:	37 fc       	sbrc	r3, 7
    1b68:	85 91       	lpm	r24, Z+
    1b6a:	37 fe       	sbrs	r3, 7
    1b6c:	81 91       	ld	r24, Z+
    1b6e:	5f 01       	movw	r10, r30
    1b70:	b6 01       	movw	r22, r12
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	28 d1       	rcall	.+592    	; 0x1dc6 <fputc>
    1b76:	21 10       	cpse	r2, r1
    1b78:	2a 94       	dec	r2
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	82 1a       	sub	r8, r18
    1b7e:	91 08       	sbc	r9, r1
    1b80:	81 14       	cp	r8, r1
    1b82:	91 04       	cpc	r9, r1
    1b84:	79 f7       	brne	.-34     	; 0x1b64 <vfprintf+0x1c4>
    1b86:	e1 c0       	rjmp	.+450    	; 0x1d4a <vfprintf+0x3aa>
    1b88:	84 36       	cpi	r24, 0x64	; 100
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <vfprintf+0x1f0>
    1b8c:	89 36       	cpi	r24, 0x69	; 105
    1b8e:	39 f5       	brne	.+78     	; 0x1bde <vfprintf+0x23e>
    1b90:	f8 01       	movw	r30, r16
    1b92:	37 fe       	sbrs	r3, 7
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <vfprintf+0x204>
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	0c 5f       	subi	r16, 0xFC	; 252
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	08 c0       	rjmp	.+16     	; 0x1bb4 <vfprintf+0x214>
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	07 2e       	mov	r0, r23
    1baa:	00 0c       	add	r0, r0
    1bac:	88 0b       	sbc	r24, r24
    1bae:	99 0b       	sbc	r25, r25
    1bb0:	0e 5f       	subi	r16, 0xFE	; 254
    1bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb4:	f3 2d       	mov	r31, r3
    1bb6:	ff 76       	andi	r31, 0x6F	; 111
    1bb8:	3f 2e       	mov	r3, r31
    1bba:	97 ff       	sbrs	r25, 7
    1bbc:	09 c0       	rjmp	.+18     	; 0x1bd0 <vfprintf+0x230>
    1bbe:	90 95       	com	r25
    1bc0:	80 95       	com	r24
    1bc2:	70 95       	com	r23
    1bc4:	61 95       	neg	r22
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	f0 68       	ori	r31, 0x80	; 128
    1bce:	3f 2e       	mov	r3, r31
    1bd0:	2a e0       	ldi	r18, 0x0A	; 10
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	a3 01       	movw	r20, r6
    1bd6:	33 d1       	rcall	.+614    	; 0x1e3e <__ultoa_invert>
    1bd8:	88 2e       	mov	r8, r24
    1bda:	86 18       	sub	r8, r6
    1bdc:	44 c0       	rjmp	.+136    	; 0x1c66 <vfprintf+0x2c6>
    1bde:	85 37       	cpi	r24, 0x75	; 117
    1be0:	31 f4       	brne	.+12     	; 0x1bee <vfprintf+0x24e>
    1be2:	23 2d       	mov	r18, r3
    1be4:	2f 7e       	andi	r18, 0xEF	; 239
    1be6:	b2 2e       	mov	r11, r18
    1be8:	2a e0       	ldi	r18, 0x0A	; 10
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	25 c0       	rjmp	.+74     	; 0x1c38 <vfprintf+0x298>
    1bee:	93 2d       	mov	r25, r3
    1bf0:	99 7f       	andi	r25, 0xF9	; 249
    1bf2:	b9 2e       	mov	r11, r25
    1bf4:	8f 36       	cpi	r24, 0x6F	; 111
    1bf6:	c1 f0       	breq	.+48     	; 0x1c28 <vfprintf+0x288>
    1bf8:	18 f4       	brcc	.+6      	; 0x1c00 <vfprintf+0x260>
    1bfa:	88 35       	cpi	r24, 0x58	; 88
    1bfc:	79 f0       	breq	.+30     	; 0x1c1c <vfprintf+0x27c>
    1bfe:	ae c0       	rjmp	.+348    	; 0x1d5c <vfprintf+0x3bc>
    1c00:	80 37       	cpi	r24, 0x70	; 112
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <vfprintf+0x26a>
    1c04:	88 37       	cpi	r24, 0x78	; 120
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <vfprintf+0x270>
    1c08:	a9 c0       	rjmp	.+338    	; 0x1d5c <vfprintf+0x3bc>
    1c0a:	e9 2f       	mov	r30, r25
    1c0c:	e0 61       	ori	r30, 0x10	; 16
    1c0e:	be 2e       	mov	r11, r30
    1c10:	b4 fe       	sbrs	r11, 4
    1c12:	0d c0       	rjmp	.+26     	; 0x1c2e <vfprintf+0x28e>
    1c14:	fb 2d       	mov	r31, r11
    1c16:	f4 60       	ori	r31, 0x04	; 4
    1c18:	bf 2e       	mov	r11, r31
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <vfprintf+0x28e>
    1c1c:	34 fe       	sbrs	r3, 4
    1c1e:	0a c0       	rjmp	.+20     	; 0x1c34 <vfprintf+0x294>
    1c20:	29 2f       	mov	r18, r25
    1c22:	26 60       	ori	r18, 0x06	; 6
    1c24:	b2 2e       	mov	r11, r18
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <vfprintf+0x294>
    1c28:	28 e0       	ldi	r18, 0x08	; 8
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <vfprintf+0x298>
    1c2e:	20 e1       	ldi	r18, 0x10	; 16
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <vfprintf+0x298>
    1c34:	20 e1       	ldi	r18, 0x10	; 16
    1c36:	32 e0       	ldi	r19, 0x02	; 2
    1c38:	f8 01       	movw	r30, r16
    1c3a:	b7 fe       	sbrs	r11, 7
    1c3c:	07 c0       	rjmp	.+14     	; 0x1c4c <vfprintf+0x2ac>
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	0c 5f       	subi	r16, 0xFC	; 252
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <vfprintf+0x2b8>
    1c4c:	60 81       	ld	r22, Z
    1c4e:	71 81       	ldd	r23, Z+1	; 0x01
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 5f       	subi	r16, 0xFE	; 254
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	a3 01       	movw	r20, r6
    1c5a:	f1 d0       	rcall	.+482    	; 0x1e3e <__ultoa_invert>
    1c5c:	88 2e       	mov	r8, r24
    1c5e:	86 18       	sub	r8, r6
    1c60:	fb 2d       	mov	r31, r11
    1c62:	ff 77       	andi	r31, 0x7F	; 127
    1c64:	3f 2e       	mov	r3, r31
    1c66:	36 fe       	sbrs	r3, 6
    1c68:	0d c0       	rjmp	.+26     	; 0x1c84 <vfprintf+0x2e4>
    1c6a:	23 2d       	mov	r18, r3
    1c6c:	2e 7f       	andi	r18, 0xFE	; 254
    1c6e:	a2 2e       	mov	r10, r18
    1c70:	89 14       	cp	r8, r9
    1c72:	58 f4       	brcc	.+22     	; 0x1c8a <vfprintf+0x2ea>
    1c74:	34 fe       	sbrs	r3, 4
    1c76:	0b c0       	rjmp	.+22     	; 0x1c8e <vfprintf+0x2ee>
    1c78:	32 fc       	sbrc	r3, 2
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <vfprintf+0x2ee>
    1c7c:	83 2d       	mov	r24, r3
    1c7e:	8e 7e       	andi	r24, 0xEE	; 238
    1c80:	a8 2e       	mov	r10, r24
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <vfprintf+0x2ee>
    1c84:	b8 2c       	mov	r11, r8
    1c86:	a3 2c       	mov	r10, r3
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <vfprintf+0x2f0>
    1c8a:	b8 2c       	mov	r11, r8
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <vfprintf+0x2f0>
    1c8e:	b9 2c       	mov	r11, r9
    1c90:	a4 fe       	sbrs	r10, 4
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <vfprintf+0x312>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e8 0d       	add	r30, r8
    1c98:	f1 1d       	adc	r31, r1
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 33       	cpi	r24, 0x30	; 48
    1c9e:	21 f4       	brne	.+8      	; 0x1ca8 <vfprintf+0x308>
    1ca0:	9a 2d       	mov	r25, r10
    1ca2:	99 7e       	andi	r25, 0xE9	; 233
    1ca4:	a9 2e       	mov	r10, r25
    1ca6:	09 c0       	rjmp	.+18     	; 0x1cba <vfprintf+0x31a>
    1ca8:	a2 fe       	sbrs	r10, 2
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <vfprintf+0x318>
    1cac:	b3 94       	inc	r11
    1cae:	b3 94       	inc	r11
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <vfprintf+0x31a>
    1cb2:	8a 2d       	mov	r24, r10
    1cb4:	86 78       	andi	r24, 0x86	; 134
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <vfprintf+0x31a>
    1cb8:	b3 94       	inc	r11
    1cba:	a3 fc       	sbrc	r10, 3
    1cbc:	10 c0       	rjmp	.+32     	; 0x1cde <vfprintf+0x33e>
    1cbe:	a0 fe       	sbrs	r10, 0
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <vfprintf+0x32e>
    1cc2:	b2 14       	cp	r11, r2
    1cc4:	80 f4       	brcc	.+32     	; 0x1ce6 <vfprintf+0x346>
    1cc6:	28 0c       	add	r2, r8
    1cc8:	92 2c       	mov	r9, r2
    1cca:	9b 18       	sub	r9, r11
    1ccc:	0d c0       	rjmp	.+26     	; 0x1ce8 <vfprintf+0x348>
    1cce:	b2 14       	cp	r11, r2
    1cd0:	58 f4       	brcc	.+22     	; 0x1ce8 <vfprintf+0x348>
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	76 d0       	rcall	.+236    	; 0x1dc6 <fputc>
    1cda:	b3 94       	inc	r11
    1cdc:	f8 cf       	rjmp	.-16     	; 0x1cce <vfprintf+0x32e>
    1cde:	b2 14       	cp	r11, r2
    1ce0:	18 f4       	brcc	.+6      	; 0x1ce8 <vfprintf+0x348>
    1ce2:	2b 18       	sub	r2, r11
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x34a>
    1ce6:	98 2c       	mov	r9, r8
    1ce8:	21 2c       	mov	r2, r1
    1cea:	a4 fe       	sbrs	r10, 4
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <vfprintf+0x36c>
    1cee:	b6 01       	movw	r22, r12
    1cf0:	80 e3       	ldi	r24, 0x30	; 48
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	68 d0       	rcall	.+208    	; 0x1dc6 <fputc>
    1cf6:	a2 fe       	sbrs	r10, 2
    1cf8:	16 c0       	rjmp	.+44     	; 0x1d26 <vfprintf+0x386>
    1cfa:	a1 fc       	sbrc	r10, 1
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <vfprintf+0x364>
    1cfe:	88 e7       	ldi	r24, 0x78	; 120
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <vfprintf+0x368>
    1d04:	88 e5       	ldi	r24, 0x58	; 88
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	b6 01       	movw	r22, r12
    1d0a:	0c c0       	rjmp	.+24     	; 0x1d24 <vfprintf+0x384>
    1d0c:	8a 2d       	mov	r24, r10
    1d0e:	86 78       	andi	r24, 0x86	; 134
    1d10:	51 f0       	breq	.+20     	; 0x1d26 <vfprintf+0x386>
    1d12:	a1 fe       	sbrs	r10, 1
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <vfprintf+0x37a>
    1d16:	8b e2       	ldi	r24, 0x2B	; 43
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <vfprintf+0x37c>
    1d1a:	80 e2       	ldi	r24, 0x20	; 32
    1d1c:	a7 fc       	sbrc	r10, 7
    1d1e:	8d e2       	ldi	r24, 0x2D	; 45
    1d20:	b6 01       	movw	r22, r12
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	50 d0       	rcall	.+160    	; 0x1dc6 <fputc>
    1d26:	89 14       	cp	r8, r9
    1d28:	30 f4       	brcc	.+12     	; 0x1d36 <vfprintf+0x396>
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	80 e3       	ldi	r24, 0x30	; 48
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	4a d0       	rcall	.+148    	; 0x1dc6 <fputc>
    1d32:	9a 94       	dec	r9
    1d34:	f8 cf       	rjmp	.-16     	; 0x1d26 <vfprintf+0x386>
    1d36:	8a 94       	dec	r8
    1d38:	f3 01       	movw	r30, r6
    1d3a:	e8 0d       	add	r30, r8
    1d3c:	f1 1d       	adc	r31, r1
    1d3e:	80 81       	ld	r24, Z
    1d40:	b6 01       	movw	r22, r12
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	40 d0       	rcall	.+128    	; 0x1dc6 <fputc>
    1d46:	81 10       	cpse	r8, r1
    1d48:	f6 cf       	rjmp	.-20     	; 0x1d36 <vfprintf+0x396>
    1d4a:	22 20       	and	r2, r2
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <vfprintf+0x3b0>
    1d4e:	4e ce       	rjmp	.-868    	; 0x19ec <vfprintf+0x4c>
    1d50:	b6 01       	movw	r22, r12
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	37 d0       	rcall	.+110    	; 0x1dc6 <fputc>
    1d58:	2a 94       	dec	r2
    1d5a:	f7 cf       	rjmp	.-18     	; 0x1d4a <vfprintf+0x3aa>
    1d5c:	f6 01       	movw	r30, r12
    1d5e:	86 81       	ldd	r24, Z+6	; 0x06
    1d60:	97 81       	ldd	r25, Z+7	; 0x07
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <vfprintf+0x3c8>
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	2b 96       	adiw	r28, 0x0b	; 11
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	7f 90       	pop	r7
    1d8e:	6f 90       	pop	r6
    1d90:	5f 90       	pop	r5
    1d92:	4f 90       	pop	r4
    1d94:	3f 90       	pop	r3
    1d96:	2f 90       	pop	r2
    1d98:	08 95       	ret

00001d9a <strnlen_P>:
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	05 90       	lpm	r0, Z+
    1d9e:	61 50       	subi	r22, 0x01	; 1
    1da0:	70 40       	sbci	r23, 0x00	; 0
    1da2:	01 10       	cpse	r0, r1
    1da4:	d8 f7       	brcc	.-10     	; 0x1d9c <strnlen_P+0x2>
    1da6:	80 95       	com	r24
    1da8:	90 95       	com	r25
    1daa:	8e 0f       	add	r24, r30
    1dac:	9f 1f       	adc	r25, r31
    1dae:	08 95       	ret

00001db0 <strnlen>:
    1db0:	fc 01       	movw	r30, r24
    1db2:	61 50       	subi	r22, 0x01	; 1
    1db4:	70 40       	sbci	r23, 0x00	; 0
    1db6:	01 90       	ld	r0, Z+
    1db8:	01 10       	cpse	r0, r1
    1dba:	d8 f7       	brcc	.-10     	; 0x1db2 <strnlen+0x2>
    1dbc:	80 95       	com	r24
    1dbe:	90 95       	com	r25
    1dc0:	8e 0f       	add	r24, r30
    1dc2:	9f 1f       	adc	r25, r31
    1dc4:	08 95       	ret

00001dc6 <fputc>:
    1dc6:	0f 93       	push	r16
    1dc8:	1f 93       	push	r17
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	fb 01       	movw	r30, r22
    1dd0:	23 81       	ldd	r18, Z+3	; 0x03
    1dd2:	21 fd       	sbrc	r18, 1
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <fputc+0x16>
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	9f ef       	ldi	r25, 0xFF	; 255
    1dda:	2c c0       	rjmp	.+88     	; 0x1e34 <fputc+0x6e>
    1ddc:	22 ff       	sbrs	r18, 2
    1dde:	16 c0       	rjmp	.+44     	; 0x1e0c <fputc+0x46>
    1de0:	46 81       	ldd	r20, Z+6	; 0x06
    1de2:	57 81       	ldd	r21, Z+7	; 0x07
    1de4:	24 81       	ldd	r18, Z+4	; 0x04
    1de6:	35 81       	ldd	r19, Z+5	; 0x05
    1de8:	42 17       	cp	r20, r18
    1dea:	53 07       	cpc	r21, r19
    1dec:	44 f4       	brge	.+16     	; 0x1dfe <fputc+0x38>
    1dee:	a0 81       	ld	r26, Z
    1df0:	b1 81       	ldd	r27, Z+1	; 0x01
    1df2:	9d 01       	movw	r18, r26
    1df4:	2f 5f       	subi	r18, 0xFF	; 255
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	31 83       	std	Z+1, r19	; 0x01
    1dfa:	20 83       	st	Z, r18
    1dfc:	8c 93       	st	X, r24
    1dfe:	26 81       	ldd	r18, Z+6	; 0x06
    1e00:	37 81       	ldd	r19, Z+7	; 0x07
    1e02:	2f 5f       	subi	r18, 0xFF	; 255
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	37 83       	std	Z+7, r19	; 0x07
    1e08:	26 83       	std	Z+6, r18	; 0x06
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <fputc+0x6e>
    1e0c:	8b 01       	movw	r16, r22
    1e0e:	ec 01       	movw	r28, r24
    1e10:	fb 01       	movw	r30, r22
    1e12:	00 84       	ldd	r0, Z+8	; 0x08
    1e14:	f1 85       	ldd	r31, Z+9	; 0x09
    1e16:	e0 2d       	mov	r30, r0
    1e18:	09 95       	icall
    1e1a:	89 2b       	or	r24, r25
    1e1c:	e1 f6       	brne	.-72     	; 0x1dd6 <fputc+0x10>
    1e1e:	d8 01       	movw	r26, r16
    1e20:	16 96       	adiw	r26, 0x06	; 6
    1e22:	8d 91       	ld	r24, X+
    1e24:	9c 91       	ld	r25, X
    1e26:	17 97       	sbiw	r26, 0x07	; 7
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	17 96       	adiw	r26, 0x07	; 7
    1e2c:	9c 93       	st	X, r25
    1e2e:	8e 93       	st	-X, r24
    1e30:	16 97       	sbiw	r26, 0x06	; 6
    1e32:	ce 01       	movw	r24, r28
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <__ultoa_invert>:
    1e3e:	fa 01       	movw	r30, r20
    1e40:	aa 27       	eor	r26, r26
    1e42:	28 30       	cpi	r18, 0x08	; 8
    1e44:	51 f1       	breq	.+84     	; 0x1e9a <__ultoa_invert+0x5c>
    1e46:	20 31       	cpi	r18, 0x10	; 16
    1e48:	81 f1       	breq	.+96     	; 0x1eaa <__ultoa_invert+0x6c>
    1e4a:	e8 94       	clt
    1e4c:	6f 93       	push	r22
    1e4e:	6e 7f       	andi	r22, 0xFE	; 254
    1e50:	6e 5f       	subi	r22, 0xFE	; 254
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	8f 4f       	sbci	r24, 0xFF	; 255
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	af 4f       	sbci	r26, 0xFF	; 255
    1e5a:	b1 e0       	ldi	r27, 0x01	; 1
    1e5c:	3e d0       	rcall	.+124    	; 0x1eda <__ultoa_invert+0x9c>
    1e5e:	b4 e0       	ldi	r27, 0x04	; 4
    1e60:	3c d0       	rcall	.+120    	; 0x1eda <__ultoa_invert+0x9c>
    1e62:	67 0f       	add	r22, r23
    1e64:	78 1f       	adc	r23, r24
    1e66:	89 1f       	adc	r24, r25
    1e68:	9a 1f       	adc	r25, r26
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	68 0f       	add	r22, r24
    1e6e:	79 1f       	adc	r23, r25
    1e70:	8a 1f       	adc	r24, r26
    1e72:	91 1d       	adc	r25, r1
    1e74:	a1 1d       	adc	r26, r1
    1e76:	6a 0f       	add	r22, r26
    1e78:	71 1d       	adc	r23, r1
    1e7a:	81 1d       	adc	r24, r1
    1e7c:	91 1d       	adc	r25, r1
    1e7e:	a1 1d       	adc	r26, r1
    1e80:	20 d0       	rcall	.+64     	; 0x1ec2 <__ultoa_invert+0x84>
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__ultoa_invert+0x48>
    1e84:	68 94       	set
    1e86:	3f 91       	pop	r19
    1e88:	2a e0       	ldi	r18, 0x0A	; 10
    1e8a:	26 9f       	mul	r18, r22
    1e8c:	11 24       	eor	r1, r1
    1e8e:	30 19       	sub	r19, r0
    1e90:	30 5d       	subi	r19, 0xD0	; 208
    1e92:	31 93       	st	Z+, r19
    1e94:	de f6       	brtc	.-74     	; 0x1e4c <__ultoa_invert+0xe>
    1e96:	cf 01       	movw	r24, r30
    1e98:	08 95       	ret
    1e9a:	46 2f       	mov	r20, r22
    1e9c:	47 70       	andi	r20, 0x07	; 7
    1e9e:	40 5d       	subi	r20, 0xD0	; 208
    1ea0:	41 93       	st	Z+, r20
    1ea2:	b3 e0       	ldi	r27, 0x03	; 3
    1ea4:	0f d0       	rcall	.+30     	; 0x1ec4 <__ultoa_invert+0x86>
    1ea6:	c9 f7       	brne	.-14     	; 0x1e9a <__ultoa_invert+0x5c>
    1ea8:	f6 cf       	rjmp	.-20     	; 0x1e96 <__ultoa_invert+0x58>
    1eaa:	46 2f       	mov	r20, r22
    1eac:	4f 70       	andi	r20, 0x0F	; 15
    1eae:	40 5d       	subi	r20, 0xD0	; 208
    1eb0:	4a 33       	cpi	r20, 0x3A	; 58
    1eb2:	18 f0       	brcs	.+6      	; 0x1eba <__ultoa_invert+0x7c>
    1eb4:	49 5d       	subi	r20, 0xD9	; 217
    1eb6:	31 fd       	sbrc	r19, 1
    1eb8:	40 52       	subi	r20, 0x20	; 32
    1eba:	41 93       	st	Z+, r20
    1ebc:	02 d0       	rcall	.+4      	; 0x1ec2 <__ultoa_invert+0x84>
    1ebe:	a9 f7       	brne	.-22     	; 0x1eaa <__ultoa_invert+0x6c>
    1ec0:	ea cf       	rjmp	.-44     	; 0x1e96 <__ultoa_invert+0x58>
    1ec2:	b4 e0       	ldi	r27, 0x04	; 4
    1ec4:	a6 95       	lsr	r26
    1ec6:	97 95       	ror	r25
    1ec8:	87 95       	ror	r24
    1eca:	77 95       	ror	r23
    1ecc:	67 95       	ror	r22
    1ece:	ba 95       	dec	r27
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__ultoa_invert+0x86>
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	61 05       	cpc	r22, r1
    1ed6:	71 05       	cpc	r23, r1
    1ed8:	08 95       	ret
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	0a 2e       	mov	r0, r26
    1ee0:	06 94       	lsr	r0
    1ee2:	57 95       	ror	r21
    1ee4:	47 95       	ror	r20
    1ee6:	37 95       	ror	r19
    1ee8:	27 95       	ror	r18
    1eea:	ba 95       	dec	r27
    1eec:	c9 f7       	brne	.-14     	; 0x1ee0 <__ultoa_invert+0xa2>
    1eee:	62 0f       	add	r22, r18
    1ef0:	73 1f       	adc	r23, r19
    1ef2:	84 1f       	adc	r24, r20
    1ef4:	95 1f       	adc	r25, r21
    1ef6:	a0 1d       	adc	r26, r0
    1ef8:	08 95       	ret

00001efa <_exit>:
    1efa:	f8 94       	cli

00001efc <__stop_program>:
    1efc:	ff cf       	rjmp	.-2      	; 0x1efc <__stop_program>
