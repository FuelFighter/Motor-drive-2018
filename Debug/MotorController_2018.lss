
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000022c8  0000235c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000248  00800134  00800134  00002390  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005671  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019b8  00000000  00000000  00007f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027df  00000000  00000000  000098ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e94  00000000  00000000  0000c0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015cd  00000000  00000000  0000cf60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d20  00000000  00000000  0000e52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0001224d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d4 c7       	rjmp	.+4008   	; 0xfc2 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c7       	rjmp	.+3804   	; 0xf0e <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ce c6       	rjmp	.+3484   	; 0xdde <__vector_16>
      42:	00 00       	nop
      44:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__vector_17>
      48:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c5       	rjmp	.+3058   	; 0xc48 <__vector_21>
      56:	00 00       	nop
      58:	d9 c5       	rjmp	.+2994   	; 0xc0c <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1c c6       	rjmp	.+3128   	; 0xcba <__vector_32>
      82:	00 00       	nop
      84:	fc c5       	rjmp	.+3064   	; 0xc7e <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	9b 09       	sbc	r25, r11
      96:	a0 09       	sbc	r26, r0
      98:	a6 09       	sbc	r26, r6
      9a:	ac 09       	sbc	r26, r12
      9c:	b2 09       	sbc	r27, r2
      9e:	b7 09       	sbc	r27, r7
      a0:	bd 09       	sbc	r27, r13
      a2:	c3 09       	sbc	r28, r3

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 ec       	ldi	r30, 0xC8	; 200
      b8:	f2 e2       	ldi	r31, 0x22	; 34
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 33       	cpi	r26, 0x34	; 52
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	a4 e3       	ldi	r26, 0x34	; 52
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ac 37       	cpi	r26, 0x7C	; 124
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	31 d6       	rcall	.+3170   	; 0xd3e <main>
      dc:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <f32_Integrator>
      e6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <f32_Integrator+0x1>
      ea:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <f32_Integrator+0x2>
      ee:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty, ControlType_t ctrlType){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (ctrlType == CURRENT)
     11c:	e1 10       	cpse	r14, r1
     11e:	7f c0       	rjmp	.+254    	; 0x21e <controller+0x12a>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     120:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     124:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     128:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     12c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	4e eb       	ldi	r20, 0xBE	; 190
     136:	52 e4       	ldi	r21, 0x42	; 66
     138:	c7 01       	movw	r24, r14
     13a:	b6 01       	movw	r22, r12
     13c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__gesf2>
     140:	88 23       	and	r24, r24
     142:	54 f4       	brge	.+20     	; 0x158 <controller+0x64>
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	48 e4       	ldi	r20, 0x48	; 72
     14a:	52 e4       	ldi	r21, 0x42	; 66
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__cmpsf2>
     154:	18 16       	cp	r1, r24
     156:	24 f0       	brlt	.+8      	; 0x160 <controller+0x6c>
		{
			b_saturation = true ;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
     15e:	02 c0       	rjmp	.+4      	; 0x164 <controller+0x70>
			} else {
			b_saturation = false;
     160:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
		}
		
		f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     164:	a3 01       	movw	r20, r6
     166:	92 01       	movw	r18, r4
     168:	c5 01       	movw	r24, r10
     16a:	b4 01       	movw	r22, r8
     16c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__subsf3>
     170:	6b 01       	movw	r12, r22
     172:	7c 01       	movw	r14, r24
     174:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <f32_CurrentDelta>
     178:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <f32_CurrentDelta+0x1>
     17c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <f32_CurrentDelta+0x2>
     180:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <f32_CurrentDelta+0x3>
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     184:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     188:	81 11       	cpse	r24, r1
     18a:	1c c0       	rjmp	.+56     	; 0x1c4 <controller+0xd0>
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     18c:	2a e0       	ldi	r18, 0x0A	; 10
     18e:	37 ed       	ldi	r19, 0xD7	; 215
     190:	43 e2       	ldi	r20, 0x23	; 35
     192:	5c e3       	ldi	r21, 0x3C	; 60
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     19c:	9b 01       	movw	r18, r22
     19e:	ac 01       	movw	r20, r24
     1a0:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <f32_Integrator>
     1a4:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <f32_Integrator+0x1>
     1a8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <f32_Integrator+0x2>
     1ac:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <f32_Integrator+0x3>
     1b0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
     1b4:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <f32_Integrator>
     1b8:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <f32_Integrator+0x1>
     1bc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <f32_Integrator+0x2>
     1c0:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c4:	23 e3       	ldi	r18, 0x33	; 51
     1c6:	33 e3       	ldi	r19, 0x33	; 51
     1c8:	43 e7       	ldi	r20, 0x73	; 115
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <f32_Integrator>
     1d0:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <f32_Integrator+0x1>
     1d4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <f32_Integrator+0x2>
     1d8:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <f32_Integrator+0x3>
     1dc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     1e0:	4b 01       	movw	r8, r22
     1e2:	5c 01       	movw	r10, r24
     1e4:	29 ef       	ldi	r18, 0xF9	; 249
     1e6:	3f e0       	ldi	r19, 0x0F	; 15
     1e8:	49 e7       	ldi	r20, 0x79	; 121
     1ea:	5f e3       	ldi	r21, 0x3F	; 63
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     1f4:	9b 01       	movw	r18, r22
     1f6:	ac 01       	movw	r20, r24
     1f8:	c5 01       	movw	r24, r10
     1fa:	b4 01       	movw	r22, r8
     1fc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	48 e4       	ldi	r20, 0x48	; 72
     206:	52 e4       	ldi	r21, 0x42	; 66
     208:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     21c:	12 c0       	rjmp	.+36     	; 0x242 <controller+0x14e>
	
	}else if (ctrlType == PWM)
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	e8 12       	cpse	r14, r24
     222:	0f c0       	rjmp	.+30     	; 0x242 <controller+0x14e>
	{
		f32_DutyCycleCmd = (float)*u8_duty;
     224:	f8 01       	movw	r30, r16
     226:	60 81       	ld	r22, Z
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     232:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     236:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     242:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     246:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     24a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     24e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4e eb       	ldi	r20, 0xBE	; 190
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__gesf2>
     262:	18 16       	cp	r1, r24
     264:	6c f4       	brge	.+26     	; 0x280 <controller+0x18c>
	{
		f32_DutyCycleCmd = 95;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	ae eb       	ldi	r26, 0xBE	; 190
     26c:	b2 e4       	ldi	r27, 0x42	; 66
     26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     272:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     276:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     27a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     27e:	16 c0       	rjmp	.+44     	; 0x2ac <controller+0x1b8>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	48 e4       	ldi	r20, 0x48	; 72
     286:	52 e4       	ldi	r21, 0x42	; 66
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__cmpsf2>
     290:	88 23       	and	r24, r24
     292:	64 f4       	brge	.+24     	; 0x2ac <controller+0x1b8>
	{
		f32_DutyCycleCmd = 50;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a8 e4       	ldi	r26, 0x48	; 72
     29a:	b2 e4       	ldi	r27, 0x42	; 66
     29c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     2ac:	c6 e9       	ldi	r28, 0x96	; 150
     2ae:	d0 e0       	ldi	r29, 0x00	; 0
     2b0:	e8 80       	ld	r14, Y
     2b2:	f9 80       	ldd	r15, Y+1	; 0x01
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	48 ec       	ldi	r20, 0xC8	; 200
     2ba:	52 e4       	ldi	r21, 0x42	; 66
     2bc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2c0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2cc:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     2d0:	4b 01       	movw	r8, r22
     2d2:	5c 01       	movw	r10, r24
     2d4:	b7 01       	movw	r22, r14
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c5 01       	movw	r24, r10
     2e4:	b4 01       	movw	r22, r8
     2e6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     2ea:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
     2ee:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     2f2:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     2f6:	68 81       	ld	r22, Y
     2f8:	79 81       	ldd	r23, Y+1	; 0x01
     2fa:	09 90       	ld	r0, Y+
     2fc:	d8 81       	ld	r29, Y
     2fe:	c0 2d       	mov	r28, r0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	48 ec       	ldi	r20, 0xC8	; 200
     312:	52 e4       	ldi	r21, 0x42	; 66
     314:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     318:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     31c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     320:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     324:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     328:	4b 01       	movw	r8, r22
     32a:	5c 01       	movw	r10, r24
     32c:	be 01       	movw	r22, r28
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     342:	9b 01       	movw	r18, r22
     344:	ac 01       	movw	r20, r24
     346:	c7 01       	movw	r24, r14
     348:	b6 01       	movw	r22, r12
     34a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__subsf3>
     34e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
     352:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     356:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     35a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     35e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     362:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     366:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     36a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fixunssfsi>
     36e:	f8 01       	movw	r30, r16
     370:	60 83       	st	Z, r22
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	8f 90       	pop	r8
     38a:	7f 90       	pop	r7
     38c:	6f 90       	pop	r6
     38e:	5f 90       	pop	r5
     390:	4f 90       	pop	r4
     392:	08 95       	ret

00000394 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     394:	24 9a       	sbi	0x04, 4	; 4
     396:	08 95       	ret

00000398 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state)
     398:	88 23       	and	r24, r24
     39a:	11 f0       	breq	.+4      	; 0x3a0 <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     39c:	2c 9a       	sbi	0x05, 4	; 5
     39e:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     3a0:	2c 98       	cbi	0x05, 4	; 5
     3a2:	08 95       	ret

000003a4 <manage_motor>:
	}
}

void manage_motor(ModuleValues_t * vals)
{
     3a4:	8f 92       	push	r8
     3a6:	9f 92       	push	r9
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	ef 92       	push	r14
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
	switch(vals->motor_status)
     3b8:	8e 89       	ldd	r24, Y+22	; 0x16
     3ba:	82 30       	cpi	r24, 0x02	; 2
     3bc:	69 f0       	breq	.+26     	; 0x3d8 <manage_motor+0x34>
     3be:	30 f4       	brcc	.+12     	; 0x3cc <manage_motor+0x28>
     3c0:	88 23       	and	r24, r24
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <manage_motor+0x22>
     3c4:	4c c0       	rjmp	.+152    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	11 f1       	breq	.+68     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3ca:	58 c0       	rjmp	.+176    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	a9 f1       	breq	.+106    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3d0:	84 30       	cpi	r24, 0x04	; 4
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <manage_motor+0x32>
     3d4:	4c c0       	rjmp	.+152    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3d6:	52 c0       	rjmp	.+164    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		case BRAKE :
			drivers(1); //drivers turn on
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	de df       	rcall	.-68     	; 0x398 <drivers>
			vals->b_driver_status = 1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	8a 8f       	std	Y+26, r24	; 0x1a
			controller(-vals->u8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle,vals->ctrl_type); //negative throttle cmd
     3e0:	8e 01       	movw	r16, r28
     3e2:	0d 5e       	subi	r16, 0xED	; 237
     3e4:	1f 4f       	sbci	r17, 0xFF	; 255
     3e6:	88 80       	ld	r8, Y
     3e8:	99 80       	ldd	r9, Y+1	; 0x01
     3ea:	aa 80       	ldd	r10, Y+2	; 0x02
     3ec:	bb 80       	ldd	r11, Y+3	; 0x03
     3ee:	6a 89       	ldd	r22, Y+18	; 0x12
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	71 95       	neg	r23
     3f4:	61 95       	neg	r22
     3f6:	71 09       	sbc	r23, r1
     3f8:	07 2e       	mov	r0, r23
     3fa:	00 0c       	add	r0, r0
     3fc:	88 0b       	sbc	r24, r24
     3fe:	99 0b       	sbc	r25, r25
     400:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__floatsisf>
     404:	eb 8c       	ldd	r14, Y+27	; 0x1b
     406:	a5 01       	movw	r20, r10
     408:	94 01       	movw	r18, r8
		break;
		
		case ACCEL :
			drivers(1); //drivers turn on
     40a:	74 de       	rcall	.-792    	; 0xf4 <controller>
     40c:	37 c0       	rjmp	.+110    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     40e:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     410:	c3 df       	rcall	.-122    	; 0x398 <drivers>
     412:	81 e0       	ldi	r24, 0x01	; 1
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type);
     414:	8a 8f       	std	Y+26, r24	; 0x1a
     416:	8e 01       	movw	r16, r28
     418:	0d 5e       	subi	r16, 0xED	; 237
     41a:	1f 4f       	sbci	r17, 0xFF	; 255
     41c:	88 80       	ld	r8, Y
     41e:	99 80       	ldd	r9, Y+1	; 0x01
     420:	aa 80       	ldd	r10, Y+2	; 0x02
     422:	bb 80       	ldd	r11, Y+3	; 0x03
     424:	6a 89       	ldd	r22, Y+18	; 0x12
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     430:	eb 8c       	ldd	r14, Y+27	; 0x1b
     432:	a5 01       	movw	r20, r10
		break;
     434:	94 01       	movw	r18, r8
		
		case IDLE :
			drivers(1); //drivers turn on
     436:	5e de       	rcall	.-836    	; 0xf4 <controller>
     438:	21 c0       	rjmp	.+66     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     43a:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     43c:	ad df       	rcall	.-166    	; 0x398 <drivers>
     43e:	81 e0       	ldi	r24, 0x01	; 1
			vals->u8_throttle_cmd = 0;
     440:	8a 8f       	std	Y+26, r24	; 0x1a
			controller(0, vals->f32_motor_current, &vals->u8_duty_cycle,vals->ctrl_type); //current law running with 0 torque 
     442:	1a 8a       	std	Y+18, r1	; 0x12
     444:	8e 01       	movw	r16, r28
     446:	0d 5e       	subi	r16, 0xED	; 237
     448:	1f 4f       	sbci	r17, 0xFF	; 255
     44a:	28 81       	ld	r18, Y
     44c:	39 81       	ldd	r19, Y+1	; 0x01
     44e:	4a 81       	ldd	r20, Y+2	; 0x02
     450:	5b 81       	ldd	r21, Y+3	; 0x03
     452:	eb 8c       	ldd	r14, Y+27	; 0x1b
     454:	60 e0       	ldi	r22, 0x00	; 0
			//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
		break;
     456:	70 e0       	ldi	r23, 0x00	; 0
		
		case OFF : // drivers disabled
			drivers(0);//drivers shutdown
     458:	cb 01       	movw	r24, r22
     45a:	4c de       	rcall	.-872    	; 0xf4 <controller>
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     45c:	0f c0       	rjmp	.+30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			vals->u8_throttle_cmd = 0;
     45e:	80 e0       	ldi	r24, 0x00	; 0
			vals->u8_duty_cycle = 50;
     460:	9b df       	rcall	.-202    	; 0x398 <drivers>
     462:	1a 8e       	std	Y+26, r1	; 0x1a
		break;
     464:	3e de       	rcall	.-900    	; 0xe2 <reset_I>
		
		case ERR :
			drivers(0);//drivers shutdown
     466:	1a 8a       	std	Y+18, r1	; 0x12
     468:	82 e3       	ldi	r24, 0x32	; 50
     46a:	8b 8b       	std	Y+19, r24	; 0x13
			vals->b_driver_status = 0;
     46c:	07 c0       	rjmp	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			reset_I(); //reset integrator
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	93 df       	rcall	.-218    	; 0x398 <drivers>
			vals->u8_throttle_cmd = 0;
     472:	1a 8e       	std	Y+26, r1	; 0x1a
			vals->u8_duty_cycle = 50 ;
     474:	36 de       	rcall	.-916    	; 0xe2 <reset_I>
     476:	1a 8a       	std	Y+18, r1	; 0x12
		break;
	}
     478:	82 e3       	ldi	r24, 0x32	; 50
     47a:	8b 8b       	std	Y+19, r24	; 0x13
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ef 90       	pop	r14
     486:	bf 90       	pop	r11
     488:	af 90       	pop	r10
     48a:	9f 90       	pop	r9
     48c:	8f 90       	pop	r8
     48e:	08 95       	ret

00000490 <SPI_handler_0>:
static uint8_t u8_rxBuffer[3];

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     496:	60 e4       	ldi	r22, 0x40	; 64
     498:	71 e0       	ldi	r23, 0x01	; 1
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	44 d7       	rcall	.+3720   	; 0x1326 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	43 e0       	ldi	r20, 0x03	; 3
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	6d e3       	ldi	r22, 0x3D	; 61
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	80 e4       	ldi	r24, 0x40	; 64
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4b0:	ed e3       	ldi	r30, 0x3D	; 61
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	61 81       	ldd	r22, Z+1	; 0x01
     4b6:	6f 71       	andi	r22, 0x1F	; 31
     4b8:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg);
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	76 2f       	mov	r23, r22
     4be:	66 27       	eor	r22, r22
     4c0:	82 81       	ldd	r24, Z+2	; 0x02
     4c2:	68 2b       	or	r22, r24
     4c4:	ce 01       	movw	r24, r28
     4c6:	94 d5       	rcall	.+2856   	; 0xff0 <handle_current_sensor>
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     4d4:	60 e4       	ldi	r22, 0x40	; 64
     4d6:	71 e0       	ldi	r23, 0x01	; 1
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	25 d7       	rcall	.+3658   	; 0x1326 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	43 e0       	ldi	r20, 0x03	; 3
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	6d e3       	ldi	r22, 0x3D	; 61
     4e4:	71 e0       	ldi	r23, 0x01	; 1
     4e6:	80 e4       	ldi	r24, 0x40	; 64
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4ee:	ed e3       	ldi	r30, 0x3D	; 61
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	61 81       	ldd	r22, Z+1	; 0x01
     4f4:	6f 71       	andi	r22, 0x1F	; 31
     4f6:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg);
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	76 2f       	mov	r23, r22
     4fc:	66 27       	eor	r22, r22
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	68 2b       	or	r22, r24
     502:	ce 01       	movw	r24, r28
     504:	75 d5       	rcall	.+2794   	; 0xff0 <handle_current_sensor>
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     512:	60 e4       	ldi	r22, 0x40	; 64
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	06 d7       	rcall	.+3596   	; 0x1326 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     51a:	21 e0       	ldi	r18, 0x01	; 1
     51c:	43 e0       	ldi	r20, 0x03	; 3
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	6d e3       	ldi	r22, 0x3D	; 61
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	80 e4       	ldi	r24, 0x40	; 64
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     52c:	ed e3       	ldi	r30, 0x3D	; 61
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	61 81       	ldd	r22, Z+1	; 0x01
     532:	6f 71       	andi	r22, 0x1F	; 31
     534:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	76 2f       	mov	r23, r22
     53a:	66 27       	eor	r22, r22
     53c:	82 81       	ldd	r24, Z+2	; 0x02
     53e:	68 2b       	or	r22, r24
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     548:	23 e3       	ldi	r18, 0x33	; 51
     54a:	33 e3       	ldi	r19, 0x33	; 51
     54c:	44 e8       	ldi	r20, 0x84	; 132
     54e:	52 e4       	ldi	r21, 0x42	; 66
     550:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     554:	24 ea       	ldi	r18, 0xA4	; 164
     556:	30 e7       	ldi	r19, 0x70	; 112
     558:	4d eb       	ldi	r20, 0xBD	; 189
     55a:	5e e3       	ldi	r21, 0x3E	; 62
     55c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__subsf3>
     560:	68 83       	st	Y, r22
     562:	79 83       	std	Y+1, r23	; 0x01
     564:	8a 83       	std	Y+2, r24	; 0x02
     566:	9b 83       	std	Y+3, r25	; 0x03
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     574:	60 e4       	ldi	r22, 0x40	; 64
     576:	71 e0       	ldi	r23, 0x01	; 1
     578:	84 e0       	ldi	r24, 0x04	; 4
     57a:	d5 d6       	rcall	.+3498   	; 0x1326 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	43 e0       	ldi	r20, 0x03	; 3
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	6d e3       	ldi	r22, 0x3D	; 61
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	80 e4       	ldi	r24, 0x40	; 64
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     58e:	ed e3       	ldi	r30, 0x3D	; 61
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	61 81       	ldd	r22, Z+1	; 0x01
     594:	6f 71       	andi	r22, 0x1F	; 31
     596:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	76 2f       	mov	r23, r22
     59c:	66 27       	eor	r22, r22
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	68 2b       	or	r22, r24
     5a2:	ce 01       	movw	r24, r28
     5a4:	95 d5       	rcall	.+2858   	; 0x10d0 <handle_temp_sensor>
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <handle_can>:

///////////////////////  CAN  /////////////////////////


//receiving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	8c 01       	movw	r16, r24
     5b6:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx) && vals->motor_status != ERR){
     5b8:	cb 01       	movw	r24, r22
     5ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <can_read_message_if_new>
     5be:	88 23       	and	r24, r24
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <handle_can+0x18>
     5c2:	47 c0       	rjmp	.+142    	; 0x652 <handle_can+0xa6>
     5c4:	f8 01       	movw	r30, r16
     5c6:	86 89       	ldd	r24, Z+22	; 0x16
     5c8:	84 30       	cpi	r24, 0x04	; 4
     5ca:	09 f4       	brne	.+2      	; 0x5ce <handle_can+0x22>
     5cc:	42 c0       	rjmp	.+132    	; 0x652 <handle_can+0xa6>
		switch (rx->id){
     5ce:	88 81       	ld	r24, Y
     5d0:	99 81       	ldd	r25, Y+1	; 0x01
     5d2:	80 33       	cpi	r24, 0x30	; 48
     5d4:	92 40       	sbci	r25, 0x02	; 2
     5d6:	e9 f5       	brne	.+122    	; 0x652 <handle_can+0xa6>
			case STEERING_WHEEL_CAN_ID	: //receiving can messages from the steering wheel
				
				vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ; // resetting to max value each time a message is received.
     5d8:	84 e1       	ldi	r24, 0x14	; 20
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	f8 01       	movw	r30, r16
     5de:	95 8b       	std	Z+21, r25	; 0x15
     5e0:	84 8b       	std	Z+20, r24	; 0x14

				if (rx->data.u8[3] > 10)
     5e2:	8e 81       	ldd	r24, Y+6	; 0x06
     5e4:	8b 30       	cpi	r24, 0x0B	; 11
     5e6:	e0 f0       	brcs	.+56     	; 0x620 <handle_can+0x74>
				{
					vals->motor_status = ACCEL ;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	86 8b       	std	Z+22, r24	; 0x16
					if (vals->ctrl_type == PWM)
     5ec:	83 8d       	ldd	r24, Z+27	; 0x1b
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	21 f4       	brne	.+8      	; 0x5fa <handle_can+0x4e>
					{
						vals->u8_duty_cycle = rx->data.u8[3]+40 ;
     5f2:	8e 81       	ldd	r24, Y+6	; 0x06
     5f4:	88 5d       	subi	r24, 0xD8	; 216
     5f6:	83 8b       	std	Z+19, r24	; 0x13
     5f8:	2c c0       	rjmp	.+88     	; 0x652 <handle_can+0xa6>
					}else if (vals->ctrl_type == CURRENT)
     5fa:	81 11       	cpse	r24, r1
     5fc:	2a c0       	rjmp	.+84     	; 0x652 <handle_can+0xa6>
					{
						vals->u8_throttle_cmd = rx->data.u8[3]/10.0 ;
     5fe:	6e 81       	ldd	r22, Y+6	; 0x06
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__floatsisf>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	40 e2       	ldi	r20, 0x20	; 32
     610:	51 e4       	ldi	r21, 0x41	; 65
     612:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     616:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fixunssfsi>
     61a:	f8 01       	movw	r30, r16
     61c:	62 8b       	std	Z+18, r22	; 0x12
     61e:	19 c0       	rjmp	.+50     	; 0x652 <handle_can+0xa6>
					}
					
				} else {
					vals->motor_status = IDLE ;
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	f8 01       	movw	r30, r16
     624:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = 0;
     626:	12 8a       	std	Z+18, r1	; 0x12
				}
				
				if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
     628:	8d 81       	ldd	r24, Y+5	; 0x05
     62a:	8a 31       	cpi	r24, 0x1A	; 26
     62c:	90 f0       	brcs	.+36     	; 0x652 <handle_can+0xa6>
				{
					vals->motor_status = BRAKE ;
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     632:	6d 81       	ldd	r22, Y+5	; 0x05
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__floatsisf>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e2       	ldi	r20, 0x20	; 32
     644:	51 e4       	ldi	r21, 0x41	; 65
     646:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     64a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fixunssfsi>
     64e:	f8 01       	movw	r30, r16
     650:	62 8b       	std	Z+18, r22	; 0x12
				}
			break;
		}
	}
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	08 95       	ret

0000065c <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
	
	txFrame.id = MOTOR_CAN_ID;
     668:	e3 ee       	ldi	r30, 0xE3	; 227
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	20 e5       	ldi	r18, 0x50	; 80
     66e:	34 e0       	ldi	r19, 0x04	; 4
     670:	31 83       	std	Z+1, r19	; 0x01
     672:	20 83       	st	Z, r18
	txFrame.length = 8;
     674:	28 e0       	ldi	r18, 0x08	; 8
     676:	22 83       	std	Z+2, r18	; 0x02
	
	if(*send){
     678:	fc 01       	movw	r30, r24
     67a:	20 81       	ld	r18, Z
     67c:	22 23       	and	r18, r18
     67e:	61 f1       	breq	.+88     	; 0x6d8 <handle_motor_status_can_msg+0x7c>
     680:	eb 01       	movw	r28, r22
     682:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     684:	0f 2e       	mov	r0, r31
     686:	f3 ee       	ldi	r31, 0xE3	; 227
     688:	ef 2e       	mov	r14, r31
     68a:	f2 e0       	ldi	r31, 0x02	; 2
     68c:	ff 2e       	mov	r15, r31
     68e:	f0 2d       	mov	r31, r0
     690:	8e 89       	ldd	r24, Y+22	; 0x16
     692:	f7 01       	movw	r30, r14
     694:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = 0;
     696:	14 82       	std	Z+4, r1	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     698:	68 81       	ld	r22, Y
     69a:	79 81       	ldd	r23, Y+1	; 0x01
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	9b 81       	ldd	r25, Y+3	; 0x03
     6a0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fixunssfsi>
     6a4:	f7 01       	movw	r30, r14
     6a6:	76 83       	std	Z+6, r23	; 0x06
     6a8:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = (uint16_t)(vals->f32_energy*1000) ;
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	4a e7       	ldi	r20, 0x7A	; 122
     6b0:	54 e4       	ldi	r21, 0x44	; 68
     6b2:	6c 85       	ldd	r22, Y+12	; 0x0c
     6b4:	7d 85       	ldd	r23, Y+13	; 0x0d
     6b6:	8e 85       	ldd	r24, Y+14	; 0x0e
     6b8:	9f 85       	ldd	r25, Y+15	; 0x0f
     6ba:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     6be:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fixunssfsi>
     6c2:	f7 01       	movw	r30, r14
     6c4:	70 87       	std	Z+8, r23	; 0x08
     6c6:	67 83       	std	Z+7, r22	; 0x07
		txFrame.data.u16[3] = (uint16_t)(vals->u8_car_speed) ;
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	92 87       	std	Z+10, r25	; 0x0a
     6ce:	81 87       	std	Z+9, r24	; 0x09
		
		can_send_message(&txFrame);
     6d0:	c7 01       	movw	r24, r14
     6d2:	e8 d7       	rcall	.+4048   	; 0x16a4 <can_send_message>
		*send = 0;
     6d4:	f8 01       	movw	r30, r16
     6d6:	10 82       	st	Z, r1
	}
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <receive_uart>:

///////////////////  UART  ////////////////////

//receiving 
void receive_uart(ModuleValues_t * vals)
{
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <receive_uart+0xa>
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	fc 01       	movw	r30, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     6f6:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <rx0_Head>
     6fa:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <rx0_Tail>
	if(uart_AvailableBytes()!=0 && vals->motor_status != ERR){
     6fe:	92 1b       	sub	r25, r18
     700:	9f 71       	andi	r25, 0x1F	; 31
     702:	d9 f1       	breq	.+118    	; 0x77a <receive_uart+0x94>
     704:	86 89       	ldd	r24, Z+22	; 0x16
     706:	84 30       	cpi	r24, 0x04	; 4
     708:	c1 f1       	breq	.+112    	; 0x77a <receive_uart+0x94>
		volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     70a:	8f 01       	movw	r16, r30
     70c:	20 d2       	rcall	.+1088   	; 0xb4e <uart0_getint>
		uart_flush();
     70e:	9a 83       	std	Y+2, r25	; 0x02
     710:	89 83       	std	Y+1, r24	; 0x01
		if (vals->ctrl_type == CURRENT)
     712:	a2 d1       	rcall	.+836    	; 0xa58 <uart0_flush>
     714:	f8 01       	movw	r30, r16
     716:	83 8d       	ldd	r24, Z+27	; 0x1b
     718:	81 11       	cpse	r24, r1
		{
			if (u16_data_received >10 && u16_data_received <= 20)
     71a:	27 c0       	rjmp	.+78     	; 0x76a <receive_uart+0x84>
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	0b 97       	sbiw	r24, 0x0b	; 11
     722:	50 f0       	brcs	.+20     	; 0x738 <receive_uart+0x52>
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
     728:	45 97       	sbiw	r24, 0x15	; 21
			{
				vals->u8_throttle_cmd = u16_data_received-10 ;
     72a:	30 f4       	brcc	.+12     	; 0x738 <receive_uart+0x52>
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	8a 50       	subi	r24, 0x0A	; 10
				vals->motor_status = BRAKE ;
     732:	82 8b       	std	Z+18, r24	; 0x12
     734:	82 e0       	ldi	r24, 0x02	; 2
			}
			if (u16_data_received>0 && u16_data_received <= 10)
     736:	86 8b       	std	Z+22, r24	; 0x16
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	89 2b       	or	r24, r25
     73e:	51 f0       	breq	.+20     	; 0x754 <receive_uart+0x6e>
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	0b 97       	sbiw	r24, 0x0b	; 11
			{
				vals->u8_throttle_cmd = u16_data_received ;
     746:	30 f4       	brcc	.+12     	; 0x754 <receive_uart+0x6e>
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	f8 01       	movw	r30, r16
				vals->motor_status = ACCEL;
     74e:	82 8b       	std	Z+18, r24	; 0x12
     750:	81 e0       	ldi	r24, 0x01	; 1
			}
			if (u16_data_received == 0)
     752:	86 8b       	std	Z+22, r24	; 0x16
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	89 2b       	or	r24, r25
			{
				vals->u8_throttle_cmd = u16_data_received ;
     75a:	79 f4       	brne	.+30     	; 0x77a <receive_uart+0x94>
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	f8 01       	movw	r30, r16
				vals->motor_status = IDLE;
     762:	82 8b       	std	Z+18, r24	; 0x12
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	86 8b       	std	Z+22, r24	; 0x16
			}
		}else if (vals->ctrl_type == PWM)
     768:	08 c0       	rjmp	.+16     	; 0x77a <receive_uart+0x94>
     76a:	81 30       	cpi	r24, 0x01	; 1
		{
			vals->u8_duty_cycle = u16_data_received;
     76c:	31 f4       	brne	.+12     	; 0x77a <receive_uart+0x94>
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	f8 01       	movw	r30, r16
			vals->motor_status = ACCEL;
     774:	83 8b       	std	Z+19, r24	; 0x13
     776:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     778:	86 8b       	std	Z+22, r24	; 0x16
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(ModuleValues_t vals)
{
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
	//printf("%i,%i,%u,%u,%u,%u,%i",(int16_t)(vals.f32_motor_current*1000),(int16_t)(vals.f32_batt_current*1000),(uint16_t)(vals.f32_batt_volt*1000),vals.u8_car_speed,vals.u8_duty_cycle,vals.u8_motor_temp,vals.u8_throttle_cmd);
	printf("%i",(int16_t)(vals.f32_batt_current)*1000);
     79c:	6f 85       	ldd	r22, Y+15	; 0x0f
     79e:	78 89       	ldd	r23, Y+16	; 0x10
     7a0:	89 89       	ldd	r24, Y+17	; 0x11
     7a2:	9a 89       	ldd	r25, Y+18	; 0x12
     7a4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f8 ee       	ldi	r31, 0xE8	; 232
     7ac:	cf 2e       	mov	r12, r31
     7ae:	f3 e0       	ldi	r31, 0x03	; 3
     7b0:	df 2e       	mov	r13, r31
     7b2:	f0 2d       	mov	r31, r0
     7b4:	c6 9e       	mul	r12, r22
     7b6:	90 01       	movw	r18, r0
     7b8:	c7 9e       	mul	r12, r23
     7ba:	30 0d       	add	r19, r0
     7bc:	d6 9e       	mul	r13, r22
     7be:	30 0d       	add	r19, r0
     7c0:	11 24       	eor	r1, r1
     7c2:	3f 93       	push	r19
     7c4:	2f 93       	push	r18
     7c6:	0f 2e       	mov	r0, r31
     7c8:	fe e2       	ldi	r31, 0x2E	; 46
     7ca:	ef 2e       	mov	r14, r31
     7cc:	f1 e0       	ldi	r31, 0x01	; 1
     7ce:	ff 2e       	mov	r15, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	ff 92       	push	r15
     7d4:	ef 92       	push	r14
     7d6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
 	printf(",");
     7da:	8c e2       	ldi	r24, 0x2C	; 44
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <putchar>
	printf("%u",(uint16_t)(vals.f32_batt_volt)*1000);
     7e2:	6b 89       	ldd	r22, Y+19	; 0x13
     7e4:	7c 89       	ldd	r23, Y+20	; 0x14
     7e6:	8d 89       	ldd	r24, Y+21	; 0x15
     7e8:	9e 89       	ldd	r25, Y+22	; 0x16
     7ea:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fixunssfsi>
     7ee:	c6 9e       	mul	r12, r22
     7f0:	90 01       	movw	r18, r0
     7f2:	c7 9e       	mul	r12, r23
     7f4:	30 0d       	add	r19, r0
     7f6:	d6 9e       	mul	r13, r22
     7f8:	30 0d       	add	r19, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	3f 93       	push	r19
     7fe:	2f 93       	push	r18
     800:	01 e3       	ldi	r16, 0x31	; 49
     802:	11 e0       	ldi	r17, 0x01	; 1
     804:	1f 93       	push	r17
     806:	0f 93       	push	r16
     808:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf(",");
     80c:	8c e2       	ldi	r24, 0x2C	; 44
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <putchar>
	printf("%i",(int16_t)(vals.f32_motor_current)*1000);
     814:	6b 85       	ldd	r22, Y+11	; 0x0b
     816:	7c 85       	ldd	r23, Y+12	; 0x0c
     818:	8d 85       	ldd	r24, Y+13	; 0x0d
     81a:	9e 85       	ldd	r25, Y+14	; 0x0e
     81c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
     820:	c6 9e       	mul	r12, r22
     822:	90 01       	movw	r18, r0
     824:	c7 9e       	mul	r12, r23
     826:	30 0d       	add	r19, r0
     828:	d6 9e       	mul	r13, r22
     82a:	30 0d       	add	r19, r0
     82c:	11 24       	eor	r1, r1
     82e:	3f 93       	push	r19
     830:	2f 93       	push	r18
     832:	ff 92       	push	r15
     834:	ef 92       	push	r14
     836:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf(",");
     83a:	8c e2       	ldi	r24, 0x2C	; 44
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <putchar>
	printf("%u",vals.u8_duty_cycle);
     842:	8e 8d       	ldd	r24, Y+30	; 0x1e
     844:	1f 92       	push	r1
     846:	8f 93       	push	r24
     848:	1f 93       	push	r17
     84a:	0f 93       	push	r16
     84c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
 	{
 		printf("%i",vals.u8_throttle_cmd*1000);
 	}
	printf(",");
	*/
	printf("\n");
     850:	8a e0       	ldi	r24, 0x0A	; 10
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <putchar>
}
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	08 95       	ret

00000874 <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(ModuleValues_t vals)
{	
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     87c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	c9 f0       	breq	.+50     	; 0x8b4 <manage_LEDs+0x40>
     882:	28 f4       	brcc	.+10     	; 0x88e <manage_LEDs+0x1a>
     884:	88 23       	and	r24, r24
     886:	41 f0       	breq	.+16     	; 0x898 <manage_LEDs+0x24>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	69 f0       	breq	.+26     	; 0x8a6 <manage_LEDs+0x32>
     88c:	27 c0       	rjmp	.+78     	; 0x8dc <manage_LEDs+0x68>
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	c1 f0       	breq	.+48     	; 0x8c2 <manage_LEDs+0x4e>
     892:	84 30       	cpi	r24, 0x04	; 4
     894:	e9 f0       	breq	.+58     	; 0x8d0 <manage_LEDs+0x5c>
     896:	22 c0       	rjmp	.+68     	; 0x8dc <manage_LEDs+0x68>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     898:	80 e4       	ldi	r24, 0x40	; 64
			rgbled_turn_off(LED_RED);
     89a:	82 d7       	rcall	.+3844   	; 0x17a0 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     89c:	80 e2       	ldi	r24, 0x20	; 32
     89e:	80 d7       	rcall	.+3840   	; 0x17a0 <rgbled_turn_off>
		break ;
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     8a0:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     8a2:	88 d7       	rcall	.+3856   	; 0x17b4 <rgbled_turn_on>
     8a4:	1b c0       	rjmp	.+54     	; 0x8dc <manage_LEDs+0x68>
			rgbled_toggle(LED_GREEN);
     8a6:	80 e2       	ldi	r24, 0x20	; 32
		break;
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     8a8:	7b d7       	rcall	.+3830   	; 0x17a0 <rgbled_turn_off>
     8aa:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     8ac:	79 d7       	rcall	.+3826   	; 0x17a0 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     8ae:	80 e4       	ldi	r24, 0x40	; 64
		break;
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     8b0:	86 d7       	rcall	.+3852   	; 0x17be <rgbled_toggle>
			rgbled_turn_off(LED_BLUE);
     8b2:	14 c0       	rjmp	.+40     	; 0x8dc <manage_LEDs+0x68>
     8b4:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_on(LED_GREEN);
     8b6:	74 d7       	rcall	.+3816   	; 0x17a0 <rgbled_turn_off>
     8b8:	80 e8       	ldi	r24, 0x80	; 128
     8ba:	72 d7       	rcall	.+3812   	; 0x17a0 <rgbled_turn_off>
		break;
     8bc:	80 e4       	ldi	r24, 0x40	; 64
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     8be:	7f d7       	rcall	.+3838   	; 0x17be <rgbled_toggle>
     8c0:	0d c0       	rjmp	.+26     	; 0x8dc <manage_LEDs+0x68>
     8c2:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_off(LED_BLUE);
     8c4:	6d d7       	rcall	.+3802   	; 0x17a0 <rgbled_turn_off>
     8c6:	80 e8       	ldi	r24, 0x80	; 128
     8c8:	6b d7       	rcall	.+3798   	; 0x17a0 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     8ca:	80 e4       	ldi	r24, 0x40	; 64
     8cc:	73 d7       	rcall	.+3814   	; 0x17b4 <rgbled_turn_on>
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <manage_LEDs+0x68>
		break;
	}
     8d0:	80 e4       	ldi	r24, 0x40	; 64
     8d2:	66 d7       	rcall	.+3788   	; 0x17a0 <rgbled_turn_off>
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	64 d7       	rcall	.+3784   	; 0x17a0 <rgbled_turn_off>
     8d8:	80 e2       	ldi	r24, 0x20	; 32
     8da:	6c d7       	rcall	.+3800   	; 0x17b4 <rgbled_turn_on>
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     8e2:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     8e4:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     8e6:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     8e8:	ea e6       	ldi	r30, 0x6A	; 106
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	8c 60       	ori	r24, 0x0C	; 12
     8f0:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     8f2:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     8f4:	ed 9a       	sbi	0x1d, 5	; 29
     8f6:	08 95       	ret

000008f8 <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint16_t u16_period) // period in ms
{
     8f8:	8f 92       	push	r8
     8fa:	9f 92       	push	r9
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	1f 92       	push	r1
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	6c 01       	movw	r12, r24
     918:	7b 01       	movw	r14, r22
     91a:	8a 01       	movw	r16, r20
	volatile uint8_t u8_new_speed = (uint8_t)(((float)*u16_counter)*D_WHEEL*PI/N_MAG/u16_period); // speed calculated in mm/ms
     91c:	fb 01       	movw	r30, r22
     91e:	60 81       	ld	r22, Z
     920:	71 81       	ldd	r23, Z+1	; 0x01
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	4a ef       	ldi	r20, 0xFA	; 250
     930:	53 e4       	ldi	r21, 0x43	; 67
     932:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     936:	23 ec       	ldi	r18, 0xC3	; 195
     938:	35 ef       	ldi	r19, 0xF5	; 245
     93a:	48 e4       	ldi	r20, 0x48	; 72
     93c:	50 e4       	ldi	r21, 0x40	; 64
     93e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     942:	4b 01       	movw	r8, r22
     944:	5c 01       	movw	r10, r24
     946:	b8 01       	movw	r22, r16
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c5 01       	movw	r24, r10
     956:	b4 01       	movw	r22, r8
     958:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     95c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fixunssfsi>
     960:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	f6 01       	movw	r30, r12
     966:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     968:	f7 01       	movw	r30, r14
     96a:	11 82       	std	Z+1, r1	; 0x01
     96c:	10 82       	st	Z, r1
}
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	9f 90       	pop	r9
     986:	8f 90       	pop	r8
     988:	08 95       	ret

0000098a <pwm_init>:

#include "pwm.h"
#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     98e:	8e b1       	in	r24, 0x0e	; 14
     990:	87 7e       	andi	r24, 0xE7	; 231
     992:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     994:	8d b1       	in	r24, 0x0d	; 13
     996:	88 61       	ori	r24, 0x18	; 24
     998:	8d b9       	out	0x0d, r24	; 13
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
		
	}else{//UNIPOLAR
		
		//Timer 3 phase correct pwm, TOP at ICR (mode 10)
		TCCR3B |= (1<<WGM33);
     99a:	a1 e9       	ldi	r26, 0x91	; 145
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	8c 91       	ld	r24, X
     9a0:	80 61       	ori	r24, 0x10	; 16
     9a2:	8c 93       	st	X, r24
		TCCR3B &= ~(1<<WGM32);
     9a4:	8c 91       	ld	r24, X
     9a6:	87 7f       	andi	r24, 0xF7	; 247
     9a8:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     9aa:	e0 e9       	ldi	r30, 0x90	; 144
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	82 60       	ori	r24, 0x02	; 2
     9b2:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     9b4:	80 81       	ld	r24, Z
     9b6:	8e 7f       	andi	r24, 0xFE	; 254
     9b8:	80 83       	st	Z, r24
		
		// Set OC3A on Compare Match when up-counting. clear OC3A on Compare Match when downcounting.
		TCCR3A |= (1<<COM3A1);
     9ba:	80 81       	ld	r24, Z
     9bc:	80 68       	ori	r24, 0x80	; 128
     9be:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     9c0:	80 81       	ld	r24, Z
     9c2:	8f 7b       	andi	r24, 0xBF	; 191
     9c4:	80 83       	st	Z, r24
		
		// Set OC3B on Compare Match when up-counting. Clear OC3B on Compare Match when downcounting.
		TCCR3A |= (1<<COM3B1);
     9c6:	80 81       	ld	r24, Z
     9c8:	80 62       	ori	r24, 0x20	; 32
     9ca:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3B0);
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 7e       	andi	r24, 0xEF	; 239
     9d0:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		TCCR3B |= (1<<CS30);
     9d2:	8c 91       	ld	r24, X
     9d4:	81 60       	ori	r24, 0x01	; 1
     9d6:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     9d8:	8c 91       	ld	r24, X
     9da:	89 7f       	andi	r24, 0xF9	; 249
     9dc:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x85; //30kHz = 85
     9de:	c6 e9       	ldi	r28, 0x96	; 150
     9e0:	d0 e0       	ldi	r29, 0x00	; 0
     9e2:	85 e8       	ldi	r24, 0x85	; 133
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	99 83       	std	Y+1, r25	; 0x01
     9e8:	88 83       	st	Y, r24
		
		//initialising compare registers at Duty cycle 50%
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3
     9ea:	68 81       	ld	r22, Y
     9ec:	79 81       	ldd	r23, Y+1	; 0x01
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__floatunsisf>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	5f e3       	ldi	r21, 0x3F	; 63
     9fe:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3>
     a02:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
     a06:	e8 e9       	ldi	r30, 0x98	; 152
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	71 83       	std	Z+1, r23	; 0x01
     a0c:	60 83       	st	Z, r22
		OCR3B = ICR3-OCR3A ; //PWM_PE4
     a0e:	88 81       	ld	r24, Y
     a10:	99 81       	ldd	r25, Y+1	; 0x01
     a12:	20 81       	ld	r18, Z
     a14:	31 81       	ldd	r19, Z+1	; 0x01
     a16:	82 1b       	sub	r24, r18
     a18:	93 0b       	sbc	r25, r19
     a1a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     a1e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     a28:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <tx0_Head>
     a2c:	9f 5f       	subi	r25, 0xFF	; 255
     a2e:	9f 71       	andi	r25, 0x1F	; 31
     a30:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <tx0_Tail>
     a34:	92 17       	cp	r25, r18
     a36:	e1 f3       	breq	.-8      	; 0xa30 <uart0_putc+0x8>
     a38:	e9 2f       	mov	r30, r25
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	ea 5a       	subi	r30, 0xAA	; 170
     a3e:	fc 4f       	sbci	r31, 0xFC	; 252
     a40:	80 83       	st	Z, r24
     a42:	2f b7       	in	r18, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <tx0_Head>
     a4a:	e1 ec       	ldi	r30, 0xC1	; 193
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	80 62       	ori	r24, 0x20	; 32
     a52:	80 83       	st	Z, r24
     a54:	2f bf       	out	0x3f, r18	; 63
     a56:	08 95       	ret

00000a58 <uart0_flush>:
     a58:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <tx0_Tail>
     a5c:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <tx0_Head>
     a60:	98 13       	cpse	r25, r24
     a62:	fa cf       	rjmp	.-12     	; 0xa58 <uart0_flush>
     a64:	08 95       	ret

00000a66 <uart1_putc>:
     a66:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <tx1_Head>
     a6a:	9f 5f       	subi	r25, 0xFF	; 255
     a6c:	9f 71       	andi	r25, 0x1F	; 31
     a6e:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <tx1_Tail>
     a72:	92 17       	cp	r25, r18
     a74:	e1 f3       	breq	.-8      	; 0xa6e <uart1_putc+0x8>
     a76:	e9 2f       	mov	r30, r25
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	ef 5e       	subi	r30, 0xEF	; 239
     a7c:	fc 4f       	sbci	r31, 0xFC	; 252
     a7e:	80 83       	st	Z, r24
     a80:	2f b7       	in	r18, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <tx1_Head>
     a88:	e9 ec       	ldi	r30, 0xC9	; 201
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	80 62       	ori	r24, 0x20	; 32
     a90:	80 83       	st	Z, r24
     a92:	2f bf       	out	0x3f, r18	; 63
     a94:	08 95       	ret

00000a96 <uart_putchar>:
     a96:	cf 93       	push	r28
     a98:	c8 2f       	mov	r28, r24
     a9a:	fb 01       	movw	r30, r22
     a9c:	84 85       	ldd	r24, Z+12	; 0x0c
     a9e:	95 85       	ldd	r25, Z+13	; 0x0d
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	39 f0       	breq	.+14     	; 0xab2 <uart_putchar+0x1c>
     aa4:	ca 30       	cpi	r28, 0x0A	; 10
     aa6:	11 f4       	brne	.+4      	; 0xaac <uart_putchar+0x16>
     aa8:	8d e0       	ldi	r24, 0x0D	; 13
     aaa:	be df       	rcall	.-132    	; 0xa28 <uart0_putc>
     aac:	8c 2f       	mov	r24, r28
     aae:	bc df       	rcall	.-136    	; 0xa28 <uart0_putc>
     ab0:	06 c0       	rjmp	.+12     	; 0xabe <uart_putchar+0x28>
     ab2:	ca 30       	cpi	r28, 0x0A	; 10
     ab4:	11 f4       	brne	.+4      	; 0xaba <uart_putchar+0x24>
     ab6:	8d e0       	ldi	r24, 0x0D	; 13
     ab8:	d6 df       	rcall	.-84     	; 0xa66 <uart1_putc>
     aba:	8c 2f       	mov	r24, r28
     abc:	d4 df       	rcall	.-88     	; 0xa66 <uart1_putc>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <uart0_getc>:
     ac6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <rx0_Tail>
     aca:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <rx0_Head>
     ace:	89 17       	cp	r24, r25
     ad0:	59 f0       	breq	.+22     	; 0xae8 <uart0_getc+0x22>
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	98 2f       	mov	r25, r24
     ad6:	9f 71       	andi	r25, 0x1F	; 31
     ad8:	e9 2f       	mov	r30, r25
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	e2 51       	subi	r30, 0x12	; 18
     ade:	fd 4f       	sbci	r31, 0xFD	; 253
     ae0:	80 81       	ld	r24, Z
     ae2:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <rx0_Tail>
     ae6:	08 95       	ret
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 95       	ret

00000aec <uart0_getlnToFirstWhiteSpace>:
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	7c 01       	movw	r14, r24
     afa:	16 2f       	mov	r17, r22
     afc:	e4 df       	rcall	.-56     	; 0xac6 <uart0_getc>
     afe:	f7 01       	movw	r30, r14
     b00:	80 83       	st	Z, r24
     b02:	81 32       	cpi	r24, 0x21	; 33
     b04:	d8 f3       	brcs	.-10     	; 0xafc <uart0_getlnToFirstWhiteSpace+0x10>
     b06:	e7 01       	movw	r28, r14
     b08:	21 96       	adiw	r28, 0x01	; 1
     b0a:	12 30       	cpi	r17, 0x02	; 2
     b0c:	c1 f0       	breq	.+48     	; 0xb3e <uart0_getlnToFirstWhiteSpace+0x52>
     b0e:	13 50       	subi	r17, 0x03	; 3
     b10:	81 2f       	mov	r24, r17
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	02 96       	adiw	r24, 0x02	; 2
     b16:	87 01       	movw	r16, r14
     b18:	08 0f       	add	r16, r24
     b1a:	19 1f       	adc	r17, r25
     b1c:	d4 df       	rcall	.-88     	; 0xac6 <uart0_getc>
     b1e:	88 83       	st	Y, r24
     b20:	88 23       	and	r24, r24
     b22:	e1 f3       	breq	.-8      	; 0xb1c <uart0_getlnToFirstWhiteSpace+0x30>
     b24:	8d 30       	cpi	r24, 0x0D	; 13
     b26:	21 f4       	brne	.+8      	; 0xb30 <uart0_getlnToFirstWhiteSpace+0x44>
     b28:	ce df       	rcall	.-100    	; 0xac6 <uart0_getc>
     b2a:	88 23       	and	r24, r24
     b2c:	e9 f3       	breq	.-6      	; 0xb28 <uart0_getlnToFirstWhiteSpace+0x3c>
     b2e:	07 c0       	rjmp	.+14     	; 0xb3e <uart0_getlnToFirstWhiteSpace+0x52>
     b30:	81 32       	cpi	r24, 0x21	; 33
     b32:	28 f0       	brcs	.+10     	; 0xb3e <uart0_getlnToFirstWhiteSpace+0x52>
     b34:	21 96       	adiw	r28, 0x01	; 1
     b36:	0c 17       	cp	r16, r28
     b38:	1d 07       	cpc	r17, r29
     b3a:	81 f7       	brne	.-32     	; 0xb1c <uart0_getlnToFirstWhiteSpace+0x30>
     b3c:	e8 01       	movw	r28, r16
     b3e:	18 82       	st	Y, r1
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	08 95       	ret

00000b4e <uart0_getint>:
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	27 97       	sbiw	r28, 0x07	; 7
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	67 e0       	ldi	r22, 0x07	; 7
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	c1 df       	rcall	.-126    	; 0xaec <uart0_getlnToFirstWhiteSpace>
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <atoi>
     b72:	27 96       	adiw	r28, 0x07	; 7
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <uart0_getData>:
     b84:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <rx0_Tail>
     b88:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <rx0_Head>
     b8c:	89 17       	cp	r24, r25
     b8e:	61 f0       	breq	.+24     	; 0xba8 <uart0_getData+0x24>
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	8f 71       	andi	r24, 0x1F	; 31
     b94:	e8 2f       	mov	r30, r24
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	e2 51       	subi	r30, 0x12	; 18
     b9a:	fd 4f       	sbci	r31, 0xFD	; 253
     b9c:	90 81       	ld	r25, Z
     b9e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <rx0_Tail>
     ba2:	89 2f       	mov	r24, r25
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	08 95       	ret
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	9f ef       	ldi	r25, 0xFF	; 255
     bac:	08 95       	ret

00000bae <uart1_getData>:
     bae:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <rx1_Tail>
     bb2:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <rx1_Head>
     bb6:	89 17       	cp	r24, r25
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <uart1_getData+0x24>
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	8f 71       	andi	r24, 0x1F	; 31
     bbe:	e8 2f       	mov	r30, r24
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ee 5c       	subi	r30, 0xCE	; 206
     bc4:	fc 4f       	sbci	r31, 0xFC	; 252
     bc6:	90 81       	ld	r25, Z
     bc8:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <rx1_Tail>
     bcc:	89 2f       	mov	r24, r25
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	08 95       	ret
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	9f ef       	ldi	r25, 0xFF	; 255
     bd6:	08 95       	ret

00000bd8 <uart_getchar>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	fc 01       	movw	r30, r24
     bde:	84 85       	ldd	r24, Z+12	; 0x0c
     be0:	95 85       	ldd	r25, Z+13	; 0x0d
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	41 f0       	breq	.+16     	; 0xbf6 <uart_getchar+0x1e>
     be6:	ce df       	rcall	.-100    	; 0xb84 <uart0_getData>
     be8:	ec 01       	movw	r28, r24
     bea:	99 23       	and	r25, r25
     bec:	e4 f3       	brlt	.-8      	; 0xbe6 <uart_getchar+0xe>
     bee:	1c df       	rcall	.-456    	; 0xa28 <uart0_putc>
     bf0:	ce 01       	movw	r24, r28
     bf2:	99 27       	eor	r25, r25
     bf4:	07 c0       	rjmp	.+14     	; 0xc04 <uart_getchar+0x2c>
     bf6:	db df       	rcall	.-74     	; 0xbae <uart1_getData>
     bf8:	ec 01       	movw	r28, r24
     bfa:	99 23       	and	r25, r25
     bfc:	e4 f3       	brlt	.-8      	; 0xbf6 <uart_getchar+0x1e>
     bfe:	33 df       	rcall	.-410    	; 0xa66 <uart1_putc>
     c00:	ce 01       	movw	r24, r28
     c02:	99 27       	eor	r25, r25
     c04:	99 27       	eor	r25, r25
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     c0c:	0f 93       	push	r16
     c0e:	0f b7       	in	r16, 0x3f	; 63
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
     c14:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <tx0_Tail>
     c18:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <tx0_Head>
     c1c:	e3 95       	inc	r30
     c1e:	ef 71       	andi	r30, 0x1F	; 31
     c20:	ef 13       	cpse	r30, r31
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <USART0_TX_CONTINUE>
     c24:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     c28:	ff 7d       	andi	r31, 0xDF	; 223
     c2a:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000c2e <USART0_TX_CONTINUE>:
     c2e:	e0 93 0f 03 	sts	0x030F, r30	; 0x80030f <tx0_Tail>
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ea 5a       	subi	r30, 0xAA	; 170
     c36:	fc 4f       	sbci	r31, 0xFC	; 252
     c38:	e0 81       	ld	r30, Z
     c3a:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000c3e <USART0_TX_EXIT>:
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	0f bf       	out	0x3f, r16	; 63
     c44:	0f 91       	pop	r16
     c46:	18 95       	reti

00000c48 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     c48:	0f 93       	push	r16
     c4a:	0f b7       	in	r16, 0x3f	; 63
     c4c:	9f 93       	push	r25
     c4e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
     c56:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <rx0_Head>
     c5a:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <rx0_Tail>
     c5e:	e3 95       	inc	r30
     c60:	ef 71       	andi	r30, 0x1F	; 31
     c62:	fe 17       	cp	r31, r30
     c64:	31 f0       	breq	.+12     	; 0xc72 <USART0_RX_EXIT>
     c66:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <rx0_Head>
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	e2 51       	subi	r30, 0x12	; 18
     c6e:	fd 4f       	sbci	r31, 0xFD	; 253
     c70:	90 83       	st	Z, r25

00000c72 <USART0_RX_EXIT>:
     c72:	ff 91       	pop	r31
     c74:	ef 91       	pop	r30
     c76:	9f 91       	pop	r25
     c78:	0f bf       	out	0x3f, r16	; 63
     c7a:	0f 91       	pop	r16
     c7c:	18 95       	reti

00000c7e <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     c7e:	0f 93       	push	r16
     c80:	0f b7       	in	r16, 0x3f	; 63
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
     c86:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <tx1_Tail>
     c8a:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <tx1_Head>
     c8e:	e3 95       	inc	r30
     c90:	ef 71       	andi	r30, 0x1F	; 31
     c92:	ef 13       	cpse	r30, r31
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <USART1_TX_CONTINUE>
     c96:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     c9a:	ff 7d       	andi	r31, 0xDF	; 223
     c9c:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000ca0 <USART1_TX_CONTINUE>:
     ca0:	e0 93 53 03 	sts	0x0353, r30	; 0x800353 <tx1_Tail>
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	ef 5e       	subi	r30, 0xEF	; 239
     ca8:	fc 4f       	sbci	r31, 0xFC	; 252
     caa:	e0 81       	ld	r30, Z
     cac:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000cb0 <USART1_TX_EXIT>:
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	0f bf       	out	0x3f, r16	; 63
     cb6:	0f 91       	pop	r16
     cb8:	18 95       	reti

00000cba <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     cba:	0f 93       	push	r16
     cbc:	0f b7       	in	r16, 0x3f	; 63
     cbe:	9f 93       	push	r25
     cc0:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <rx1_Head>
     ccc:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <rx1_Tail>
     cd0:	e3 95       	inc	r30
     cd2:	ef 71       	andi	r30, 0x1F	; 31
     cd4:	fe 17       	cp	r31, r30
     cd6:	31 f0       	breq	.+12     	; 0xce4 <USART1_RX_EXIT>
     cd8:	e0 93 54 03 	sts	0x0354, r30	; 0x800354 <rx1_Head>
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	ee 5c       	subi	r30, 0xCE	; 206
     ce0:	fc 4f       	sbci	r31, 0xFC	; 252
     ce2:	90 83       	st	Z, r25

00000ce4 <USART1_RX_EXIT>:
     ce4:	ff 91       	pop	r31
     ce6:	ef 91       	pop	r30
     ce8:	9f 91       	pop	r25
     cea:	0f bf       	out	0x3f, r16	; 63
     cec:	0f 91       	pop	r16
     cee:	18 95       	reti

00000cf0 <timer1_init_ts>:
//for speed
static uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     cf0:	e1 e8       	ldi	r30, 0x81	; 129
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	83 60       	ori	r24, 0x03	; 3
     cf8:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     cfa:	80 81       	ld	r24, Z
     cfc:	88 60       	ori	r24, 0x08	; 8
     cfe:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     d00:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d04:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     d08:	ef e6       	ldi	r30, 0x6F	; 111
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 60       	ori	r24, 0x02	; 2
     d10:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     d12:	8d e7       	ldi	r24, 0x7D	; 125
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d1a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d1e:	08 95       	ret

00000d20 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     d20:	84 b5       	in	r24, 0x24	; 36
     d22:	85 60       	ori	r24, 0x05	; 5
     d24:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     d26:	84 b5       	in	r24, 0x24	; 36
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     d2c:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     d2e:	ee e6       	ldi	r30, 0x6E	; 110
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	82 60       	ori	r24, 0x02	; 2
     d36:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
     d38:	87 e2       	ldi	r24, 0x27	; 39
     d3a:	87 bd       	out	0x27, r24	; 39
     d3c:	08 95       	ret

00000d3e <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
     d3e:	f8 94       	cli
     d40:	33 d5       	rcall	.+2662   	; 0x17a8 <rgbled_init>
	can_init(0,0);
     d42:	23 de       	rcall	.-954    	; 0x98a <pwm_init>
     d44:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     d46:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
     d4c:	13 d4       	rcall	.+2086   	; 0x1574 <can_init>
     d4e:	d0 df       	rcall	.-96     	; 0xcf0 <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     d50:	e7 df       	rcall	.-50     	; 0xd20 <timer0_init_ts>
     d52:	c7 dd       	rcall	.-1138   	; 0x8e2 <speed_init>
     d54:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     d56:	37 d5       	rcall	.+2670   	; 0x17c6 <spi_init>
     d58:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     d5c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     d60:	88 e9       	ldi	r24, 0x98	; 152
     d62:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     d66:	e6 e7       	ldi	r30, 0x76	; 118
     d68:	f3 e0       	ldi	r31, 0x03	; 3
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	91 e0       	ldi	r25, 0x01	; 1
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     d6e:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
     d70:	82 83       	std	Z+2, r24	; 0x02
     d72:	91 83       	std	Z+1, r25	; 0x01
	
	sei();
     d74:	80 83       	st	Z, r24
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues); //send CAN
     d76:	0e db       	rcall	.-2532   	; 0x394 <drivers_init>
     d78:	78 94       	sei
     d7a:	62 e1       	ldi	r22, 0x12	; 18
     d7c:	71 e0       	ldi	r23, 0x01	; 1
     d7e:	86 e4       	ldi	r24, 0x46	; 70
		handle_can(&ComValues, &rxFrame); //receive CAN
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	6c dc       	rcall	.-1832   	; 0x65c <handle_motor_status_can_msg>
     d84:	68 ed       	ldi	r22, 0xD8	; 216
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	82 e1       	ldi	r24, 0x12	; 18
     d8a:	91 e0       	ldi	r25, 0x01	; 1
		
		if (b_send_uart)
     d8c:	0f dc       	rcall	.-2018   	; 0x5ac <handle_can>
     d8e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <b_send_uart>
     d92:	88 23       	and	r24, r24
		{
			send_uart(ComValues);
     d94:	e9 f0       	breq	.+58     	; 0xdd0 <main+0x92>
     d96:	8d b7       	in	r24, 0x3d	; 61
     d98:	9e b7       	in	r25, 0x3e	; 62
     d9a:	4c 97       	sbiw	r24, 0x1c	; 28
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	9e bf       	out	0x3e, r25	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	8d bf       	out	0x3d, r24	; 61
     da6:	ad b7       	in	r26, 0x3d	; 61
     da8:	be b7       	in	r27, 0x3e	; 62
     daa:	11 96       	adiw	r26, 0x01	; 1
     dac:	8c e1       	ldi	r24, 0x1C	; 28
     dae:	e2 e1       	ldi	r30, 0x12	; 18
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	01 90       	ld	r0, Z+
     db4:	0d 92       	st	X+, r0
     db6:	8a 95       	dec	r24
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <main+0x74>
			b_send_uart = 0;
     dba:	e6 dc       	rcall	.-1588   	; 0x788 <send_uart>
     dbc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <b_send_uart>
     dc0:	8d b7       	in	r24, 0x3d	; 61
     dc2:	9e b7       	in	r25, 0x3e	; 62
     dc4:	4c 96       	adiw	r24, 0x1c	; 28
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
		}
		receive_uart(&ComValues);
     dca:	9e bf       	out	0x3e, r25	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	8d bf       	out	0x3d, r24	; 61
     dd0:	82 e1       	ldi	r24, 0x12	; 18
		
		err_check(&ComValues); //verifying current, temperature and voltage
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	88 dc       	rcall	.-1776   	; 0x6e6 <receive_uart>
     dd6:	82 e1       	ldi	r24, 0x12	; 18
     dd8:	91 e0       	ldi	r25, 0x01	; 1
	}
     dda:	33 d2       	rcall	.+1126   	; 0x1242 <err_check>
     ddc:	ce cf       	rjmp	.-100    	; 0xd7a <main+0x3c>

00000dde <__vector_16>:
}


ISR(TIMER0_COMP_vect){ // every 5ms
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	0b b6       	in	r0, 0x3b	; 59
     dea:	0f 92       	push	r0
     dec:	ef 92       	push	r14
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
	
	if (systic_counter_fast == 1) // every 10ms
     e0a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <systic_counter_fast>
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	61 f5       	brne	.+88     	; 0xe6a <__vector_16+0x8c>
	{
		b_send_uart = 1;
     e12:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <b_send_uart>
		if (ComValues.u16_watchdog == 0)
     e16:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ComValues+0x14>
     e1a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ComValues+0x15>
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	39 f4       	brne	.+14     	; 0xe30 <__vector_16+0x52>
		{
			if (ComValues.motor_status != ERR)
     e22:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ComValues+0x16>
     e26:	84 30       	cpi	r24, 0x04	; 4
     e28:	61 f0       	breq	.+24     	; 0xe42 <__vector_16+0x64>
			{
				ComValues.motor_status = OFF ;
     e2a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ComValues+0x16>
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <__vector_16+0x64>
			}
			}else{
				
			if (ComValues.ctrl_type == CURRENT)
     e30:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <ComValues+0x1b>
     e34:	21 11       	cpse	r18, r1
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__vector_16+0x64>
			{
				ComValues.u16_watchdog -- ;
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ComValues+0x15>
     e3e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ComValues+0x14>
			}
			
		}
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;		
     e42:	e2 e1       	ldi	r30, 0x12	; 18
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	00 85       	ldd	r16, Z+8	; 0x08
     e48:	11 85       	ldd	r17, Z+9	; 0x09
     e4a:	22 85       	ldd	r18, Z+10	; 0x0a
     e4c:	33 85       	ldd	r19, Z+11	; 0x0b
     e4e:	44 81       	ldd	r20, Z+4	; 0x04
     e50:	55 81       	ldd	r21, Z+5	; 0x05
     e52:	66 81       	ldd	r22, Z+6	; 0x06
     e54:	77 81       	ldd	r23, Z+7	; 0x07
     e56:	0f 2e       	mov	r0, r31
     e58:	fa e0       	ldi	r31, 0x0A	; 10
     e5a:	ef 2e       	mov	r14, r31
     e5c:	f0 2d       	mov	r31, r0
     e5e:	8e e1       	ldi	r24, 0x1E	; 30
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	b8 d1       	rcall	.+880    	; 0x11d4 <handle_joulemeter>
		systic_counter_fast = 0;
     e64:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <systic_counter_fast>
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <__vector_16+0x92>
	} else {
		systic_counter_fast ++;
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
     e70:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <systic_counter_slow>
     e74:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <systic_counter_slow+0x1>
     e78:	84 36       	cpi	r24, 0x64	; 100
     e7a:	91 05       	cpc	r25, r1
     e7c:	51 f5       	brne	.+84     	; 0xed2 <__vector_16+0xf4>
	{
		send_can = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <send_can>
		handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 500.0);
     e84:	44 ef       	ldi	r20, 0xF4	; 244
     e86:	51 e0       	ldi	r21, 0x01	; 1
     e88:	62 e4       	ldi	r22, 0x42	; 66
     e8a:	71 e0       	ldi	r23, 0x01	; 1
     e8c:	83 e2       	ldi	r24, 0x23	; 35
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	33 dd       	rcall	.-1434   	; 0x8f8 <handle_speed_sensor>
		manage_LEDs(ComValues); //UM LED according to motor state
     e92:	8d b7       	in	r24, 0x3d	; 61
     e94:	9e b7       	in	r25, 0x3e	; 62
     e96:	4c 97       	sbiw	r24, 0x1c	; 28
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	9e bf       	out	0x3e, r25	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	8d bf       	out	0x3d, r24	; 61
     ea2:	ad b7       	in	r26, 0x3d	; 61
     ea4:	be b7       	in	r27, 0x3e	; 62
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	8c e1       	ldi	r24, 0x1C	; 28
     eaa:	e2 e1       	ldi	r30, 0x12	; 18
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	01 90       	ld	r0, Z+
     eb0:	0d 92       	st	X+, r0
     eb2:	8a 95       	dec	r24
     eb4:	e1 f7       	brne	.-8      	; 0xeae <__vector_16+0xd0>
     eb6:	de dc       	rcall	.-1604   	; 0x874 <manage_LEDs>
		systic_counter_slow = 0;
     eb8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <systic_counter_slow+0x1>
     ebc:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <systic_counter_slow>
     ec0:	8d b7       	in	r24, 0x3d	; 61
     ec2:	9e b7       	in	r25, 0x3e	; 62
     ec4:	4c 96       	adiw	r24, 0x1c	; 28
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	9e bf       	out	0x3e, r25	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	8d bf       	out	0x3d, r24	; 61
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <__vector_16+0xfe>
		} else {
		systic_counter_slow ++;
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <systic_counter_slow+0x1>
     ed8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <systic_counter_slow>
	}
	
	manage_motor(&ComValues);
     edc:	82 e1       	ldi	r24, 0x12	; 18
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	61 da       	rcall	.-2878   	; 0x3a4 <manage_motor>
}
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ef 90       	pop	r14
     f00:	0f 90       	pop	r0
     f02:	0b be       	out	0x3b, r0	; 59
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	0b b6       	in	r0, 0x3b	; 59
     f1a:	0f 92       	push	r0
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
	
	if (u8_SPI_count == 4)
     f34:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	31 f4       	brne	.+12     	; 0xf48 <__vector_12+0x3a>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
     f3c:	82 e2       	ldi	r24, 0x22	; 34
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	16 db       	rcall	.-2516   	; 0x56e <SPI_handler_4>
		u8_SPI_count = 0 ;
     f42:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <u8_SPI_count>
     f46:	12 c0       	rjmp	.+36     	; 0xf6c <__vector_12+0x5e>
	}
	
	if (u8_SPI_count == 3)
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	21 f4       	brne	.+8      	; 0xf54 <__vector_12+0x46>
	{
		u8_SPI_count ++ ;
     f4c:	84 e0       	ldi	r24, 0x04	; 4
     f4e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
     f52:	18 c0       	rjmp	.+48     	; 0xf84 <__vector_12+0x76>
	}
	
	if (u8_SPI_count == 2)
     f54:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	41 f4       	brne	.+16     	; 0xf6c <__vector_12+0x5e>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
     f5c:	8a e1       	ldi	r24, 0x1A	; 26
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	d5 da       	rcall	.-2646   	; 0x50c <SPI_handler_2>
		u8_SPI_count ++ ;
     f62:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     f6c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f70:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
     f72:	41 f4       	brne	.+16     	; 0xf84 <__vector_12+0x76>
     f74:	86 e1       	ldi	r24, 0x16	; 22
     f76:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     f78:	aa da       	rcall	.-2732   	; 0x4ce <SPI_handler_1>
     f7a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
     f84:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
     f88:	81 11       	cpse	r24, r1
     f8a:	08 c0       	rjmp	.+16     	; 0xf9c <__vector_12+0x8e>
     f8c:	82 e1       	ldi	r24, 0x12	; 18
     f8e:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     f90:	7f da       	rcall	.-2818   	; 0x490 <SPI_handler_0>
     f92:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}
}
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0b be       	out	0x3b, r0	; 59
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of the reed switch)
{
     fc2:	1f 92       	push	r1
     fc4:	0f 92       	push	r0
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	0f 92       	push	r0
     fca:	11 24       	eor	r1, r1
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
	u16_speed_count ++ ;
     fd0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16_speed_count>
     fd4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16_speed_count+0x1>
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <u16_speed_count+0x1>
     fde:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u16_speed_count>
}
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.24
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     ff0:	8f 92       	push	r8
     ff2:	9f 92       	push	r9
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	00 d0       	rcall	.+0      	; 0x100a <handle_current_sensor+0x1a>
    100a:	00 d0       	rcall	.+0      	; 0x100c <handle_current_sensor+0x1c>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	4a d5       	rcall	.+2708   	; 0x1aac <__floatunsisf>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 ea       	ldi	r20, 0xA0	; 160
    101e:	50 e4       	ldi	r21, 0x40	; 64
    1020:	fb d5       	rcall	.+3062   	; 0x1c18 <__mulsf3>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	59 e3       	ldi	r21, 0x39	; 57
    102a:	f6 d5       	rcall	.+3052   	; 0x1c18 <__mulsf3>
    102c:	29 e2       	ldi	r18, 0x29	; 41
    102e:	3c e5       	ldi	r19, 0x5C	; 92
    1030:	4f e0       	ldi	r20, 0x0F	; 15
    1032:	50 e4       	ldi	r21, 0x40	; 64
    1034:	39 d4       	rcall	.+2162   	; 0x18a8 <__subsf3>
    1036:	23 ec       	ldi	r18, 0xC3	; 195
    1038:	34 e6       	ldi	r19, 0x64	; 100
    103a:	4a e2       	ldi	r20, 0x2A	; 42
    103c:	5d e3       	ldi	r21, 0x3D	; 61
    103e:	9d d4       	rcall	.+2362   	; 0x197a <__divsf3>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e4       	ldi	r20, 0x40	; 64
    1046:	50 e4       	ldi	r21, 0x40	; 64
    1048:	98 d4       	rcall	.+2352   	; 0x197a <__divsf3>
    104a:	69 83       	std	Y+1, r22	; 0x01
    104c:	7a 83       	std	Y+2, r23	; 0x02
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current-1.76);// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
    1052:	69 81       	ldd	r22, Y+1	; 0x01
    1054:	7a 81       	ldd	r23, Y+2	; 0x02
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	2e ea       	ldi	r18, 0xAE	; 174
    105c:	37 e4       	ldi	r19, 0x47	; 71
    105e:	41 ee       	ldi	r20, 0xE1	; 225
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	22 d4       	rcall	.+2116   	; 0x18a8 <__subsf3>
    1064:	69 83       	std	Y+1, r22	; 0x01
    1066:	7a 83       	std	Y+2, r23	; 0x02
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	9c 83       	std	Y+4, r25	; 0x04
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    106c:	89 80       	ldd	r8, Y+1	; 0x01
    106e:	9a 80       	ldd	r9, Y+2	; 0x02
    1070:	ab 80       	ldd	r10, Y+3	; 0x03
    1072:	bc 80       	ldd	r11, Y+4	; 0x04
    1074:	26 e6       	ldi	r18, 0x66	; 102
    1076:	36 e6       	ldi	r19, 0x66	; 102
    1078:	46 e6       	ldi	r20, 0x66	; 102
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	f8 01       	movw	r30, r16
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	c8 d5       	rcall	.+2960   	; 0x1c18 <__mulsf3>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	2d ec       	ldi	r18, 0xCD	; 205
    108e:	3c ec       	ldi	r19, 0xCC	; 204
    1090:	4c ec       	ldi	r20, 0xCC	; 204
    1092:	5d e3       	ldi	r21, 0x3D	; 61
    1094:	c5 01       	movw	r24, r10
    1096:	b4 01       	movw	r22, r8
    1098:	bf d5       	rcall	.+2942   	; 0x1c18 <__mulsf3>
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
    10a2:	03 d4       	rcall	.+2054   	; 0x18aa <__addsf3>
    10a4:	f8 01       	movw	r30, r16
    10a6:	60 83       	st	Z, r22
    10a8:	71 83       	std	Z+1, r23	; 0x01
    10aa:	82 83       	std	Z+2, r24	; 0x02
    10ac:	93 83       	std	Z+3, r25	; 0x03
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
    10ce:	08 95       	ret

000010d0 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	00 d0       	rcall	.+0      	; 0x10da <handle_temp_sensor+0xa>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <handle_temp_sensor+0xc>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	e2 d4       	rcall	.+2500   	; 0x1aac <__floatunsisf>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 ea       	ldi	r20, 0xA0	; 160
    10ee:	50 e4       	ldi	r21, 0x40	; 64
    10f0:	93 d5       	rcall	.+2854   	; 0x1c18 <__mulsf3>
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e8       	ldi	r20, 0x80	; 128
    10f8:	59 e3       	ldi	r21, 0x39	; 57
    10fa:	8e d5       	rcall	.+2844   	; 0x1c18 <__mulsf3>
    10fc:	69 83       	std	Y+1, r22	; 0x01
    10fe:	7a 83       	std	Y+2, r23	; 0x02
    1100:	8b 83       	std	Y+3, r24	; 0x03
    1102:	9c 83       	std	Y+4, r25	; 0x04
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    1104:	69 81       	ldd	r22, Y+1	; 0x01
    1106:	7a 81       	ldd	r23, Y+2	; 0x02
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	2d ec       	ldi	r18, 0xCD	; 205
    110e:	3c ec       	ldi	r19, 0xCC	; 204
    1110:	4c e6       	ldi	r20, 0x6C	; 108
    1112:	50 e4       	ldi	r21, 0x40	; 64
    1114:	2e d4       	rcall	.+2140   	; 0x1972 <__cmpsf2>
    1116:	18 16       	cp	r1, r24
    1118:	8c f0       	brlt	.+34     	; 0x113c <__stack+0x3d>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
    111a:	69 81       	ldd	r22, Y+1	; 0x01
    111c:	7a 81       	ldd	r23, Y+2	; 0x02
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 ea       	ldi	r20, 0xA0	; 160
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	76 d5       	rcall	.+2796   	; 0x1c18 <__mulsf3>
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 eb       	ldi	r20, 0xB0	; 176
    1132:	51 e4       	ldi	r21, 0x41	; 65
    1134:	b9 d3       	rcall	.+1906   	; 0x18a8 <__subsf3>
    1136:	8e d4       	rcall	.+2332   	; 0x1a54 <__fixunssfsi>
    1138:	f8 01       	movw	r30, r16
    113a:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    113c:	69 81       	ldd	r22, Y+1	; 0x01
    113e:	7a 81       	ldd	r23, Y+2	; 0x02
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	26 e6       	ldi	r18, 0x66	; 102
    1146:	36 e6       	ldi	r19, 0x66	; 102
    1148:	46 e9       	ldi	r20, 0x96	; 150
    114a:	50 e4       	ldi	r21, 0x40	; 64
    114c:	12 d4       	rcall	.+2084   	; 0x1972 <__cmpsf2>
    114e:	18 16       	cp	r1, r24
    1150:	e4 f0       	brlt	.+56     	; 0x118a <__stack+0x8b>
    1152:	69 81       	ldd	r22, Y+1	; 0x01
    1154:	7a 81       	ldd	r23, Y+2	; 0x02
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	2d ec       	ldi	r18, 0xCD	; 205
    115c:	3c ec       	ldi	r19, 0xCC	; 204
    115e:	4c e6       	ldi	r20, 0x6C	; 108
    1160:	50 e4       	ldi	r21, 0x40	; 64
    1162:	56 d5       	rcall	.+2732   	; 0x1c10 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    1164:	18 16       	cp	r1, r24
    1166:	8c f4       	brge	.+34     	; 0x118a <__stack+0x8b>
    1168:	69 81       	ldd	r22, Y+1	; 0x01
    116a:	7a 81       	ldd	r23, Y+2	; 0x02
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4e e5       	ldi	r20, 0x5E	; 94
    1176:	52 e4       	ldi	r21, 0x42	; 66
    1178:	4f d5       	rcall	.+2718   	; 0x1c18 <__mulsf3>
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e8       	ldi	r19, 0x80	; 128
    117e:	4b e1       	ldi	r20, 0x1B	; 27
    1180:	53 e4       	ldi	r21, 0x43	; 67
    1182:	92 d3       	rcall	.+1828   	; 0x18a8 <__subsf3>
    1184:	67 d4       	rcall	.+2254   	; 0x1a54 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
    1186:	f8 01       	movw	r30, r16
    1188:	60 83       	st	Z, r22
    118a:	69 81       	ldd	r22, Y+1	; 0x01
    118c:	7a 81       	ldd	r23, Y+2	; 0x02
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	26 e6       	ldi	r18, 0x66	; 102
    1194:	36 e6       	ldi	r19, 0x66	; 102
    1196:	46 e9       	ldi	r20, 0x96	; 150
    1198:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
    119a:	3a d5       	rcall	.+2676   	; 0x1c10 <__gesf2>
    119c:	18 16       	cp	r1, r24
    119e:	8c f4       	brge	.+34     	; 0x11c2 <__stack+0xc3>
    11a0:	69 81       	ldd	r22, Y+1	; 0x01
    11a2:	7a 81       	ldd	r23, Y+2	; 0x02
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	48 e4       	ldi	r20, 0x48	; 72
    11ae:	53 e4       	ldi	r21, 0x43	; 67
    11b0:	33 d5       	rcall	.+2662   	; 0x1c18 <__mulsf3>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	42 e5       	ldi	r20, 0x52	; 82
    11b8:	54 e4       	ldi	r21, 0x44	; 68
    11ba:	76 d3       	rcall	.+1772   	; 0x18a8 <__subsf3>
    11bc:	4b d4       	rcall	.+2198   	; 0x1a54 <__fixunssfsi>
	}
}
    11be:	f8 01       	movw	r30, r16
    11c0:	60 83       	st	Z, r22
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    11d4:	8f 92       	push	r8
    11d6:	9f 92       	push	r9
    11d8:	af 92       	push	r10
    11da:	bf 92       	push	r11
    11dc:	ef 92       	push	r14
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	ec 01       	movw	r28, r24
    11e8:	4a 01       	movw	r8, r20
    11ea:	5b 01       	movw	r10, r22
    11ec:	c9 01       	movw	r24, r18
    11ee:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    11f0:	a5 01       	movw	r20, r10
    11f2:	94 01       	movw	r18, r8
    11f4:	11 d5       	rcall	.+2594   	; 0x1c18 <__mulsf3>
    11f6:	4b 01       	movw	r8, r22
    11f8:	5c 01       	movw	r10, r24
    11fa:	6e 2d       	mov	r22, r14
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	54 d4       	rcall	.+2216   	; 0x1aac <__floatunsisf>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	c5 01       	movw	r24, r10
    120a:	b4 01       	movw	r22, r8
    120c:	05 d5       	rcall	.+2570   	; 0x1c18 <__mulsf3>
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	4a e7       	ldi	r20, 0x7A	; 122
    1214:	54 e4       	ldi	r21, 0x44	; 68
    1216:	b1 d3       	rcall	.+1890   	; 0x197a <__divsf3>
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	68 81       	ld	r22, Y
    121e:	79 81       	ldd	r23, Y+1	; 0x01
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	9b 81       	ldd	r25, Y+3	; 0x03
    1224:	42 d3       	rcall	.+1668   	; 0x18aa <__addsf3>
    1226:	68 83       	st	Y, r22
    1228:	79 83       	std	Y+1, r23	; 0x01
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	9b 83       	std	Y+3, r25	; 0x03
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ef 90       	pop	r14
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	08 95       	ret

00001242 <err_check>:

void err_check(ModuleValues_t * vals) 
{
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
	if ((vals->f32_batt_volt < MAX_AMP || vals->f32_batt_volt > 100.0) && vals->motor_status != ERR) //under voltage. When the voltage is too low, the external ADC is not working properly and gives a huge voltage value.
    1258:	c8 84       	ldd	r12, Y+8	; 0x08
    125a:	d9 84       	ldd	r13, Y+9	; 0x09
    125c:	ea 84       	ldd	r14, Y+10	; 0x0a
    125e:	fb 84       	ldd	r15, Y+11	; 0x0b
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e7       	ldi	r20, 0x70	; 112
    1266:	51 e4       	ldi	r21, 0x41	; 65
    1268:	c7 01       	movw	r24, r14
    126a:	b6 01       	movw	r22, r12
    126c:	82 d3       	rcall	.+1796   	; 0x1972 <__cmpsf2>
    126e:	88 23       	and	r24, r24
    1270:	4c f0       	brlt	.+18     	; 0x1284 <err_check+0x42>
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	48 ec       	ldi	r20, 0xC8	; 200
    1278:	52 e4       	ldi	r21, 0x42	; 66
    127a:	c7 01       	movw	r24, r14
    127c:	b6 01       	movw	r22, r12
    127e:	c8 d4       	rcall	.+2448   	; 0x1c10 <__gesf2>
    1280:	18 16       	cp	r1, r24
    1282:	24 f4       	brge	.+8      	; 0x128c <err_check+0x4a>
    1284:	8e 89       	ldd	r24, Y+22	; 0x16
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	09 f0       	breq	.+2      	; 0x128c <err_check+0x4a>
	{
		vals->motor_status = OFF;
    128a:	1e 8a       	std	Y+22, r1	; 0x16
	}
	
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
    128c:	88 80       	ld	r8, Y
    128e:	99 80       	ldd	r9, Y+1	; 0x01
    1290:	aa 80       	ldd	r10, Y+2	; 0x02
    1292:	bb 80       	ldd	r11, Y+3	; 0x03
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e7       	ldi	r20, 0x70	; 112
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	c5 01       	movw	r24, r10
    129e:	b4 01       	movw	r22, r8
    12a0:	b7 d4       	rcall	.+2414   	; 0x1c10 <__gesf2>
    12a2:	88 23       	and	r24, r24
    12a4:	b4 f4       	brge	.+44     	; 0x12d2 <err_check+0x90>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	4c e5       	ldi	r20, 0x5C	; 92
    12ac:	52 e4       	ldi	r21, 0x42	; 66
    12ae:	c7 01       	movw	r24, r14
    12b0:	b6 01       	movw	r22, r12
    12b2:	ae d4       	rcall	.+2396   	; 0x1c10 <__gesf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	4c f4       	brge	.+18     	; 0x12ca <err_check+0x88>
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	48 ec       	ldi	r20, 0xC8	; 200
    12be:	52 e4       	ldi	r21, 0x42	; 66
    12c0:	c7 01       	movw	r24, r14
    12c2:	b6 01       	movw	r22, r12
    12c4:	56 d3       	rcall	.+1708   	; 0x1972 <__cmpsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	24 f0       	brlt	.+8      	; 0x12d2 <err_check+0x90>
    12ca:	88 89       	ldd	r24, Y+16	; 0x10
    12cc:	84 36       	cpi	r24, 0x64	; 100
    12ce:	f0 f4       	brcc	.+60     	; 0x130c <err_check+0xca>
    12d0:	19 c0       	rjmp	.+50     	; 0x1304 <err_check+0xc2>
	{
		vals->motor_status = ERR;
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	8e 8b       	std	Y+22, r24	; 0x16
	}
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
    12d6:	88 89       	ldd	r24, Y+16	; 0x10
    12d8:	84 36       	cpi	r24, 0x64	; 100
    12da:	d0 f4       	brcc	.+52     	; 0x1310 <err_check+0xce>
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e7       	ldi	r20, 0x70	; 112
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	c5 01       	movw	r24, r10
    12e6:	b4 01       	movw	r22, r8
    12e8:	44 d3       	rcall	.+1672   	; 0x1972 <__cmpsf2>
    12ea:	88 23       	and	r24, r24
    12ec:	8c f4       	brge	.+34     	; 0x1310 <err_check+0xce>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	4c e5       	ldi	r20, 0x5C	; 92
    12f4:	52 e4       	ldi	r21, 0x42	; 66
    12f6:	c7 01       	movw	r24, r14
    12f8:	b6 01       	movw	r22, r12
    12fa:	3b d3       	rcall	.+1654   	; 0x1972 <__cmpsf2>
    12fc:	18 16       	cp	r1, r24
	{
		vals->motor_status = OFF;
    12fe:	44 f0       	brlt	.+16     	; 0x1310 <err_check+0xce>
	}
    1300:	1e 8a       	std	Y+22, r1	; 0x16
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		vals->motor_status = ERR;
	}
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
    1302:	06 c0       	rjmp	.+12     	; 0x1310 <err_check+0xce>
    1304:	8e 89       	ldd	r24, Y+22	; 0x16
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	19 f4       	brne	.+6      	; 0x1310 <err_check+0xce>
		vals->motor_status = OFF;
	}
	
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		vals->motor_status = ERR;
    130a:	e8 cf       	rjmp	.-48     	; 0x12dc <err_check+0x9a>
    130c:	84 e0       	ldi	r24, 0x04	; 4
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
	{
		vals->motor_status = OFF;
	}
    130e:	8e 8b       	std	Y+22, r24	; 0x16
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	bf 90       	pop	r11
    131e:	af 90       	pop	r10
    1320:	9f 90       	pop	r9
    1322:	8f 90       	pop	r8
    1324:	08 95       	ret

00001326 <Set_ADC_Channel_ext>:
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	91 05       	cpc	r25, r1
    132c:	88 f5       	brcc	.+98     	; 0x1390 <Set_ADC_Channel_ext+0x6a>
    132e:	fc 01       	movw	r30, r24
    1330:	e6 5b       	subi	r30, 0xB6	; 182
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	d4 c4       	rjmp	.+2472   	; 0x1cde <__tablejump2__>
    1336:	86 e0       	ldi	r24, 0x06	; 6
    1338:	fb 01       	movw	r30, r22
    133a:	80 83       	st	Z, r24
    133c:	11 82       	std	Z+1, r1	; 0x01
    133e:	08 95       	ret
    1340:	86 e0       	ldi	r24, 0x06	; 6
    1342:	fb 01       	movw	r30, r22
    1344:	80 83       	st	Z, r24
    1346:	80 e4       	ldi	r24, 0x40	; 64
    1348:	81 83       	std	Z+1, r24	; 0x01
    134a:	08 95       	ret
    134c:	86 e0       	ldi	r24, 0x06	; 6
    134e:	fb 01       	movw	r30, r22
    1350:	80 83       	st	Z, r24
    1352:	80 e8       	ldi	r24, 0x80	; 128
    1354:	81 83       	std	Z+1, r24	; 0x01
    1356:	08 95       	ret
    1358:	86 e0       	ldi	r24, 0x06	; 6
    135a:	fb 01       	movw	r30, r22
    135c:	80 83       	st	Z, r24
    135e:	80 ec       	ldi	r24, 0xC0	; 192
    1360:	81 83       	std	Z+1, r24	; 0x01
    1362:	08 95       	ret
    1364:	87 e0       	ldi	r24, 0x07	; 7
    1366:	fb 01       	movw	r30, r22
    1368:	80 83       	st	Z, r24
    136a:	11 82       	std	Z+1, r1	; 0x01
    136c:	08 95       	ret
    136e:	87 e0       	ldi	r24, 0x07	; 7
    1370:	fb 01       	movw	r30, r22
    1372:	80 83       	st	Z, r24
    1374:	80 e4       	ldi	r24, 0x40	; 64
    1376:	81 83       	std	Z+1, r24	; 0x01
    1378:	08 95       	ret
    137a:	87 e0       	ldi	r24, 0x07	; 7
    137c:	fb 01       	movw	r30, r22
    137e:	80 83       	st	Z, r24
    1380:	80 e8       	ldi	r24, 0x80	; 128
    1382:	81 83       	std	Z+1, r24	; 0x01
    1384:	08 95       	ret
    1386:	87 e0       	ldi	r24, 0x07	; 7
    1388:	fb 01       	movw	r30, r22
    138a:	80 83       	st	Z, r24
    138c:	80 ec       	ldi	r24, 0xC0	; 192
    138e:	81 83       	std	Z+1, r24	; 0x01
    1390:	08 95       	ret

00001392 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	0b b6       	in	r0, 0x3b	; 59
    139e:	0f 92       	push	r0
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	1f 92       	push	r1
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    13c0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    13c4:	80 ff       	sbrs	r24, 0
    13c6:	47 c0       	rjmp	.+142    	; 0x1456 <__vector_18+0xc4>
    13c8:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    13cc:	90 ff       	sbrs	r25, 0
    13ce:	43 c0       	rjmp	.+134    	; 0x1456 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    13d0:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    13d4:	ee ee       	ldi	r30, 0xEE	; 238
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    13dc:	80 81       	ld	r24, Z
    13de:	8f 7b       	andi	r24, 0xBF	; 191
    13e0:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    13e2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tx_off>
    13e6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <tx_on>
    13ea:	98 17       	cp	r25, r24
    13ec:	89 f1       	breq	.+98     	; 0x1450 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    13ee:	8f 70       	andi	r24, 0x0F	; 15
    13f0:	2b e0       	ldi	r18, 0x0B	; 11
    13f2:	82 9f       	mul	r24, r18
    13f4:	c0 01       	movw	r24, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	fc 01       	movw	r30, r24
    13fa:	e0 50       	subi	r30, 0x00	; 0
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	20 81       	ld	r18, Z
    1400:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    1404:	20 81       	ld	r18, Z
    1406:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    140a:	21 81       	ldd	r18, Z+1	; 0x01
    140c:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    1410:	23 81       	ldd	r18, Z+3	; 0x03
    1412:	aa ef       	ldi	r26, 0xFA	; 250
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    1418:	24 81       	ldd	r18, Z+4	; 0x04
    141a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    141c:	25 81       	ldd	r18, Z+5	; 0x05
    141e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    1420:	26 81       	ldd	r18, Z+6	; 0x06
    1422:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    1424:	27 81       	ldd	r18, Z+7	; 0x07
    1426:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    1428:	20 85       	ldd	r18, Z+8	; 0x08
    142a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    142c:	21 85       	ldd	r18, Z+9	; 0x09
    142e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    1430:	22 85       	ldd	r18, Z+10	; 0x0a
    1432:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    1434:	fc 01       	movw	r30, r24
    1436:	ee 5f       	subi	r30, 0xFE	; 254
    1438:	fd 4f       	sbci	r31, 0xFD	; 253
    143a:	80 81       	ld	r24, Z
    143c:	8f 70       	andi	r24, 0x0F	; 15
    143e:	80 64       	ori	r24, 0x40	; 64
    1440:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    1444:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tx_off>
    1448:	8f 5f       	subi	r24, 0xFF	; 255
    144a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_off>
    144e:	7d c0       	rjmp	.+250    	; 0x154a <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    1450:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <tx_busy>
    1454:	7a c0       	rjmp	.+244    	; 0x154a <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    1456:	81 ff       	sbrs	r24, 1
    1458:	78 c0       	rjmp	.+240    	; 0x154a <__vector_18+0x1b8>
    145a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    145e:	81 ff       	sbrs	r24, 1
    1460:	74 c0       	rjmp	.+232    	; 0x154a <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    1462:	80 e1       	ldi	r24, 0x10	; 16
    1464:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    1468:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rx_on>
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <rx_off>
    1474:	29 1b       	sub	r18, r25
    1476:	31 09       	sbc	r19, r1
    1478:	2f 77       	andi	r18, 0x7F	; 127
    147a:	33 27       	eor	r19, r19
    147c:	20 31       	cpi	r18, 0x10	; 16
    147e:	31 05       	cpc	r19, r1
    1480:	0c f0       	brlt	.+2      	; 0x1484 <__vector_18+0xf2>
    1482:	58 c0       	rjmp	.+176    	; 0x1534 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    1484:	e8 2f       	mov	r30, r24
    1486:	ef 70       	andi	r30, 0x0F	; 15
    1488:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    148c:	2e 2f       	mov	r18, r30
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	4b e0       	ldi	r20, 0x0B	; 11
    1492:	e4 9f       	mul	r30, r20
    1494:	f0 01       	movw	r30, r0
    1496:	11 24       	eor	r1, r1
    1498:	e0 5b       	subi	r30, 0xB0	; 176
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	9f 70       	andi	r25, 0x0F	; 15
    149e:	42 81       	ldd	r20, Z+2	; 0x02
    14a0:	40 7f       	andi	r20, 0xF0	; 240
    14a2:	94 2b       	or	r25, r20
    14a4:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    14a6:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    14aa:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    14ae:	40 7e       	andi	r20, 0xE0	; 224
    14b0:	97 70       	andi	r25, 0x07	; 7
    14b2:	94 2b       	or	r25, r20
    14b4:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    14b6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    14ba:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    14bc:	aa ef       	ldi	r26, 0xFA	; 250
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	9c 91       	ld	r25, X
    14c2:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    14c4:	9c 91       	ld	r25, X
    14c6:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    14c8:	9c 91       	ld	r25, X
    14ca:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    14cc:	9c 91       	ld	r25, X
    14ce:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    14d0:	9c 91       	ld	r25, X
    14d2:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    14d4:	9c 91       	ld	r25, X
    14d6:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    14d8:	9c 91       	ld	r25, X
    14da:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    14dc:	9c 91       	ld	r25, X
    14de:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    14e6:	40 81       	ld	r20, Z
    14e8:	42 95       	swap	r20
    14ea:	46 95       	lsr	r20
    14ec:	47 70       	andi	r20, 0x07	; 7
    14ee:	51 81       	ldd	r21, Z+1	; 0x01
    14f0:	65 2f       	mov	r22, r21
    14f2:	66 0f       	add	r22, r22
    14f4:	66 0f       	add	r22, r22
    14f6:	66 0f       	add	r22, r22
    14f8:	86 2f       	mov	r24, r22
    14fa:	84 2b       	or	r24, r20
    14fc:	95 2f       	mov	r25, r21
    14fe:	92 95       	swap	r25
    1500:	96 95       	lsr	r25
    1502:	97 70       	andi	r25, 0x07	; 7
    1504:	89 2b       	or	r24, r25
    1506:	b1 f4       	brne	.+44     	; 0x1534 <__vector_18+0x1a2>
    1508:	8b e0       	ldi	r24, 0x0B	; 11
    150a:	82 9f       	mul	r24, r18
    150c:	f0 01       	movw	r30, r0
    150e:	83 9f       	mul	r24, r19
    1510:	f0 0d       	add	r31, r0
    1512:	11 24       	eor	r1, r1
    1514:	e0 5b       	subi	r30, 0xB0	; 176
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	83 81       	ldd	r24, Z+3	; 0x03
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	59 f4       	brne	.+22     	; 0x1534 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    151e:	98 e0       	ldi	r25, 0x08	; 8
    1520:	88 e1       	ldi	r24, 0x18	; 24
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	a8 95       	wdr
    1528:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1532:	ff cf       	rjmp	.-2      	; 0x1532 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    1534:	ee ee       	ldi	r30, 0xEE	; 238
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    153c:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    153e:	80 81       	ld	r24, Z
    1540:	8f 7d       	andi	r24, 0xDF	; 223
    1542:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    1544:	80 e8       	ldi	r24, 0x80	; 128
    1546:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    154a:	0f 90       	pop	r0
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	ff 91       	pop	r31
    1552:	ef 91       	pop	r30
    1554:	bf 91       	pop	r27
    1556:	af 91       	pop	r26
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	6f 91       	pop	r22
    155e:	5f 91       	pop	r21
    1560:	4f 91       	pop	r20
    1562:	3f 91       	pop	r19
    1564:	2f 91       	pop	r18
    1566:	0f 90       	pop	r0
    1568:	0b be       	out	0x3b, r0	; 59
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	0f 90       	pop	r0
    1570:	1f 90       	pop	r1
    1572:	18 95       	reti

00001574 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    1578:	e8 ed       	ldi	r30, 0xD8	; 216
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	21 e0       	ldi	r18, 0x01	; 1
    157e:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    1580:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    1584:	2c e0       	ldi	r18, 0x0C	; 12
    1586:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    158a:	27 e3       	ldi	r18, 0x37	; 55
    158c:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    1590:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    1594:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    1598:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    159c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    15a0:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    15a4:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    15a8:	cd ee       	ldi	r28, 0xED	; 237
    15aa:	d0 e0       	ldi	r29, 0x00	; 0
    15ac:	18 82       	st	Y, r1
	CANSTMOB = 0;
    15ae:	ae ee       	ldi	r26, 0xEE	; 238
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    15b4:	20 e1       	ldi	r18, 0x10	; 16
    15b6:	28 83       	st	Y, r18
	CANSTMOB = 0;
    15b8:	1c 92       	st	X, r1
	CANIDM4 = 0;
    15ba:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    15be:	28 2f       	mov	r18, r24
    15c0:	22 95       	swap	r18
    15c2:	22 0f       	add	r18, r18
    15c4:	20 7e       	andi	r18, 0xE0	; 224
    15c6:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    15ca:	96 95       	lsr	r25
    15cc:	87 95       	ror	r24
    15ce:	96 95       	lsr	r25
    15d0:	87 95       	ror	r24
    15d2:	96 95       	lsr	r25
    15d4:	87 95       	ror	r24
    15d6:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    15da:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    15de:	86 2f       	mov	r24, r22
    15e0:	82 95       	swap	r24
    15e2:	88 0f       	add	r24, r24
    15e4:	80 7e       	andi	r24, 0xE0	; 224
    15e6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    15ea:	76 95       	lsr	r23
    15ec:	67 95       	ror	r22
    15ee:	76 95       	lsr	r23
    15f0:	67 95       	ror	r22
    15f2:	76 95       	lsr	r23
    15f4:	67 95       	ror	r22
    15f6:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    15fa:	80 e8       	ldi	r24, 0x80	; 128
    15fc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    1606:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    160a:	80 eb       	ldi	r24, 0xB0	; 176
    160c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	80 83       	st	Z, r24

	reset = 0;
    1614:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <reset>
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1624:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <rx_off>
    1628:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <rx_on>
    162c:	24 17       	cp	r18, r20
    162e:	89 f1       	breq	.+98     	; 0x1692 <can_read_message_if_new+0x74>
    1630:	a4 2f       	mov	r26, r20
    1632:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    1634:	8b e0       	ldi	r24, 0x0B	; 11
    1636:	a8 9f       	mul	r26, r24
    1638:	b0 01       	movw	r22, r0
    163a:	11 24       	eor	r1, r1
    163c:	fb 01       	movw	r30, r22
    163e:	e0 5b       	subi	r30, 0xB0	; 176
    1640:	fe 4f       	sbci	r31, 0xFE	; 254
    1642:	20 81       	ld	r18, Z
    1644:	22 95       	swap	r18
    1646:	26 95       	lsr	r18
    1648:	27 70       	andi	r18, 0x07	; 7
    164a:	31 81       	ldd	r19, Z+1	; 0x01
    164c:	53 2f       	mov	r21, r19
    164e:	55 0f       	add	r21, r21
    1650:	55 0f       	add	r21, r21
    1652:	55 0f       	add	r21, r21
    1654:	25 2b       	or	r18, r21
    1656:	32 95       	swap	r19
    1658:	36 95       	lsr	r19
    165a:	37 70       	andi	r19, 0x07	; 7
    165c:	28 83       	st	Y, r18
    165e:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1660:	fb 01       	movw	r30, r22
    1662:	ee 5a       	subi	r30, 0xAE	; 174
    1664:	fe 4f       	sbci	r31, 0xFE	; 254
    1666:	20 81       	ld	r18, Z
    1668:	2f 70       	andi	r18, 0x0F	; 15
    166a:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    166c:	22 23       	and	r18, r18
    166e:	99 f0       	breq	.+38     	; 0x1696 <can_read_message_if_new+0x78>
    1670:	db 01       	movw	r26, r22
    1672:	ad 5a       	subi	r26, 0xAD	; 173
    1674:	be 4f       	sbci	r27, 0xFE	; 254
    1676:	fe 01       	movw	r30, r28
    1678:	33 96       	adiw	r30, 0x03	; 3
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	2d 5f       	subi	r18, 0xFD	; 253
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	ce 01       	movw	r24, r28
    1682:	82 0f       	add	r24, r18
    1684:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    1686:	2d 91       	ld	r18, X+
    1688:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    168a:	e8 17       	cp	r30, r24
    168c:	f9 07       	cpc	r31, r25
    168e:	d9 f7       	brne	.-10     	; 0x1686 <can_read_message_if_new+0x68>
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	04 c0       	rjmp	.+8      	; 0x169e <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    1696:	4f 5f       	subi	r20, 0xFF	; 255
    1698:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <rx_off>
	}

	return true;
    169c:	81 e0       	ldi	r24, 0x01	; 1
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    16aa:	ab ed       	ldi	r26, 0xDB	; 219
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	8c 91       	ld	r24, X
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	8c 93       	st	X, r24

	if (!tx_busy) {
    16b4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <tx_busy>
    16b8:	81 11       	cpse	r24, r1
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    16bc:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    16c0:	80 81       	ld	r24, Z
    16c2:	82 95       	swap	r24
    16c4:	88 0f       	add	r24, r24
    16c6:	80 7e       	andi	r24, 0xE0	; 224
    16c8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	96 95       	lsr	r25
    16d2:	87 95       	ror	r24
    16d4:	96 95       	lsr	r25
    16d6:	87 95       	ror	r24
    16d8:	96 95       	lsr	r25
    16da:	87 95       	ror	r24
    16dc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    16e0:	df 01       	movw	r26, r30
    16e2:	13 96       	adiw	r26, 0x03	; 3
    16e4:	9f 01       	movw	r18, r30
    16e6:	25 5f       	subi	r18, 0xF5	; 245
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    16ea:	ca ef       	ldi	r28, 0xFA	; 250
    16ec:	d0 e0       	ldi	r29, 0x00	; 0
    16ee:	9d 91       	ld	r25, X+
    16f0:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    16f2:	a2 17       	cp	r26, r18
    16f4:	b3 07       	cpc	r27, r19
    16f6:	d9 f7       	brne	.-10     	; 0x16ee <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	80 64       	ori	r24, 0x40	; 64
    1702:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	43 c0       	rjmp	.+134    	; 0x1790 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    170a:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <tx_on>
    170e:	82 2f       	mov	r24, r18
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <tx_off>
    1716:	83 1b       	sub	r24, r19
    1718:	91 09       	sbc	r25, r1
    171a:	8f 77       	andi	r24, 0x7F	; 127
    171c:	99 27       	eor	r25, r25
    171e:	40 97       	sbiw	r24, 0x10	; 16
    1720:	b1 f1       	breq	.+108    	; 0x178e <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1722:	a2 2f       	mov	r26, r18
    1724:	af 70       	andi	r26, 0x0F	; 15
    1726:	8b e0       	ldi	r24, 0x0B	; 11
    1728:	a8 9f       	mul	r26, r24
    172a:	d0 01       	movw	r26, r0
    172c:	11 24       	eor	r1, r1
    172e:	ed 01       	movw	r28, r26
    1730:	c0 50       	subi	r28, 0x00	; 0
    1732:	de 4f       	sbci	r29, 0xFE	; 254
    1734:	80 81       	ld	r24, Z
    1736:	98 2f       	mov	r25, r24
    1738:	92 95       	swap	r25
    173a:	99 0f       	add	r25, r25
    173c:	90 7e       	andi	r25, 0xE0	; 224
    173e:	88 81       	ld	r24, Y
    1740:	8f 71       	andi	r24, 0x1F	; 31
    1742:	89 2b       	or	r24, r25
    1744:	88 83       	st	Y, r24
    1746:	80 81       	ld	r24, Z
    1748:	98 2f       	mov	r25, r24
    174a:	96 95       	lsr	r25
    174c:	96 95       	lsr	r25
    174e:	96 95       	lsr	r25
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	80 7e       	andi	r24, 0xE0	; 224
    1754:	89 2b       	or	r24, r25
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	92 95       	swap	r25
    175c:	99 0f       	add	r25, r25
    175e:	90 7e       	andi	r25, 0xE0	; 224
    1760:	8f 71       	andi	r24, 0x1F	; 31
    1762:	89 2b       	or	r24, r25
    1764:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	98 2f       	mov	r25, r24
    176a:	9f 70       	andi	r25, 0x0F	; 15
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	80 7f       	andi	r24, 0xF0	; 240
    1770:	89 2b       	or	r24, r25
    1772:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1774:	ad 5f       	subi	r26, 0xFD	; 253
    1776:	bd 4f       	sbci	r27, 0xFD	; 253
    1778:	33 96       	adiw	r30, 0x03	; 3
    177a:	88 e0       	ldi	r24, 0x08	; 8
    177c:	01 90       	ld	r0, Z+
    177e:	0d 92       	st	X+, r0
    1780:	8a 95       	dec	r24
    1782:	e1 f7       	brne	.-8      	; 0x177c <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    1784:	2f 5f       	subi	r18, 0xFF	; 255
    1786:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <tx_on>
		result = true;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    178e:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1790:	eb ed       	ldi	r30, 0xDB	; 219
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	90 81       	ld	r25, Z
    1796:	90 68       	ori	r25, 0x80	; 128
    1798:	90 83       	st	Z, r25

	return result;
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <rgbled_turn_off>:
    17a0:	95 b1       	in	r25, 0x05	; 5
    17a2:	89 2b       	or	r24, r25
    17a4:	85 b9       	out	0x05, r24	; 5
    17a6:	08 95       	ret

000017a8 <rgbled_init>:
    17a8:	84 b1       	in	r24, 0x04	; 4
    17aa:	80 6e       	ori	r24, 0xE0	; 224
    17ac:	84 b9       	out	0x04, r24	; 4
    17ae:	80 ee       	ldi	r24, 0xE0	; 224
    17b0:	f7 cf       	rjmp	.-18     	; 0x17a0 <rgbled_turn_off>
    17b2:	08 95       	ret

000017b4 <rgbled_turn_on>:
    17b4:	95 b1       	in	r25, 0x05	; 5
    17b6:	80 95       	com	r24
    17b8:	98 23       	and	r25, r24
    17ba:	95 b9       	out	0x05, r25	; 5
    17bc:	08 95       	ret

000017be <rgbled_toggle>:
    17be:	95 b1       	in	r25, 0x05	; 5
    17c0:	89 27       	eor	r24, r25
    17c2:	85 b9       	out	0x05, r24	; 5
    17c4:	08 95       	ret

000017c6 <spi_init>:
    17c6:	94 b1       	in	r25, 0x04	; 4
    17c8:	97 60       	ori	r25, 0x07	; 7
    17ca:	94 b9       	out	0x04, r25	; 4
    17cc:	82 fb       	bst	r24, 2
    17ce:	99 27       	eor	r25, r25
    17d0:	90 f9       	bld	r25, 0
    17d2:	28 2f       	mov	r18, r24
    17d4:	22 70       	andi	r18, 0x02	; 2
    17d6:	81 70       	andi	r24, 0x01	; 1
    17d8:	80 65       	ori	r24, 0x50	; 80
    17da:	82 2b       	or	r24, r18
    17dc:	8c bd       	out	0x2c, r24	; 44
    17de:	8c b5       	in	r24, 0x2c	; 44
    17e0:	83 7f       	andi	r24, 0xF3	; 243
    17e2:	8c bd       	out	0x2c, r24	; 44
    17e4:	9d bd       	out	0x2d, r25	; 45
    17e6:	08 95       	ret

000017e8 <spi_trancieve>:
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
    17ee:	28 98       	cbi	0x05, 0	; 5
    17f0:	41 15       	cp	r20, r1
    17f2:	51 05       	cpc	r21, r1
    17f4:	c1 f0       	breq	.+48     	; 0x1826 <spi_trancieve+0x3e>
    17f6:	fb 01       	movw	r30, r22
    17f8:	dc 01       	movw	r26, r24
    17fa:	46 0f       	add	r20, r22
    17fc:	57 1f       	adc	r21, r23
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	20 97       	sbiw	r28, 0x00	; 0
    1802:	11 f0       	breq	.+4      	; 0x1808 <spi_trancieve+0x20>
    1804:	9c 91       	ld	r25, X
    1806:	01 c0       	rjmp	.+2      	; 0x180a <spi_trancieve+0x22>
    1808:	98 2f       	mov	r25, r24
    180a:	9e bd       	out	0x2e, r25	; 46
    180c:	0d b4       	in	r0, 0x2d	; 45
    180e:	07 fe       	sbrs	r0, 7
    1810:	fd cf       	rjmp	.-6      	; 0x180c <spi_trancieve+0x24>
    1812:	61 15       	cp	r22, r1
    1814:	71 05       	cpc	r23, r1
    1816:	11 f0       	breq	.+4      	; 0x181c <spi_trancieve+0x34>
    1818:	9e b5       	in	r25, 0x2e	; 46
    181a:	90 83       	st	Z, r25
    181c:	31 96       	adiw	r30, 0x01	; 1
    181e:	11 96       	adiw	r26, 0x01	; 1
    1820:	e4 17       	cp	r30, r20
    1822:	f5 07       	cpc	r31, r21
    1824:	69 f7       	brne	.-38     	; 0x1800 <spi_trancieve+0x18>
    1826:	21 11       	cpse	r18, r1
    1828:	28 9a       	sbi	0x05, 0	; 5
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

00001830 <__vector_17>:
    1830:	1f 92       	push	r1
    1832:	0f 92       	push	r0
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	0f 92       	push	r0
    1838:	11 24       	eor	r1, r1
    183a:	0b b6       	in	r0, 0x3b	; 59
    183c:	0f 92       	push	r0
    183e:	2f 93       	push	r18
    1840:	3f 93       	push	r19
    1842:	4f 93       	push	r20
    1844:	5f 93       	push	r21
    1846:	6f 93       	push	r22
    1848:	7f 93       	push	r23
    184a:	8f 93       	push	r24
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
    1854:	a0 ed       	ldi	r26, 0xD0	; 208
    1856:	b2 e0       	ldi	r27, 0x02	; 2
    1858:	e0 eb       	ldi	r30, 0xB0	; 176
    185a:	f2 e0       	ldi	r31, 0x02	; 2
    185c:	20 ed       	ldi	r18, 0xD0	; 208
    185e:	32 e0       	ldi	r19, 0x02	; 2
    1860:	8d 91       	ld	r24, X+
    1862:	88 23       	and	r24, r24
    1864:	59 f0       	breq	.+22     	; 0x187c <__vector_17+0x4c>
    1866:	40 81       	ld	r20, Z
    1868:	51 81       	ldd	r21, Z+1	; 0x01
    186a:	62 81       	ldd	r22, Z+2	; 0x02
    186c:	73 81       	ldd	r23, Z+3	; 0x03
    186e:	50 5e       	subi	r21, 0xE0	; 224
    1870:	6f 4f       	sbci	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	40 83       	st	Z, r20
    1876:	51 83       	std	Z+1, r21	; 0x01
    1878:	62 83       	std	Z+2, r22	; 0x02
    187a:	73 83       	std	Z+3, r23	; 0x03
    187c:	34 96       	adiw	r30, 0x04	; 4
    187e:	e2 17       	cp	r30, r18
    1880:	f3 07       	cpc	r31, r19
    1882:	71 f7       	brne	.-36     	; 0x1860 <__vector_17+0x30>
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	8f 91       	pop	r24
    188e:	7f 91       	pop	r23
    1890:	6f 91       	pop	r22
    1892:	5f 91       	pop	r21
    1894:	4f 91       	pop	r20
    1896:	3f 91       	pop	r19
    1898:	2f 91       	pop	r18
    189a:	0f 90       	pop	r0
    189c:	0b be       	out	0x3b, r0	; 59
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <__subsf3>:
    18a8:	50 58       	subi	r21, 0x80	; 128

000018aa <__addsf3>:
    18aa:	bb 27       	eor	r27, r27
    18ac:	aa 27       	eor	r26, r26
    18ae:	0e d0       	rcall	.+28     	; 0x18cc <__addsf3x>
    18b0:	75 c1       	rjmp	.+746    	; 0x1b9c <__fp_round>
    18b2:	66 d1       	rcall	.+716    	; 0x1b80 <__fp_pscA>
    18b4:	30 f0       	brcs	.+12     	; 0x18c2 <__addsf3+0x18>
    18b6:	6b d1       	rcall	.+726    	; 0x1b8e <__fp_pscB>
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__addsf3+0x18>
    18ba:	31 f4       	brne	.+12     	; 0x18c8 <__addsf3+0x1e>
    18bc:	9f 3f       	cpi	r25, 0xFF	; 255
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__addsf3+0x1a>
    18c0:	1e f4       	brtc	.+6      	; 0x18c8 <__addsf3+0x1e>
    18c2:	5b c1       	rjmp	.+694    	; 0x1b7a <__fp_nan>
    18c4:	0e f4       	brtc	.+2      	; 0x18c8 <__addsf3+0x1e>
    18c6:	e0 95       	com	r30
    18c8:	e7 fb       	bst	r30, 7
    18ca:	51 c1       	rjmp	.+674    	; 0x1b6e <__fp_inf>

000018cc <__addsf3x>:
    18cc:	e9 2f       	mov	r30, r25
    18ce:	77 d1       	rcall	.+750    	; 0x1bbe <__fp_split3>
    18d0:	80 f3       	brcs	.-32     	; 0x18b2 <__addsf3+0x8>
    18d2:	ba 17       	cp	r27, r26
    18d4:	62 07       	cpc	r22, r18
    18d6:	73 07       	cpc	r23, r19
    18d8:	84 07       	cpc	r24, r20
    18da:	95 07       	cpc	r25, r21
    18dc:	18 f0       	brcs	.+6      	; 0x18e4 <__addsf3x+0x18>
    18de:	71 f4       	brne	.+28     	; 0x18fc <__addsf3x+0x30>
    18e0:	9e f5       	brtc	.+102    	; 0x1948 <__addsf3x+0x7c>
    18e2:	8f c1       	rjmp	.+798    	; 0x1c02 <__fp_zero>
    18e4:	0e f4       	brtc	.+2      	; 0x18e8 <__addsf3x+0x1c>
    18e6:	e0 95       	com	r30
    18e8:	0b 2e       	mov	r0, r27
    18ea:	ba 2f       	mov	r27, r26
    18ec:	a0 2d       	mov	r26, r0
    18ee:	0b 01       	movw	r0, r22
    18f0:	b9 01       	movw	r22, r18
    18f2:	90 01       	movw	r18, r0
    18f4:	0c 01       	movw	r0, r24
    18f6:	ca 01       	movw	r24, r20
    18f8:	a0 01       	movw	r20, r0
    18fa:	11 24       	eor	r1, r1
    18fc:	ff 27       	eor	r31, r31
    18fe:	59 1b       	sub	r21, r25
    1900:	99 f0       	breq	.+38     	; 0x1928 <__addsf3x+0x5c>
    1902:	59 3f       	cpi	r21, 0xF9	; 249
    1904:	50 f4       	brcc	.+20     	; 0x191a <__addsf3x+0x4e>
    1906:	50 3e       	cpi	r21, 0xE0	; 224
    1908:	68 f1       	brcs	.+90     	; 0x1964 <__addsf3x+0x98>
    190a:	1a 16       	cp	r1, r26
    190c:	f0 40       	sbci	r31, 0x00	; 0
    190e:	a2 2f       	mov	r26, r18
    1910:	23 2f       	mov	r18, r19
    1912:	34 2f       	mov	r19, r20
    1914:	44 27       	eor	r20, r20
    1916:	58 5f       	subi	r21, 0xF8	; 248
    1918:	f3 cf       	rjmp	.-26     	; 0x1900 <__addsf3x+0x34>
    191a:	46 95       	lsr	r20
    191c:	37 95       	ror	r19
    191e:	27 95       	ror	r18
    1920:	a7 95       	ror	r26
    1922:	f0 40       	sbci	r31, 0x00	; 0
    1924:	53 95       	inc	r21
    1926:	c9 f7       	brne	.-14     	; 0x191a <__addsf3x+0x4e>
    1928:	7e f4       	brtc	.+30     	; 0x1948 <__addsf3x+0x7c>
    192a:	1f 16       	cp	r1, r31
    192c:	ba 0b       	sbc	r27, r26
    192e:	62 0b       	sbc	r22, r18
    1930:	73 0b       	sbc	r23, r19
    1932:	84 0b       	sbc	r24, r20
    1934:	ba f0       	brmi	.+46     	; 0x1964 <__addsf3x+0x98>
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	a1 f0       	breq	.+40     	; 0x1962 <__addsf3x+0x96>
    193a:	ff 0f       	add	r31, r31
    193c:	bb 1f       	adc	r27, r27
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	c2 f7       	brpl	.-16     	; 0x1936 <__addsf3x+0x6a>
    1946:	0e c0       	rjmp	.+28     	; 0x1964 <__addsf3x+0x98>
    1948:	ba 0f       	add	r27, r26
    194a:	62 1f       	adc	r22, r18
    194c:	73 1f       	adc	r23, r19
    194e:	84 1f       	adc	r24, r20
    1950:	48 f4       	brcc	.+18     	; 0x1964 <__addsf3x+0x98>
    1952:	87 95       	ror	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	b7 95       	ror	r27
    195a:	f7 95       	ror	r31
    195c:	9e 3f       	cpi	r25, 0xFE	; 254
    195e:	08 f0       	brcs	.+2      	; 0x1962 <__addsf3x+0x96>
    1960:	b3 cf       	rjmp	.-154    	; 0x18c8 <__addsf3+0x1e>
    1962:	93 95       	inc	r25
    1964:	88 0f       	add	r24, r24
    1966:	08 f0       	brcs	.+2      	; 0x196a <__addsf3x+0x9e>
    1968:	99 27       	eor	r25, r25
    196a:	ee 0f       	add	r30, r30
    196c:	97 95       	ror	r25
    196e:	87 95       	ror	r24
    1970:	08 95       	ret

00001972 <__cmpsf2>:
    1972:	d9 d0       	rcall	.+434    	; 0x1b26 <__fp_cmp>
    1974:	08 f4       	brcc	.+2      	; 0x1978 <__cmpsf2+0x6>
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	08 95       	ret

0000197a <__divsf3>:
    197a:	0c d0       	rcall	.+24     	; 0x1994 <__divsf3x>
    197c:	0f c1       	rjmp	.+542    	; 0x1b9c <__fp_round>
    197e:	07 d1       	rcall	.+526    	; 0x1b8e <__fp_pscB>
    1980:	40 f0       	brcs	.+16     	; 0x1992 <__divsf3+0x18>
    1982:	fe d0       	rcall	.+508    	; 0x1b80 <__fp_pscA>
    1984:	30 f0       	brcs	.+12     	; 0x1992 <__divsf3+0x18>
    1986:	21 f4       	brne	.+8      	; 0x1990 <__divsf3+0x16>
    1988:	5f 3f       	cpi	r21, 0xFF	; 255
    198a:	19 f0       	breq	.+6      	; 0x1992 <__divsf3+0x18>
    198c:	f0 c0       	rjmp	.+480    	; 0x1b6e <__fp_inf>
    198e:	51 11       	cpse	r21, r1
    1990:	39 c1       	rjmp	.+626    	; 0x1c04 <__fp_szero>
    1992:	f3 c0       	rjmp	.+486    	; 0x1b7a <__fp_nan>

00001994 <__divsf3x>:
    1994:	14 d1       	rcall	.+552    	; 0x1bbe <__fp_split3>
    1996:	98 f3       	brcs	.-26     	; 0x197e <__divsf3+0x4>

00001998 <__divsf3_pse>:
    1998:	99 23       	and	r25, r25
    199a:	c9 f3       	breq	.-14     	; 0x198e <__divsf3+0x14>
    199c:	55 23       	and	r21, r21
    199e:	b1 f3       	breq	.-20     	; 0x198c <__divsf3+0x12>
    19a0:	95 1b       	sub	r25, r21
    19a2:	55 0b       	sbc	r21, r21
    19a4:	bb 27       	eor	r27, r27
    19a6:	aa 27       	eor	r26, r26
    19a8:	62 17       	cp	r22, r18
    19aa:	73 07       	cpc	r23, r19
    19ac:	84 07       	cpc	r24, r20
    19ae:	38 f0       	brcs	.+14     	; 0x19be <__divsf3_pse+0x26>
    19b0:	9f 5f       	subi	r25, 0xFF	; 255
    19b2:	5f 4f       	sbci	r21, 0xFF	; 255
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	44 1f       	adc	r20, r20
    19ba:	aa 1f       	adc	r26, r26
    19bc:	a9 f3       	breq	.-22     	; 0x19a8 <__divsf3_pse+0x10>
    19be:	33 d0       	rcall	.+102    	; 0x1a26 <__divsf3_pse+0x8e>
    19c0:	0e 2e       	mov	r0, r30
    19c2:	3a f0       	brmi	.+14     	; 0x19d2 <__divsf3_pse+0x3a>
    19c4:	e0 e8       	ldi	r30, 0x80	; 128
    19c6:	30 d0       	rcall	.+96     	; 0x1a28 <__divsf3_pse+0x90>
    19c8:	91 50       	subi	r25, 0x01	; 1
    19ca:	50 40       	sbci	r21, 0x00	; 0
    19cc:	e6 95       	lsr	r30
    19ce:	00 1c       	adc	r0, r0
    19d0:	ca f7       	brpl	.-14     	; 0x19c4 <__divsf3_pse+0x2c>
    19d2:	29 d0       	rcall	.+82     	; 0x1a26 <__divsf3_pse+0x8e>
    19d4:	fe 2f       	mov	r31, r30
    19d6:	27 d0       	rcall	.+78     	; 0x1a26 <__divsf3_pse+0x8e>
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	88 1f       	adc	r24, r24
    19de:	bb 1f       	adc	r27, r27
    19e0:	26 17       	cp	r18, r22
    19e2:	37 07       	cpc	r19, r23
    19e4:	48 07       	cpc	r20, r24
    19e6:	ab 07       	cpc	r26, r27
    19e8:	b0 e8       	ldi	r27, 0x80	; 128
    19ea:	09 f0       	breq	.+2      	; 0x19ee <__divsf3_pse+0x56>
    19ec:	bb 0b       	sbc	r27, r27
    19ee:	80 2d       	mov	r24, r0
    19f0:	bf 01       	movw	r22, r30
    19f2:	ff 27       	eor	r31, r31
    19f4:	93 58       	subi	r25, 0x83	; 131
    19f6:	5f 4f       	sbci	r21, 0xFF	; 255
    19f8:	2a f0       	brmi	.+10     	; 0x1a04 <__divsf3_pse+0x6c>
    19fa:	9e 3f       	cpi	r25, 0xFE	; 254
    19fc:	51 05       	cpc	r21, r1
    19fe:	68 f0       	brcs	.+26     	; 0x1a1a <__divsf3_pse+0x82>
    1a00:	b6 c0       	rjmp	.+364    	; 0x1b6e <__fp_inf>
    1a02:	00 c1       	rjmp	.+512    	; 0x1c04 <__fp_szero>
    1a04:	5f 3f       	cpi	r21, 0xFF	; 255
    1a06:	ec f3       	brlt	.-6      	; 0x1a02 <__divsf3_pse+0x6a>
    1a08:	98 3e       	cpi	r25, 0xE8	; 232
    1a0a:	dc f3       	brlt	.-10     	; 0x1a02 <__divsf3_pse+0x6a>
    1a0c:	86 95       	lsr	r24
    1a0e:	77 95       	ror	r23
    1a10:	67 95       	ror	r22
    1a12:	b7 95       	ror	r27
    1a14:	f7 95       	ror	r31
    1a16:	9f 5f       	subi	r25, 0xFF	; 255
    1a18:	c9 f7       	brne	.-14     	; 0x1a0c <__divsf3_pse+0x74>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	91 1d       	adc	r25, r1
    1a1e:	96 95       	lsr	r25
    1a20:	87 95       	ror	r24
    1a22:	97 f9       	bld	r25, 7
    1a24:	08 95       	ret
    1a26:	e1 e0       	ldi	r30, 0x01	; 1
    1a28:	66 0f       	add	r22, r22
    1a2a:	77 1f       	adc	r23, r23
    1a2c:	88 1f       	adc	r24, r24
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	62 17       	cp	r22, r18
    1a32:	73 07       	cpc	r23, r19
    1a34:	84 07       	cpc	r24, r20
    1a36:	ba 07       	cpc	r27, r26
    1a38:	20 f0       	brcs	.+8      	; 0x1a42 <__divsf3_pse+0xaa>
    1a3a:	62 1b       	sub	r22, r18
    1a3c:	73 0b       	sbc	r23, r19
    1a3e:	84 0b       	sbc	r24, r20
    1a40:	ba 0b       	sbc	r27, r26
    1a42:	ee 1f       	adc	r30, r30
    1a44:	88 f7       	brcc	.-30     	; 0x1a28 <__divsf3_pse+0x90>
    1a46:	e0 95       	com	r30
    1a48:	08 95       	ret

00001a4a <__fixsfsi>:
    1a4a:	04 d0       	rcall	.+8      	; 0x1a54 <__fixunssfsi>
    1a4c:	68 94       	set
    1a4e:	b1 11       	cpse	r27, r1
    1a50:	d9 c0       	rjmp	.+434    	; 0x1c04 <__fp_szero>
    1a52:	08 95       	ret

00001a54 <__fixunssfsi>:
    1a54:	bc d0       	rcall	.+376    	; 0x1bce <__fp_splitA>
    1a56:	88 f0       	brcs	.+34     	; 0x1a7a <__fixunssfsi+0x26>
    1a58:	9f 57       	subi	r25, 0x7F	; 127
    1a5a:	90 f0       	brcs	.+36     	; 0x1a80 <__fixunssfsi+0x2c>
    1a5c:	b9 2f       	mov	r27, r25
    1a5e:	99 27       	eor	r25, r25
    1a60:	b7 51       	subi	r27, 0x17	; 23
    1a62:	a0 f0       	brcs	.+40     	; 0x1a8c <__fixunssfsi+0x38>
    1a64:	d1 f0       	breq	.+52     	; 0x1a9a <__fixunssfsi+0x46>
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	1a f0       	brmi	.+6      	; 0x1a76 <__fixunssfsi+0x22>
    1a70:	ba 95       	dec	r27
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <__fixunssfsi+0x12>
    1a74:	12 c0       	rjmp	.+36     	; 0x1a9a <__fixunssfsi+0x46>
    1a76:	b1 30       	cpi	r27, 0x01	; 1
    1a78:	81 f0       	breq	.+32     	; 0x1a9a <__fixunssfsi+0x46>
    1a7a:	c3 d0       	rcall	.+390    	; 0x1c02 <__fp_zero>
    1a7c:	b1 e0       	ldi	r27, 0x01	; 1
    1a7e:	08 95       	ret
    1a80:	c0 c0       	rjmp	.+384    	; 0x1c02 <__fp_zero>
    1a82:	67 2f       	mov	r22, r23
    1a84:	78 2f       	mov	r23, r24
    1a86:	88 27       	eor	r24, r24
    1a88:	b8 5f       	subi	r27, 0xF8	; 248
    1a8a:	39 f0       	breq	.+14     	; 0x1a9a <__fixunssfsi+0x46>
    1a8c:	b9 3f       	cpi	r27, 0xF9	; 249
    1a8e:	cc f3       	brlt	.-14     	; 0x1a82 <__fixunssfsi+0x2e>
    1a90:	86 95       	lsr	r24
    1a92:	77 95       	ror	r23
    1a94:	67 95       	ror	r22
    1a96:	b3 95       	inc	r27
    1a98:	d9 f7       	brne	.-10     	; 0x1a90 <__fixunssfsi+0x3c>
    1a9a:	3e f4       	brtc	.+14     	; 0x1aaa <__fixunssfsi+0x56>
    1a9c:	90 95       	com	r25
    1a9e:	80 95       	com	r24
    1aa0:	70 95       	com	r23
    1aa2:	61 95       	neg	r22
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	08 95       	ret

00001aac <__floatunsisf>:
    1aac:	e8 94       	clt
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <__floatsisf+0x12>

00001ab0 <__floatsisf>:
    1ab0:	97 fb       	bst	r25, 7
    1ab2:	3e f4       	brtc	.+14     	; 0x1ac2 <__floatsisf+0x12>
    1ab4:	90 95       	com	r25
    1ab6:	80 95       	com	r24
    1ab8:	70 95       	com	r23
    1aba:	61 95       	neg	r22
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	99 23       	and	r25, r25
    1ac4:	a9 f0       	breq	.+42     	; 0x1af0 <__floatsisf+0x40>
    1ac6:	f9 2f       	mov	r31, r25
    1ac8:	96 e9       	ldi	r25, 0x96	; 150
    1aca:	bb 27       	eor	r27, r27
    1acc:	93 95       	inc	r25
    1ace:	f6 95       	lsr	r31
    1ad0:	87 95       	ror	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	b7 95       	ror	r27
    1ad8:	f1 11       	cpse	r31, r1
    1ada:	f8 cf       	rjmp	.-16     	; 0x1acc <__floatsisf+0x1c>
    1adc:	fa f4       	brpl	.+62     	; 0x1b1c <__floatsisf+0x6c>
    1ade:	bb 0f       	add	r27, r27
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <__floatsisf+0x36>
    1ae2:	60 ff       	sbrs	r22, 0
    1ae4:	1b c0       	rjmp	.+54     	; 0x1b1c <__floatsisf+0x6c>
    1ae6:	6f 5f       	subi	r22, 0xFF	; 255
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	8f 4f       	sbci	r24, 0xFF	; 255
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	16 c0       	rjmp	.+44     	; 0x1b1c <__floatsisf+0x6c>
    1af0:	88 23       	and	r24, r24
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <__floatsisf+0x48>
    1af4:	96 e9       	ldi	r25, 0x96	; 150
    1af6:	11 c0       	rjmp	.+34     	; 0x1b1a <__floatsisf+0x6a>
    1af8:	77 23       	and	r23, r23
    1afa:	21 f0       	breq	.+8      	; 0x1b04 <__floatsisf+0x54>
    1afc:	9e e8       	ldi	r25, 0x8E	; 142
    1afe:	87 2f       	mov	r24, r23
    1b00:	76 2f       	mov	r23, r22
    1b02:	05 c0       	rjmp	.+10     	; 0x1b0e <__floatsisf+0x5e>
    1b04:	66 23       	and	r22, r22
    1b06:	71 f0       	breq	.+28     	; 0x1b24 <__floatsisf+0x74>
    1b08:	96 e8       	ldi	r25, 0x86	; 134
    1b0a:	86 2f       	mov	r24, r22
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	2a f0       	brmi	.+10     	; 0x1b1c <__floatsisf+0x6c>
    1b12:	9a 95       	dec	r25
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	da f7       	brpl	.-10     	; 0x1b12 <__floatsisf+0x62>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	96 95       	lsr	r25
    1b20:	87 95       	ror	r24
    1b22:	97 f9       	bld	r25, 7
    1b24:	08 95       	ret

00001b26 <__fp_cmp>:
    1b26:	99 0f       	add	r25, r25
    1b28:	00 08       	sbc	r0, r0
    1b2a:	55 0f       	add	r21, r21
    1b2c:	aa 0b       	sbc	r26, r26
    1b2e:	e0 e8       	ldi	r30, 0x80	; 128
    1b30:	fe ef       	ldi	r31, 0xFE	; 254
    1b32:	16 16       	cp	r1, r22
    1b34:	17 06       	cpc	r1, r23
    1b36:	e8 07       	cpc	r30, r24
    1b38:	f9 07       	cpc	r31, r25
    1b3a:	c0 f0       	brcs	.+48     	; 0x1b6c <__fp_cmp+0x46>
    1b3c:	12 16       	cp	r1, r18
    1b3e:	13 06       	cpc	r1, r19
    1b40:	e4 07       	cpc	r30, r20
    1b42:	f5 07       	cpc	r31, r21
    1b44:	98 f0       	brcs	.+38     	; 0x1b6c <__fp_cmp+0x46>
    1b46:	62 1b       	sub	r22, r18
    1b48:	73 0b       	sbc	r23, r19
    1b4a:	84 0b       	sbc	r24, r20
    1b4c:	95 0b       	sbc	r25, r21
    1b4e:	39 f4       	brne	.+14     	; 0x1b5e <__fp_cmp+0x38>
    1b50:	0a 26       	eor	r0, r26
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <__fp_cmp+0x46>
    1b54:	23 2b       	or	r18, r19
    1b56:	24 2b       	or	r18, r20
    1b58:	25 2b       	or	r18, r21
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <__fp_cmp+0x3e>
    1b5c:	08 95       	ret
    1b5e:	0a 26       	eor	r0, r26
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <__fp_cmp+0x3e>
    1b62:	a1 40       	sbci	r26, 0x01	; 1
    1b64:	a6 95       	lsr	r26
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	81 1d       	adc	r24, r1
    1b6a:	81 1d       	adc	r24, r1
    1b6c:	08 95       	ret

00001b6e <__fp_inf>:
    1b6e:	97 f9       	bld	r25, 7
    1b70:	9f 67       	ori	r25, 0x7F	; 127
    1b72:	80 e8       	ldi	r24, 0x80	; 128
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	08 95       	ret

00001b7a <__fp_nan>:
    1b7a:	9f ef       	ldi	r25, 0xFF	; 255
    1b7c:	80 ec       	ldi	r24, 0xC0	; 192
    1b7e:	08 95       	ret

00001b80 <__fp_pscA>:
    1b80:	00 24       	eor	r0, r0
    1b82:	0a 94       	dec	r0
    1b84:	16 16       	cp	r1, r22
    1b86:	17 06       	cpc	r1, r23
    1b88:	18 06       	cpc	r1, r24
    1b8a:	09 06       	cpc	r0, r25
    1b8c:	08 95       	ret

00001b8e <__fp_pscB>:
    1b8e:	00 24       	eor	r0, r0
    1b90:	0a 94       	dec	r0
    1b92:	12 16       	cp	r1, r18
    1b94:	13 06       	cpc	r1, r19
    1b96:	14 06       	cpc	r1, r20
    1b98:	05 06       	cpc	r0, r21
    1b9a:	08 95       	ret

00001b9c <__fp_round>:
    1b9c:	09 2e       	mov	r0, r25
    1b9e:	03 94       	inc	r0
    1ba0:	00 0c       	add	r0, r0
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <__fp_round+0xc>
    1ba4:	88 23       	and	r24, r24
    1ba6:	52 f0       	brmi	.+20     	; 0x1bbc <__fp_round+0x20>
    1ba8:	bb 0f       	add	r27, r27
    1baa:	40 f4       	brcc	.+16     	; 0x1bbc <__fp_round+0x20>
    1bac:	bf 2b       	or	r27, r31
    1bae:	11 f4       	brne	.+4      	; 0x1bb4 <__fp_round+0x18>
    1bb0:	60 ff       	sbrs	r22, 0
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <__fp_round+0x20>
    1bb4:	6f 5f       	subi	r22, 0xFF	; 255
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	08 95       	ret

00001bbe <__fp_split3>:
    1bbe:	57 fd       	sbrc	r21, 7
    1bc0:	90 58       	subi	r25, 0x80	; 128
    1bc2:	44 0f       	add	r20, r20
    1bc4:	55 1f       	adc	r21, r21
    1bc6:	59 f0       	breq	.+22     	; 0x1bde <__fp_splitA+0x10>
    1bc8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bca:	71 f0       	breq	.+28     	; 0x1be8 <__fp_splitA+0x1a>
    1bcc:	47 95       	ror	r20

00001bce <__fp_splitA>:
    1bce:	88 0f       	add	r24, r24
    1bd0:	97 fb       	bst	r25, 7
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <__fp_splitA+0x20>
    1bd6:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd8:	79 f0       	breq	.+30     	; 0x1bf8 <__fp_splitA+0x2a>
    1bda:	87 95       	ror	r24
    1bdc:	08 95       	ret
    1bde:	12 16       	cp	r1, r18
    1be0:	13 06       	cpc	r1, r19
    1be2:	14 06       	cpc	r1, r20
    1be4:	55 1f       	adc	r21, r21
    1be6:	f2 cf       	rjmp	.-28     	; 0x1bcc <__fp_split3+0xe>
    1be8:	46 95       	lsr	r20
    1bea:	f1 df       	rcall	.-30     	; 0x1bce <__fp_splitA>
    1bec:	08 c0       	rjmp	.+16     	; 0x1bfe <__fp_splitA+0x30>
    1bee:	16 16       	cp	r1, r22
    1bf0:	17 06       	cpc	r1, r23
    1bf2:	18 06       	cpc	r1, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	f1 cf       	rjmp	.-30     	; 0x1bda <__fp_splitA+0xc>
    1bf8:	86 95       	lsr	r24
    1bfa:	71 05       	cpc	r23, r1
    1bfc:	61 05       	cpc	r22, r1
    1bfe:	08 94       	sec
    1c00:	08 95       	ret

00001c02 <__fp_zero>:
    1c02:	e8 94       	clt

00001c04 <__fp_szero>:
    1c04:	bb 27       	eor	r27, r27
    1c06:	66 27       	eor	r22, r22
    1c08:	77 27       	eor	r23, r23
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	97 f9       	bld	r25, 7
    1c0e:	08 95       	ret

00001c10 <__gesf2>:
    1c10:	8a df       	rcall	.-236    	; 0x1b26 <__fp_cmp>
    1c12:	08 f4       	brcc	.+2      	; 0x1c16 <__gesf2+0x6>
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	08 95       	ret

00001c18 <__mulsf3>:
    1c18:	0b d0       	rcall	.+22     	; 0x1c30 <__mulsf3x>
    1c1a:	c0 cf       	rjmp	.-128    	; 0x1b9c <__fp_round>
    1c1c:	b1 df       	rcall	.-158    	; 0x1b80 <__fp_pscA>
    1c1e:	28 f0       	brcs	.+10     	; 0x1c2a <__mulsf3+0x12>
    1c20:	b6 df       	rcall	.-148    	; 0x1b8e <__fp_pscB>
    1c22:	18 f0       	brcs	.+6      	; 0x1c2a <__mulsf3+0x12>
    1c24:	95 23       	and	r25, r21
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <__mulsf3+0x12>
    1c28:	a2 cf       	rjmp	.-188    	; 0x1b6e <__fp_inf>
    1c2a:	a7 cf       	rjmp	.-178    	; 0x1b7a <__fp_nan>
    1c2c:	11 24       	eor	r1, r1
    1c2e:	ea cf       	rjmp	.-44     	; 0x1c04 <__fp_szero>

00001c30 <__mulsf3x>:
    1c30:	c6 df       	rcall	.-116    	; 0x1bbe <__fp_split3>
    1c32:	a0 f3       	brcs	.-24     	; 0x1c1c <__mulsf3+0x4>

00001c34 <__mulsf3_pse>:
    1c34:	95 9f       	mul	r25, r21
    1c36:	d1 f3       	breq	.-12     	; 0x1c2c <__mulsf3+0x14>
    1c38:	95 0f       	add	r25, r21
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	55 1f       	adc	r21, r21
    1c3e:	62 9f       	mul	r22, r18
    1c40:	f0 01       	movw	r30, r0
    1c42:	72 9f       	mul	r23, r18
    1c44:	bb 27       	eor	r27, r27
    1c46:	f0 0d       	add	r31, r0
    1c48:	b1 1d       	adc	r27, r1
    1c4a:	63 9f       	mul	r22, r19
    1c4c:	aa 27       	eor	r26, r26
    1c4e:	f0 0d       	add	r31, r0
    1c50:	b1 1d       	adc	r27, r1
    1c52:	aa 1f       	adc	r26, r26
    1c54:	64 9f       	mul	r22, r20
    1c56:	66 27       	eor	r22, r22
    1c58:	b0 0d       	add	r27, r0
    1c5a:	a1 1d       	adc	r26, r1
    1c5c:	66 1f       	adc	r22, r22
    1c5e:	82 9f       	mul	r24, r18
    1c60:	22 27       	eor	r18, r18
    1c62:	b0 0d       	add	r27, r0
    1c64:	a1 1d       	adc	r26, r1
    1c66:	62 1f       	adc	r22, r18
    1c68:	73 9f       	mul	r23, r19
    1c6a:	b0 0d       	add	r27, r0
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	62 1f       	adc	r22, r18
    1c70:	83 9f       	mul	r24, r19
    1c72:	a0 0d       	add	r26, r0
    1c74:	61 1d       	adc	r22, r1
    1c76:	22 1f       	adc	r18, r18
    1c78:	74 9f       	mul	r23, r20
    1c7a:	33 27       	eor	r19, r19
    1c7c:	a0 0d       	add	r26, r0
    1c7e:	61 1d       	adc	r22, r1
    1c80:	23 1f       	adc	r18, r19
    1c82:	84 9f       	mul	r24, r20
    1c84:	60 0d       	add	r22, r0
    1c86:	21 1d       	adc	r18, r1
    1c88:	82 2f       	mov	r24, r18
    1c8a:	76 2f       	mov	r23, r22
    1c8c:	6a 2f       	mov	r22, r26
    1c8e:	11 24       	eor	r1, r1
    1c90:	9f 57       	subi	r25, 0x7F	; 127
    1c92:	50 40       	sbci	r21, 0x00	; 0
    1c94:	8a f0       	brmi	.+34     	; 0x1cb8 <__mulsf3_pse+0x84>
    1c96:	e1 f0       	breq	.+56     	; 0x1cd0 <__mulsf3_pse+0x9c>
    1c98:	88 23       	and	r24, r24
    1c9a:	4a f0       	brmi	.+18     	; 0x1cae <__mulsf3_pse+0x7a>
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	66 1f       	adc	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	50 40       	sbci	r21, 0x00	; 0
    1cac:	a9 f7       	brne	.-22     	; 0x1c98 <__mulsf3_pse+0x64>
    1cae:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	70 f0       	brcs	.+28     	; 0x1cd0 <__mulsf3_pse+0x9c>
    1cb4:	5c cf       	rjmp	.-328    	; 0x1b6e <__fp_inf>
    1cb6:	a6 cf       	rjmp	.-180    	; 0x1c04 <__fp_szero>
    1cb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cba:	ec f3       	brlt	.-6      	; 0x1cb6 <__mulsf3_pse+0x82>
    1cbc:	98 3e       	cpi	r25, 0xE8	; 232
    1cbe:	dc f3       	brlt	.-10     	; 0x1cb6 <__mulsf3_pse+0x82>
    1cc0:	86 95       	lsr	r24
    1cc2:	77 95       	ror	r23
    1cc4:	67 95       	ror	r22
    1cc6:	b7 95       	ror	r27
    1cc8:	f7 95       	ror	r31
    1cca:	e7 95       	ror	r30
    1ccc:	9f 5f       	subi	r25, 0xFF	; 255
    1cce:	c1 f7       	brne	.-16     	; 0x1cc0 <__mulsf3_pse+0x8c>
    1cd0:	fe 2b       	or	r31, r30
    1cd2:	88 0f       	add	r24, r24
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	96 95       	lsr	r25
    1cd8:	87 95       	ror	r24
    1cda:	97 f9       	bld	r25, 7
    1cdc:	08 95       	ret

00001cde <__tablejump2__>:
    1cde:	ee 0f       	add	r30, r30
    1ce0:	ff 1f       	adc	r31, r31
    1ce2:	00 24       	eor	r0, r0
    1ce4:	00 1c       	adc	r0, r0
    1ce6:	0b be       	out	0x3b, r0	; 59
    1ce8:	07 90       	elpm	r0, Z+
    1cea:	f6 91       	elpm	r31, Z
    1cec:	e0 2d       	mov	r30, r0
    1cee:	09 94       	ijmp

00001cf0 <atoi>:
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	88 27       	eor	r24, r24
    1cf4:	99 27       	eor	r25, r25
    1cf6:	e8 94       	clt
    1cf8:	21 91       	ld	r18, Z+
    1cfa:	20 32       	cpi	r18, 0x20	; 32
    1cfc:	e9 f3       	breq	.-6      	; 0x1cf8 <atoi+0x8>
    1cfe:	29 30       	cpi	r18, 0x09	; 9
    1d00:	10 f0       	brcs	.+4      	; 0x1d06 <atoi+0x16>
    1d02:	2e 30       	cpi	r18, 0x0E	; 14
    1d04:	c8 f3       	brcs	.-14     	; 0x1cf8 <atoi+0x8>
    1d06:	2b 32       	cpi	r18, 0x2B	; 43
    1d08:	39 f0       	breq	.+14     	; 0x1d18 <atoi+0x28>
    1d0a:	2d 32       	cpi	r18, 0x2D	; 45
    1d0c:	31 f4       	brne	.+12     	; 0x1d1a <atoi+0x2a>
    1d0e:	68 94       	set
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <atoi+0x28>
    1d12:	0b d0       	rcall	.+22     	; 0x1d2a <__mulhi_const_10>
    1d14:	82 0f       	add	r24, r18
    1d16:	91 1d       	adc	r25, r1
    1d18:	21 91       	ld	r18, Z+
    1d1a:	20 53       	subi	r18, 0x30	; 48
    1d1c:	2a 30       	cpi	r18, 0x0A	; 10
    1d1e:	c8 f3       	brcs	.-14     	; 0x1d12 <atoi+0x22>
    1d20:	1e f4       	brtc	.+6      	; 0x1d28 <atoi+0x38>
    1d22:	90 95       	com	r25
    1d24:	81 95       	neg	r24
    1d26:	9f 4f       	sbci	r25, 0xFF	; 255
    1d28:	08 95       	ret

00001d2a <__mulhi_const_10>:
    1d2a:	7a e0       	ldi	r23, 0x0A	; 10
    1d2c:	97 9f       	mul	r25, r23
    1d2e:	90 2d       	mov	r25, r0
    1d30:	87 9f       	mul	r24, r23
    1d32:	80 2d       	mov	r24, r0
    1d34:	91 0d       	add	r25, r1
    1d36:	11 24       	eor	r1, r1
    1d38:	08 95       	ret

00001d3a <printf>:
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	ae 01       	movw	r20, r28
    1d44:	4b 5f       	subi	r20, 0xFB	; 251
    1d46:	5f 4f       	sbci	r21, 0xFF	; 255
    1d48:	fa 01       	movw	r30, r20
    1d4a:	61 91       	ld	r22, Z+
    1d4c:	71 91       	ld	r23, Z+
    1d4e:	af 01       	movw	r20, r30
    1d50:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <__iob+0x2>
    1d54:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <__iob+0x3>
    1d58:	08 d0       	rcall	.+16     	; 0x1d6a <vfprintf>
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	08 95       	ret

00001d60 <putchar>:
    1d60:	60 91 78 03 	lds	r22, 0x0378	; 0x800378 <__iob+0x2>
    1d64:	70 91 79 03 	lds	r23, 0x0379	; 0x800379 <__iob+0x3>
    1d68:	13 c2       	rjmp	.+1062   	; 0x2190 <fputc>

00001d6a <vfprintf>:
    1d6a:	2f 92       	push	r2
    1d6c:	3f 92       	push	r3
    1d6e:	4f 92       	push	r4
    1d70:	5f 92       	push	r5
    1d72:	6f 92       	push	r6
    1d74:	7f 92       	push	r7
    1d76:	8f 92       	push	r8
    1d78:	9f 92       	push	r9
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	2b 97       	sbiw	r28, 0x0b	; 11
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	6c 01       	movw	r12, r24
    1da0:	7b 01       	movw	r14, r22
    1da2:	8a 01       	movw	r16, r20
    1da4:	fc 01       	movw	r30, r24
    1da6:	17 82       	std	Z+7, r1	; 0x07
    1da8:	16 82       	std	Z+6, r1	; 0x06
    1daa:	83 81       	ldd	r24, Z+3	; 0x03
    1dac:	81 ff       	sbrs	r24, 1
    1dae:	bf c1       	rjmp	.+894    	; 0x212e <vfprintf+0x3c4>
    1db0:	ce 01       	movw	r24, r28
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	3c 01       	movw	r6, r24
    1db6:	f6 01       	movw	r30, r12
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	f7 01       	movw	r30, r14
    1dbc:	93 fd       	sbrc	r25, 3
    1dbe:	85 91       	lpm	r24, Z+
    1dc0:	93 ff       	sbrs	r25, 3
    1dc2:	81 91       	ld	r24, Z+
    1dc4:	7f 01       	movw	r14, r30
    1dc6:	88 23       	and	r24, r24
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <vfprintf+0x62>
    1dca:	ad c1       	rjmp	.+858    	; 0x2126 <vfprintf+0x3bc>
    1dcc:	85 32       	cpi	r24, 0x25	; 37
    1dce:	39 f4       	brne	.+14     	; 0x1dde <vfprintf+0x74>
    1dd0:	93 fd       	sbrc	r25, 3
    1dd2:	85 91       	lpm	r24, Z+
    1dd4:	93 ff       	sbrs	r25, 3
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	7f 01       	movw	r14, r30
    1dda:	85 32       	cpi	r24, 0x25	; 37
    1ddc:	21 f4       	brne	.+8      	; 0x1de6 <vfprintf+0x7c>
    1dde:	b6 01       	movw	r22, r12
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	d6 d1       	rcall	.+940    	; 0x2190 <fputc>
    1de4:	e8 cf       	rjmp	.-48     	; 0x1db6 <vfprintf+0x4c>
    1de6:	91 2c       	mov	r9, r1
    1de8:	21 2c       	mov	r2, r1
    1dea:	31 2c       	mov	r3, r1
    1dec:	ff e1       	ldi	r31, 0x1F	; 31
    1dee:	f3 15       	cp	r31, r3
    1df0:	d8 f0       	brcs	.+54     	; 0x1e28 <vfprintf+0xbe>
    1df2:	8b 32       	cpi	r24, 0x2B	; 43
    1df4:	79 f0       	breq	.+30     	; 0x1e14 <vfprintf+0xaa>
    1df6:	38 f4       	brcc	.+14     	; 0x1e06 <vfprintf+0x9c>
    1df8:	80 32       	cpi	r24, 0x20	; 32
    1dfa:	79 f0       	breq	.+30     	; 0x1e1a <vfprintf+0xb0>
    1dfc:	83 32       	cpi	r24, 0x23	; 35
    1dfe:	a1 f4       	brne	.+40     	; 0x1e28 <vfprintf+0xbe>
    1e00:	23 2d       	mov	r18, r3
    1e02:	20 61       	ori	r18, 0x10	; 16
    1e04:	1d c0       	rjmp	.+58     	; 0x1e40 <vfprintf+0xd6>
    1e06:	8d 32       	cpi	r24, 0x2D	; 45
    1e08:	61 f0       	breq	.+24     	; 0x1e22 <vfprintf+0xb8>
    1e0a:	80 33       	cpi	r24, 0x30	; 48
    1e0c:	69 f4       	brne	.+26     	; 0x1e28 <vfprintf+0xbe>
    1e0e:	23 2d       	mov	r18, r3
    1e10:	21 60       	ori	r18, 0x01	; 1
    1e12:	16 c0       	rjmp	.+44     	; 0x1e40 <vfprintf+0xd6>
    1e14:	83 2d       	mov	r24, r3
    1e16:	82 60       	ori	r24, 0x02	; 2
    1e18:	38 2e       	mov	r3, r24
    1e1a:	e3 2d       	mov	r30, r3
    1e1c:	e4 60       	ori	r30, 0x04	; 4
    1e1e:	3e 2e       	mov	r3, r30
    1e20:	2a c0       	rjmp	.+84     	; 0x1e76 <vfprintf+0x10c>
    1e22:	f3 2d       	mov	r31, r3
    1e24:	f8 60       	ori	r31, 0x08	; 8
    1e26:	1d c0       	rjmp	.+58     	; 0x1e62 <vfprintf+0xf8>
    1e28:	37 fc       	sbrc	r3, 7
    1e2a:	2d c0       	rjmp	.+90     	; 0x1e86 <vfprintf+0x11c>
    1e2c:	20 ed       	ldi	r18, 0xD0	; 208
    1e2e:	28 0f       	add	r18, r24
    1e30:	2a 30       	cpi	r18, 0x0A	; 10
    1e32:	40 f0       	brcs	.+16     	; 0x1e44 <vfprintf+0xda>
    1e34:	8e 32       	cpi	r24, 0x2E	; 46
    1e36:	b9 f4       	brne	.+46     	; 0x1e66 <vfprintf+0xfc>
    1e38:	36 fc       	sbrc	r3, 6
    1e3a:	75 c1       	rjmp	.+746    	; 0x2126 <vfprintf+0x3bc>
    1e3c:	23 2d       	mov	r18, r3
    1e3e:	20 64       	ori	r18, 0x40	; 64
    1e40:	32 2e       	mov	r3, r18
    1e42:	19 c0       	rjmp	.+50     	; 0x1e76 <vfprintf+0x10c>
    1e44:	36 fe       	sbrs	r3, 6
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0xea>
    1e48:	8a e0       	ldi	r24, 0x0A	; 10
    1e4a:	98 9e       	mul	r9, r24
    1e4c:	20 0d       	add	r18, r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	92 2e       	mov	r9, r18
    1e52:	11 c0       	rjmp	.+34     	; 0x1e76 <vfprintf+0x10c>
    1e54:	ea e0       	ldi	r30, 0x0A	; 10
    1e56:	2e 9e       	mul	r2, r30
    1e58:	20 0d       	add	r18, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	22 2e       	mov	r2, r18
    1e5e:	f3 2d       	mov	r31, r3
    1e60:	f0 62       	ori	r31, 0x20	; 32
    1e62:	3f 2e       	mov	r3, r31
    1e64:	08 c0       	rjmp	.+16     	; 0x1e76 <vfprintf+0x10c>
    1e66:	8c 36       	cpi	r24, 0x6C	; 108
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <vfprintf+0x108>
    1e6a:	83 2d       	mov	r24, r3
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	38 2e       	mov	r3, r24
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <vfprintf+0x10c>
    1e72:	88 36       	cpi	r24, 0x68	; 104
    1e74:	41 f4       	brne	.+16     	; 0x1e86 <vfprintf+0x11c>
    1e76:	f7 01       	movw	r30, r14
    1e78:	93 fd       	sbrc	r25, 3
    1e7a:	85 91       	lpm	r24, Z+
    1e7c:	93 ff       	sbrs	r25, 3
    1e7e:	81 91       	ld	r24, Z+
    1e80:	7f 01       	movw	r14, r30
    1e82:	81 11       	cpse	r24, r1
    1e84:	b3 cf       	rjmp	.-154    	; 0x1dec <vfprintf+0x82>
    1e86:	98 2f       	mov	r25, r24
    1e88:	9f 7d       	andi	r25, 0xDF	; 223
    1e8a:	95 54       	subi	r25, 0x45	; 69
    1e8c:	93 30       	cpi	r25, 0x03	; 3
    1e8e:	28 f4       	brcc	.+10     	; 0x1e9a <vfprintf+0x130>
    1e90:	0c 5f       	subi	r16, 0xFC	; 252
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	9f e3       	ldi	r25, 0x3F	; 63
    1e96:	99 83       	std	Y+1, r25	; 0x01
    1e98:	0d c0       	rjmp	.+26     	; 0x1eb4 <vfprintf+0x14a>
    1e9a:	83 36       	cpi	r24, 0x63	; 99
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <vfprintf+0x140>
    1e9e:	83 37       	cpi	r24, 0x73	; 115
    1ea0:	71 f0       	breq	.+28     	; 0x1ebe <vfprintf+0x154>
    1ea2:	83 35       	cpi	r24, 0x53	; 83
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <vfprintf+0x13e>
    1ea6:	55 c0       	rjmp	.+170    	; 0x1f52 <vfprintf+0x1e8>
    1ea8:	20 c0       	rjmp	.+64     	; 0x1eea <vfprintf+0x180>
    1eaa:	f8 01       	movw	r30, r16
    1eac:	80 81       	ld	r24, Z
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	0e 5f       	subi	r16, 0xFE	; 254
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	88 24       	eor	r8, r8
    1eb6:	83 94       	inc	r8
    1eb8:	91 2c       	mov	r9, r1
    1eba:	53 01       	movw	r10, r6
    1ebc:	12 c0       	rjmp	.+36     	; 0x1ee2 <vfprintf+0x178>
    1ebe:	28 01       	movw	r4, r16
    1ec0:	f2 e0       	ldi	r31, 0x02	; 2
    1ec2:	4f 0e       	add	r4, r31
    1ec4:	51 1c       	adc	r5, r1
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	a0 80       	ld	r10, Z
    1eca:	b1 80       	ldd	r11, Z+1	; 0x01
    1ecc:	36 fe       	sbrs	r3, 6
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <vfprintf+0x16c>
    1ed0:	69 2d       	mov	r22, r9
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <vfprintf+0x170>
    1ed6:	6f ef       	ldi	r22, 0xFF	; 255
    1ed8:	7f ef       	ldi	r23, 0xFF	; 255
    1eda:	c5 01       	movw	r24, r10
    1edc:	4e d1       	rcall	.+668    	; 0x217a <strnlen>
    1ede:	4c 01       	movw	r8, r24
    1ee0:	82 01       	movw	r16, r4
    1ee2:	f3 2d       	mov	r31, r3
    1ee4:	ff 77       	andi	r31, 0x7F	; 127
    1ee6:	3f 2e       	mov	r3, r31
    1ee8:	15 c0       	rjmp	.+42     	; 0x1f14 <vfprintf+0x1aa>
    1eea:	28 01       	movw	r4, r16
    1eec:	22 e0       	ldi	r18, 0x02	; 2
    1eee:	42 0e       	add	r4, r18
    1ef0:	51 1c       	adc	r5, r1
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	a0 80       	ld	r10, Z
    1ef6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ef8:	36 fe       	sbrs	r3, 6
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <vfprintf+0x198>
    1efc:	69 2d       	mov	r22, r9
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <vfprintf+0x19c>
    1f02:	6f ef       	ldi	r22, 0xFF	; 255
    1f04:	7f ef       	ldi	r23, 0xFF	; 255
    1f06:	c5 01       	movw	r24, r10
    1f08:	2d d1       	rcall	.+602    	; 0x2164 <strnlen_P>
    1f0a:	4c 01       	movw	r8, r24
    1f0c:	f3 2d       	mov	r31, r3
    1f0e:	f0 68       	ori	r31, 0x80	; 128
    1f10:	3f 2e       	mov	r3, r31
    1f12:	82 01       	movw	r16, r4
    1f14:	33 fc       	sbrc	r3, 3
    1f16:	19 c0       	rjmp	.+50     	; 0x1f4a <vfprintf+0x1e0>
    1f18:	82 2d       	mov	r24, r2
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	88 16       	cp	r8, r24
    1f1e:	99 06       	cpc	r9, r25
    1f20:	a0 f4       	brcc	.+40     	; 0x1f4a <vfprintf+0x1e0>
    1f22:	b6 01       	movw	r22, r12
    1f24:	80 e2       	ldi	r24, 0x20	; 32
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	33 d1       	rcall	.+614    	; 0x2190 <fputc>
    1f2a:	2a 94       	dec	r2
    1f2c:	f5 cf       	rjmp	.-22     	; 0x1f18 <vfprintf+0x1ae>
    1f2e:	f5 01       	movw	r30, r10
    1f30:	37 fc       	sbrc	r3, 7
    1f32:	85 91       	lpm	r24, Z+
    1f34:	37 fe       	sbrs	r3, 7
    1f36:	81 91       	ld	r24, Z+
    1f38:	5f 01       	movw	r10, r30
    1f3a:	b6 01       	movw	r22, r12
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	28 d1       	rcall	.+592    	; 0x2190 <fputc>
    1f40:	21 10       	cpse	r2, r1
    1f42:	2a 94       	dec	r2
    1f44:	21 e0       	ldi	r18, 0x01	; 1
    1f46:	82 1a       	sub	r8, r18
    1f48:	91 08       	sbc	r9, r1
    1f4a:	81 14       	cp	r8, r1
    1f4c:	91 04       	cpc	r9, r1
    1f4e:	79 f7       	brne	.-34     	; 0x1f2e <vfprintf+0x1c4>
    1f50:	e1 c0       	rjmp	.+450    	; 0x2114 <vfprintf+0x3aa>
    1f52:	84 36       	cpi	r24, 0x64	; 100
    1f54:	11 f0       	breq	.+4      	; 0x1f5a <vfprintf+0x1f0>
    1f56:	89 36       	cpi	r24, 0x69	; 105
    1f58:	39 f5       	brne	.+78     	; 0x1fa8 <vfprintf+0x23e>
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	37 fe       	sbrs	r3, 7
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <vfprintf+0x204>
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	0c 5f       	subi	r16, 0xFC	; 252
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	08 c0       	rjmp	.+16     	; 0x1f7e <vfprintf+0x214>
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	07 2e       	mov	r0, r23
    1f74:	00 0c       	add	r0, r0
    1f76:	88 0b       	sbc	r24, r24
    1f78:	99 0b       	sbc	r25, r25
    1f7a:	0e 5f       	subi	r16, 0xFE	; 254
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	f3 2d       	mov	r31, r3
    1f80:	ff 76       	andi	r31, 0x6F	; 111
    1f82:	3f 2e       	mov	r3, r31
    1f84:	97 ff       	sbrs	r25, 7
    1f86:	09 c0       	rjmp	.+18     	; 0x1f9a <vfprintf+0x230>
    1f88:	90 95       	com	r25
    1f8a:	80 95       	com	r24
    1f8c:	70 95       	com	r23
    1f8e:	61 95       	neg	r22
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	8f 4f       	sbci	r24, 0xFF	; 255
    1f94:	9f 4f       	sbci	r25, 0xFF	; 255
    1f96:	f0 68       	ori	r31, 0x80	; 128
    1f98:	3f 2e       	mov	r3, r31
    1f9a:	2a e0       	ldi	r18, 0x0A	; 10
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	a3 01       	movw	r20, r6
    1fa0:	33 d1       	rcall	.+614    	; 0x2208 <__ultoa_invert>
    1fa2:	88 2e       	mov	r8, r24
    1fa4:	86 18       	sub	r8, r6
    1fa6:	44 c0       	rjmp	.+136    	; 0x2030 <vfprintf+0x2c6>
    1fa8:	85 37       	cpi	r24, 0x75	; 117
    1faa:	31 f4       	brne	.+12     	; 0x1fb8 <vfprintf+0x24e>
    1fac:	23 2d       	mov	r18, r3
    1fae:	2f 7e       	andi	r18, 0xEF	; 239
    1fb0:	b2 2e       	mov	r11, r18
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	25 c0       	rjmp	.+74     	; 0x2002 <vfprintf+0x298>
    1fb8:	93 2d       	mov	r25, r3
    1fba:	99 7f       	andi	r25, 0xF9	; 249
    1fbc:	b9 2e       	mov	r11, r25
    1fbe:	8f 36       	cpi	r24, 0x6F	; 111
    1fc0:	c1 f0       	breq	.+48     	; 0x1ff2 <vfprintf+0x288>
    1fc2:	18 f4       	brcc	.+6      	; 0x1fca <vfprintf+0x260>
    1fc4:	88 35       	cpi	r24, 0x58	; 88
    1fc6:	79 f0       	breq	.+30     	; 0x1fe6 <vfprintf+0x27c>
    1fc8:	ae c0       	rjmp	.+348    	; 0x2126 <vfprintf+0x3bc>
    1fca:	80 37       	cpi	r24, 0x70	; 112
    1fcc:	19 f0       	breq	.+6      	; 0x1fd4 <vfprintf+0x26a>
    1fce:	88 37       	cpi	r24, 0x78	; 120
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <vfprintf+0x270>
    1fd2:	a9 c0       	rjmp	.+338    	; 0x2126 <vfprintf+0x3bc>
    1fd4:	e9 2f       	mov	r30, r25
    1fd6:	e0 61       	ori	r30, 0x10	; 16
    1fd8:	be 2e       	mov	r11, r30
    1fda:	b4 fe       	sbrs	r11, 4
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <vfprintf+0x28e>
    1fde:	fb 2d       	mov	r31, r11
    1fe0:	f4 60       	ori	r31, 0x04	; 4
    1fe2:	bf 2e       	mov	r11, r31
    1fe4:	09 c0       	rjmp	.+18     	; 0x1ff8 <vfprintf+0x28e>
    1fe6:	34 fe       	sbrs	r3, 4
    1fe8:	0a c0       	rjmp	.+20     	; 0x1ffe <vfprintf+0x294>
    1fea:	29 2f       	mov	r18, r25
    1fec:	26 60       	ori	r18, 0x06	; 6
    1fee:	b2 2e       	mov	r11, r18
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <vfprintf+0x294>
    1ff2:	28 e0       	ldi	r18, 0x08	; 8
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	05 c0       	rjmp	.+10     	; 0x2002 <vfprintf+0x298>
    1ff8:	20 e1       	ldi	r18, 0x10	; 16
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <vfprintf+0x298>
    1ffe:	20 e1       	ldi	r18, 0x10	; 16
    2000:	32 e0       	ldi	r19, 0x02	; 2
    2002:	f8 01       	movw	r30, r16
    2004:	b7 fe       	sbrs	r11, 7
    2006:	07 c0       	rjmp	.+14     	; 0x2016 <vfprintf+0x2ac>
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	0c 5f       	subi	r16, 0xFC	; 252
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
    2014:	06 c0       	rjmp	.+12     	; 0x2022 <vfprintf+0x2b8>
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 5f       	subi	r16, 0xFE	; 254
    2020:	1f 4f       	sbci	r17, 0xFF	; 255
    2022:	a3 01       	movw	r20, r6
    2024:	f1 d0       	rcall	.+482    	; 0x2208 <__ultoa_invert>
    2026:	88 2e       	mov	r8, r24
    2028:	86 18       	sub	r8, r6
    202a:	fb 2d       	mov	r31, r11
    202c:	ff 77       	andi	r31, 0x7F	; 127
    202e:	3f 2e       	mov	r3, r31
    2030:	36 fe       	sbrs	r3, 6
    2032:	0d c0       	rjmp	.+26     	; 0x204e <vfprintf+0x2e4>
    2034:	23 2d       	mov	r18, r3
    2036:	2e 7f       	andi	r18, 0xFE	; 254
    2038:	a2 2e       	mov	r10, r18
    203a:	89 14       	cp	r8, r9
    203c:	58 f4       	brcc	.+22     	; 0x2054 <vfprintf+0x2ea>
    203e:	34 fe       	sbrs	r3, 4
    2040:	0b c0       	rjmp	.+22     	; 0x2058 <vfprintf+0x2ee>
    2042:	32 fc       	sbrc	r3, 2
    2044:	09 c0       	rjmp	.+18     	; 0x2058 <vfprintf+0x2ee>
    2046:	83 2d       	mov	r24, r3
    2048:	8e 7e       	andi	r24, 0xEE	; 238
    204a:	a8 2e       	mov	r10, r24
    204c:	05 c0       	rjmp	.+10     	; 0x2058 <vfprintf+0x2ee>
    204e:	b8 2c       	mov	r11, r8
    2050:	a3 2c       	mov	r10, r3
    2052:	03 c0       	rjmp	.+6      	; 0x205a <vfprintf+0x2f0>
    2054:	b8 2c       	mov	r11, r8
    2056:	01 c0       	rjmp	.+2      	; 0x205a <vfprintf+0x2f0>
    2058:	b9 2c       	mov	r11, r9
    205a:	a4 fe       	sbrs	r10, 4
    205c:	0f c0       	rjmp	.+30     	; 0x207c <vfprintf+0x312>
    205e:	fe 01       	movw	r30, r28
    2060:	e8 0d       	add	r30, r8
    2062:	f1 1d       	adc	r31, r1
    2064:	80 81       	ld	r24, Z
    2066:	80 33       	cpi	r24, 0x30	; 48
    2068:	21 f4       	brne	.+8      	; 0x2072 <vfprintf+0x308>
    206a:	9a 2d       	mov	r25, r10
    206c:	99 7e       	andi	r25, 0xE9	; 233
    206e:	a9 2e       	mov	r10, r25
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <vfprintf+0x31a>
    2072:	a2 fe       	sbrs	r10, 2
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <vfprintf+0x318>
    2076:	b3 94       	inc	r11
    2078:	b3 94       	inc	r11
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <vfprintf+0x31a>
    207c:	8a 2d       	mov	r24, r10
    207e:	86 78       	andi	r24, 0x86	; 134
    2080:	09 f0       	breq	.+2      	; 0x2084 <vfprintf+0x31a>
    2082:	b3 94       	inc	r11
    2084:	a3 fc       	sbrc	r10, 3
    2086:	10 c0       	rjmp	.+32     	; 0x20a8 <vfprintf+0x33e>
    2088:	a0 fe       	sbrs	r10, 0
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <vfprintf+0x32e>
    208c:	b2 14       	cp	r11, r2
    208e:	80 f4       	brcc	.+32     	; 0x20b0 <vfprintf+0x346>
    2090:	28 0c       	add	r2, r8
    2092:	92 2c       	mov	r9, r2
    2094:	9b 18       	sub	r9, r11
    2096:	0d c0       	rjmp	.+26     	; 0x20b2 <vfprintf+0x348>
    2098:	b2 14       	cp	r11, r2
    209a:	58 f4       	brcc	.+22     	; 0x20b2 <vfprintf+0x348>
    209c:	b6 01       	movw	r22, r12
    209e:	80 e2       	ldi	r24, 0x20	; 32
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	76 d0       	rcall	.+236    	; 0x2190 <fputc>
    20a4:	b3 94       	inc	r11
    20a6:	f8 cf       	rjmp	.-16     	; 0x2098 <vfprintf+0x32e>
    20a8:	b2 14       	cp	r11, r2
    20aa:	18 f4       	brcc	.+6      	; 0x20b2 <vfprintf+0x348>
    20ac:	2b 18       	sub	r2, r11
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <vfprintf+0x34a>
    20b0:	98 2c       	mov	r9, r8
    20b2:	21 2c       	mov	r2, r1
    20b4:	a4 fe       	sbrs	r10, 4
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <vfprintf+0x36c>
    20b8:	b6 01       	movw	r22, r12
    20ba:	80 e3       	ldi	r24, 0x30	; 48
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	68 d0       	rcall	.+208    	; 0x2190 <fputc>
    20c0:	a2 fe       	sbrs	r10, 2
    20c2:	16 c0       	rjmp	.+44     	; 0x20f0 <vfprintf+0x386>
    20c4:	a1 fc       	sbrc	r10, 1
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <vfprintf+0x364>
    20c8:	88 e7       	ldi	r24, 0x78	; 120
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <vfprintf+0x368>
    20ce:	88 e5       	ldi	r24, 0x58	; 88
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	b6 01       	movw	r22, r12
    20d4:	0c c0       	rjmp	.+24     	; 0x20ee <vfprintf+0x384>
    20d6:	8a 2d       	mov	r24, r10
    20d8:	86 78       	andi	r24, 0x86	; 134
    20da:	51 f0       	breq	.+20     	; 0x20f0 <vfprintf+0x386>
    20dc:	a1 fe       	sbrs	r10, 1
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <vfprintf+0x37a>
    20e0:	8b e2       	ldi	r24, 0x2B	; 43
    20e2:	01 c0       	rjmp	.+2      	; 0x20e6 <vfprintf+0x37c>
    20e4:	80 e2       	ldi	r24, 0x20	; 32
    20e6:	a7 fc       	sbrc	r10, 7
    20e8:	8d e2       	ldi	r24, 0x2D	; 45
    20ea:	b6 01       	movw	r22, r12
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	50 d0       	rcall	.+160    	; 0x2190 <fputc>
    20f0:	89 14       	cp	r8, r9
    20f2:	30 f4       	brcc	.+12     	; 0x2100 <vfprintf+0x396>
    20f4:	b6 01       	movw	r22, r12
    20f6:	80 e3       	ldi	r24, 0x30	; 48
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	4a d0       	rcall	.+148    	; 0x2190 <fputc>
    20fc:	9a 94       	dec	r9
    20fe:	f8 cf       	rjmp	.-16     	; 0x20f0 <vfprintf+0x386>
    2100:	8a 94       	dec	r8
    2102:	f3 01       	movw	r30, r6
    2104:	e8 0d       	add	r30, r8
    2106:	f1 1d       	adc	r31, r1
    2108:	80 81       	ld	r24, Z
    210a:	b6 01       	movw	r22, r12
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	40 d0       	rcall	.+128    	; 0x2190 <fputc>
    2110:	81 10       	cpse	r8, r1
    2112:	f6 cf       	rjmp	.-20     	; 0x2100 <vfprintf+0x396>
    2114:	22 20       	and	r2, r2
    2116:	09 f4       	brne	.+2      	; 0x211a <vfprintf+0x3b0>
    2118:	4e ce       	rjmp	.-868    	; 0x1db6 <vfprintf+0x4c>
    211a:	b6 01       	movw	r22, r12
    211c:	80 e2       	ldi	r24, 0x20	; 32
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	37 d0       	rcall	.+110    	; 0x2190 <fputc>
    2122:	2a 94       	dec	r2
    2124:	f7 cf       	rjmp	.-18     	; 0x2114 <vfprintf+0x3aa>
    2126:	f6 01       	movw	r30, r12
    2128:	86 81       	ldd	r24, Z+6	; 0x06
    212a:	97 81       	ldd	r25, Z+7	; 0x07
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <vfprintf+0x3c8>
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	9f ef       	ldi	r25, 0xFF	; 255
    2132:	2b 96       	adiw	r28, 0x0b	; 11
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	df 90       	pop	r13
    214c:	cf 90       	pop	r12
    214e:	bf 90       	pop	r11
    2150:	af 90       	pop	r10
    2152:	9f 90       	pop	r9
    2154:	8f 90       	pop	r8
    2156:	7f 90       	pop	r7
    2158:	6f 90       	pop	r6
    215a:	5f 90       	pop	r5
    215c:	4f 90       	pop	r4
    215e:	3f 90       	pop	r3
    2160:	2f 90       	pop	r2
    2162:	08 95       	ret

00002164 <strnlen_P>:
    2164:	fc 01       	movw	r30, r24
    2166:	05 90       	lpm	r0, Z+
    2168:	61 50       	subi	r22, 0x01	; 1
    216a:	70 40       	sbci	r23, 0x00	; 0
    216c:	01 10       	cpse	r0, r1
    216e:	d8 f7       	brcc	.-10     	; 0x2166 <strnlen_P+0x2>
    2170:	80 95       	com	r24
    2172:	90 95       	com	r25
    2174:	8e 0f       	add	r24, r30
    2176:	9f 1f       	adc	r25, r31
    2178:	08 95       	ret

0000217a <strnlen>:
    217a:	fc 01       	movw	r30, r24
    217c:	61 50       	subi	r22, 0x01	; 1
    217e:	70 40       	sbci	r23, 0x00	; 0
    2180:	01 90       	ld	r0, Z+
    2182:	01 10       	cpse	r0, r1
    2184:	d8 f7       	brcc	.-10     	; 0x217c <strnlen+0x2>
    2186:	80 95       	com	r24
    2188:	90 95       	com	r25
    218a:	8e 0f       	add	r24, r30
    218c:	9f 1f       	adc	r25, r31
    218e:	08 95       	ret

00002190 <fputc>:
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	fb 01       	movw	r30, r22
    219a:	23 81       	ldd	r18, Z+3	; 0x03
    219c:	21 fd       	sbrc	r18, 1
    219e:	03 c0       	rjmp	.+6      	; 0x21a6 <fputc+0x16>
    21a0:	8f ef       	ldi	r24, 0xFF	; 255
    21a2:	9f ef       	ldi	r25, 0xFF	; 255
    21a4:	2c c0       	rjmp	.+88     	; 0x21fe <fputc+0x6e>
    21a6:	22 ff       	sbrs	r18, 2
    21a8:	16 c0       	rjmp	.+44     	; 0x21d6 <fputc+0x46>
    21aa:	46 81       	ldd	r20, Z+6	; 0x06
    21ac:	57 81       	ldd	r21, Z+7	; 0x07
    21ae:	24 81       	ldd	r18, Z+4	; 0x04
    21b0:	35 81       	ldd	r19, Z+5	; 0x05
    21b2:	42 17       	cp	r20, r18
    21b4:	53 07       	cpc	r21, r19
    21b6:	44 f4       	brge	.+16     	; 0x21c8 <fputc+0x38>
    21b8:	a0 81       	ld	r26, Z
    21ba:	b1 81       	ldd	r27, Z+1	; 0x01
    21bc:	9d 01       	movw	r18, r26
    21be:	2f 5f       	subi	r18, 0xFF	; 255
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	31 83       	std	Z+1, r19	; 0x01
    21c4:	20 83       	st	Z, r18
    21c6:	8c 93       	st	X, r24
    21c8:	26 81       	ldd	r18, Z+6	; 0x06
    21ca:	37 81       	ldd	r19, Z+7	; 0x07
    21cc:	2f 5f       	subi	r18, 0xFF	; 255
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	37 83       	std	Z+7, r19	; 0x07
    21d2:	26 83       	std	Z+6, r18	; 0x06
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <fputc+0x6e>
    21d6:	8b 01       	movw	r16, r22
    21d8:	ec 01       	movw	r28, r24
    21da:	fb 01       	movw	r30, r22
    21dc:	00 84       	ldd	r0, Z+8	; 0x08
    21de:	f1 85       	ldd	r31, Z+9	; 0x09
    21e0:	e0 2d       	mov	r30, r0
    21e2:	09 95       	icall
    21e4:	89 2b       	or	r24, r25
    21e6:	e1 f6       	brne	.-72     	; 0x21a0 <fputc+0x10>
    21e8:	d8 01       	movw	r26, r16
    21ea:	16 96       	adiw	r26, 0x06	; 6
    21ec:	8d 91       	ld	r24, X+
    21ee:	9c 91       	ld	r25, X
    21f0:	17 97       	sbiw	r26, 0x07	; 7
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	17 96       	adiw	r26, 0x07	; 7
    21f6:	9c 93       	st	X, r25
    21f8:	8e 93       	st	-X, r24
    21fa:	16 97       	sbiw	r26, 0x06	; 6
    21fc:	ce 01       	movw	r24, r28
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	08 95       	ret

00002208 <__ultoa_invert>:
    2208:	fa 01       	movw	r30, r20
    220a:	aa 27       	eor	r26, r26
    220c:	28 30       	cpi	r18, 0x08	; 8
    220e:	51 f1       	breq	.+84     	; 0x2264 <__ultoa_invert+0x5c>
    2210:	20 31       	cpi	r18, 0x10	; 16
    2212:	81 f1       	breq	.+96     	; 0x2274 <__ultoa_invert+0x6c>
    2214:	e8 94       	clt
    2216:	6f 93       	push	r22
    2218:	6e 7f       	andi	r22, 0xFE	; 254
    221a:	6e 5f       	subi	r22, 0xFE	; 254
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	8f 4f       	sbci	r24, 0xFF	; 255
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	af 4f       	sbci	r26, 0xFF	; 255
    2224:	b1 e0       	ldi	r27, 0x01	; 1
    2226:	3e d0       	rcall	.+124    	; 0x22a4 <__ultoa_invert+0x9c>
    2228:	b4 e0       	ldi	r27, 0x04	; 4
    222a:	3c d0       	rcall	.+120    	; 0x22a4 <__ultoa_invert+0x9c>
    222c:	67 0f       	add	r22, r23
    222e:	78 1f       	adc	r23, r24
    2230:	89 1f       	adc	r24, r25
    2232:	9a 1f       	adc	r25, r26
    2234:	a1 1d       	adc	r26, r1
    2236:	68 0f       	add	r22, r24
    2238:	79 1f       	adc	r23, r25
    223a:	8a 1f       	adc	r24, r26
    223c:	91 1d       	adc	r25, r1
    223e:	a1 1d       	adc	r26, r1
    2240:	6a 0f       	add	r22, r26
    2242:	71 1d       	adc	r23, r1
    2244:	81 1d       	adc	r24, r1
    2246:	91 1d       	adc	r25, r1
    2248:	a1 1d       	adc	r26, r1
    224a:	20 d0       	rcall	.+64     	; 0x228c <__ultoa_invert+0x84>
    224c:	09 f4       	brne	.+2      	; 0x2250 <__ultoa_invert+0x48>
    224e:	68 94       	set
    2250:	3f 91       	pop	r19
    2252:	2a e0       	ldi	r18, 0x0A	; 10
    2254:	26 9f       	mul	r18, r22
    2256:	11 24       	eor	r1, r1
    2258:	30 19       	sub	r19, r0
    225a:	30 5d       	subi	r19, 0xD0	; 208
    225c:	31 93       	st	Z+, r19
    225e:	de f6       	brtc	.-74     	; 0x2216 <__ultoa_invert+0xe>
    2260:	cf 01       	movw	r24, r30
    2262:	08 95       	ret
    2264:	46 2f       	mov	r20, r22
    2266:	47 70       	andi	r20, 0x07	; 7
    2268:	40 5d       	subi	r20, 0xD0	; 208
    226a:	41 93       	st	Z+, r20
    226c:	b3 e0       	ldi	r27, 0x03	; 3
    226e:	0f d0       	rcall	.+30     	; 0x228e <__ultoa_invert+0x86>
    2270:	c9 f7       	brne	.-14     	; 0x2264 <__ultoa_invert+0x5c>
    2272:	f6 cf       	rjmp	.-20     	; 0x2260 <__ultoa_invert+0x58>
    2274:	46 2f       	mov	r20, r22
    2276:	4f 70       	andi	r20, 0x0F	; 15
    2278:	40 5d       	subi	r20, 0xD0	; 208
    227a:	4a 33       	cpi	r20, 0x3A	; 58
    227c:	18 f0       	brcs	.+6      	; 0x2284 <__ultoa_invert+0x7c>
    227e:	49 5d       	subi	r20, 0xD9	; 217
    2280:	31 fd       	sbrc	r19, 1
    2282:	40 52       	subi	r20, 0x20	; 32
    2284:	41 93       	st	Z+, r20
    2286:	02 d0       	rcall	.+4      	; 0x228c <__ultoa_invert+0x84>
    2288:	a9 f7       	brne	.-22     	; 0x2274 <__ultoa_invert+0x6c>
    228a:	ea cf       	rjmp	.-44     	; 0x2260 <__ultoa_invert+0x58>
    228c:	b4 e0       	ldi	r27, 0x04	; 4
    228e:	a6 95       	lsr	r26
    2290:	97 95       	ror	r25
    2292:	87 95       	ror	r24
    2294:	77 95       	ror	r23
    2296:	67 95       	ror	r22
    2298:	ba 95       	dec	r27
    229a:	c9 f7       	brne	.-14     	; 0x228e <__ultoa_invert+0x86>
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	61 05       	cpc	r22, r1
    22a0:	71 05       	cpc	r23, r1
    22a2:	08 95       	ret
    22a4:	9b 01       	movw	r18, r22
    22a6:	ac 01       	movw	r20, r24
    22a8:	0a 2e       	mov	r0, r26
    22aa:	06 94       	lsr	r0
    22ac:	57 95       	ror	r21
    22ae:	47 95       	ror	r20
    22b0:	37 95       	ror	r19
    22b2:	27 95       	ror	r18
    22b4:	ba 95       	dec	r27
    22b6:	c9 f7       	brne	.-14     	; 0x22aa <__ultoa_invert+0xa2>
    22b8:	62 0f       	add	r22, r18
    22ba:	73 1f       	adc	r23, r19
    22bc:	84 1f       	adc	r24, r20
    22be:	95 1f       	adc	r25, r21
    22c0:	a0 1d       	adc	r26, r0
    22c2:	08 95       	ret

000022c4 <_exit>:
    22c4:	f8 94       	cli

000022c6 <__stop_program>:
    22c6:	ff cf       	rjmp	.-2      	; 0x22c6 <__stop_program>
