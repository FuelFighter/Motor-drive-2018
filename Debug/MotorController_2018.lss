
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00002168  000021fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000248  00800142  00800142  0000223e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054df  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001988  00000000  00000000  00007c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002727  00000000  00000000  000095db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e78  00000000  00000000  0000bd04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001588  00000000  00000000  0000cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c4b  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00011d4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	cf c6       	rjmp	.+3486   	; 0xdb8 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	60 c6       	rjmp	.+3264   	; 0xcf2 <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cb c5       	rjmp	.+2966   	; 0xbd8 <__vector_16>
      42:	00 00       	nop
      44:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__vector_17>
      48:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	f5 c4       	rjmp	.+2538   	; 0xa40 <__vector_21>
      56:	00 00       	nop
      58:	d5 c4       	rjmp	.+2474   	; 0xa04 <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	18 c5       	rjmp	.+2608   	; 0xab2 <__vector_32>
      82:	00 00       	nop
      84:	f8 c4       	rjmp	.+2544   	; 0xa76 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	aa 08       	sbc	r10, r10
      96:	af 08       	sbc	r10, r15
      98:	b5 08       	sbc	r11, r5
      9a:	bb 08       	sbc	r11, r11
      9c:	c1 08       	sbc	r12, r1
      9e:	c6 08       	sbc	r12, r6
      a0:	cc 08       	sbc	r12, r12
      a2:	d2 08       	sbc	r13, r2

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e6       	ldi	r30, 0x68	; 104
      b8:	f1 e2       	ldi	r31, 0x21	; 33
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a2 34       	cpi	r26, 0x42	; 66
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	a2 e4       	ldi	r26, 0x42	; 66
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	aa 38       	cpi	r26, 0x8A	; 138
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	2d d5       	rcall	.+2650   	; 0xb36 <main>
      dc:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <f32_Integrator>
      e6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <f32_Integrator+0x1>
      ea:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <f32_Integrator+0x2>
      ee:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     11c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     120:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     124:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     128:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4e eb       	ldi	r20, 0xBE	; 190
     132:	52 e4       	ldi	r21, 0x42	; 66
     134:	c7 01       	movw	r24, r14
     136:	b6 01       	movw	r22, r12
     138:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__gesf2>
     13c:	88 23       	and	r24, r24
     13e:	54 f4       	brge	.+20     	; 0x154 <controller+0x60>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	48 e4       	ldi	r20, 0x48	; 72
     146:	52 e4       	ldi	r21, 0x42	; 66
     148:	c7 01       	movw	r24, r14
     14a:	b6 01       	movw	r22, r12
     14c:	0e 94 09 0c 	call	0x1812	; 0x1812 <__cmpsf2>
     150:	18 16       	cp	r1, r24
     152:	24 f0       	brlt	.+8      	; 0x15c <controller+0x68>
	{
		b_saturation = true ;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     15a:	02 c0       	rjmp	.+4      	; 0x160 <controller+0x6c>
		} else {
		b_saturation = false;
     15c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
	}
	
	f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     160:	a3 01       	movw	r20, r6
     162:	92 01       	movw	r18, r4
     164:	c5 01       	movw	r24, r10
     166:	b4 01       	movw	r22, r8
     168:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__subsf3>
     16c:	6b 01       	movw	r12, r22
     16e:	7c 01       	movw	r14, r24
     170:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <f32_CurrentDelta>
     174:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <f32_CurrentDelta+0x1>
     178:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <f32_CurrentDelta+0x2>
     17c:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <f32_CurrentDelta+0x3>
	
	if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     180:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     184:	81 11       	cpse	r24, r1
     186:	1c c0       	rjmp	.+56     	; 0x1c0 <controller+0xcc>
	{
		f32_Integrator+=f32_CurrentDelta*TimeStep ;
     188:	2a e0       	ldi	r18, 0x0A	; 10
     18a:	37 ed       	ldi	r19, 0xD7	; 215
     18c:	43 e2       	ldi	r20, 0x23	; 35
     18e:	5c e3       	ldi	r21, 0x3C	; 60
     190:	c7 01       	movw	r24, r14
     192:	b6 01       	movw	r22, r12
     194:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     198:	9b 01       	movw	r18, r22
     19a:	ac 01       	movw	r20, r24
     19c:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <f32_Integrator>
     1a0:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <f32_Integrator+0x1>
     1a4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <f32_Integrator+0x2>
     1a8:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <f32_Integrator+0x3>
     1ac:	0e 94 a5 0b 	call	0x174a	; 0x174a <__addsf3>
     1b0:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <f32_Integrator>
     1b4:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <f32_Integrator+0x1>
     1b8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <f32_Integrator+0x2>
     1bc:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <f32_Integrator+0x3>
	}
	
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
	f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c0:	23 e3       	ldi	r18, 0x33	; 51
     1c2:	33 e3       	ldi	r19, 0x33	; 51
     1c4:	43 e7       	ldi	r20, 0x73	; 115
     1c6:	52 e4       	ldi	r21, 0x42	; 66
     1c8:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <f32_Integrator>
     1cc:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <f32_Integrator+0x1>
     1d0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <f32_Integrator+0x2>
     1d4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <f32_Integrator+0x3>
     1d8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     1dc:	4b 01       	movw	r8, r22
     1de:	5c 01       	movw	r10, r24
     1e0:	29 ef       	ldi	r18, 0xF9	; 249
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 e7       	ldi	r20, 0x79	; 121
     1e6:	5f e3       	ldi	r21, 0x3F	; 63
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     1f0:	9b 01       	movw	r18, r22
     1f2:	ac 01       	movw	r20, r24
     1f4:	c5 01       	movw	r24, r10
     1f6:	b4 01       	movw	r22, r8
     1f8:	0e 94 a5 0b 	call	0x174a	; 0x174a <__addsf3>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	48 e4       	ldi	r20, 0x48	; 72
     202:	52 e4       	ldi	r21, 0x42	; 66
     204:	0e 94 a5 0b 	call	0x174a	; 0x174a <__addsf3>
     208:	6b 01       	movw	r12, r22
     20a:	7c 01       	movw	r14, r24
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4e eb       	ldi	r20, 0xBE	; 190
     222:	52 e4       	ldi	r21, 0x42	; 66
     224:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__gesf2>
     228:	18 16       	cp	r1, r24
     22a:	6c f4       	brge	.+26     	; 0x246 <controller+0x152>
	{
		f32_DutyCycleCmd = 95;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	ae eb       	ldi	r26, 0xBE	; 190
     232:	b2 e4       	ldi	r27, 0x42	; 66
     234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     238:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     23c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     240:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     244:	16 c0       	rjmp	.+44     	; 0x272 <controller+0x17e>
	}
	
	if (f32_DutyCycleCmd < 50)
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	48 e4       	ldi	r20, 0x48	; 72
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 09 0c 	call	0x1812	; 0x1812 <__cmpsf2>
     256:	88 23       	and	r24, r24
     258:	64 f4       	brge	.+24     	; 0x272 <controller+0x17e>
	{
		f32_DutyCycleCmd = 50;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a8 e4       	ldi	r26, 0x48	; 72
     260:	b2 e4       	ldi	r27, 0x42	; 66
     262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     26a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     26e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
     272:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     276:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	48 ec       	ldi	r20, 0xC8	; 200
     280:	52 e4       	ldi	r21, 0x42	; 66
     282:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     286:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     28e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     292:	0e 94 0d 0c 	call	0x181a	; 0x181a <__divsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	be 01       	movw	r22, r28
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
     2a4:	9b 01       	movw	r18, r22
     2a6:	ac 01       	movw	r20, r24
     2a8:	c7 01       	movw	r24, r14
     2aa:	b6 01       	movw	r22, r12
     2ac:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     2b0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fixsfsi>
     2b4:	e8 e9       	ldi	r30, 0x98	; 152
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	71 83       	std	Z+1, r23	; 0x01
     2ba:	60 83       	st	Z, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     2c4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     2c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2d8:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
     2dc:	f8 01       	movw	r30, r16
     2de:	60 83       	st	Z, r22
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	7f 90       	pop	r7
     2fa:	6f 90       	pop	r6
     2fc:	5f 90       	pop	r5
     2fe:	4f 90       	pop	r4
     300:	08 95       	ret

00000302 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     302:	24 9a       	sbi	0x04, 4	; 4
     304:	08 95       	ret

00000306 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state)
     306:	88 23       	and	r24, r24
     308:	11 f0       	breq	.+4      	; 0x30e <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     30a:	2c 9a       	sbi	0x05, 4	; 5
     30c:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     30e:	2c 98       	cbi	0x05, 4	; 5
     310:	08 95       	ret

00000312 <manage_motor>:
	}
}

void manage_motor(ModuleValues_t * vals)
{
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
	switch(vals->motor_status)
     324:	8e 89       	ldd	r24, Y+22	; 0x16
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	69 f0       	breq	.+26     	; 0x344 <manage_motor+0x32>
     32a:	30 f4       	brcc	.+12     	; 0x338 <manage_motor+0x26>
     32c:	88 23       	and	r24, r24
     32e:	09 f4       	brne	.+2      	; 0x332 <manage_motor+0x20>
     330:	48 c0       	rjmp	.+144    	; 0x3c2 <manage_motor+0xb0>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	09 f1       	breq	.+66     	; 0x378 <manage_motor+0x66>
     336:	4e c0       	rjmp	.+156    	; 0x3d4 <manage_motor+0xc2>
     338:	83 30       	cpi	r24, 0x03	; 3
     33a:	99 f1       	breq	.+102    	; 0x3a2 <manage_motor+0x90>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	09 f4       	brne	.+2      	; 0x342 <manage_motor+0x30>
     340:	45 c0       	rjmp	.+138    	; 0x3cc <manage_motor+0xba>
     342:	48 c0       	rjmp	.+144    	; 0x3d4 <manage_motor+0xc2>
	{
		case BRAKE :
			drivers(1); //drivers turn on
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	df df       	rcall	.-66     	; 0x306 <drivers>
			vals->b_driver_status = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8a 8f       	std	Y+26, r24	; 0x1a
			controller(-vals->u8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle); //negative throttle cmd
     34c:	8e 01       	movw	r16, r28
     34e:	0d 5e       	subi	r16, 0xED	; 237
     350:	1f 4f       	sbci	r17, 0xFF	; 255
     352:	c8 80       	ld	r12, Y
     354:	d9 80       	ldd	r13, Y+1	; 0x01
     356:	ea 80       	ldd	r14, Y+2	; 0x02
     358:	fb 80       	ldd	r15, Y+3	; 0x03
     35a:	6a 89       	ldd	r22, Y+18	; 0x12
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	71 95       	neg	r23
     360:	61 95       	neg	r22
     362:	71 09       	sbc	r23, r1
     364:	07 2e       	mov	r0, r23
     366:	00 0c       	add	r0, r0
     368:	88 0b       	sbc	r24, r24
     36a:	99 0b       	sbc	r25, r25
     36c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__floatsisf>
     370:	a7 01       	movw	r20, r14
     372:	96 01       	movw	r18, r12
		break;
		
		case ACCEL :
			drivers(1); //drivers turn on
     374:	bf de       	rcall	.-642    	; 0xf4 <controller>
     376:	2e c0       	rjmp	.+92     	; 0x3d4 <manage_motor+0xc2>
     378:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     37a:	c5 df       	rcall	.-118    	; 0x306 <drivers>
     37c:	81 e0       	ldi	r24, 0x01	; 1
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle);
     37e:	8a 8f       	std	Y+26, r24	; 0x1a
     380:	8e 01       	movw	r16, r28
     382:	0d 5e       	subi	r16, 0xED	; 237
     384:	1f 4f       	sbci	r17, 0xFF	; 255
     386:	c8 80       	ld	r12, Y
     388:	d9 80       	ldd	r13, Y+1	; 0x01
     38a:	ea 80       	ldd	r14, Y+2	; 0x02
     38c:	fb 80       	ldd	r15, Y+3	; 0x03
     38e:	6a 89       	ldd	r22, Y+18	; 0x12
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
     39a:	a7 01       	movw	r20, r14
		break;
     39c:	96 01       	movw	r18, r12
		
		case IDLE :
			drivers(1); //drivers turn on
     39e:	aa de       	rcall	.-684    	; 0xf4 <controller>
     3a0:	19 c0       	rjmp	.+50     	; 0x3d4 <manage_motor+0xc2>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     3a4:	b0 df       	rcall	.-160    	; 0x306 <drivers>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
			controller(0, vals->f32_motor_current, &vals->u8_duty_cycle); //current law running with 0 torque 
     3a8:	8a 8f       	std	Y+26, r24	; 0x1a
     3aa:	8e 01       	movw	r16, r28
     3ac:	0d 5e       	subi	r16, 0xED	; 237
     3ae:	1f 4f       	sbci	r17, 0xFF	; 255
     3b0:	28 81       	ld	r18, Y
     3b2:	39 81       	ldd	r19, Y+1	; 0x01
     3b4:	4a 81       	ldd	r20, Y+2	; 0x02
     3b6:	5b 81       	ldd	r21, Y+3	; 0x03
     3b8:	60 e0       	ldi	r22, 0x00	; 0
			//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
		break;
		
		case OFF : // drivers disabled
			drivers(0);//drivers shutdown
     3ba:	70 e0       	ldi	r23, 0x00	; 0
			vals->b_driver_status = 0;
     3bc:	cb 01       	movw	r24, r22
			reset_I(); //reset integrator
     3be:	9a de       	rcall	.-716    	; 0xf4 <controller>
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <manage_motor+0xc2>
		break;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
		
		case ERR :
			drivers(0);//drivers shutdown
     3c4:	a0 df       	rcall	.-192    	; 0x306 <drivers>
     3c6:	1a 8e       	std	Y+26, r1	; 0x1a
     3c8:	8c de       	rcall	.-744    	; 0xe2 <reset_I>
			vals->b_driver_status = 0;
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <manage_motor+0xc2>
			reset_I(); //reset integrator
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	9b df       	rcall	.-202    	; 0x306 <drivers>
		break;
	}
     3d0:	1a 8e       	std	Y+26, r1	; 0x1a
     3d2:	87 de       	rcall	.-754    	; 0xe2 <reset_I>
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	08 95       	ret

000003e6 <SPI_handler_0>:
static uint8_t u8_rxBuffer[3];

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     3ec:	6e e4       	ldi	r22, 0x4E	; 78
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	a8 d6       	rcall	.+3408   	; 0x1144 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	43 e0       	ldi	r20, 0x03	; 3
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	6b e4       	ldi	r22, 0x4B	; 75
     3fc:	71 e0       	ldi	r23, 0x01	; 1
     3fe:	8e e4       	ldi	r24, 0x4E	; 78
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 44 0b 	call	0x1688	; 0x1688 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     406:	eb e4       	ldi	r30, 0x4B	; 75
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	61 81       	ldd	r22, Z+1	; 0x01
     40c:	6f 71       	andi	r22, 0x1F	; 31
     40e:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg);
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	76 2f       	mov	r23, r22
     414:	66 27       	eor	r22, r22
     416:	82 81       	ldd	r24, Z+2	; 0x02
     418:	68 2b       	or	r22, r24
     41a:	ce 01       	movw	r24, r28
     41c:	f8 d4       	rcall	.+2544   	; 0xe0e <handle_current_sensor>
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     42a:	6e e4       	ldi	r22, 0x4E	; 78
     42c:	71 e0       	ldi	r23, 0x01	; 1
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	89 d6       	rcall	.+3346   	; 0x1144 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	43 e0       	ldi	r20, 0x03	; 3
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	6b e4       	ldi	r22, 0x4B	; 75
     43a:	71 e0       	ldi	r23, 0x01	; 1
     43c:	8e e4       	ldi	r24, 0x4E	; 78
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 44 0b 	call	0x1688	; 0x1688 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     444:	eb e4       	ldi	r30, 0x4B	; 75
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	61 81       	ldd	r22, Z+1	; 0x01
     44a:	6f 71       	andi	r22, 0x1F	; 31
     44c:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg);
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	76 2f       	mov	r23, r22
     452:	66 27       	eor	r22, r22
     454:	82 81       	ldd	r24, Z+2	; 0x02
     456:	68 2b       	or	r22, r24
     458:	ce 01       	movw	r24, r28
     45a:	d9 d4       	rcall	.+2482   	; 0xe0e <handle_current_sensor>
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     468:	6e e4       	ldi	r22, 0x4E	; 78
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	6a d6       	rcall	.+3284   	; 0x1144 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	43 e0       	ldi	r20, 0x03	; 3
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	6b e4       	ldi	r22, 0x4B	; 75
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	8e e4       	ldi	r24, 0x4E	; 78
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 44 0b 	call	0x1688	; 0x1688 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     482:	eb e4       	ldi	r30, 0x4B	; 75
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	61 81       	ldd	r22, Z+1	; 0x01
     488:	6f 71       	andi	r22, 0x1F	; 31
     48a:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	76 2f       	mov	r23, r22
     490:	66 27       	eor	r22, r22
     492:	82 81       	ldd	r24, Z+2	; 0x02
     494:	68 2b       	or	r22, r24
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
     49e:	23 e3       	ldi	r18, 0x33	; 51
     4a0:	33 e3       	ldi	r19, 0x33	; 51
     4a2:	44 e8       	ldi	r20, 0x84	; 132
     4a4:	52 e4       	ldi	r21, 0x42	; 66
     4a6:	0e 94 0d 0c 	call	0x181a	; 0x181a <__divsf3>
     4aa:	24 ea       	ldi	r18, 0xA4	; 164
     4ac:	30 e7       	ldi	r19, 0x70	; 112
     4ae:	4d eb       	ldi	r20, 0xBD	; 189
     4b0:	5e e3       	ldi	r21, 0x3E	; 62
     4b2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__subsf3>
     4b6:	68 83       	st	Y, r22
     4b8:	79 83       	std	Y+1, r23	; 0x01
     4ba:	8a 83       	std	Y+2, r24	; 0x02
     4bc:	9b 83       	std	Y+3, r25	; 0x03
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     4ca:	6e e4       	ldi	r22, 0x4E	; 78
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	39 d6       	rcall	.+3186   	; 0x1144 <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	43 e0       	ldi	r20, 0x03	; 3
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	6b e4       	ldi	r22, 0x4B	; 75
     4da:	71 e0       	ldi	r23, 0x01	; 1
     4dc:	8e e4       	ldi	r24, 0x4E	; 78
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 44 0b 	call	0x1688	; 0x1688 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4e4:	eb e4       	ldi	r30, 0x4B	; 75
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	61 81       	ldd	r22, Z+1	; 0x01
     4ea:	6f 71       	andi	r22, 0x1F	; 31
     4ec:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	76 2f       	mov	r23, r22
     4f2:	66 27       	eor	r22, r22
     4f4:	82 81       	ldd	r24, Z+2	; 0x02
     4f6:	68 2b       	or	r22, r24
     4f8:	ce 01       	movw	r24, r28
     4fa:	f9 d4       	rcall	.+2546   	; 0xeee <handle_temp_sensor>
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <handle_can>:

///////////////////////  CAN  /////////////////////////


//receiving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	8c 01       	movw	r16, r24
     50c:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx) && vals->motor_status != ERR){
     50e:	cb 01       	movw	r24, r22
     510:	95 d7       	rcall	.+3882   	; 0x143c <can_read_message_if_new>
     512:	88 23       	and	r24, r24
     514:	e9 f1       	breq	.+122    	; 0x590 <handle_can+0x8e>
     516:	f8 01       	movw	r30, r16
     518:	86 89       	ldd	r24, Z+22	; 0x16
     51a:	84 30       	cpi	r24, 0x04	; 4
     51c:	c9 f1       	breq	.+114    	; 0x590 <handle_can+0x8e>
		switch (rx->id){
     51e:	88 81       	ld	r24, Y
     520:	99 81       	ldd	r25, Y+1	; 0x01
     522:	80 33       	cpi	r24, 0x30	; 48
     524:	92 40       	sbci	r25, 0x02	; 2
     526:	a1 f5       	brne	.+104    	; 0x590 <handle_can+0x8e>
			case STEERING_WHEEL_CAN_ID	: //receiving can messages from the steering wheel
				
				vals->u16_watchdog = WATCHDOG_RELOAD_VALUE ; // resetting to max value each time a message is received.
     528:	84 e1       	ldi	r24, 0x14	; 20
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	f8 01       	movw	r30, r16
     52e:	95 8b       	std	Z+21, r25	; 0x15
     530:	84 8b       	std	Z+20, r24	; 0x14

				if (rx->data.u8[3] > 10)
     532:	8e 81       	ldd	r24, Y+6	; 0x06
     534:	8b 30       	cpi	r24, 0x0B	; 11
     536:	98 f0       	brcs	.+38     	; 0x55e <handle_can+0x5c>
				{
					vals->motor_status = ACCEL ;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = rx->data.u8[3]/10.0 ;
     53c:	6e 81       	ldd	r22, Y+6	; 0x06
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__floatsisf>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e2       	ldi	r20, 0x20	; 32
     54e:	51 e4       	ldi	r21, 0x41	; 65
     550:	0e 94 0d 0c 	call	0x181a	; 0x181a <__divsf3>
     554:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
     558:	f8 01       	movw	r30, r16
     55a:	62 8b       	std	Z+18, r22	; 0x12
     55c:	19 c0       	rjmp	.+50     	; 0x590 <handle_can+0x8e>
				} else {
					vals->motor_status = IDLE ;
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	f8 01       	movw	r30, r16
     562:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = 0;
     564:	12 8a       	std	Z+18, r1	; 0x12
				}
				
				if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
     566:	8d 81       	ldd	r24, Y+5	; 0x05
     568:	8a 31       	cpi	r24, 0x1A	; 26
     56a:	90 f0       	brcs	.+36     	; 0x590 <handle_can+0x8e>
				{
					vals->motor_status = BRAKE ;
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     570:	6d 81       	ldd	r22, Y+5	; 0x05
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__floatsisf>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e2       	ldi	r20, 0x20	; 32
     582:	51 e4       	ldi	r21, 0x41	; 65
     584:	0e 94 0d 0c 	call	0x181a	; 0x181a <__divsf3>
     588:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
     58c:	f8 01       	movw	r30, r16
     58e:	62 8b       	std	Z+18, r22	; 0x12
				}
			break;
		}
	}
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	08 95       	ret

0000059a <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
	
	txFrame.id = MOTOR_CAN_ID;
     5a6:	e1 ef       	ldi	r30, 0xF1	; 241
     5a8:	f2 e0       	ldi	r31, 0x02	; 2
     5aa:	20 e5       	ldi	r18, 0x50	; 80
     5ac:	34 e0       	ldi	r19, 0x04	; 4
     5ae:	31 83       	std	Z+1, r19	; 0x01
     5b0:	20 83       	st	Z, r18
	txFrame.length = 8;
     5b2:	28 e0       	ldi	r18, 0x08	; 8
     5b4:	22 83       	std	Z+2, r18	; 0x02
	
	if(*send){
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 81       	ld	r18, Z
     5ba:	22 23       	and	r18, r18
     5bc:	61 f1       	breq	.+88     	; 0x616 <handle_motor_status_can_msg+0x7c>
     5be:	eb 01       	movw	r28, r22
     5c0:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     5c2:	0f 2e       	mov	r0, r31
     5c4:	f1 ef       	ldi	r31, 0xF1	; 241
     5c6:	ef 2e       	mov	r14, r31
     5c8:	f2 e0       	ldi	r31, 0x02	; 2
     5ca:	ff 2e       	mov	r15, r31
     5cc:	f0 2d       	mov	r31, r0
     5ce:	8e 89       	ldd	r24, Y+22	; 0x16
     5d0:	f7 01       	movw	r30, r14
     5d2:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = 0;
     5d4:	14 82       	std	Z+4, r1	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     5d6:	68 81       	ld	r22, Y
     5d8:	79 81       	ldd	r23, Y+1	; 0x01
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	9b 81       	ldd	r25, Y+3	; 0x03
     5de:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
     5e2:	f7 01       	movw	r30, r14
     5e4:	76 83       	std	Z+6, r23	; 0x06
     5e6:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = (uint16_t)(vals->f32_energy*1000) ;
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	4a e7       	ldi	r20, 0x7A	; 122
     5ee:	54 e4       	ldi	r21, 0x44	; 68
     5f0:	6c 85       	ldd	r22, Y+12	; 0x0c
     5f2:	7d 85       	ldd	r23, Y+13	; 0x0d
     5f4:	8e 85       	ldd	r24, Y+14	; 0x0e
     5f6:	9f 85       	ldd	r25, Y+15	; 0x0f
     5f8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     5fc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
     600:	f7 01       	movw	r30, r14
     602:	70 87       	std	Z+8, r23	; 0x08
     604:	67 83       	std	Z+7, r22	; 0x07
		txFrame.data.u16[3] = (uint16_t)(vals->u8_car_speed) ;
     606:	89 89       	ldd	r24, Y+17	; 0x11
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	92 87       	std	Z+10, r25	; 0x0a
     60c:	81 87       	std	Z+9, r24	; 0x09
		
		can_send_message(&txFrame);
     60e:	c7 01       	movw	r24, r14
     610:	58 d7       	rcall	.+3760   	; 0x14c2 <can_send_message>
		*send = 0;
     612:	f8 01       	movw	r30, r16
     614:	10 82       	st	Z, r1
	}
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	08 95       	ret

00000624 <receive_uart>:

///////////////////  UART  ////////////////////

//receiving 
void receive_uart(ModuleValues_t * vals)
{
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	00 d0       	rcall	.+0      	; 0x62e <receive_uart+0xa>
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	fc 01       	movw	r30, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     634:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <rx0_Head>
     638:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <rx0_Tail>
	if(uart_AvailableBytes()!=0 && vals->motor_status != ERR){
     63c:	92 1b       	sub	r25, r18
     63e:	9f 71       	andi	r25, 0x1F	; 31
     640:	79 f1       	breq	.+94     	; 0x6a0 <receive_uart+0x7c>
     642:	86 89       	ldd	r24, Z+22	; 0x16
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	61 f1       	breq	.+88     	; 0x6a0 <receive_uart+0x7c>
		volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     648:	8f 01       	movw	r16, r30
     64a:	7d d1       	rcall	.+762    	; 0x946 <uart0_getint>
		uart_flush();
     64c:	9a 83       	std	Y+2, r25	; 0x02
     64e:	89 83       	std	Y+1, r24	; 0x01
		if (u16_data_received >10 && u16_data_received <= 20)
     650:	ff d0       	rcall	.+510    	; 0x850 <uart0_flush>
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	9a 81       	ldd	r25, Y+2	; 0x02
     656:	0b 97       	sbiw	r24, 0x0b	; 11
     658:	58 f0       	brcs	.+22     	; 0x670 <receive_uart+0x4c>
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	45 97       	sbiw	r24, 0x15	; 21
		{
			vals->u8_throttle_cmd = u16_data_received-10 ;
     660:	38 f4       	brcc	.+14     	; 0x670 <receive_uart+0x4c>
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	8a 50       	subi	r24, 0x0A	; 10
     668:	f8 01       	movw	r30, r16
			vals->motor_status = BRAKE ;
     66a:	82 8b       	std	Z+18, r24	; 0x12
     66c:	82 e0       	ldi	r24, 0x02	; 2
		}
		if (u16_data_received>0 && u16_data_received <= 10)
     66e:	86 8b       	std	Z+22, r24	; 0x16
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	89 2b       	or	r24, r25
     676:	51 f0       	breq	.+20     	; 0x68c <receive_uart+0x68>
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	0b 97       	sbiw	r24, 0x0b	; 11
		{
			vals->u8_throttle_cmd = u16_data_received ;
     67e:	30 f4       	brcc	.+12     	; 0x68c <receive_uart+0x68>
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	f8 01       	movw	r30, r16
			vals->motor_status = ACCEL;
     686:	82 8b       	std	Z+18, r24	; 0x12
     688:	81 e0       	ldi	r24, 0x01	; 1
		}
		if (u16_data_received == 0)
     68a:	86 8b       	std	Z+22, r24	; 0x16
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	89 2b       	or	r24, r25
		{
			vals->u8_throttle_cmd = u16_data_received ;
     692:	31 f4       	brne	.+12     	; 0x6a0 <receive_uart+0x7c>
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	f8 01       	movw	r30, r16
			vals->motor_status = IDLE;
     69a:	82 8b       	std	Z+18, r24	; 0x12
     69c:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     69e:	86 8b       	std	Z+22, r24	; 0x16
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(ModuleValues_t vals)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
	printf("%i,%i,%u,%u,%u,%u,%i",(int16_t)(vals.f32_motor_current*1000),(int16_t)(vals.f32_batt_current*1000),(uint16_t)(vals.f32_batt_volt*1000),vals.u8_car_speed,vals.u8_duty_cycle,vals.u8_motor_temp,vals.u8_throttle_cmd);
     6b6:	8f 89       	ldd	r24, Y+23	; 0x17
     6b8:	1f 92       	push	r1
     6ba:	8f 93       	push	r24
     6bc:	8d 89       	ldd	r24, Y+21	; 0x15
     6be:	1f 92       	push	r1
     6c0:	8f 93       	push	r24
     6c2:	88 8d       	ldd	r24, Y+24	; 0x18
     6c4:	1f 92       	push	r1
     6c6:	8f 93       	push	r24
     6c8:	8e 89       	ldd	r24, Y+22	; 0x16
     6ca:	1f 92       	push	r1
     6cc:	8f 93       	push	r24
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4a e7       	ldi	r20, 0x7A	; 122
     6d4:	54 e4       	ldi	r21, 0x44	; 68
     6d6:	6d 85       	ldd	r22, Y+13	; 0x0d
     6d8:	7e 85       	ldd	r23, Y+14	; 0x0e
     6da:	8f 85       	ldd	r24, Y+15	; 0x0f
     6dc:	98 89       	ldd	r25, Y+16	; 0x10
     6de:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     6e2:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
     6e6:	7f 93       	push	r23
     6e8:	6f 93       	push	r22
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	4a e7       	ldi	r20, 0x7A	; 122
     6f0:	54 e4       	ldi	r21, 0x44	; 68
     6f2:	69 85       	ldd	r22, Y+9	; 0x09
     6f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     6f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     6fa:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     6fe:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fixsfsi>
     702:	7f 93       	push	r23
     704:	6f 93       	push	r22
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	4a e7       	ldi	r20, 0x7A	; 122
     70c:	54 e4       	ldi	r21, 0x44	; 68
     70e:	6d 81       	ldd	r22, Y+5	; 0x05
     710:	7e 81       	ldd	r23, Y+6	; 0x06
     712:	8f 81       	ldd	r24, Y+7	; 0x07
     714:	98 85       	ldd	r25, Y+8	; 0x08
     716:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     71a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fixsfsi>
     71e:	7f 93       	push	r23
     720:	6f 93       	push	r22
     722:	8d e2       	ldi	r24, 0x2D	; 45
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <printf>
// 		printf("%i",-vals.u8_throttle_cmd*1000);
// 	}else
// 	{
// 		printf("%i",vals.u8_throttle_cmd*1000);
// 	}
	printf("\n");
     72e:	8a e0       	ldi	r24, 0x0A	; 10
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <putchar>
}
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(ModuleValues_t vals)
{	
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     74e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	c9 f0       	breq	.+50     	; 0x786 <manage_LEDs+0x40>
     754:	28 f4       	brcc	.+10     	; 0x760 <manage_LEDs+0x1a>
     756:	88 23       	and	r24, r24
     758:	41 f0       	breq	.+16     	; 0x76a <manage_LEDs+0x24>
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	69 f0       	breq	.+26     	; 0x778 <manage_LEDs+0x32>
     75e:	27 c0       	rjmp	.+78     	; 0x7ae <manage_LEDs+0x68>
     760:	83 30       	cpi	r24, 0x03	; 3
     762:	c1 f0       	breq	.+48     	; 0x794 <manage_LEDs+0x4e>
     764:	84 30       	cpi	r24, 0x04	; 4
     766:	e9 f0       	breq	.+58     	; 0x7a2 <manage_LEDs+0x5c>
     768:	22 c0       	rjmp	.+68     	; 0x7ae <manage_LEDs+0x68>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     76a:	80 e4       	ldi	r24, 0x40	; 64
			rgbled_turn_off(LED_RED);
     76c:	69 d7       	rcall	.+3794   	; 0x1640 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     76e:	80 e2       	ldi	r24, 0x20	; 32
     770:	67 d7       	rcall	.+3790   	; 0x1640 <rgbled_turn_off>
		break ;
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     772:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     774:	6f d7       	rcall	.+3806   	; 0x1654 <rgbled_turn_on>
     776:	1b c0       	rjmp	.+54     	; 0x7ae <manage_LEDs+0x68>
			rgbled_toggle(LED_GREEN);
     778:	80 e2       	ldi	r24, 0x20	; 32
		break;
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     77a:	62 d7       	rcall	.+3780   	; 0x1640 <rgbled_turn_off>
     77c:	80 e8       	ldi	r24, 0x80	; 128
			rgbled_turn_off(LED_BLUE);
     77e:	60 d7       	rcall	.+3776   	; 0x1640 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     780:	80 e4       	ldi	r24, 0x40	; 64
		break;
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     782:	6d d7       	rcall	.+3802   	; 0x165e <rgbled_toggle>
			rgbled_turn_off(LED_BLUE);
     784:	14 c0       	rjmp	.+40     	; 0x7ae <manage_LEDs+0x68>
     786:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_on(LED_GREEN);
     788:	5b d7       	rcall	.+3766   	; 0x1640 <rgbled_turn_off>
     78a:	80 e8       	ldi	r24, 0x80	; 128
     78c:	59 d7       	rcall	.+3762   	; 0x1640 <rgbled_turn_off>
		break;
     78e:	80 e4       	ldi	r24, 0x40	; 64
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     790:	66 d7       	rcall	.+3788   	; 0x165e <rgbled_toggle>
     792:	0d c0       	rjmp	.+26     	; 0x7ae <manage_LEDs+0x68>
     794:	80 e2       	ldi	r24, 0x20	; 32
			rgbled_turn_off(LED_BLUE);
     796:	54 d7       	rcall	.+3752   	; 0x1640 <rgbled_turn_off>
     798:	80 e8       	ldi	r24, 0x80	; 128
     79a:	52 d7       	rcall	.+3748   	; 0x1640 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     79c:	80 e4       	ldi	r24, 0x40	; 64
     79e:	5a d7       	rcall	.+3764   	; 0x1654 <rgbled_turn_on>
     7a0:	06 c0       	rjmp	.+12     	; 0x7ae <manage_LEDs+0x68>
		break;
	}
     7a2:	80 e4       	ldi	r24, 0x40	; 64
     7a4:	4d d7       	rcall	.+3738   	; 0x1640 <rgbled_turn_off>
     7a6:	80 e8       	ldi	r24, 0x80	; 128
     7a8:	4b d7       	rcall	.+3734   	; 0x1640 <rgbled_turn_off>
     7aa:	80 e2       	ldi	r24, 0x20	; 32
     7ac:	53 d7       	rcall	.+3750   	; 0x1654 <rgbled_turn_on>
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     7b4:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     7b6:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     7b8:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     7ba:	ea e6       	ldi	r30, 0x6A	; 106
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	8c 60       	ori	r24, 0x0C	; 12
     7c2:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     7c4:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     7c6:	ed 9a       	sbi	0x1d, 5	; 29
     7c8:	08 95       	ret

000007ca <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter)
{
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	1f 92       	push	r1
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	7c 01       	movw	r14, r24
     7de:	8b 01       	movw	r16, r22
	volatile uint8_t u8_new_speed = (uint8_t)(D_WHEEL*PI/N_MAG/((float)*u16_counter)); // speed calculated in mm/ms
     7e0:	fb 01       	movw	r30, r22
     7e2:	60 81       	ld	r22, Z
     7e4:	71 81       	ldd	r23, Z+1	; 0x01
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
     7ee:	9b 01       	movw	r18, r22
     7f0:	ac 01       	movw	r20, r24
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e4       	ldi	r23, 0x40	; 64
     7f6:	84 ec       	ldi	r24, 0xC4	; 196
     7f8:	94 e4       	ldi	r25, 0x44	; 68
     7fa:	0e 94 0d 0c 	call	0x181a	; 0x181a <__divsf3>
     7fe:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
     802:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	f7 01       	movw	r30, r14
     808:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     80a:	f8 01       	movw	r30, r16
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	10 82       	st	Z, r1
}
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	08 95       	ret

00000820 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     820:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <tx0_Head>
     824:	9f 5f       	subi	r25, 0xFF	; 255
     826:	9f 71       	andi	r25, 0x1F	; 31
     828:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <tx0_Tail>
     82c:	92 17       	cp	r25, r18
     82e:	e1 f3       	breq	.-8      	; 0x828 <uart0_putc+0x8>
     830:	e9 2f       	mov	r30, r25
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ec 59       	subi	r30, 0x9C	; 156
     836:	fc 4f       	sbci	r31, 0xFC	; 252
     838:	80 83       	st	Z, r24
     83a:	2f b7       	in	r18, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <tx0_Head>
     842:	e1 ec       	ldi	r30, 0xC1	; 193
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	80 62       	ori	r24, 0x20	; 32
     84a:	80 83       	st	Z, r24
     84c:	2f bf       	out	0x3f, r18	; 63
     84e:	08 95       	ret

00000850 <uart0_flush>:
     850:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <tx0_Tail>
     854:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <tx0_Head>
     858:	98 13       	cpse	r25, r24
     85a:	fa cf       	rjmp	.-12     	; 0x850 <uart0_flush>
     85c:	08 95       	ret

0000085e <uart1_putc>:
     85e:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <tx1_Head>
     862:	9f 5f       	subi	r25, 0xFF	; 255
     864:	9f 71       	andi	r25, 0x1F	; 31
     866:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <tx1_Tail>
     86a:	92 17       	cp	r25, r18
     86c:	e1 f3       	breq	.-8      	; 0x866 <uart1_putc+0x8>
     86e:	e9 2f       	mov	r30, r25
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	e1 5e       	subi	r30, 0xE1	; 225
     874:	fc 4f       	sbci	r31, 0xFC	; 252
     876:	80 83       	st	Z, r24
     878:	2f b7       	in	r18, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <tx1_Head>
     880:	e9 ec       	ldi	r30, 0xC9	; 201
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	80 62       	ori	r24, 0x20	; 32
     888:	80 83       	st	Z, r24
     88a:	2f bf       	out	0x3f, r18	; 63
     88c:	08 95       	ret

0000088e <uart_putchar>:
     88e:	cf 93       	push	r28
     890:	c8 2f       	mov	r28, r24
     892:	fb 01       	movw	r30, r22
     894:	84 85       	ldd	r24, Z+12	; 0x0c
     896:	95 85       	ldd	r25, Z+13	; 0x0d
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	39 f0       	breq	.+14     	; 0x8aa <uart_putchar+0x1c>
     89c:	ca 30       	cpi	r28, 0x0A	; 10
     89e:	11 f4       	brne	.+4      	; 0x8a4 <uart_putchar+0x16>
     8a0:	8d e0       	ldi	r24, 0x0D	; 13
     8a2:	be df       	rcall	.-132    	; 0x820 <uart0_putc>
     8a4:	8c 2f       	mov	r24, r28
     8a6:	bc df       	rcall	.-136    	; 0x820 <uart0_putc>
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <uart_putchar+0x28>
     8aa:	ca 30       	cpi	r28, 0x0A	; 10
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <uart_putchar+0x24>
     8ae:	8d e0       	ldi	r24, 0x0D	; 13
     8b0:	d6 df       	rcall	.-84     	; 0x85e <uart1_putc>
     8b2:	8c 2f       	mov	r24, r28
     8b4:	d4 df       	rcall	.-88     	; 0x85e <uart1_putc>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <uart0_getc>:
     8be:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <rx0_Tail>
     8c2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <rx0_Head>
     8c6:	89 17       	cp	r24, r25
     8c8:	59 f0       	breq	.+22     	; 0x8e0 <uart0_getc+0x22>
     8ca:	8f 5f       	subi	r24, 0xFF	; 255
     8cc:	98 2f       	mov	r25, r24
     8ce:	9f 71       	andi	r25, 0x1F	; 31
     8d0:	e9 2f       	mov	r30, r25
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e4 50       	subi	r30, 0x04	; 4
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	80 81       	ld	r24, Z
     8da:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <rx0_Tail>
     8de:	08 95       	ret
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	08 95       	ret

000008e4 <uart0_getlnToFirstWhiteSpace>:
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	7c 01       	movw	r14, r24
     8f2:	16 2f       	mov	r17, r22
     8f4:	e4 df       	rcall	.-56     	; 0x8be <uart0_getc>
     8f6:	f7 01       	movw	r30, r14
     8f8:	80 83       	st	Z, r24
     8fa:	81 32       	cpi	r24, 0x21	; 33
     8fc:	d8 f3       	brcs	.-10     	; 0x8f4 <uart0_getlnToFirstWhiteSpace+0x10>
     8fe:	e7 01       	movw	r28, r14
     900:	21 96       	adiw	r28, 0x01	; 1
     902:	12 30       	cpi	r17, 0x02	; 2
     904:	c1 f0       	breq	.+48     	; 0x936 <uart0_getlnToFirstWhiteSpace+0x52>
     906:	13 50       	subi	r17, 0x03	; 3
     908:	81 2f       	mov	r24, r17
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	02 96       	adiw	r24, 0x02	; 2
     90e:	87 01       	movw	r16, r14
     910:	08 0f       	add	r16, r24
     912:	19 1f       	adc	r17, r25
     914:	d4 df       	rcall	.-88     	; 0x8be <uart0_getc>
     916:	88 83       	st	Y, r24
     918:	88 23       	and	r24, r24
     91a:	e1 f3       	breq	.-8      	; 0x914 <uart0_getlnToFirstWhiteSpace+0x30>
     91c:	8d 30       	cpi	r24, 0x0D	; 13
     91e:	21 f4       	brne	.+8      	; 0x928 <uart0_getlnToFirstWhiteSpace+0x44>
     920:	ce df       	rcall	.-100    	; 0x8be <uart0_getc>
     922:	88 23       	and	r24, r24
     924:	e9 f3       	breq	.-6      	; 0x920 <uart0_getlnToFirstWhiteSpace+0x3c>
     926:	07 c0       	rjmp	.+14     	; 0x936 <uart0_getlnToFirstWhiteSpace+0x52>
     928:	81 32       	cpi	r24, 0x21	; 33
     92a:	28 f0       	brcs	.+10     	; 0x936 <uart0_getlnToFirstWhiteSpace+0x52>
     92c:	21 96       	adiw	r28, 0x01	; 1
     92e:	0c 17       	cp	r16, r28
     930:	1d 07       	cpc	r17, r29
     932:	81 f7       	brne	.-32     	; 0x914 <uart0_getlnToFirstWhiteSpace+0x30>
     934:	e8 01       	movw	r28, r16
     936:	18 82       	st	Y, r1
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	08 95       	ret

00000946 <uart0_getint>:
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	27 97       	sbiw	r28, 0x07	; 7
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	67 e0       	ldi	r22, 0x07	; 7
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	c1 df       	rcall	.-126    	; 0x8e4 <uart0_getlnToFirstWhiteSpace>
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <atoi>
     96a:	27 96       	adiw	r28, 0x07	; 7
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <uart0_getData>:
     97c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <rx0_Tail>
     980:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <rx0_Head>
     984:	89 17       	cp	r24, r25
     986:	61 f0       	breq	.+24     	; 0x9a0 <uart0_getData+0x24>
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	8f 71       	andi	r24, 0x1F	; 31
     98c:	e8 2f       	mov	r30, r24
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e4 50       	subi	r30, 0x04	; 4
     992:	fd 4f       	sbci	r31, 0xFD	; 253
     994:	90 81       	ld	r25, Z
     996:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <rx0_Tail>
     99a:	89 2f       	mov	r24, r25
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	08 95       	ret
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	9f ef       	ldi	r25, 0xFF	; 255
     9a4:	08 95       	ret

000009a6 <uart1_getData>:
     9a6:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <rx1_Tail>
     9aa:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <rx1_Head>
     9ae:	89 17       	cp	r24, r25
     9b0:	61 f0       	breq	.+24     	; 0x9ca <uart1_getData+0x24>
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	8f 71       	andi	r24, 0x1F	; 31
     9b6:	e8 2f       	mov	r30, r24
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	e0 5c       	subi	r30, 0xC0	; 192
     9bc:	fc 4f       	sbci	r31, 0xFC	; 252
     9be:	90 81       	ld	r25, Z
     9c0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <rx1_Tail>
     9c4:	89 2f       	mov	r24, r25
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	08 95       	ret
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	9f ef       	ldi	r25, 0xFF	; 255
     9ce:	08 95       	ret

000009d0 <uart_getchar>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	fc 01       	movw	r30, r24
     9d6:	84 85       	ldd	r24, Z+12	; 0x0c
     9d8:	95 85       	ldd	r25, Z+13	; 0x0d
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	41 f0       	breq	.+16     	; 0x9ee <uart_getchar+0x1e>
     9de:	ce df       	rcall	.-100    	; 0x97c <uart0_getData>
     9e0:	ec 01       	movw	r28, r24
     9e2:	99 23       	and	r25, r25
     9e4:	e4 f3       	brlt	.-8      	; 0x9de <uart_getchar+0xe>
     9e6:	1c df       	rcall	.-456    	; 0x820 <uart0_putc>
     9e8:	ce 01       	movw	r24, r28
     9ea:	99 27       	eor	r25, r25
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <uart_getchar+0x2c>
     9ee:	db df       	rcall	.-74     	; 0x9a6 <uart1_getData>
     9f0:	ec 01       	movw	r28, r24
     9f2:	99 23       	and	r25, r25
     9f4:	e4 f3       	brlt	.-8      	; 0x9ee <uart_getchar+0x1e>
     9f6:	33 df       	rcall	.-410    	; 0x85e <uart1_putc>
     9f8:	ce 01       	movw	r24, r28
     9fa:	99 27       	eor	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     a04:	0f 93       	push	r16
     a06:	0f b7       	in	r16, 0x3f	; 63
     a08:	ef 93       	push	r30
     a0a:	ff 93       	push	r31
     a0c:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <tx0_Tail>
     a10:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <tx0_Head>
     a14:	e3 95       	inc	r30
     a16:	ef 71       	andi	r30, 0x1F	; 31
     a18:	ef 13       	cpse	r30, r31
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <USART0_TX_CONTINUE>
     a1c:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     a20:	ff 7d       	andi	r31, 0xDF	; 223
     a22:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000a26 <USART0_TX_CONTINUE>:
     a26:	e0 93 1d 03 	sts	0x031D, r30	; 0x80031d <tx0_Tail>
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ec 59       	subi	r30, 0x9C	; 156
     a2e:	fc 4f       	sbci	r31, 0xFC	; 252
     a30:	e0 81       	ld	r30, Z
     a32:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000a36 <USART0_TX_EXIT>:
     a36:	ff 91       	pop	r31
     a38:	ef 91       	pop	r30
     a3a:	0f bf       	out	0x3f, r16	; 63
     a3c:	0f 91       	pop	r16
     a3e:	18 95       	reti

00000a40 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     a40:	0f 93       	push	r16
     a42:	0f b7       	in	r16, 0x3f	; 63
     a44:	9f 93       	push	r25
     a46:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
     a4e:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <rx0_Head>
     a52:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <rx0_Tail>
     a56:	e3 95       	inc	r30
     a58:	ef 71       	andi	r30, 0x1F	; 31
     a5a:	fe 17       	cp	r31, r30
     a5c:	31 f0       	breq	.+12     	; 0xa6a <USART0_RX_EXIT>
     a5e:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <rx0_Head>
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	e4 50       	subi	r30, 0x04	; 4
     a66:	fd 4f       	sbci	r31, 0xFD	; 253
     a68:	90 83       	st	Z, r25

00000a6a <USART0_RX_EXIT>:
     a6a:	ff 91       	pop	r31
     a6c:	ef 91       	pop	r30
     a6e:	9f 91       	pop	r25
     a70:	0f bf       	out	0x3f, r16	; 63
     a72:	0f 91       	pop	r16
     a74:	18 95       	reti

00000a76 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     a76:	0f 93       	push	r16
     a78:	0f b7       	in	r16, 0x3f	; 63
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
     a7e:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <tx1_Tail>
     a82:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <tx1_Head>
     a86:	e3 95       	inc	r30
     a88:	ef 71       	andi	r30, 0x1F	; 31
     a8a:	ef 13       	cpse	r30, r31
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <USART1_TX_CONTINUE>
     a8e:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     a92:	ff 7d       	andi	r31, 0xDF	; 223
     a94:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000a98 <USART1_TX_CONTINUE>:
     a98:	e0 93 61 03 	sts	0x0361, r30	; 0x800361 <tx1_Tail>
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	e1 5e       	subi	r30, 0xE1	; 225
     aa0:	fc 4f       	sbci	r31, 0xFC	; 252
     aa2:	e0 81       	ld	r30, Z
     aa4:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000aa8 <USART1_TX_EXIT>:
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	0f bf       	out	0x3f, r16	; 63
     aae:	0f 91       	pop	r16
     ab0:	18 95       	reti

00000ab2 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     ab2:	0f 93       	push	r16
     ab4:	0f b7       	in	r16, 0x3f	; 63
     ab6:	9f 93       	push	r25
     ab8:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
     ac0:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <rx1_Head>
     ac4:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <rx1_Tail>
     ac8:	e3 95       	inc	r30
     aca:	ef 71       	andi	r30, 0x1F	; 31
     acc:	fe 17       	cp	r31, r30
     ace:	31 f0       	breq	.+12     	; 0xadc <USART1_RX_EXIT>
     ad0:	e0 93 62 03 	sts	0x0362, r30	; 0x800362 <rx1_Head>
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	e0 5c       	subi	r30, 0xC0	; 192
     ad8:	fc 4f       	sbci	r31, 0xFC	; 252
     ada:	90 83       	st	Z, r25

00000adc <USART1_RX_EXIT>:
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	9f 91       	pop	r25
     ae2:	0f bf       	out	0x3f, r16	; 63
     ae4:	0f 91       	pop	r16
     ae6:	18 95       	reti

00000ae8 <timer1_init_ts>:
//for speed
static uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     ae8:	e1 e8       	ldi	r30, 0x81	; 129
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	83 60       	ori	r24, 0x03	; 3
     af0:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     af2:	80 81       	ld	r24, Z
     af4:	88 60       	ori	r24, 0x08	; 8
     af6:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     af8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     afc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     b00:	ef e6       	ldi	r30, 0x6F	; 111
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	82 60       	ori	r24, 0x02	; 2
     b08:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     b0a:	8d e7       	ldi	r24, 0x7D	; 125
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b12:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b16:	08 95       	ret

00000b18 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     b18:	84 b5       	in	r24, 0x24	; 36
     b1a:	85 60       	ori	r24, 0x05	; 5
     b1c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     b1e:	84 b5       	in	r24, 0x24	; 36
     b20:	88 60       	ori	r24, 0x08	; 8
     b22:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     b24:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     b26:	ee e6       	ldi	r30, 0x6E	; 110
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	82 60       	ori	r24, 0x02	; 2
     b2e:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms
     b30:	87 e2       	ldi	r24, 0x27	; 39
     b32:	87 bd       	out	0x27, r24	; 39
     b34:	08 95       	ret

00000b36 <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
     b36:	f8 94       	cli
     b38:	87 d5       	rcall	.+2830   	; 0x1648 <rgbled_init>
	can_init(0,0);
     b3a:	41 d5       	rcall	.+2690   	; 0x15be <pwm_init>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     b3e:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
     b44:	26 d4       	rcall	.+2124   	; 0x1392 <can_init>
     b46:	d0 df       	rcall	.-96     	; 0xae8 <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     b48:	e7 df       	rcall	.-50     	; 0xb18 <timer0_init_ts>
     b4a:	34 de       	rcall	.-920    	; 0x7b4 <speed_init>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     b4e:	8b d5       	rcall	.+2838   	; 0x1666 <spi_init>
     b50:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     b54:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     b58:	88 e9       	ldi	r24, 0x98	; 152
     b5a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     b5e:	e4 e8       	ldi	r30, 0x84	; 132
     b60:	f3 e0       	ldi	r31, 0x03	; 3
     b62:	84 e0       	ldi	r24, 0x04	; 4
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     b64:	91 e0       	ldi	r25, 0x01	; 1
	
	rgbled_init();
     b66:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
     b68:	82 83       	std	Z+2, r24	; 0x02
     b6a:	91 83       	std	Z+1, r25	; 0x01
	
	//_delay_ms(4000); // wait for BMS power up
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues); //send CAN
     b6c:	80 83       	st	Z, r24
     b6e:	6c d5       	rcall	.+2776   	; 0x1648 <rgbled_init>
     b70:	c8 db       	rcall	.-2160   	; 0x302 <drivers_init>
     b72:	78 94       	sei
     b74:	62 e1       	ldi	r22, 0x12	; 18
		handle_can(&ComValues, &rxFrame); //receive CAN
     b76:	71 e0       	ldi	r23, 0x01	; 1
     b78:	84 e5       	ldi	r24, 0x54	; 84
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e dd       	rcall	.-1508   	; 0x59a <handle_motor_status_can_msg>
     b7e:	66 ee       	ldi	r22, 0xE6	; 230
     b80:	72 e0       	ldi	r23, 0x02	; 2
		
		if (b_send_uart)
     b82:	82 e1       	ldi	r24, 0x12	; 18
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	bd dc       	rcall	.-1670   	; 0x502 <handle_can>
     b88:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <b_send_uart>
		{
			send_uart(ComValues);
     b8c:	88 23       	and	r24, r24
     b8e:	e9 f0       	breq	.+58     	; 0xbca <main+0x94>
     b90:	8d b7       	in	r24, 0x3d	; 61
     b92:	9e b7       	in	r25, 0x3e	; 62
     b94:	4b 97       	sbiw	r24, 0x1b	; 27
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	9e bf       	out	0x3e, r25	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	8d bf       	out	0x3d, r24	; 61
     ba0:	ad b7       	in	r26, 0x3d	; 61
     ba2:	be b7       	in	r27, 0x3e	; 62
     ba4:	11 96       	adiw	r26, 0x01	; 1
     ba6:	8b e1       	ldi	r24, 0x1B	; 27
     ba8:	e2 e1       	ldi	r30, 0x12	; 18
     baa:	f1 e0       	ldi	r31, 0x01	; 1
     bac:	01 90       	ld	r0, Z+
			b_send_uart = 0;
     bae:	0d 92       	st	X+, r0
     bb0:	8a 95       	dec	r24
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x76>
     bb4:	7c dd       	rcall	.-1288   	; 0x6ae <send_uart>
     bb6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <b_send_uart>
     bba:	8d b7       	in	r24, 0x3d	; 61
     bbc:	9e b7       	in	r25, 0x3e	; 62
		}
		receive_uart(&ComValues);
     bbe:	4b 96       	adiw	r24, 0x1b	; 27
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	9e bf       	out	0x3e, r25	; 62
		
		err_check(&ComValues); //verifying current, temperature and voltage
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	8d bf       	out	0x3d, r24	; 61
     bca:	82 e1       	ldi	r24, 0x12	; 18
     bcc:	91 e0       	ldi	r25, 0x01	; 1
	}
     bce:	2a dd       	rcall	.-1452   	; 0x624 <receive_uart>
     bd0:	82 e1       	ldi	r24, 0x12	; 18
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	45 d2       	rcall	.+1162   	; 0x1060 <err_check>
     bd6:	ce cf       	rjmp	.-100    	; 0xb74 <main+0x3e>

00000bd8 <__vector_16>:
}


ISR(TIMER0_COMP_vect){ // every 5ms
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	0b b6       	in	r0, 0x3b	; 59
     be4:	0f 92       	push	r0
     be6:	ef 92       	push	r14
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	2f 93       	push	r18
     bee:	3f 93       	push	r19
     bf0:	4f 93       	push	r20
     bf2:	5f 93       	push	r21
     bf4:	6f 93       	push	r22
     bf6:	7f 93       	push	r23
     bf8:	8f 93       	push	r24
     bfa:	9f 93       	push	r25
     bfc:	af 93       	push	r26
     bfe:	bf 93       	push	r27
     c00:	ef 93       	push	r30
     c02:	ff 93       	push	r31
	
	if (systic_counter_fast == 1) // every 10ms
     c04:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <systic_counter_fast>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	31 f5       	brne	.+76     	; 0xc58 <__vector_16+0x80>
	{
		if (ComValues.u16_watchdog == 0)
     c0c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ComValues+0x14>
     c10:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ComValues+0x15>
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	39 f4       	brne	.+14     	; 0xc26 <__vector_16+0x4e>
		{
			if (ComValues.motor_status != ERR)
     c18:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ComValues+0x16>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	41 f0       	breq	.+16     	; 0xc30 <__vector_16+0x58>
			{
				ComValues.motor_status = OFF ;
     c20:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ComValues+0x16>
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <__vector_16+0x58>
			}
			}else{
			ComValues.u16_watchdog -- ;
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ComValues+0x15>
     c2c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ComValues+0x14>
		}
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;		
     c30:	e2 e1       	ldi	r30, 0x12	; 18
     c32:	f1 e0       	ldi	r31, 0x01	; 1
     c34:	00 85       	ldd	r16, Z+8	; 0x08
     c36:	11 85       	ldd	r17, Z+9	; 0x09
     c38:	22 85       	ldd	r18, Z+10	; 0x0a
     c3a:	33 85       	ldd	r19, Z+11	; 0x0b
     c3c:	44 81       	ldd	r20, Z+4	; 0x04
     c3e:	55 81       	ldd	r21, Z+5	; 0x05
     c40:	66 81       	ldd	r22, Z+6	; 0x06
     c42:	77 81       	ldd	r23, Z+7	; 0x07
     c44:	0f 2e       	mov	r0, r31
     c46:	fa e0       	ldi	r31, 0x0A	; 10
     c48:	ef 2e       	mov	r14, r31
     c4a:	f0 2d       	mov	r31, r0
     c4c:	8e e1       	ldi	r24, 0x1E	; 30
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	d0 d1       	rcall	.+928    	; 0xff2 <handle_joulemeter>
		systic_counter_fast = 0;
     c52:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <systic_counter_fast>
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <__vector_16+0x86>
	} else {
		systic_counter_fast ++;
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
     c5e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <systic_counter_slow>
     c62:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <systic_counter_slow+0x1>
     c66:	84 36       	cpi	r24, 0x64	; 100
     c68:	91 05       	cpc	r25, r1
     c6a:	29 f5       	brne	.+74     	; 0xcb6 <__vector_16+0xde>
	{
		b_send_uart = 1;
     c6c:	11 e0       	ldi	r17, 0x01	; 1
     c6e:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <b_send_uart>
		manage_LEDs(ComValues); //UM LED according to motor state
     c72:	8d b7       	in	r24, 0x3d	; 61
     c74:	9e b7       	in	r25, 0x3e	; 62
     c76:	4b 97       	sbiw	r24, 0x1b	; 27
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	9e bf       	out	0x3e, r25	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	8d bf       	out	0x3d, r24	; 61
     c82:	ad b7       	in	r26, 0x3d	; 61
     c84:	be b7       	in	r27, 0x3e	; 62
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	8b e1       	ldi	r24, 0x1B	; 27
     c8a:	e2 e1       	ldi	r30, 0x12	; 18
     c8c:	f1 e0       	ldi	r31, 0x01	; 1
     c8e:	01 90       	ld	r0, Z+
     c90:	0d 92       	st	X+, r0
     c92:	8a 95       	dec	r24
     c94:	e1 f7       	brne	.-8      	; 0xc8e <__vector_16+0xb6>
     c96:	57 dd       	rcall	.-1362   	; 0x746 <manage_LEDs>
		send_can = 1;
     c98:	10 93 54 01 	sts	0x0154, r17	; 0x800154 <send_can>
		systic_counter_slow = 0;
     c9c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <systic_counter_slow+0x1>
     ca0:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <systic_counter_slow>
     ca4:	8d b7       	in	r24, 0x3d	; 61
     ca6:	9e b7       	in	r25, 0x3e	; 62
     ca8:	4b 96       	adiw	r24, 0x1b	; 27
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	9e bf       	out	0x3e, r25	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	8d bf       	out	0x3d, r24	; 61
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__vector_16+0xe8>
		} else {
		systic_counter_slow ++;
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <systic_counter_slow+0x1>
     cbc:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <systic_counter_slow>
	}
	
	manage_motor(&ComValues);
     cc0:	82 e1       	ldi	r24, 0x12	; 18
     cc2:	91 e0       	ldi	r25, 0x01	; 1
}
     cc4:	26 db       	rcall	.-2484   	; 0x312 <manage_motor>
     cc6:	ff 91       	pop	r31
     cc8:	ef 91       	pop	r30
     cca:	bf 91       	pop	r27
     ccc:	af 91       	pop	r26
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	7f 91       	pop	r23
     cd4:	6f 91       	pop	r22
     cd6:	5f 91       	pop	r21
     cd8:	4f 91       	pop	r20
     cda:	3f 91       	pop	r19
     cdc:	2f 91       	pop	r18
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ef 90       	pop	r14
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	0b b6       	in	r0, 0x3b	; 59
     cfe:	0f 92       	push	r0
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
	
	u16_speed_count ++ ;
     d18:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u16_speed_count>
     d1c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <u16_speed_count+0x1>
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <u16_speed_count+0x1>
     d26:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u16_speed_count>

	if (u8_SPI_count == 4)
     d2a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_SPI_count>
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	31 f4       	brne	.+12     	; 0xd3e <__vector_12+0x4c>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
     d32:	82 e2       	ldi	r24, 0x22	; 34
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	c6 db       	rcall	.-2164   	; 0x4c4 <SPI_handler_4>
		u8_SPI_count = 0 ;
     d38:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <u8_SPI_count>
     d3c:	12 c0       	rjmp	.+36     	; 0xd62 <__vector_12+0x70>
	}
	
	if (u8_SPI_count == 3)
     d3e:	83 30       	cpi	r24, 0x03	; 3
     d40:	21 f4       	brne	.+8      	; 0xd4a <__vector_12+0x58>
	{
		u8_SPI_count ++ ;
     d42:	84 e0       	ldi	r24, 0x04	; 4
     d44:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8_SPI_count>
     d48:	18 c0       	rjmp	.+48     	; 0xd7a <__vector_12+0x88>
	}
	
	if (u8_SPI_count == 2)
     d4a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_SPI_count>
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	41 f4       	brne	.+16     	; 0xd62 <__vector_12+0x70>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
     d52:	8a e1       	ldi	r24, 0x1A	; 26
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	85 db       	rcall	.-2294   	; 0x462 <SPI_handler_2>
		u8_SPI_count ++ ;
     d58:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_SPI_count>
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     d62:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_SPI_count>
     d66:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
     d68:	41 f4       	brne	.+16     	; 0xd7a <__vector_12+0x88>
     d6a:	86 e1       	ldi	r24, 0x16	; 22
     d6c:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     d6e:	5a db       	rcall	.-2380   	; 0x424 <SPI_handler_1>
     d70:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_SPI_count>
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
     d7a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
     d7e:	81 11       	cpse	r24, r1
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <__vector_12+0xa0>
     d82:	82 e1       	ldi	r24, 0x12	; 18
     d84:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     d86:	2f db       	rcall	.-2466   	; 0x3e6 <SPI_handler_0>
     d88:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_SPI_count>
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8_SPI_count>
	}
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0b be       	out	0x3b, r0	; 59
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in frot of the reed switch)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	0b b6       	in	r0, 0x3b	; 59
     dc4:	0f 92       	push	r0
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count);
     dde:	60 e5       	ldi	r22, 0x50	; 80
     de0:	71 e0       	ldi	r23, 0x01	; 1
     de2:	83 e2       	ldi	r24, 0x23	; 35
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	f1 dc       	rcall	.-1566   	; 0x7ca <handle_speed_sensor>
}
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0b be       	out	0x3b, r0	; 59
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.24
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	00 d0       	rcall	.+0      	; 0xe28 <handle_current_sensor+0x1a>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <handle_current_sensor+0x1c>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	8b d5       	rcall	.+2838   	; 0x194c <__floatunsisf>
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 ea       	ldi	r20, 0xA0	; 160
     e3c:	50 e4       	ldi	r21, 0x40	; 64
     e3e:	3c d6       	rcall	.+3192   	; 0x1ab8 <__mulsf3>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e8       	ldi	r20, 0x80	; 128
     e46:	59 e3       	ldi	r21, 0x39	; 57
     e48:	37 d6       	rcall	.+3182   	; 0x1ab8 <__mulsf3>
     e4a:	29 e2       	ldi	r18, 0x29	; 41
     e4c:	3c e5       	ldi	r19, 0x5C	; 92
     e4e:	4f e0       	ldi	r20, 0x0F	; 15
     e50:	50 e4       	ldi	r21, 0x40	; 64
     e52:	7a d4       	rcall	.+2292   	; 0x1748 <__subsf3>
     e54:	23 ec       	ldi	r18, 0xC3	; 195
     e56:	34 e6       	ldi	r19, 0x64	; 100
     e58:	4a e2       	ldi	r20, 0x2A	; 42
     e5a:	5d e3       	ldi	r21, 0x3D	; 61
     e5c:	de d4       	rcall	.+2492   	; 0x181a <__divsf3>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e4       	ldi	r20, 0x40	; 64
     e64:	50 e4       	ldi	r21, 0x40	; 64
     e66:	d9 d4       	rcall	.+2482   	; 0x181a <__divsf3>
     e68:	69 83       	std	Y+1, r22	; 0x01
     e6a:	7a 83       	std	Y+2, r23	; 0x02
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current-1.76);// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     e70:	69 81       	ldd	r22, Y+1	; 0x01
     e72:	7a 81       	ldd	r23, Y+2	; 0x02
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	2e ea       	ldi	r18, 0xAE	; 174
     e7a:	37 e4       	ldi	r19, 0x47	; 71
     e7c:	41 ee       	ldi	r20, 0xE1	; 225
     e7e:	5f e3       	ldi	r21, 0x3F	; 63
     e80:	63 d4       	rcall	.+2246   	; 0x1748 <__subsf3>
     e82:	69 83       	std	Y+1, r22	; 0x01
     e84:	7a 83       	std	Y+2, r23	; 0x02
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	9c 83       	std	Y+4, r25	; 0x04
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
     e8a:	89 80       	ldd	r8, Y+1	; 0x01
     e8c:	9a 80       	ldd	r9, Y+2	; 0x02
     e8e:	ab 80       	ldd	r10, Y+3	; 0x03
     e90:	bc 80       	ldd	r11, Y+4	; 0x04
     e92:	26 e6       	ldi	r18, 0x66	; 102
     e94:	36 e6       	ldi	r19, 0x66	; 102
     e96:	46 e6       	ldi	r20, 0x66	; 102
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	f8 01       	movw	r30, r16
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	09 d6       	rcall	.+3090   	; 0x1ab8 <__mulsf3>
     ea6:	6b 01       	movw	r12, r22
     ea8:	7c 01       	movw	r14, r24
     eaa:	2d ec       	ldi	r18, 0xCD	; 205
     eac:	3c ec       	ldi	r19, 0xCC	; 204
     eae:	4c ec       	ldi	r20, 0xCC	; 204
     eb0:	5d e3       	ldi	r21, 0x3D	; 61
     eb2:	c5 01       	movw	r24, r10
     eb4:	b4 01       	movw	r22, r8
     eb6:	00 d6       	rcall	.+3072   	; 0x1ab8 <__mulsf3>
     eb8:	9b 01       	movw	r18, r22
     eba:	ac 01       	movw	r20, r24
     ebc:	c7 01       	movw	r24, r14
     ebe:	b6 01       	movw	r22, r12
     ec0:	44 d4       	rcall	.+2184   	; 0x174a <__addsf3>
     ec2:	f8 01       	movw	r30, r16
     ec4:	60 83       	st	Z, r22
     ec6:	71 83       	std	Z+1, r23	; 0x01
     ec8:	82 83       	std	Z+2, r24	; 0x02
     eca:	93 83       	std	Z+3, r25	; 0x03
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	08 95       	ret

00000eee <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <handle_temp_sensor+0xa>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <handle_temp_sensor+0xc>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	23 d5       	rcall	.+2630   	; 0x194c <__floatunsisf>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 ea       	ldi	r20, 0xA0	; 160
     f0c:	50 e4       	ldi	r21, 0x40	; 64
     f0e:	d4 d5       	rcall	.+2984   	; 0x1ab8 <__mulsf3>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	59 e3       	ldi	r21, 0x39	; 57
     f18:	cf d5       	rcall	.+2974   	; 0x1ab8 <__mulsf3>
     f1a:	69 83       	std	Y+1, r22	; 0x01
     f1c:	7a 83       	std	Y+2, r23	; 0x02
     f1e:	8b 83       	std	Y+3, r24	; 0x03
     f20:	9c 83       	std	Y+4, r25	; 0x04
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
     f22:	69 81       	ldd	r22, Y+1	; 0x01
     f24:	7a 81       	ldd	r23, Y+2	; 0x02
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	2d ec       	ldi	r18, 0xCD	; 205
     f2c:	3c ec       	ldi	r19, 0xCC	; 204
     f2e:	4c e6       	ldi	r20, 0x6C	; 108
     f30:	50 e4       	ldi	r21, 0x40	; 64
     f32:	6f d4       	rcall	.+2270   	; 0x1812 <__cmpsf2>
     f34:	18 16       	cp	r1, r24
     f36:	8c f0       	brlt	.+34     	; 0xf5a <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     f38:	69 81       	ldd	r22, Y+1	; 0x01
     f3a:	7a 81       	ldd	r23, Y+2	; 0x02
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 ea       	ldi	r20, 0xA0	; 160
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	b7 d5       	rcall	.+2926   	; 0x1ab8 <__mulsf3>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 eb       	ldi	r20, 0xB0	; 176
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	fa d3       	rcall	.+2036   	; 0x1748 <__subsf3>
     f54:	cf d4       	rcall	.+2462   	; 0x18f4 <__fixunssfsi>
     f56:	f8 01       	movw	r30, r16
     f58:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     f5a:	69 81       	ldd	r22, Y+1	; 0x01
     f5c:	7a 81       	ldd	r23, Y+2	; 0x02
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	26 e6       	ldi	r18, 0x66	; 102
     f64:	36 e6       	ldi	r19, 0x66	; 102
     f66:	46 e9       	ldi	r20, 0x96	; 150
     f68:	50 e4       	ldi	r21, 0x40	; 64
     f6a:	53 d4       	rcall	.+2214   	; 0x1812 <__cmpsf2>
     f6c:	18 16       	cp	r1, r24
     f6e:	e4 f0       	brlt	.+56     	; 0xfa8 <handle_temp_sensor+0xba>
     f70:	69 81       	ldd	r22, Y+1	; 0x01
     f72:	7a 81       	ldd	r23, Y+2	; 0x02
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	2d ec       	ldi	r18, 0xCD	; 205
     f7a:	3c ec       	ldi	r19, 0xCC	; 204
     f7c:	4c e6       	ldi	r20, 0x6C	; 108
     f7e:	50 e4       	ldi	r21, 0x40	; 64
     f80:	97 d5       	rcall	.+2862   	; 0x1ab0 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     f82:	18 16       	cp	r1, r24
     f84:	8c f4       	brge	.+34     	; 0xfa8 <handle_temp_sensor+0xba>
     f86:	69 81       	ldd	r22, Y+1	; 0x01
     f88:	7a 81       	ldd	r23, Y+2	; 0x02
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4e e5       	ldi	r20, 0x5E	; 94
     f94:	52 e4       	ldi	r21, 0x42	; 66
     f96:	90 d5       	rcall	.+2848   	; 0x1ab8 <__mulsf3>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e8       	ldi	r19, 0x80	; 128
     f9c:	4b e1       	ldi	r20, 0x1B	; 27
     f9e:	53 e4       	ldi	r21, 0x43	; 67
     fa0:	d3 d3       	rcall	.+1958   	; 0x1748 <__subsf3>
     fa2:	a8 d4       	rcall	.+2384   	; 0x18f4 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     fa4:	f8 01       	movw	r30, r16
     fa6:	60 83       	st	Z, r22
     fa8:	69 81       	ldd	r22, Y+1	; 0x01
     faa:	7a 81       	ldd	r23, Y+2	; 0x02
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	26 e6       	ldi	r18, 0x66	; 102
     fb2:	36 e6       	ldi	r19, 0x66	; 102
     fb4:	46 e9       	ldi	r20, 0x96	; 150
     fb6:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     fb8:	7b d5       	rcall	.+2806   	; 0x1ab0 <__gesf2>
     fba:	18 16       	cp	r1, r24
     fbc:	8c f4       	brge	.+34     	; 0xfe0 <handle_temp_sensor+0xf2>
     fbe:	69 81       	ldd	r22, Y+1	; 0x01
     fc0:	7a 81       	ldd	r23, Y+2	; 0x02
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	48 e4       	ldi	r20, 0x48	; 72
     fcc:	53 e4       	ldi	r21, 0x43	; 67
     fce:	74 d5       	rcall	.+2792   	; 0x1ab8 <__mulsf3>
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	42 e5       	ldi	r20, 0x52	; 82
     fd6:	54 e4       	ldi	r21, 0x44	; 68
     fd8:	b7 d3       	rcall	.+1902   	; 0x1748 <__subsf3>
     fda:	8c d4       	rcall	.+2328   	; 0x18f4 <__fixunssfsi>
	}
}
     fdc:	f8 01       	movw	r30, r16
     fde:	60 83       	st	Z, r22
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
     ff2:	8f 92       	push	r8
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	bf 92       	push	r11
     ffa:	ef 92       	push	r14
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
    1006:	4a 01       	movw	r8, r20
    1008:	5b 01       	movw	r10, r22
    100a:	c9 01       	movw	r24, r18
    100c:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    100e:	a5 01       	movw	r20, r10
    1010:	94 01       	movw	r18, r8
    1012:	52 d5       	rcall	.+2724   	; 0x1ab8 <__mulsf3>
    1014:	4b 01       	movw	r8, r22
    1016:	5c 01       	movw	r10, r24
    1018:	6e 2d       	mov	r22, r14
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	95 d4       	rcall	.+2346   	; 0x194c <__floatunsisf>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	c5 01       	movw	r24, r10
    1028:	b4 01       	movw	r22, r8
    102a:	46 d5       	rcall	.+2700   	; 0x1ab8 <__mulsf3>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a e7       	ldi	r20, 0x7A	; 122
    1032:	54 e4       	ldi	r21, 0x44	; 68
    1034:	f2 d3       	rcall	.+2020   	; 0x181a <__divsf3>
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	68 81       	ld	r22, Y
    103c:	79 81       	ldd	r23, Y+1	; 0x01
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	83 d3       	rcall	.+1798   	; 0x174a <__addsf3>
    1044:	68 83       	st	Y, r22
    1046:	79 83       	std	Y+1, r23	; 0x01
    1048:	8a 83       	std	Y+2, r24	; 0x02
    104a:	9b 83       	std	Y+3, r25	; 0x03
}
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ef 90       	pop	r14
    1056:	bf 90       	pop	r11
    1058:	af 90       	pop	r10
    105a:	9f 90       	pop	r9
    105c:	8f 90       	pop	r8
    105e:	08 95       	ret

00001060 <err_check>:

void err_check(ModuleValues_t * vals) 
{
    1060:	8f 92       	push	r8
    1062:	9f 92       	push	r9
    1064:	af 92       	push	r10
    1066:	bf 92       	push	r11
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
	if ((vals->f32_batt_volt < MAX_AMP || vals->f32_batt_volt > 100.0) && vals->motor_status != ERR) //under voltage. When the voltage is too low, the external ADC is not working properly and gives a huge voltage value.
    1076:	c8 84       	ldd	r12, Y+8	; 0x08
    1078:	d9 84       	ldd	r13, Y+9	; 0x09
    107a:	ea 84       	ldd	r14, Y+10	; 0x0a
    107c:	fb 84       	ldd	r15, Y+11	; 0x0b
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e7       	ldi	r20, 0x70	; 112
    1084:	51 e4       	ldi	r21, 0x41	; 65
    1086:	c7 01       	movw	r24, r14
    1088:	b6 01       	movw	r22, r12
    108a:	c3 d3       	rcall	.+1926   	; 0x1812 <__cmpsf2>
    108c:	88 23       	and	r24, r24
    108e:	4c f0       	brlt	.+18     	; 0x10a2 <err_check+0x42>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	48 ec       	ldi	r20, 0xC8	; 200
    1096:	52 e4       	ldi	r21, 0x42	; 66
    1098:	c7 01       	movw	r24, r14
    109a:	b6 01       	movw	r22, r12
    109c:	09 d5       	rcall	.+2578   	; 0x1ab0 <__gesf2>
    109e:	18 16       	cp	r1, r24
    10a0:	24 f4       	brge	.+8      	; 0x10aa <err_check+0x4a>
    10a2:	8e 89       	ldd	r24, Y+22	; 0x16
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	09 f0       	breq	.+2      	; 0x10aa <err_check+0x4a>
	{
		vals->motor_status = OFF;
    10a8:	1e 8a       	std	Y+22, r1	; 0x16
	}
	
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
    10aa:	88 80       	ld	r8, Y
    10ac:	99 80       	ldd	r9, Y+1	; 0x01
    10ae:	aa 80       	ldd	r10, Y+2	; 0x02
    10b0:	bb 80       	ldd	r11, Y+3	; 0x03
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e7       	ldi	r20, 0x70	; 112
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	c5 01       	movw	r24, r10
    10bc:	b4 01       	movw	r22, r8
    10be:	f8 d4       	rcall	.+2544   	; 0x1ab0 <__gesf2>
    10c0:	88 23       	and	r24, r24
    10c2:	b4 f4       	brge	.+44     	; 0x10f0 <err_check+0x90>
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4c e5       	ldi	r20, 0x5C	; 92
    10ca:	52 e4       	ldi	r21, 0x42	; 66
    10cc:	c7 01       	movw	r24, r14
    10ce:	b6 01       	movw	r22, r12
    10d0:	ef d4       	rcall	.+2526   	; 0x1ab0 <__gesf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	4c f4       	brge	.+18     	; 0x10e8 <err_check+0x88>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	48 ec       	ldi	r20, 0xC8	; 200
    10dc:	52 e4       	ldi	r21, 0x42	; 66
    10de:	c7 01       	movw	r24, r14
    10e0:	b6 01       	movw	r22, r12
    10e2:	97 d3       	rcall	.+1838   	; 0x1812 <__cmpsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	24 f0       	brlt	.+8      	; 0x10f0 <err_check+0x90>
    10e8:	88 89       	ldd	r24, Y+16	; 0x10
    10ea:	84 36       	cpi	r24, 0x64	; 100
    10ec:	f0 f4       	brcc	.+60     	; 0x112a <__stack+0x2b>
    10ee:	19 c0       	rjmp	.+50     	; 0x1122 <__stack+0x23>
	{
		vals->motor_status = ERR;
    10f0:	84 e0       	ldi	r24, 0x04	; 4
    10f2:	8e 8b       	std	Y+22, r24	; 0x16
	}
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
    10f4:	88 89       	ldd	r24, Y+16	; 0x10
    10f6:	84 36       	cpi	r24, 0x64	; 100
    10f8:	d0 f4       	brcc	.+52     	; 0x112e <__stack+0x2f>
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e7       	ldi	r20, 0x70	; 112
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	c5 01       	movw	r24, r10
    1104:	b4 01       	movw	r22, r8
    1106:	85 d3       	rcall	.+1802   	; 0x1812 <__cmpsf2>
    1108:	88 23       	and	r24, r24
    110a:	8c f4       	brge	.+34     	; 0x112e <__stack+0x2f>
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4c e5       	ldi	r20, 0x5C	; 92
    1112:	52 e4       	ldi	r21, 0x42	; 66
    1114:	c7 01       	movw	r24, r14
    1116:	b6 01       	movw	r22, r12
    1118:	7c d3       	rcall	.+1784   	; 0x1812 <__cmpsf2>
    111a:	18 16       	cp	r1, r24
	{
		vals->motor_status = OFF;
    111c:	44 f0       	brlt	.+16     	; 0x112e <__stack+0x2f>
	}
    111e:	1e 8a       	std	Y+22, r1	; 0x16
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		vals->motor_status = ERR;
	}
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
    1120:	06 c0       	rjmp	.+12     	; 0x112e <__stack+0x2f>
    1122:	8e 89       	ldd	r24, Y+22	; 0x16
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	19 f4       	brne	.+6      	; 0x112e <__stack+0x2f>
		vals->motor_status = OFF;
	}
	
	if (vals->f32_motor_current >= MAX_AMP || (vals->f32_batt_volt > MAX_VOLT && vals->f32_batt_volt < 100.0) || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		vals->motor_status = ERR;
    1128:	e8 cf       	rjmp	.-48     	; 0x10fa <err_check+0x9a>
    112a:	84 e0       	ldi	r24, 0x04	; 4
	
	if (vals->u8_motor_temp < MAX_TEMP && vals->motor_status == ERR && vals->f32_motor_current < MAX_AMP && vals->f32_batt_volt <= MAX_VOLT)// leaving error state if motor cools down
	{
		vals->motor_status = OFF;
	}
    112c:	8e 8b       	std	Y+22, r24	; 0x16
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	9f 90       	pop	r9
    1140:	8f 90       	pop	r8
    1142:	08 95       	ret

00001144 <Set_ADC_Channel_ext>:
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	88 30       	cpi	r24, 0x08	; 8
    1148:	91 05       	cpc	r25, r1
    114a:	88 f5       	brcc	.+98     	; 0x11ae <Set_ADC_Channel_ext+0x6a>
    114c:	fc 01       	movw	r30, r24
    114e:	e6 5b       	subi	r30, 0xB6	; 182
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	15 c5       	rjmp	.+2602   	; 0x1b7e <__tablejump2__>
    1154:	86 e0       	ldi	r24, 0x06	; 6
    1156:	fb 01       	movw	r30, r22
    1158:	80 83       	st	Z, r24
    115a:	11 82       	std	Z+1, r1	; 0x01
    115c:	08 95       	ret
    115e:	86 e0       	ldi	r24, 0x06	; 6
    1160:	fb 01       	movw	r30, r22
    1162:	80 83       	st	Z, r24
    1164:	80 e4       	ldi	r24, 0x40	; 64
    1166:	81 83       	std	Z+1, r24	; 0x01
    1168:	08 95       	ret
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	fb 01       	movw	r30, r22
    116e:	80 83       	st	Z, r24
    1170:	80 e8       	ldi	r24, 0x80	; 128
    1172:	81 83       	std	Z+1, r24	; 0x01
    1174:	08 95       	ret
    1176:	86 e0       	ldi	r24, 0x06	; 6
    1178:	fb 01       	movw	r30, r22
    117a:	80 83       	st	Z, r24
    117c:	80 ec       	ldi	r24, 0xC0	; 192
    117e:	81 83       	std	Z+1, r24	; 0x01
    1180:	08 95       	ret
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	fb 01       	movw	r30, r22
    1186:	80 83       	st	Z, r24
    1188:	11 82       	std	Z+1, r1	; 0x01
    118a:	08 95       	ret
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	fb 01       	movw	r30, r22
    1190:	80 83       	st	Z, r24
    1192:	80 e4       	ldi	r24, 0x40	; 64
    1194:	81 83       	std	Z+1, r24	; 0x01
    1196:	08 95       	ret
    1198:	87 e0       	ldi	r24, 0x07	; 7
    119a:	fb 01       	movw	r30, r22
    119c:	80 83       	st	Z, r24
    119e:	80 e8       	ldi	r24, 0x80	; 128
    11a0:	81 83       	std	Z+1, r24	; 0x01
    11a2:	08 95       	ret
    11a4:	87 e0       	ldi	r24, 0x07	; 7
    11a6:	fb 01       	movw	r30, r22
    11a8:	80 83       	st	Z, r24
    11aa:	80 ec       	ldi	r24, 0xC0	; 192
    11ac:	81 83       	std	Z+1, r24	; 0x01
    11ae:	08 95       	ret

000011b0 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	0b b6       	in	r0, 0x3b	; 59
    11bc:	0f 92       	push	r0
    11be:	2f 93       	push	r18
    11c0:	3f 93       	push	r19
    11c2:	4f 93       	push	r20
    11c4:	5f 93       	push	r21
    11c6:	6f 93       	push	r22
    11c8:	8f 93       	push	r24
    11ca:	9f 93       	push	r25
    11cc:	af 93       	push	r26
    11ce:	bf 93       	push	r27
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	1f 92       	push	r1
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    11de:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    11e2:	80 ff       	sbrs	r24, 0
    11e4:	47 c0       	rjmp	.+142    	; 0x1274 <__vector_18+0xc4>
    11e6:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    11ea:	90 ff       	sbrs	r25, 0
    11ec:	43 c0       	rjmp	.+134    	; 0x1274 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    11ee:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    11f2:	ee ee       	ldi	r30, 0xEE	; 238
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7b       	andi	r24, 0xBF	; 191
    11fe:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    1200:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <tx_off>
    1204:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <tx_on>
    1208:	98 17       	cp	r25, r24
    120a:	89 f1       	breq	.+98     	; 0x126e <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    120c:	8f 70       	andi	r24, 0x0F	; 15
    120e:	2b e0       	ldi	r18, 0x0B	; 11
    1210:	82 9f       	mul	r24, r18
    1212:	c0 01       	movw	r24, r0
    1214:	11 24       	eor	r1, r1
    1216:	fc 01       	movw	r30, r24
    1218:	e2 5f       	subi	r30, 0xF2	; 242
    121a:	fd 4f       	sbci	r31, 0xFD	; 253
    121c:	20 81       	ld	r18, Z
    121e:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    1222:	20 81       	ld	r18, Z
    1224:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    1228:	21 81       	ldd	r18, Z+1	; 0x01
    122a:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    122e:	23 81       	ldd	r18, Z+3	; 0x03
    1230:	aa ef       	ldi	r26, 0xFA	; 250
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    1236:	24 81       	ldd	r18, Z+4	; 0x04
    1238:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    123a:	25 81       	ldd	r18, Z+5	; 0x05
    123c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    123e:	26 81       	ldd	r18, Z+6	; 0x06
    1240:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    1242:	27 81       	ldd	r18, Z+7	; 0x07
    1244:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    1246:	20 85       	ldd	r18, Z+8	; 0x08
    1248:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    124a:	21 85       	ldd	r18, Z+9	; 0x09
    124c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    124e:	22 85       	ldd	r18, Z+10	; 0x0a
    1250:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    1252:	fc 01       	movw	r30, r24
    1254:	e0 5f       	subi	r30, 0xF0	; 240
    1256:	fd 4f       	sbci	r31, 0xFD	; 253
    1258:	80 81       	ld	r24, Z
    125a:	8f 70       	andi	r24, 0x0F	; 15
    125c:	80 64       	ori	r24, 0x40	; 64
    125e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    1262:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <tx_off>
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <tx_off>
    126c:	7d c0       	rjmp	.+250    	; 0x1368 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    126e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <tx_busy>
    1272:	7a c0       	rjmp	.+244    	; 0x1368 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    1274:	81 ff       	sbrs	r24, 1
    1276:	78 c0       	rjmp	.+240    	; 0x1368 <__vector_18+0x1b8>
    1278:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    127c:	81 ff       	sbrs	r24, 1
    127e:	74 c0       	rjmp	.+232    	; 0x1368 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    1280:	80 e1       	ldi	r24, 0x10	; 16
    1282:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    1286:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_on>
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <rx_off>
    1292:	29 1b       	sub	r18, r25
    1294:	31 09       	sbc	r19, r1
    1296:	2f 77       	andi	r18, 0x7F	; 127
    1298:	33 27       	eor	r19, r19
    129a:	20 31       	cpi	r18, 0x10	; 16
    129c:	31 05       	cpc	r19, r1
    129e:	0c f0       	brlt	.+2      	; 0x12a2 <__vector_18+0xf2>
    12a0:	58 c0       	rjmp	.+176    	; 0x1352 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    12a2:	e8 2f       	mov	r30, r24
    12a4:	ef 70       	andi	r30, 0x0F	; 15
    12a6:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    12aa:	2e 2f       	mov	r18, r30
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4b e0       	ldi	r20, 0x0B	; 11
    12b0:	e4 9f       	mul	r30, r20
    12b2:	f0 01       	movw	r30, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	e2 5a       	subi	r30, 0xA2	; 162
    12b8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ba:	9f 70       	andi	r25, 0x0F	; 15
    12bc:	42 81       	ldd	r20, Z+2	; 0x02
    12be:	40 7f       	andi	r20, 0xF0	; 240
    12c0:	94 2b       	or	r25, r20
    12c2:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    12c4:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    12c8:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    12cc:	40 7e       	andi	r20, 0xE0	; 224
    12ce:	97 70       	andi	r25, 0x07	; 7
    12d0:	94 2b       	or	r25, r20
    12d2:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    12d4:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    12d8:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    12da:	aa ef       	ldi	r26, 0xFA	; 250
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	9c 91       	ld	r25, X
    12e0:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    12e2:	9c 91       	ld	r25, X
    12e4:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    12e6:	9c 91       	ld	r25, X
    12e8:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    12ea:	9c 91       	ld	r25, X
    12ec:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    12ee:	9c 91       	ld	r25, X
    12f0:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    12f2:	9c 91       	ld	r25, X
    12f4:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    12f6:	9c 91       	ld	r25, X
    12f8:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    12fa:	9c 91       	ld	r25, X
    12fc:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    1304:	40 81       	ld	r20, Z
    1306:	42 95       	swap	r20
    1308:	46 95       	lsr	r20
    130a:	47 70       	andi	r20, 0x07	; 7
    130c:	51 81       	ldd	r21, Z+1	; 0x01
    130e:	65 2f       	mov	r22, r21
    1310:	66 0f       	add	r22, r22
    1312:	66 0f       	add	r22, r22
    1314:	66 0f       	add	r22, r22
    1316:	86 2f       	mov	r24, r22
    1318:	84 2b       	or	r24, r20
    131a:	95 2f       	mov	r25, r21
    131c:	92 95       	swap	r25
    131e:	96 95       	lsr	r25
    1320:	97 70       	andi	r25, 0x07	; 7
    1322:	89 2b       	or	r24, r25
    1324:	b1 f4       	brne	.+44     	; 0x1352 <__vector_18+0x1a2>
    1326:	8b e0       	ldi	r24, 0x0B	; 11
    1328:	82 9f       	mul	r24, r18
    132a:	f0 01       	movw	r30, r0
    132c:	83 9f       	mul	r24, r19
    132e:	f0 0d       	add	r31, r0
    1330:	11 24       	eor	r1, r1
    1332:	e2 5a       	subi	r30, 0xA2	; 162
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	83 81       	ldd	r24, Z+3	; 0x03
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	59 f4       	brne	.+22     	; 0x1352 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    133c:	98 e0       	ldi	r25, 0x08	; 8
    133e:	88 e1       	ldi	r24, 0x18	; 24
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	a8 95       	wdr
    1346:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    1352:	ee ee       	ldi	r30, 0xEE	; 238
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    135a:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    135c:	80 81       	ld	r24, Z
    135e:	8f 7d       	andi	r24, 0xDF	; 223
    1360:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    1368:	0f 90       	pop	r0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	ff 91       	pop	r31
    1370:	ef 91       	pop	r30
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	6f 91       	pop	r22
    137c:	5f 91       	pop	r21
    137e:	4f 91       	pop	r20
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	0f 90       	pop	r0
    1386:	0b be       	out	0x3b, r0	; 59
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    1396:	e8 ed       	ldi	r30, 0xD8	; 216
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	21 e0       	ldi	r18, 0x01	; 1
    139c:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    139e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    13a2:	2c e0       	ldi	r18, 0x0C	; 12
    13a4:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    13a8:	27 e3       	ldi	r18, 0x37	; 55
    13aa:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    13ae:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    13b2:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    13b6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    13ba:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    13be:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    13c2:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    13c6:	cd ee       	ldi	r28, 0xED	; 237
    13c8:	d0 e0       	ldi	r29, 0x00	; 0
    13ca:	18 82       	st	Y, r1
	CANSTMOB = 0;
    13cc:	ae ee       	ldi	r26, 0xEE	; 238
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    13d2:	20 e1       	ldi	r18, 0x10	; 16
    13d4:	28 83       	st	Y, r18
	CANSTMOB = 0;
    13d6:	1c 92       	st	X, r1
	CANIDM4 = 0;
    13d8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    13dc:	28 2f       	mov	r18, r24
    13de:	22 95       	swap	r18
    13e0:	22 0f       	add	r18, r18
    13e2:	20 7e       	andi	r18, 0xE0	; 224
    13e4:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    13e8:	96 95       	lsr	r25
    13ea:	87 95       	ror	r24
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	96 95       	lsr	r25
    13f2:	87 95       	ror	r24
    13f4:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    13f8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    13fc:	86 2f       	mov	r24, r22
    13fe:	82 95       	swap	r24
    1400:	88 0f       	add	r24, r24
    1402:	80 7e       	andi	r24, 0xE0	; 224
    1404:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    1408:	76 95       	lsr	r23
    140a:	67 95       	ror	r22
    140c:	76 95       	lsr	r23
    140e:	67 95       	ror	r22
    1410:	76 95       	lsr	r23
    1412:	67 95       	ror	r22
    1414:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    1418:	80 e8       	ldi	r24, 0x80	; 128
    141a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    1424:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    1428:	80 eb       	ldi	r24, 0xB0	; 176
    142a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	80 83       	st	Z, r24

	reset = 0;
    1432:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <reset>
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1442:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <rx_off>
    1446:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <rx_on>
    144a:	24 17       	cp	r18, r20
    144c:	89 f1       	breq	.+98     	; 0x14b0 <can_read_message_if_new+0x74>
    144e:	a4 2f       	mov	r26, r20
    1450:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    1452:	8b e0       	ldi	r24, 0x0B	; 11
    1454:	a8 9f       	mul	r26, r24
    1456:	b0 01       	movw	r22, r0
    1458:	11 24       	eor	r1, r1
    145a:	fb 01       	movw	r30, r22
    145c:	e2 5a       	subi	r30, 0xA2	; 162
    145e:	fe 4f       	sbci	r31, 0xFE	; 254
    1460:	20 81       	ld	r18, Z
    1462:	22 95       	swap	r18
    1464:	26 95       	lsr	r18
    1466:	27 70       	andi	r18, 0x07	; 7
    1468:	31 81       	ldd	r19, Z+1	; 0x01
    146a:	53 2f       	mov	r21, r19
    146c:	55 0f       	add	r21, r21
    146e:	55 0f       	add	r21, r21
    1470:	55 0f       	add	r21, r21
    1472:	25 2b       	or	r18, r21
    1474:	32 95       	swap	r19
    1476:	36 95       	lsr	r19
    1478:	37 70       	andi	r19, 0x07	; 7
    147a:	28 83       	st	Y, r18
    147c:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    147e:	fb 01       	movw	r30, r22
    1480:	e0 5a       	subi	r30, 0xA0	; 160
    1482:	fe 4f       	sbci	r31, 0xFE	; 254
    1484:	20 81       	ld	r18, Z
    1486:	2f 70       	andi	r18, 0x0F	; 15
    1488:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    148a:	22 23       	and	r18, r18
    148c:	99 f0       	breq	.+38     	; 0x14b4 <can_read_message_if_new+0x78>
    148e:	db 01       	movw	r26, r22
    1490:	af 59       	subi	r26, 0x9F	; 159
    1492:	be 4f       	sbci	r27, 0xFE	; 254
    1494:	fe 01       	movw	r30, r28
    1496:	33 96       	adiw	r30, 0x03	; 3
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	2d 5f       	subi	r18, 0xFD	; 253
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	ce 01       	movw	r24, r28
    14a0:	82 0f       	add	r24, r18
    14a2:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    14a4:	2d 91       	ld	r18, X+
    14a6:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    14a8:	e8 17       	cp	r30, r24
    14aa:	f9 07       	cpc	r31, r25
    14ac:	d9 f7       	brne	.-10     	; 0x14a4 <can_read_message_if_new+0x68>
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    14b4:	4f 5f       	subi	r20, 0xFF	; 255
    14b6:	40 93 5a 01 	sts	0x015A, r20	; 0x80015a <rx_off>
	}

	return true;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    14c8:	ab ed       	ldi	r26, 0xDB	; 219
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	8c 91       	ld	r24, X
    14ce:	8f 77       	andi	r24, 0x7F	; 127
    14d0:	8c 93       	st	X, r24

	if (!tx_busy) {
    14d2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <tx_busy>
    14d6:	81 11       	cpse	r24, r1
    14d8:	27 c0       	rjmp	.+78     	; 0x1528 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    14da:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    14de:	80 81       	ld	r24, Z
    14e0:	82 95       	swap	r24
    14e2:	88 0f       	add	r24, r24
    14e4:	80 7e       	andi	r24, 0xE0	; 224
    14e6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	96 95       	lsr	r25
    14f0:	87 95       	ror	r24
    14f2:	96 95       	lsr	r25
    14f4:	87 95       	ror	r24
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    14fe:	df 01       	movw	r26, r30
    1500:	13 96       	adiw	r26, 0x03	; 3
    1502:	9f 01       	movw	r18, r30
    1504:	25 5f       	subi	r18, 0xF5	; 245
    1506:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1508:	ca ef       	ldi	r28, 0xFA	; 250
    150a:	d0 e0       	ldi	r29, 0x00	; 0
    150c:	9d 91       	ld	r25, X+
    150e:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1510:	a2 17       	cp	r26, r18
    1512:	b3 07       	cpc	r27, r19
    1514:	d9 f7       	brne	.-10     	; 0x150c <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	80 64       	ori	r24, 0x40	; 64
    1520:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	43 c0       	rjmp	.+134    	; 0x15ae <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1528:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <tx_on>
    152c:	82 2f       	mov	r24, r18
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <tx_off>
    1534:	83 1b       	sub	r24, r19
    1536:	91 09       	sbc	r25, r1
    1538:	8f 77       	andi	r24, 0x7F	; 127
    153a:	99 27       	eor	r25, r25
    153c:	40 97       	sbiw	r24, 0x10	; 16
    153e:	b1 f1       	breq	.+108    	; 0x15ac <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1540:	a2 2f       	mov	r26, r18
    1542:	af 70       	andi	r26, 0x0F	; 15
    1544:	8b e0       	ldi	r24, 0x0B	; 11
    1546:	a8 9f       	mul	r26, r24
    1548:	d0 01       	movw	r26, r0
    154a:	11 24       	eor	r1, r1
    154c:	ed 01       	movw	r28, r26
    154e:	c2 5f       	subi	r28, 0xF2	; 242
    1550:	dd 4f       	sbci	r29, 0xFD	; 253
    1552:	80 81       	ld	r24, Z
    1554:	98 2f       	mov	r25, r24
    1556:	92 95       	swap	r25
    1558:	99 0f       	add	r25, r25
    155a:	90 7e       	andi	r25, 0xE0	; 224
    155c:	88 81       	ld	r24, Y
    155e:	8f 71       	andi	r24, 0x1F	; 31
    1560:	89 2b       	or	r24, r25
    1562:	88 83       	st	Y, r24
    1564:	80 81       	ld	r24, Z
    1566:	98 2f       	mov	r25, r24
    1568:	96 95       	lsr	r25
    156a:	96 95       	lsr	r25
    156c:	96 95       	lsr	r25
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	80 7e       	andi	r24, 0xE0	; 224
    1572:	89 2b       	or	r24, r25
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	92 95       	swap	r25
    157a:	99 0f       	add	r25, r25
    157c:	90 7e       	andi	r25, 0xE0	; 224
    157e:	8f 71       	andi	r24, 0x1F	; 31
    1580:	89 2b       	or	r24, r25
    1582:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	98 2f       	mov	r25, r24
    1588:	9f 70       	andi	r25, 0x0F	; 15
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	80 7f       	andi	r24, 0xF0	; 240
    158e:	89 2b       	or	r24, r25
    1590:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1592:	af 5e       	subi	r26, 0xEF	; 239
    1594:	bd 4f       	sbci	r27, 0xFD	; 253
    1596:	33 96       	adiw	r30, 0x03	; 3
    1598:	88 e0       	ldi	r24, 0x08	; 8
    159a:	01 90       	ld	r0, Z+
    159c:	0d 92       	st	X+, r0
    159e:	8a 95       	dec	r24
    15a0:	e1 f7       	brne	.-8      	; 0x159a <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <tx_on>
		result = true;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    15ac:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    15ae:	eb ed       	ldi	r30, 0xDB	; 219
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	90 81       	ld	r25, Z
    15b4:	90 68       	ori	r25, 0x80	; 128
    15b6:	90 83       	st	Z, r25

	return result;
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <pwm_init>:
    15be:	8e b1       	in	r24, 0x0e	; 14
    15c0:	87 7e       	andi	r24, 0xE7	; 231
    15c2:	8e b9       	out	0x0e, r24	; 14
    15c4:	8d b1       	in	r24, 0x0d	; 13
    15c6:	88 61       	ori	r24, 0x18	; 24
    15c8:	8d b9       	out	0x0d, r24	; 13
    15ca:	a1 e9       	ldi	r26, 0x91	; 145
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	8c 91       	ld	r24, X
    15d0:	88 61       	ori	r24, 0x18	; 24
    15d2:	8c 93       	st	X, r24
    15d4:	e0 e9       	ldi	r30, 0x90	; 144
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	82 60       	ori	r24, 0x02	; 2
    15dc:	80 83       	st	Z, r24
    15de:	80 81       	ld	r24, Z
    15e0:	8e 7f       	andi	r24, 0xFE	; 254
    15e2:	80 83       	st	Z, r24
    15e4:	80 81       	ld	r24, Z
    15e6:	80 68       	ori	r24, 0x80	; 128
    15e8:	80 83       	st	Z, r24
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 7b       	andi	r24, 0xBF	; 191
    15ee:	80 83       	st	Z, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	80 62       	ori	r24, 0x20	; 32
    15f4:	80 83       	st	Z, r24
    15f6:	80 81       	ld	r24, Z
    15f8:	80 61       	ori	r24, 0x10	; 16
    15fa:	80 83       	st	Z, r24
    15fc:	8c 91       	ld	r24, X
    15fe:	81 60       	ori	r24, 0x01	; 1
    1600:	8c 93       	st	X, r24
    1602:	8c 91       	ld	r24, X
    1604:	89 7f       	andi	r24, 0xF9	; 249
    1606:	8c 93       	st	X, r24
    1608:	e6 e9       	ldi	r30, 0x96	; 150
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	89 e9       	ldi	r24, 0x99	; 153
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	97 d1       	rcall	.+814    	; 0x194c <__floatunsisf>
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	48 d2       	rcall	.+1168   	; 0x1ab8 <__mulsf3>
    1628:	60 d1       	rcall	.+704    	; 0x18ea <__fixsfsi>
    162a:	e8 e9       	ldi	r30, 0x98	; 152
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	71 83       	std	Z+1, r23	; 0x01
    1630:	60 83       	st	Z, r22
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    163a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    163e:	08 95       	ret

00001640 <rgbled_turn_off>:
    1640:	95 b1       	in	r25, 0x05	; 5
    1642:	89 2b       	or	r24, r25
    1644:	85 b9       	out	0x05, r24	; 5
    1646:	08 95       	ret

00001648 <rgbled_init>:
    1648:	84 b1       	in	r24, 0x04	; 4
    164a:	80 6e       	ori	r24, 0xE0	; 224
    164c:	84 b9       	out	0x04, r24	; 4
    164e:	80 ee       	ldi	r24, 0xE0	; 224
    1650:	f7 cf       	rjmp	.-18     	; 0x1640 <rgbled_turn_off>
    1652:	08 95       	ret

00001654 <rgbled_turn_on>:
    1654:	95 b1       	in	r25, 0x05	; 5
    1656:	80 95       	com	r24
    1658:	98 23       	and	r25, r24
    165a:	95 b9       	out	0x05, r25	; 5
    165c:	08 95       	ret

0000165e <rgbled_toggle>:
    165e:	95 b1       	in	r25, 0x05	; 5
    1660:	89 27       	eor	r24, r25
    1662:	85 b9       	out	0x05, r24	; 5
    1664:	08 95       	ret

00001666 <spi_init>:
    1666:	94 b1       	in	r25, 0x04	; 4
    1668:	97 60       	ori	r25, 0x07	; 7
    166a:	94 b9       	out	0x04, r25	; 4
    166c:	82 fb       	bst	r24, 2
    166e:	99 27       	eor	r25, r25
    1670:	90 f9       	bld	r25, 0
    1672:	28 2f       	mov	r18, r24
    1674:	22 70       	andi	r18, 0x02	; 2
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	80 65       	ori	r24, 0x50	; 80
    167a:	82 2b       	or	r24, r18
    167c:	8c bd       	out	0x2c, r24	; 44
    167e:	8c b5       	in	r24, 0x2c	; 44
    1680:	83 7f       	andi	r24, 0xF3	; 243
    1682:	8c bd       	out	0x2c, r24	; 44
    1684:	9d bd       	out	0x2d, r25	; 45
    1686:	08 95       	ret

00001688 <spi_trancieve>:
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
    168e:	28 98       	cbi	0x05, 0	; 5
    1690:	41 15       	cp	r20, r1
    1692:	51 05       	cpc	r21, r1
    1694:	c1 f0       	breq	.+48     	; 0x16c6 <spi_trancieve+0x3e>
    1696:	fb 01       	movw	r30, r22
    1698:	dc 01       	movw	r26, r24
    169a:	46 0f       	add	r20, r22
    169c:	57 1f       	adc	r21, r23
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	20 97       	sbiw	r28, 0x00	; 0
    16a2:	11 f0       	breq	.+4      	; 0x16a8 <spi_trancieve+0x20>
    16a4:	9c 91       	ld	r25, X
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <spi_trancieve+0x22>
    16a8:	98 2f       	mov	r25, r24
    16aa:	9e bd       	out	0x2e, r25	; 46
    16ac:	0d b4       	in	r0, 0x2d	; 45
    16ae:	07 fe       	sbrs	r0, 7
    16b0:	fd cf       	rjmp	.-6      	; 0x16ac <spi_trancieve+0x24>
    16b2:	61 15       	cp	r22, r1
    16b4:	71 05       	cpc	r23, r1
    16b6:	11 f0       	breq	.+4      	; 0x16bc <spi_trancieve+0x34>
    16b8:	9e b5       	in	r25, 0x2e	; 46
    16ba:	90 83       	st	Z, r25
    16bc:	31 96       	adiw	r30, 0x01	; 1
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	e4 17       	cp	r30, r20
    16c2:	f5 07       	cpc	r31, r21
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <spi_trancieve+0x18>
    16c6:	21 11       	cpse	r18, r1
    16c8:	28 9a       	sbi	0x05, 0	; 5
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	08 95       	ret

000016d0 <__vector_17>:
    16d0:	1f 92       	push	r1
    16d2:	0f 92       	push	r0
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	0f 92       	push	r0
    16d8:	11 24       	eor	r1, r1
    16da:	0b b6       	in	r0, 0x3b	; 59
    16dc:	0f 92       	push	r0
    16de:	2f 93       	push	r18
    16e0:	3f 93       	push	r19
    16e2:	4f 93       	push	r20
    16e4:	5f 93       	push	r21
    16e6:	6f 93       	push	r22
    16e8:	7f 93       	push	r23
    16ea:	8f 93       	push	r24
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
    16f4:	ae ed       	ldi	r26, 0xDE	; 222
    16f6:	b2 e0       	ldi	r27, 0x02	; 2
    16f8:	ee eb       	ldi	r30, 0xBE	; 190
    16fa:	f2 e0       	ldi	r31, 0x02	; 2
    16fc:	2e ed       	ldi	r18, 0xDE	; 222
    16fe:	32 e0       	ldi	r19, 0x02	; 2
    1700:	8d 91       	ld	r24, X+
    1702:	88 23       	and	r24, r24
    1704:	59 f0       	breq	.+22     	; 0x171c <__vector_17+0x4c>
    1706:	40 81       	ld	r20, Z
    1708:	51 81       	ldd	r21, Z+1	; 0x01
    170a:	62 81       	ldd	r22, Z+2	; 0x02
    170c:	73 81       	ldd	r23, Z+3	; 0x03
    170e:	50 5e       	subi	r21, 0xE0	; 224
    1710:	6f 4f       	sbci	r22, 0xFF	; 255
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	40 83       	st	Z, r20
    1716:	51 83       	std	Z+1, r21	; 0x01
    1718:	62 83       	std	Z+2, r22	; 0x02
    171a:	73 83       	std	Z+3, r23	; 0x03
    171c:	34 96       	adiw	r30, 0x04	; 4
    171e:	e2 17       	cp	r30, r18
    1720:	f3 07       	cpc	r31, r19
    1722:	71 f7       	brne	.-36     	; 0x1700 <__vector_17+0x30>
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0b be       	out	0x3b, r0	; 59
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__subsf3>:
    1748:	50 58       	subi	r21, 0x80	; 128

0000174a <__addsf3>:
    174a:	bb 27       	eor	r27, r27
    174c:	aa 27       	eor	r26, r26
    174e:	0e d0       	rcall	.+28     	; 0x176c <__addsf3x>
    1750:	75 c1       	rjmp	.+746    	; 0x1a3c <__fp_round>
    1752:	66 d1       	rcall	.+716    	; 0x1a20 <__fp_pscA>
    1754:	30 f0       	brcs	.+12     	; 0x1762 <__addsf3+0x18>
    1756:	6b d1       	rcall	.+726    	; 0x1a2e <__fp_pscB>
    1758:	20 f0       	brcs	.+8      	; 0x1762 <__addsf3+0x18>
    175a:	31 f4       	brne	.+12     	; 0x1768 <__addsf3+0x1e>
    175c:	9f 3f       	cpi	r25, 0xFF	; 255
    175e:	11 f4       	brne	.+4      	; 0x1764 <__addsf3+0x1a>
    1760:	1e f4       	brtc	.+6      	; 0x1768 <__addsf3+0x1e>
    1762:	5b c1       	rjmp	.+694    	; 0x1a1a <__fp_nan>
    1764:	0e f4       	brtc	.+2      	; 0x1768 <__addsf3+0x1e>
    1766:	e0 95       	com	r30
    1768:	e7 fb       	bst	r30, 7
    176a:	51 c1       	rjmp	.+674    	; 0x1a0e <__fp_inf>

0000176c <__addsf3x>:
    176c:	e9 2f       	mov	r30, r25
    176e:	77 d1       	rcall	.+750    	; 0x1a5e <__fp_split3>
    1770:	80 f3       	brcs	.-32     	; 0x1752 <__addsf3+0x8>
    1772:	ba 17       	cp	r27, r26
    1774:	62 07       	cpc	r22, r18
    1776:	73 07       	cpc	r23, r19
    1778:	84 07       	cpc	r24, r20
    177a:	95 07       	cpc	r25, r21
    177c:	18 f0       	brcs	.+6      	; 0x1784 <__addsf3x+0x18>
    177e:	71 f4       	brne	.+28     	; 0x179c <__addsf3x+0x30>
    1780:	9e f5       	brtc	.+102    	; 0x17e8 <__addsf3x+0x7c>
    1782:	8f c1       	rjmp	.+798    	; 0x1aa2 <__fp_zero>
    1784:	0e f4       	brtc	.+2      	; 0x1788 <__addsf3x+0x1c>
    1786:	e0 95       	com	r30
    1788:	0b 2e       	mov	r0, r27
    178a:	ba 2f       	mov	r27, r26
    178c:	a0 2d       	mov	r26, r0
    178e:	0b 01       	movw	r0, r22
    1790:	b9 01       	movw	r22, r18
    1792:	90 01       	movw	r18, r0
    1794:	0c 01       	movw	r0, r24
    1796:	ca 01       	movw	r24, r20
    1798:	a0 01       	movw	r20, r0
    179a:	11 24       	eor	r1, r1
    179c:	ff 27       	eor	r31, r31
    179e:	59 1b       	sub	r21, r25
    17a0:	99 f0       	breq	.+38     	; 0x17c8 <__addsf3x+0x5c>
    17a2:	59 3f       	cpi	r21, 0xF9	; 249
    17a4:	50 f4       	brcc	.+20     	; 0x17ba <__addsf3x+0x4e>
    17a6:	50 3e       	cpi	r21, 0xE0	; 224
    17a8:	68 f1       	brcs	.+90     	; 0x1804 <__addsf3x+0x98>
    17aa:	1a 16       	cp	r1, r26
    17ac:	f0 40       	sbci	r31, 0x00	; 0
    17ae:	a2 2f       	mov	r26, r18
    17b0:	23 2f       	mov	r18, r19
    17b2:	34 2f       	mov	r19, r20
    17b4:	44 27       	eor	r20, r20
    17b6:	58 5f       	subi	r21, 0xF8	; 248
    17b8:	f3 cf       	rjmp	.-26     	; 0x17a0 <__addsf3x+0x34>
    17ba:	46 95       	lsr	r20
    17bc:	37 95       	ror	r19
    17be:	27 95       	ror	r18
    17c0:	a7 95       	ror	r26
    17c2:	f0 40       	sbci	r31, 0x00	; 0
    17c4:	53 95       	inc	r21
    17c6:	c9 f7       	brne	.-14     	; 0x17ba <__addsf3x+0x4e>
    17c8:	7e f4       	brtc	.+30     	; 0x17e8 <__addsf3x+0x7c>
    17ca:	1f 16       	cp	r1, r31
    17cc:	ba 0b       	sbc	r27, r26
    17ce:	62 0b       	sbc	r22, r18
    17d0:	73 0b       	sbc	r23, r19
    17d2:	84 0b       	sbc	r24, r20
    17d4:	ba f0       	brmi	.+46     	; 0x1804 <__addsf3x+0x98>
    17d6:	91 50       	subi	r25, 0x01	; 1
    17d8:	a1 f0       	breq	.+40     	; 0x1802 <__addsf3x+0x96>
    17da:	ff 0f       	add	r31, r31
    17dc:	bb 1f       	adc	r27, r27
    17de:	66 1f       	adc	r22, r22
    17e0:	77 1f       	adc	r23, r23
    17e2:	88 1f       	adc	r24, r24
    17e4:	c2 f7       	brpl	.-16     	; 0x17d6 <__addsf3x+0x6a>
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <__addsf3x+0x98>
    17e8:	ba 0f       	add	r27, r26
    17ea:	62 1f       	adc	r22, r18
    17ec:	73 1f       	adc	r23, r19
    17ee:	84 1f       	adc	r24, r20
    17f0:	48 f4       	brcc	.+18     	; 0x1804 <__addsf3x+0x98>
    17f2:	87 95       	ror	r24
    17f4:	77 95       	ror	r23
    17f6:	67 95       	ror	r22
    17f8:	b7 95       	ror	r27
    17fa:	f7 95       	ror	r31
    17fc:	9e 3f       	cpi	r25, 0xFE	; 254
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <__addsf3x+0x96>
    1800:	b3 cf       	rjmp	.-154    	; 0x1768 <__addsf3+0x1e>
    1802:	93 95       	inc	r25
    1804:	88 0f       	add	r24, r24
    1806:	08 f0       	brcs	.+2      	; 0x180a <__addsf3x+0x9e>
    1808:	99 27       	eor	r25, r25
    180a:	ee 0f       	add	r30, r30
    180c:	97 95       	ror	r25
    180e:	87 95       	ror	r24
    1810:	08 95       	ret

00001812 <__cmpsf2>:
    1812:	d9 d0       	rcall	.+434    	; 0x19c6 <__fp_cmp>
    1814:	08 f4       	brcc	.+2      	; 0x1818 <__cmpsf2+0x6>
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	08 95       	ret

0000181a <__divsf3>:
    181a:	0c d0       	rcall	.+24     	; 0x1834 <__divsf3x>
    181c:	0f c1       	rjmp	.+542    	; 0x1a3c <__fp_round>
    181e:	07 d1       	rcall	.+526    	; 0x1a2e <__fp_pscB>
    1820:	40 f0       	brcs	.+16     	; 0x1832 <__divsf3+0x18>
    1822:	fe d0       	rcall	.+508    	; 0x1a20 <__fp_pscA>
    1824:	30 f0       	brcs	.+12     	; 0x1832 <__divsf3+0x18>
    1826:	21 f4       	brne	.+8      	; 0x1830 <__divsf3+0x16>
    1828:	5f 3f       	cpi	r21, 0xFF	; 255
    182a:	19 f0       	breq	.+6      	; 0x1832 <__divsf3+0x18>
    182c:	f0 c0       	rjmp	.+480    	; 0x1a0e <__fp_inf>
    182e:	51 11       	cpse	r21, r1
    1830:	39 c1       	rjmp	.+626    	; 0x1aa4 <__fp_szero>
    1832:	f3 c0       	rjmp	.+486    	; 0x1a1a <__fp_nan>

00001834 <__divsf3x>:
    1834:	14 d1       	rcall	.+552    	; 0x1a5e <__fp_split3>
    1836:	98 f3       	brcs	.-26     	; 0x181e <__divsf3+0x4>

00001838 <__divsf3_pse>:
    1838:	99 23       	and	r25, r25
    183a:	c9 f3       	breq	.-14     	; 0x182e <__divsf3+0x14>
    183c:	55 23       	and	r21, r21
    183e:	b1 f3       	breq	.-20     	; 0x182c <__divsf3+0x12>
    1840:	95 1b       	sub	r25, r21
    1842:	55 0b       	sbc	r21, r21
    1844:	bb 27       	eor	r27, r27
    1846:	aa 27       	eor	r26, r26
    1848:	62 17       	cp	r22, r18
    184a:	73 07       	cpc	r23, r19
    184c:	84 07       	cpc	r24, r20
    184e:	38 f0       	brcs	.+14     	; 0x185e <__divsf3_pse+0x26>
    1850:	9f 5f       	subi	r25, 0xFF	; 255
    1852:	5f 4f       	sbci	r21, 0xFF	; 255
    1854:	22 0f       	add	r18, r18
    1856:	33 1f       	adc	r19, r19
    1858:	44 1f       	adc	r20, r20
    185a:	aa 1f       	adc	r26, r26
    185c:	a9 f3       	breq	.-22     	; 0x1848 <__divsf3_pse+0x10>
    185e:	33 d0       	rcall	.+102    	; 0x18c6 <__divsf3_pse+0x8e>
    1860:	0e 2e       	mov	r0, r30
    1862:	3a f0       	brmi	.+14     	; 0x1872 <__divsf3_pse+0x3a>
    1864:	e0 e8       	ldi	r30, 0x80	; 128
    1866:	30 d0       	rcall	.+96     	; 0x18c8 <__divsf3_pse+0x90>
    1868:	91 50       	subi	r25, 0x01	; 1
    186a:	50 40       	sbci	r21, 0x00	; 0
    186c:	e6 95       	lsr	r30
    186e:	00 1c       	adc	r0, r0
    1870:	ca f7       	brpl	.-14     	; 0x1864 <__divsf3_pse+0x2c>
    1872:	29 d0       	rcall	.+82     	; 0x18c6 <__divsf3_pse+0x8e>
    1874:	fe 2f       	mov	r31, r30
    1876:	27 d0       	rcall	.+78     	; 0x18c6 <__divsf3_pse+0x8e>
    1878:	66 0f       	add	r22, r22
    187a:	77 1f       	adc	r23, r23
    187c:	88 1f       	adc	r24, r24
    187e:	bb 1f       	adc	r27, r27
    1880:	26 17       	cp	r18, r22
    1882:	37 07       	cpc	r19, r23
    1884:	48 07       	cpc	r20, r24
    1886:	ab 07       	cpc	r26, r27
    1888:	b0 e8       	ldi	r27, 0x80	; 128
    188a:	09 f0       	breq	.+2      	; 0x188e <__divsf3_pse+0x56>
    188c:	bb 0b       	sbc	r27, r27
    188e:	80 2d       	mov	r24, r0
    1890:	bf 01       	movw	r22, r30
    1892:	ff 27       	eor	r31, r31
    1894:	93 58       	subi	r25, 0x83	; 131
    1896:	5f 4f       	sbci	r21, 0xFF	; 255
    1898:	2a f0       	brmi	.+10     	; 0x18a4 <__divsf3_pse+0x6c>
    189a:	9e 3f       	cpi	r25, 0xFE	; 254
    189c:	51 05       	cpc	r21, r1
    189e:	68 f0       	brcs	.+26     	; 0x18ba <__divsf3_pse+0x82>
    18a0:	b6 c0       	rjmp	.+364    	; 0x1a0e <__fp_inf>
    18a2:	00 c1       	rjmp	.+512    	; 0x1aa4 <__fp_szero>
    18a4:	5f 3f       	cpi	r21, 0xFF	; 255
    18a6:	ec f3       	brlt	.-6      	; 0x18a2 <__divsf3_pse+0x6a>
    18a8:	98 3e       	cpi	r25, 0xE8	; 232
    18aa:	dc f3       	brlt	.-10     	; 0x18a2 <__divsf3_pse+0x6a>
    18ac:	86 95       	lsr	r24
    18ae:	77 95       	ror	r23
    18b0:	67 95       	ror	r22
    18b2:	b7 95       	ror	r27
    18b4:	f7 95       	ror	r31
    18b6:	9f 5f       	subi	r25, 0xFF	; 255
    18b8:	c9 f7       	brne	.-14     	; 0x18ac <__divsf3_pse+0x74>
    18ba:	88 0f       	add	r24, r24
    18bc:	91 1d       	adc	r25, r1
    18be:	96 95       	lsr	r25
    18c0:	87 95       	ror	r24
    18c2:	97 f9       	bld	r25, 7
    18c4:	08 95       	ret
    18c6:	e1 e0       	ldi	r30, 0x01	; 1
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	bb 1f       	adc	r27, r27
    18d0:	62 17       	cp	r22, r18
    18d2:	73 07       	cpc	r23, r19
    18d4:	84 07       	cpc	r24, r20
    18d6:	ba 07       	cpc	r27, r26
    18d8:	20 f0       	brcs	.+8      	; 0x18e2 <__divsf3_pse+0xaa>
    18da:	62 1b       	sub	r22, r18
    18dc:	73 0b       	sbc	r23, r19
    18de:	84 0b       	sbc	r24, r20
    18e0:	ba 0b       	sbc	r27, r26
    18e2:	ee 1f       	adc	r30, r30
    18e4:	88 f7       	brcc	.-30     	; 0x18c8 <__divsf3_pse+0x90>
    18e6:	e0 95       	com	r30
    18e8:	08 95       	ret

000018ea <__fixsfsi>:
    18ea:	04 d0       	rcall	.+8      	; 0x18f4 <__fixunssfsi>
    18ec:	68 94       	set
    18ee:	b1 11       	cpse	r27, r1
    18f0:	d9 c0       	rjmp	.+434    	; 0x1aa4 <__fp_szero>
    18f2:	08 95       	ret

000018f4 <__fixunssfsi>:
    18f4:	bc d0       	rcall	.+376    	; 0x1a6e <__fp_splitA>
    18f6:	88 f0       	brcs	.+34     	; 0x191a <__fixunssfsi+0x26>
    18f8:	9f 57       	subi	r25, 0x7F	; 127
    18fa:	90 f0       	brcs	.+36     	; 0x1920 <__fixunssfsi+0x2c>
    18fc:	b9 2f       	mov	r27, r25
    18fe:	99 27       	eor	r25, r25
    1900:	b7 51       	subi	r27, 0x17	; 23
    1902:	a0 f0       	brcs	.+40     	; 0x192c <__fixunssfsi+0x38>
    1904:	d1 f0       	breq	.+52     	; 0x193a <__fixunssfsi+0x46>
    1906:	66 0f       	add	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	88 1f       	adc	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	1a f0       	brmi	.+6      	; 0x1916 <__fixunssfsi+0x22>
    1910:	ba 95       	dec	r27
    1912:	c9 f7       	brne	.-14     	; 0x1906 <__fixunssfsi+0x12>
    1914:	12 c0       	rjmp	.+36     	; 0x193a <__fixunssfsi+0x46>
    1916:	b1 30       	cpi	r27, 0x01	; 1
    1918:	81 f0       	breq	.+32     	; 0x193a <__fixunssfsi+0x46>
    191a:	c3 d0       	rcall	.+390    	; 0x1aa2 <__fp_zero>
    191c:	b1 e0       	ldi	r27, 0x01	; 1
    191e:	08 95       	ret
    1920:	c0 c0       	rjmp	.+384    	; 0x1aa2 <__fp_zero>
    1922:	67 2f       	mov	r22, r23
    1924:	78 2f       	mov	r23, r24
    1926:	88 27       	eor	r24, r24
    1928:	b8 5f       	subi	r27, 0xF8	; 248
    192a:	39 f0       	breq	.+14     	; 0x193a <__fixunssfsi+0x46>
    192c:	b9 3f       	cpi	r27, 0xF9	; 249
    192e:	cc f3       	brlt	.-14     	; 0x1922 <__fixunssfsi+0x2e>
    1930:	86 95       	lsr	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b3 95       	inc	r27
    1938:	d9 f7       	brne	.-10     	; 0x1930 <__fixunssfsi+0x3c>
    193a:	3e f4       	brtc	.+14     	; 0x194a <__fixunssfsi+0x56>
    193c:	90 95       	com	r25
    193e:	80 95       	com	r24
    1940:	70 95       	com	r23
    1942:	61 95       	neg	r22
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	8f 4f       	sbci	r24, 0xFF	; 255
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	08 95       	ret

0000194c <__floatunsisf>:
    194c:	e8 94       	clt
    194e:	09 c0       	rjmp	.+18     	; 0x1962 <__floatsisf+0x12>

00001950 <__floatsisf>:
    1950:	97 fb       	bst	r25, 7
    1952:	3e f4       	brtc	.+14     	; 0x1962 <__floatsisf+0x12>
    1954:	90 95       	com	r25
    1956:	80 95       	com	r24
    1958:	70 95       	com	r23
    195a:	61 95       	neg	r22
    195c:	7f 4f       	sbci	r23, 0xFF	; 255
    195e:	8f 4f       	sbci	r24, 0xFF	; 255
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	99 23       	and	r25, r25
    1964:	a9 f0       	breq	.+42     	; 0x1990 <__floatsisf+0x40>
    1966:	f9 2f       	mov	r31, r25
    1968:	96 e9       	ldi	r25, 0x96	; 150
    196a:	bb 27       	eor	r27, r27
    196c:	93 95       	inc	r25
    196e:	f6 95       	lsr	r31
    1970:	87 95       	ror	r24
    1972:	77 95       	ror	r23
    1974:	67 95       	ror	r22
    1976:	b7 95       	ror	r27
    1978:	f1 11       	cpse	r31, r1
    197a:	f8 cf       	rjmp	.-16     	; 0x196c <__floatsisf+0x1c>
    197c:	fa f4       	brpl	.+62     	; 0x19bc <__floatsisf+0x6c>
    197e:	bb 0f       	add	r27, r27
    1980:	11 f4       	brne	.+4      	; 0x1986 <__floatsisf+0x36>
    1982:	60 ff       	sbrs	r22, 0
    1984:	1b c0       	rjmp	.+54     	; 0x19bc <__floatsisf+0x6c>
    1986:	6f 5f       	subi	r22, 0xFF	; 255
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	8f 4f       	sbci	r24, 0xFF	; 255
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	16 c0       	rjmp	.+44     	; 0x19bc <__floatsisf+0x6c>
    1990:	88 23       	and	r24, r24
    1992:	11 f0       	breq	.+4      	; 0x1998 <__floatsisf+0x48>
    1994:	96 e9       	ldi	r25, 0x96	; 150
    1996:	11 c0       	rjmp	.+34     	; 0x19ba <__floatsisf+0x6a>
    1998:	77 23       	and	r23, r23
    199a:	21 f0       	breq	.+8      	; 0x19a4 <__floatsisf+0x54>
    199c:	9e e8       	ldi	r25, 0x8E	; 142
    199e:	87 2f       	mov	r24, r23
    19a0:	76 2f       	mov	r23, r22
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <__floatsisf+0x5e>
    19a4:	66 23       	and	r22, r22
    19a6:	71 f0       	breq	.+28     	; 0x19c4 <__floatsisf+0x74>
    19a8:	96 e8       	ldi	r25, 0x86	; 134
    19aa:	86 2f       	mov	r24, r22
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	2a f0       	brmi	.+10     	; 0x19bc <__floatsisf+0x6c>
    19b2:	9a 95       	dec	r25
    19b4:	66 0f       	add	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	88 1f       	adc	r24, r24
    19ba:	da f7       	brpl	.-10     	; 0x19b2 <__floatsisf+0x62>
    19bc:	88 0f       	add	r24, r24
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret

000019c6 <__fp_cmp>:
    19c6:	99 0f       	add	r25, r25
    19c8:	00 08       	sbc	r0, r0
    19ca:	55 0f       	add	r21, r21
    19cc:	aa 0b       	sbc	r26, r26
    19ce:	e0 e8       	ldi	r30, 0x80	; 128
    19d0:	fe ef       	ldi	r31, 0xFE	; 254
    19d2:	16 16       	cp	r1, r22
    19d4:	17 06       	cpc	r1, r23
    19d6:	e8 07       	cpc	r30, r24
    19d8:	f9 07       	cpc	r31, r25
    19da:	c0 f0       	brcs	.+48     	; 0x1a0c <__fp_cmp+0x46>
    19dc:	12 16       	cp	r1, r18
    19de:	13 06       	cpc	r1, r19
    19e0:	e4 07       	cpc	r30, r20
    19e2:	f5 07       	cpc	r31, r21
    19e4:	98 f0       	brcs	.+38     	; 0x1a0c <__fp_cmp+0x46>
    19e6:	62 1b       	sub	r22, r18
    19e8:	73 0b       	sbc	r23, r19
    19ea:	84 0b       	sbc	r24, r20
    19ec:	95 0b       	sbc	r25, r21
    19ee:	39 f4       	brne	.+14     	; 0x19fe <__fp_cmp+0x38>
    19f0:	0a 26       	eor	r0, r26
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <__fp_cmp+0x46>
    19f4:	23 2b       	or	r18, r19
    19f6:	24 2b       	or	r18, r20
    19f8:	25 2b       	or	r18, r21
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <__fp_cmp+0x3e>
    19fc:	08 95       	ret
    19fe:	0a 26       	eor	r0, r26
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <__fp_cmp+0x3e>
    1a02:	a1 40       	sbci	r26, 0x01	; 1
    1a04:	a6 95       	lsr	r26
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	81 1d       	adc	r24, r1
    1a0a:	81 1d       	adc	r24, r1
    1a0c:	08 95       	ret

00001a0e <__fp_inf>:
    1a0e:	97 f9       	bld	r25, 7
    1a10:	9f 67       	ori	r25, 0x7F	; 127
    1a12:	80 e8       	ldi	r24, 0x80	; 128
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	08 95       	ret

00001a1a <__fp_nan>:
    1a1a:	9f ef       	ldi	r25, 0xFF	; 255
    1a1c:	80 ec       	ldi	r24, 0xC0	; 192
    1a1e:	08 95       	ret

00001a20 <__fp_pscA>:
    1a20:	00 24       	eor	r0, r0
    1a22:	0a 94       	dec	r0
    1a24:	16 16       	cp	r1, r22
    1a26:	17 06       	cpc	r1, r23
    1a28:	18 06       	cpc	r1, r24
    1a2a:	09 06       	cpc	r0, r25
    1a2c:	08 95       	ret

00001a2e <__fp_pscB>:
    1a2e:	00 24       	eor	r0, r0
    1a30:	0a 94       	dec	r0
    1a32:	12 16       	cp	r1, r18
    1a34:	13 06       	cpc	r1, r19
    1a36:	14 06       	cpc	r1, r20
    1a38:	05 06       	cpc	r0, r21
    1a3a:	08 95       	ret

00001a3c <__fp_round>:
    1a3c:	09 2e       	mov	r0, r25
    1a3e:	03 94       	inc	r0
    1a40:	00 0c       	add	r0, r0
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <__fp_round+0xc>
    1a44:	88 23       	and	r24, r24
    1a46:	52 f0       	brmi	.+20     	; 0x1a5c <__fp_round+0x20>
    1a48:	bb 0f       	add	r27, r27
    1a4a:	40 f4       	brcc	.+16     	; 0x1a5c <__fp_round+0x20>
    1a4c:	bf 2b       	or	r27, r31
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <__fp_round+0x18>
    1a50:	60 ff       	sbrs	r22, 0
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <__fp_round+0x20>
    1a54:	6f 5f       	subi	r22, 0xFF	; 255
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	08 95       	ret

00001a5e <__fp_split3>:
    1a5e:	57 fd       	sbrc	r21, 7
    1a60:	90 58       	subi	r25, 0x80	; 128
    1a62:	44 0f       	add	r20, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	59 f0       	breq	.+22     	; 0x1a7e <__fp_splitA+0x10>
    1a68:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6a:	71 f0       	breq	.+28     	; 0x1a88 <__fp_splitA+0x1a>
    1a6c:	47 95       	ror	r20

00001a6e <__fp_splitA>:
    1a6e:	88 0f       	add	r24, r24
    1a70:	97 fb       	bst	r25, 7
    1a72:	99 1f       	adc	r25, r25
    1a74:	61 f0       	breq	.+24     	; 0x1a8e <__fp_splitA+0x20>
    1a76:	9f 3f       	cpi	r25, 0xFF	; 255
    1a78:	79 f0       	breq	.+30     	; 0x1a98 <__fp_splitA+0x2a>
    1a7a:	87 95       	ror	r24
    1a7c:	08 95       	ret
    1a7e:	12 16       	cp	r1, r18
    1a80:	13 06       	cpc	r1, r19
    1a82:	14 06       	cpc	r1, r20
    1a84:	55 1f       	adc	r21, r21
    1a86:	f2 cf       	rjmp	.-28     	; 0x1a6c <__fp_split3+0xe>
    1a88:	46 95       	lsr	r20
    1a8a:	f1 df       	rcall	.-30     	; 0x1a6e <__fp_splitA>
    1a8c:	08 c0       	rjmp	.+16     	; 0x1a9e <__fp_splitA+0x30>
    1a8e:	16 16       	cp	r1, r22
    1a90:	17 06       	cpc	r1, r23
    1a92:	18 06       	cpc	r1, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	f1 cf       	rjmp	.-30     	; 0x1a7a <__fp_splitA+0xc>
    1a98:	86 95       	lsr	r24
    1a9a:	71 05       	cpc	r23, r1
    1a9c:	61 05       	cpc	r22, r1
    1a9e:	08 94       	sec
    1aa0:	08 95       	ret

00001aa2 <__fp_zero>:
    1aa2:	e8 94       	clt

00001aa4 <__fp_szero>:
    1aa4:	bb 27       	eor	r27, r27
    1aa6:	66 27       	eor	r22, r22
    1aa8:	77 27       	eor	r23, r23
    1aaa:	cb 01       	movw	r24, r22
    1aac:	97 f9       	bld	r25, 7
    1aae:	08 95       	ret

00001ab0 <__gesf2>:
    1ab0:	8a df       	rcall	.-236    	; 0x19c6 <__fp_cmp>
    1ab2:	08 f4       	brcc	.+2      	; 0x1ab6 <__gesf2+0x6>
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	08 95       	ret

00001ab8 <__mulsf3>:
    1ab8:	0b d0       	rcall	.+22     	; 0x1ad0 <__mulsf3x>
    1aba:	c0 cf       	rjmp	.-128    	; 0x1a3c <__fp_round>
    1abc:	b1 df       	rcall	.-158    	; 0x1a20 <__fp_pscA>
    1abe:	28 f0       	brcs	.+10     	; 0x1aca <__mulsf3+0x12>
    1ac0:	b6 df       	rcall	.-148    	; 0x1a2e <__fp_pscB>
    1ac2:	18 f0       	brcs	.+6      	; 0x1aca <__mulsf3+0x12>
    1ac4:	95 23       	and	r25, r21
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <__mulsf3+0x12>
    1ac8:	a2 cf       	rjmp	.-188    	; 0x1a0e <__fp_inf>
    1aca:	a7 cf       	rjmp	.-178    	; 0x1a1a <__fp_nan>
    1acc:	11 24       	eor	r1, r1
    1ace:	ea cf       	rjmp	.-44     	; 0x1aa4 <__fp_szero>

00001ad0 <__mulsf3x>:
    1ad0:	c6 df       	rcall	.-116    	; 0x1a5e <__fp_split3>
    1ad2:	a0 f3       	brcs	.-24     	; 0x1abc <__mulsf3+0x4>

00001ad4 <__mulsf3_pse>:
    1ad4:	95 9f       	mul	r25, r21
    1ad6:	d1 f3       	breq	.-12     	; 0x1acc <__mulsf3+0x14>
    1ad8:	95 0f       	add	r25, r21
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	55 1f       	adc	r21, r21
    1ade:	62 9f       	mul	r22, r18
    1ae0:	f0 01       	movw	r30, r0
    1ae2:	72 9f       	mul	r23, r18
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	f0 0d       	add	r31, r0
    1ae8:	b1 1d       	adc	r27, r1
    1aea:	63 9f       	mul	r22, r19
    1aec:	aa 27       	eor	r26, r26
    1aee:	f0 0d       	add	r31, r0
    1af0:	b1 1d       	adc	r27, r1
    1af2:	aa 1f       	adc	r26, r26
    1af4:	64 9f       	mul	r22, r20
    1af6:	66 27       	eor	r22, r22
    1af8:	b0 0d       	add	r27, r0
    1afa:	a1 1d       	adc	r26, r1
    1afc:	66 1f       	adc	r22, r22
    1afe:	82 9f       	mul	r24, r18
    1b00:	22 27       	eor	r18, r18
    1b02:	b0 0d       	add	r27, r0
    1b04:	a1 1d       	adc	r26, r1
    1b06:	62 1f       	adc	r22, r18
    1b08:	73 9f       	mul	r23, r19
    1b0a:	b0 0d       	add	r27, r0
    1b0c:	a1 1d       	adc	r26, r1
    1b0e:	62 1f       	adc	r22, r18
    1b10:	83 9f       	mul	r24, r19
    1b12:	a0 0d       	add	r26, r0
    1b14:	61 1d       	adc	r22, r1
    1b16:	22 1f       	adc	r18, r18
    1b18:	74 9f       	mul	r23, r20
    1b1a:	33 27       	eor	r19, r19
    1b1c:	a0 0d       	add	r26, r0
    1b1e:	61 1d       	adc	r22, r1
    1b20:	23 1f       	adc	r18, r19
    1b22:	84 9f       	mul	r24, r20
    1b24:	60 0d       	add	r22, r0
    1b26:	21 1d       	adc	r18, r1
    1b28:	82 2f       	mov	r24, r18
    1b2a:	76 2f       	mov	r23, r22
    1b2c:	6a 2f       	mov	r22, r26
    1b2e:	11 24       	eor	r1, r1
    1b30:	9f 57       	subi	r25, 0x7F	; 127
    1b32:	50 40       	sbci	r21, 0x00	; 0
    1b34:	8a f0       	brmi	.+34     	; 0x1b58 <__mulsf3_pse+0x84>
    1b36:	e1 f0       	breq	.+56     	; 0x1b70 <__mulsf3_pse+0x9c>
    1b38:	88 23       	and	r24, r24
    1b3a:	4a f0       	brmi	.+18     	; 0x1b4e <__mulsf3_pse+0x7a>
    1b3c:	ee 0f       	add	r30, r30
    1b3e:	ff 1f       	adc	r31, r31
    1b40:	bb 1f       	adc	r27, r27
    1b42:	66 1f       	adc	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	91 50       	subi	r25, 0x01	; 1
    1b4a:	50 40       	sbci	r21, 0x00	; 0
    1b4c:	a9 f7       	brne	.-22     	; 0x1b38 <__mulsf3_pse+0x64>
    1b4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b50:	51 05       	cpc	r21, r1
    1b52:	70 f0       	brcs	.+28     	; 0x1b70 <__mulsf3_pse+0x9c>
    1b54:	5c cf       	rjmp	.-328    	; 0x1a0e <__fp_inf>
    1b56:	a6 cf       	rjmp	.-180    	; 0x1aa4 <__fp_szero>
    1b58:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5a:	ec f3       	brlt	.-6      	; 0x1b56 <__mulsf3_pse+0x82>
    1b5c:	98 3e       	cpi	r25, 0xE8	; 232
    1b5e:	dc f3       	brlt	.-10     	; 0x1b56 <__mulsf3_pse+0x82>
    1b60:	86 95       	lsr	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	b7 95       	ror	r27
    1b68:	f7 95       	ror	r31
    1b6a:	e7 95       	ror	r30
    1b6c:	9f 5f       	subi	r25, 0xFF	; 255
    1b6e:	c1 f7       	brne	.-16     	; 0x1b60 <__mulsf3_pse+0x8c>
    1b70:	fe 2b       	or	r31, r30
    1b72:	88 0f       	add	r24, r24
    1b74:	91 1d       	adc	r25, r1
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	97 f9       	bld	r25, 7
    1b7c:	08 95       	ret

00001b7e <__tablejump2__>:
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	00 24       	eor	r0, r0
    1b84:	00 1c       	adc	r0, r0
    1b86:	0b be       	out	0x3b, r0	; 59
    1b88:	07 90       	elpm	r0, Z+
    1b8a:	f6 91       	elpm	r31, Z
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	09 94       	ijmp

00001b90 <atoi>:
    1b90:	fc 01       	movw	r30, r24
    1b92:	88 27       	eor	r24, r24
    1b94:	99 27       	eor	r25, r25
    1b96:	e8 94       	clt
    1b98:	21 91       	ld	r18, Z+
    1b9a:	20 32       	cpi	r18, 0x20	; 32
    1b9c:	e9 f3       	breq	.-6      	; 0x1b98 <atoi+0x8>
    1b9e:	29 30       	cpi	r18, 0x09	; 9
    1ba0:	10 f0       	brcs	.+4      	; 0x1ba6 <atoi+0x16>
    1ba2:	2e 30       	cpi	r18, 0x0E	; 14
    1ba4:	c8 f3       	brcs	.-14     	; 0x1b98 <atoi+0x8>
    1ba6:	2b 32       	cpi	r18, 0x2B	; 43
    1ba8:	39 f0       	breq	.+14     	; 0x1bb8 <atoi+0x28>
    1baa:	2d 32       	cpi	r18, 0x2D	; 45
    1bac:	31 f4       	brne	.+12     	; 0x1bba <atoi+0x2a>
    1bae:	68 94       	set
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <atoi+0x28>
    1bb2:	0b d0       	rcall	.+22     	; 0x1bca <__mulhi_const_10>
    1bb4:	82 0f       	add	r24, r18
    1bb6:	91 1d       	adc	r25, r1
    1bb8:	21 91       	ld	r18, Z+
    1bba:	20 53       	subi	r18, 0x30	; 48
    1bbc:	2a 30       	cpi	r18, 0x0A	; 10
    1bbe:	c8 f3       	brcs	.-14     	; 0x1bb2 <atoi+0x22>
    1bc0:	1e f4       	brtc	.+6      	; 0x1bc8 <atoi+0x38>
    1bc2:	90 95       	com	r25
    1bc4:	81 95       	neg	r24
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	08 95       	ret

00001bca <__mulhi_const_10>:
    1bca:	7a e0       	ldi	r23, 0x0A	; 10
    1bcc:	97 9f       	mul	r25, r23
    1bce:	90 2d       	mov	r25, r0
    1bd0:	87 9f       	mul	r24, r23
    1bd2:	80 2d       	mov	r24, r0
    1bd4:	91 0d       	add	r25, r1
    1bd6:	11 24       	eor	r1, r1
    1bd8:	08 95       	ret

00001bda <printf>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	ae 01       	movw	r20, r28
    1be4:	4b 5f       	subi	r20, 0xFB	; 251
    1be6:	5f 4f       	sbci	r21, 0xFF	; 255
    1be8:	fa 01       	movw	r30, r20
    1bea:	61 91       	ld	r22, Z+
    1bec:	71 91       	ld	r23, Z+
    1bee:	af 01       	movw	r20, r30
    1bf0:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <__iob+0x2>
    1bf4:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <__iob+0x3>
    1bf8:	08 d0       	rcall	.+16     	; 0x1c0a <vfprintf>
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	08 95       	ret

00001c00 <putchar>:
    1c00:	60 91 86 03 	lds	r22, 0x0386	; 0x800386 <__iob+0x2>
    1c04:	70 91 87 03 	lds	r23, 0x0387	; 0x800387 <__iob+0x3>
    1c08:	13 c2       	rjmp	.+1062   	; 0x2030 <fputc>

00001c0a <vfprintf>:
    1c0a:	2f 92       	push	r2
    1c0c:	3f 92       	push	r3
    1c0e:	4f 92       	push	r4
    1c10:	5f 92       	push	r5
    1c12:	6f 92       	push	r6
    1c14:	7f 92       	push	r7
    1c16:	8f 92       	push	r8
    1c18:	9f 92       	push	r9
    1c1a:	af 92       	push	r10
    1c1c:	bf 92       	push	r11
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	2b 97       	sbiw	r28, 0x0b	; 11
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	6c 01       	movw	r12, r24
    1c40:	7b 01       	movw	r14, r22
    1c42:	8a 01       	movw	r16, r20
    1c44:	fc 01       	movw	r30, r24
    1c46:	17 82       	std	Z+7, r1	; 0x07
    1c48:	16 82       	std	Z+6, r1	; 0x06
    1c4a:	83 81       	ldd	r24, Z+3	; 0x03
    1c4c:	81 ff       	sbrs	r24, 1
    1c4e:	bf c1       	rjmp	.+894    	; 0x1fce <vfprintf+0x3c4>
    1c50:	ce 01       	movw	r24, r28
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	3c 01       	movw	r6, r24
    1c56:	f6 01       	movw	r30, r12
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	f7 01       	movw	r30, r14
    1c5c:	93 fd       	sbrc	r25, 3
    1c5e:	85 91       	lpm	r24, Z+
    1c60:	93 ff       	sbrs	r25, 3
    1c62:	81 91       	ld	r24, Z+
    1c64:	7f 01       	movw	r14, r30
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <vfprintf+0x62>
    1c6a:	ad c1       	rjmp	.+858    	; 0x1fc6 <vfprintf+0x3bc>
    1c6c:	85 32       	cpi	r24, 0x25	; 37
    1c6e:	39 f4       	brne	.+14     	; 0x1c7e <vfprintf+0x74>
    1c70:	93 fd       	sbrc	r25, 3
    1c72:	85 91       	lpm	r24, Z+
    1c74:	93 ff       	sbrs	r25, 3
    1c76:	81 91       	ld	r24, Z+
    1c78:	7f 01       	movw	r14, r30
    1c7a:	85 32       	cpi	r24, 0x25	; 37
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <vfprintf+0x7c>
    1c7e:	b6 01       	movw	r22, r12
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	d6 d1       	rcall	.+940    	; 0x2030 <fputc>
    1c84:	e8 cf       	rjmp	.-48     	; 0x1c56 <vfprintf+0x4c>
    1c86:	91 2c       	mov	r9, r1
    1c88:	21 2c       	mov	r2, r1
    1c8a:	31 2c       	mov	r3, r1
    1c8c:	ff e1       	ldi	r31, 0x1F	; 31
    1c8e:	f3 15       	cp	r31, r3
    1c90:	d8 f0       	brcs	.+54     	; 0x1cc8 <vfprintf+0xbe>
    1c92:	8b 32       	cpi	r24, 0x2B	; 43
    1c94:	79 f0       	breq	.+30     	; 0x1cb4 <vfprintf+0xaa>
    1c96:	38 f4       	brcc	.+14     	; 0x1ca6 <vfprintf+0x9c>
    1c98:	80 32       	cpi	r24, 0x20	; 32
    1c9a:	79 f0       	breq	.+30     	; 0x1cba <vfprintf+0xb0>
    1c9c:	83 32       	cpi	r24, 0x23	; 35
    1c9e:	a1 f4       	brne	.+40     	; 0x1cc8 <vfprintf+0xbe>
    1ca0:	23 2d       	mov	r18, r3
    1ca2:	20 61       	ori	r18, 0x10	; 16
    1ca4:	1d c0       	rjmp	.+58     	; 0x1ce0 <vfprintf+0xd6>
    1ca6:	8d 32       	cpi	r24, 0x2D	; 45
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <vfprintf+0xb8>
    1caa:	80 33       	cpi	r24, 0x30	; 48
    1cac:	69 f4       	brne	.+26     	; 0x1cc8 <vfprintf+0xbe>
    1cae:	23 2d       	mov	r18, r3
    1cb0:	21 60       	ori	r18, 0x01	; 1
    1cb2:	16 c0       	rjmp	.+44     	; 0x1ce0 <vfprintf+0xd6>
    1cb4:	83 2d       	mov	r24, r3
    1cb6:	82 60       	ori	r24, 0x02	; 2
    1cb8:	38 2e       	mov	r3, r24
    1cba:	e3 2d       	mov	r30, r3
    1cbc:	e4 60       	ori	r30, 0x04	; 4
    1cbe:	3e 2e       	mov	r3, r30
    1cc0:	2a c0       	rjmp	.+84     	; 0x1d16 <vfprintf+0x10c>
    1cc2:	f3 2d       	mov	r31, r3
    1cc4:	f8 60       	ori	r31, 0x08	; 8
    1cc6:	1d c0       	rjmp	.+58     	; 0x1d02 <vfprintf+0xf8>
    1cc8:	37 fc       	sbrc	r3, 7
    1cca:	2d c0       	rjmp	.+90     	; 0x1d26 <vfprintf+0x11c>
    1ccc:	20 ed       	ldi	r18, 0xD0	; 208
    1cce:	28 0f       	add	r18, r24
    1cd0:	2a 30       	cpi	r18, 0x0A	; 10
    1cd2:	40 f0       	brcs	.+16     	; 0x1ce4 <vfprintf+0xda>
    1cd4:	8e 32       	cpi	r24, 0x2E	; 46
    1cd6:	b9 f4       	brne	.+46     	; 0x1d06 <vfprintf+0xfc>
    1cd8:	36 fc       	sbrc	r3, 6
    1cda:	75 c1       	rjmp	.+746    	; 0x1fc6 <vfprintf+0x3bc>
    1cdc:	23 2d       	mov	r18, r3
    1cde:	20 64       	ori	r18, 0x40	; 64
    1ce0:	32 2e       	mov	r3, r18
    1ce2:	19 c0       	rjmp	.+50     	; 0x1d16 <vfprintf+0x10c>
    1ce4:	36 fe       	sbrs	r3, 6
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <vfprintf+0xea>
    1ce8:	8a e0       	ldi	r24, 0x0A	; 10
    1cea:	98 9e       	mul	r9, r24
    1cec:	20 0d       	add	r18, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	92 2e       	mov	r9, r18
    1cf2:	11 c0       	rjmp	.+34     	; 0x1d16 <vfprintf+0x10c>
    1cf4:	ea e0       	ldi	r30, 0x0A	; 10
    1cf6:	2e 9e       	mul	r2, r30
    1cf8:	20 0d       	add	r18, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	22 2e       	mov	r2, r18
    1cfe:	f3 2d       	mov	r31, r3
    1d00:	f0 62       	ori	r31, 0x20	; 32
    1d02:	3f 2e       	mov	r3, r31
    1d04:	08 c0       	rjmp	.+16     	; 0x1d16 <vfprintf+0x10c>
    1d06:	8c 36       	cpi	r24, 0x6C	; 108
    1d08:	21 f4       	brne	.+8      	; 0x1d12 <vfprintf+0x108>
    1d0a:	83 2d       	mov	r24, r3
    1d0c:	80 68       	ori	r24, 0x80	; 128
    1d0e:	38 2e       	mov	r3, r24
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x10c>
    1d12:	88 36       	cpi	r24, 0x68	; 104
    1d14:	41 f4       	brne	.+16     	; 0x1d26 <vfprintf+0x11c>
    1d16:	f7 01       	movw	r30, r14
    1d18:	93 fd       	sbrc	r25, 3
    1d1a:	85 91       	lpm	r24, Z+
    1d1c:	93 ff       	sbrs	r25, 3
    1d1e:	81 91       	ld	r24, Z+
    1d20:	7f 01       	movw	r14, r30
    1d22:	81 11       	cpse	r24, r1
    1d24:	b3 cf       	rjmp	.-154    	; 0x1c8c <vfprintf+0x82>
    1d26:	98 2f       	mov	r25, r24
    1d28:	9f 7d       	andi	r25, 0xDF	; 223
    1d2a:	95 54       	subi	r25, 0x45	; 69
    1d2c:	93 30       	cpi	r25, 0x03	; 3
    1d2e:	28 f4       	brcc	.+10     	; 0x1d3a <vfprintf+0x130>
    1d30:	0c 5f       	subi	r16, 0xFC	; 252
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	9f e3       	ldi	r25, 0x3F	; 63
    1d36:	99 83       	std	Y+1, r25	; 0x01
    1d38:	0d c0       	rjmp	.+26     	; 0x1d54 <vfprintf+0x14a>
    1d3a:	83 36       	cpi	r24, 0x63	; 99
    1d3c:	31 f0       	breq	.+12     	; 0x1d4a <vfprintf+0x140>
    1d3e:	83 37       	cpi	r24, 0x73	; 115
    1d40:	71 f0       	breq	.+28     	; 0x1d5e <vfprintf+0x154>
    1d42:	83 35       	cpi	r24, 0x53	; 83
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <vfprintf+0x13e>
    1d46:	55 c0       	rjmp	.+170    	; 0x1df2 <vfprintf+0x1e8>
    1d48:	20 c0       	rjmp	.+64     	; 0x1d8a <vfprintf+0x180>
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	80 81       	ld	r24, Z
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	0e 5f       	subi	r16, 0xFE	; 254
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	88 24       	eor	r8, r8
    1d56:	83 94       	inc	r8
    1d58:	91 2c       	mov	r9, r1
    1d5a:	53 01       	movw	r10, r6
    1d5c:	12 c0       	rjmp	.+36     	; 0x1d82 <vfprintf+0x178>
    1d5e:	28 01       	movw	r4, r16
    1d60:	f2 e0       	ldi	r31, 0x02	; 2
    1d62:	4f 0e       	add	r4, r31
    1d64:	51 1c       	adc	r5, r1
    1d66:	f8 01       	movw	r30, r16
    1d68:	a0 80       	ld	r10, Z
    1d6a:	b1 80       	ldd	r11, Z+1	; 0x01
    1d6c:	36 fe       	sbrs	r3, 6
    1d6e:	03 c0       	rjmp	.+6      	; 0x1d76 <vfprintf+0x16c>
    1d70:	69 2d       	mov	r22, r9
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <vfprintf+0x170>
    1d76:	6f ef       	ldi	r22, 0xFF	; 255
    1d78:	7f ef       	ldi	r23, 0xFF	; 255
    1d7a:	c5 01       	movw	r24, r10
    1d7c:	4e d1       	rcall	.+668    	; 0x201a <strnlen>
    1d7e:	4c 01       	movw	r8, r24
    1d80:	82 01       	movw	r16, r4
    1d82:	f3 2d       	mov	r31, r3
    1d84:	ff 77       	andi	r31, 0x7F	; 127
    1d86:	3f 2e       	mov	r3, r31
    1d88:	15 c0       	rjmp	.+42     	; 0x1db4 <vfprintf+0x1aa>
    1d8a:	28 01       	movw	r4, r16
    1d8c:	22 e0       	ldi	r18, 0x02	; 2
    1d8e:	42 0e       	add	r4, r18
    1d90:	51 1c       	adc	r5, r1
    1d92:	f8 01       	movw	r30, r16
    1d94:	a0 80       	ld	r10, Z
    1d96:	b1 80       	ldd	r11, Z+1	; 0x01
    1d98:	36 fe       	sbrs	r3, 6
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <vfprintf+0x198>
    1d9c:	69 2d       	mov	r22, r9
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <vfprintf+0x19c>
    1da2:	6f ef       	ldi	r22, 0xFF	; 255
    1da4:	7f ef       	ldi	r23, 0xFF	; 255
    1da6:	c5 01       	movw	r24, r10
    1da8:	2d d1       	rcall	.+602    	; 0x2004 <strnlen_P>
    1daa:	4c 01       	movw	r8, r24
    1dac:	f3 2d       	mov	r31, r3
    1dae:	f0 68       	ori	r31, 0x80	; 128
    1db0:	3f 2e       	mov	r3, r31
    1db2:	82 01       	movw	r16, r4
    1db4:	33 fc       	sbrc	r3, 3
    1db6:	19 c0       	rjmp	.+50     	; 0x1dea <vfprintf+0x1e0>
    1db8:	82 2d       	mov	r24, r2
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 16       	cp	r8, r24
    1dbe:	99 06       	cpc	r9, r25
    1dc0:	a0 f4       	brcc	.+40     	; 0x1dea <vfprintf+0x1e0>
    1dc2:	b6 01       	movw	r22, r12
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	33 d1       	rcall	.+614    	; 0x2030 <fputc>
    1dca:	2a 94       	dec	r2
    1dcc:	f5 cf       	rjmp	.-22     	; 0x1db8 <vfprintf+0x1ae>
    1dce:	f5 01       	movw	r30, r10
    1dd0:	37 fc       	sbrc	r3, 7
    1dd2:	85 91       	lpm	r24, Z+
    1dd4:	37 fe       	sbrs	r3, 7
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	5f 01       	movw	r10, r30
    1dda:	b6 01       	movw	r22, r12
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	28 d1       	rcall	.+592    	; 0x2030 <fputc>
    1de0:	21 10       	cpse	r2, r1
    1de2:	2a 94       	dec	r2
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	82 1a       	sub	r8, r18
    1de8:	91 08       	sbc	r9, r1
    1dea:	81 14       	cp	r8, r1
    1dec:	91 04       	cpc	r9, r1
    1dee:	79 f7       	brne	.-34     	; 0x1dce <vfprintf+0x1c4>
    1df0:	e1 c0       	rjmp	.+450    	; 0x1fb4 <vfprintf+0x3aa>
    1df2:	84 36       	cpi	r24, 0x64	; 100
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <vfprintf+0x1f0>
    1df6:	89 36       	cpi	r24, 0x69	; 105
    1df8:	39 f5       	brne	.+78     	; 0x1e48 <vfprintf+0x23e>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	37 fe       	sbrs	r3, 7
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <vfprintf+0x204>
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	0c 5f       	subi	r16, 0xFC	; 252
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <vfprintf+0x214>
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	07 2e       	mov	r0, r23
    1e14:	00 0c       	add	r0, r0
    1e16:	88 0b       	sbc	r24, r24
    1e18:	99 0b       	sbc	r25, r25
    1e1a:	0e 5f       	subi	r16, 0xFE	; 254
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	f3 2d       	mov	r31, r3
    1e20:	ff 76       	andi	r31, 0x6F	; 111
    1e22:	3f 2e       	mov	r3, r31
    1e24:	97 ff       	sbrs	r25, 7
    1e26:	09 c0       	rjmp	.+18     	; 0x1e3a <vfprintf+0x230>
    1e28:	90 95       	com	r25
    1e2a:	80 95       	com	r24
    1e2c:	70 95       	com	r23
    1e2e:	61 95       	neg	r22
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	8f 4f       	sbci	r24, 0xFF	; 255
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	f0 68       	ori	r31, 0x80	; 128
    1e38:	3f 2e       	mov	r3, r31
    1e3a:	2a e0       	ldi	r18, 0x0A	; 10
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	a3 01       	movw	r20, r6
    1e40:	33 d1       	rcall	.+614    	; 0x20a8 <__ultoa_invert>
    1e42:	88 2e       	mov	r8, r24
    1e44:	86 18       	sub	r8, r6
    1e46:	44 c0       	rjmp	.+136    	; 0x1ed0 <vfprintf+0x2c6>
    1e48:	85 37       	cpi	r24, 0x75	; 117
    1e4a:	31 f4       	brne	.+12     	; 0x1e58 <vfprintf+0x24e>
    1e4c:	23 2d       	mov	r18, r3
    1e4e:	2f 7e       	andi	r18, 0xEF	; 239
    1e50:	b2 2e       	mov	r11, r18
    1e52:	2a e0       	ldi	r18, 0x0A	; 10
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	25 c0       	rjmp	.+74     	; 0x1ea2 <vfprintf+0x298>
    1e58:	93 2d       	mov	r25, r3
    1e5a:	99 7f       	andi	r25, 0xF9	; 249
    1e5c:	b9 2e       	mov	r11, r25
    1e5e:	8f 36       	cpi	r24, 0x6F	; 111
    1e60:	c1 f0       	breq	.+48     	; 0x1e92 <vfprintf+0x288>
    1e62:	18 f4       	brcc	.+6      	; 0x1e6a <vfprintf+0x260>
    1e64:	88 35       	cpi	r24, 0x58	; 88
    1e66:	79 f0       	breq	.+30     	; 0x1e86 <vfprintf+0x27c>
    1e68:	ae c0       	rjmp	.+348    	; 0x1fc6 <vfprintf+0x3bc>
    1e6a:	80 37       	cpi	r24, 0x70	; 112
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <vfprintf+0x26a>
    1e6e:	88 37       	cpi	r24, 0x78	; 120
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <vfprintf+0x270>
    1e72:	a9 c0       	rjmp	.+338    	; 0x1fc6 <vfprintf+0x3bc>
    1e74:	e9 2f       	mov	r30, r25
    1e76:	e0 61       	ori	r30, 0x10	; 16
    1e78:	be 2e       	mov	r11, r30
    1e7a:	b4 fe       	sbrs	r11, 4
    1e7c:	0d c0       	rjmp	.+26     	; 0x1e98 <vfprintf+0x28e>
    1e7e:	fb 2d       	mov	r31, r11
    1e80:	f4 60       	ori	r31, 0x04	; 4
    1e82:	bf 2e       	mov	r11, r31
    1e84:	09 c0       	rjmp	.+18     	; 0x1e98 <vfprintf+0x28e>
    1e86:	34 fe       	sbrs	r3, 4
    1e88:	0a c0       	rjmp	.+20     	; 0x1e9e <vfprintf+0x294>
    1e8a:	29 2f       	mov	r18, r25
    1e8c:	26 60       	ori	r18, 0x06	; 6
    1e8e:	b2 2e       	mov	r11, r18
    1e90:	06 c0       	rjmp	.+12     	; 0x1e9e <vfprintf+0x294>
    1e92:	28 e0       	ldi	r18, 0x08	; 8
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	05 c0       	rjmp	.+10     	; 0x1ea2 <vfprintf+0x298>
    1e98:	20 e1       	ldi	r18, 0x10	; 16
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <vfprintf+0x298>
    1e9e:	20 e1       	ldi	r18, 0x10	; 16
    1ea0:	32 e0       	ldi	r19, 0x02	; 2
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	b7 fe       	sbrs	r11, 7
    1ea6:	07 c0       	rjmp	.+14     	; 0x1eb6 <vfprintf+0x2ac>
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	0c 5f       	subi	r16, 0xFC	; 252
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	06 c0       	rjmp	.+12     	; 0x1ec2 <vfprintf+0x2b8>
    1eb6:	60 81       	ld	r22, Z
    1eb8:	71 81       	ldd	r23, Z+1	; 0x01
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 5f       	subi	r16, 0xFE	; 254
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec2:	a3 01       	movw	r20, r6
    1ec4:	f1 d0       	rcall	.+482    	; 0x20a8 <__ultoa_invert>
    1ec6:	88 2e       	mov	r8, r24
    1ec8:	86 18       	sub	r8, r6
    1eca:	fb 2d       	mov	r31, r11
    1ecc:	ff 77       	andi	r31, 0x7F	; 127
    1ece:	3f 2e       	mov	r3, r31
    1ed0:	36 fe       	sbrs	r3, 6
    1ed2:	0d c0       	rjmp	.+26     	; 0x1eee <vfprintf+0x2e4>
    1ed4:	23 2d       	mov	r18, r3
    1ed6:	2e 7f       	andi	r18, 0xFE	; 254
    1ed8:	a2 2e       	mov	r10, r18
    1eda:	89 14       	cp	r8, r9
    1edc:	58 f4       	brcc	.+22     	; 0x1ef4 <vfprintf+0x2ea>
    1ede:	34 fe       	sbrs	r3, 4
    1ee0:	0b c0       	rjmp	.+22     	; 0x1ef8 <vfprintf+0x2ee>
    1ee2:	32 fc       	sbrc	r3, 2
    1ee4:	09 c0       	rjmp	.+18     	; 0x1ef8 <vfprintf+0x2ee>
    1ee6:	83 2d       	mov	r24, r3
    1ee8:	8e 7e       	andi	r24, 0xEE	; 238
    1eea:	a8 2e       	mov	r10, r24
    1eec:	05 c0       	rjmp	.+10     	; 0x1ef8 <vfprintf+0x2ee>
    1eee:	b8 2c       	mov	r11, r8
    1ef0:	a3 2c       	mov	r10, r3
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <vfprintf+0x2f0>
    1ef4:	b8 2c       	mov	r11, r8
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <vfprintf+0x2f0>
    1ef8:	b9 2c       	mov	r11, r9
    1efa:	a4 fe       	sbrs	r10, 4
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <vfprintf+0x312>
    1efe:	fe 01       	movw	r30, r28
    1f00:	e8 0d       	add	r30, r8
    1f02:	f1 1d       	adc	r31, r1
    1f04:	80 81       	ld	r24, Z
    1f06:	80 33       	cpi	r24, 0x30	; 48
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <vfprintf+0x308>
    1f0a:	9a 2d       	mov	r25, r10
    1f0c:	99 7e       	andi	r25, 0xE9	; 233
    1f0e:	a9 2e       	mov	r10, r25
    1f10:	09 c0       	rjmp	.+18     	; 0x1f24 <vfprintf+0x31a>
    1f12:	a2 fe       	sbrs	r10, 2
    1f14:	06 c0       	rjmp	.+12     	; 0x1f22 <vfprintf+0x318>
    1f16:	b3 94       	inc	r11
    1f18:	b3 94       	inc	r11
    1f1a:	04 c0       	rjmp	.+8      	; 0x1f24 <vfprintf+0x31a>
    1f1c:	8a 2d       	mov	r24, r10
    1f1e:	86 78       	andi	r24, 0x86	; 134
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <vfprintf+0x31a>
    1f22:	b3 94       	inc	r11
    1f24:	a3 fc       	sbrc	r10, 3
    1f26:	10 c0       	rjmp	.+32     	; 0x1f48 <vfprintf+0x33e>
    1f28:	a0 fe       	sbrs	r10, 0
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <vfprintf+0x32e>
    1f2c:	b2 14       	cp	r11, r2
    1f2e:	80 f4       	brcc	.+32     	; 0x1f50 <vfprintf+0x346>
    1f30:	28 0c       	add	r2, r8
    1f32:	92 2c       	mov	r9, r2
    1f34:	9b 18       	sub	r9, r11
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <vfprintf+0x348>
    1f38:	b2 14       	cp	r11, r2
    1f3a:	58 f4       	brcc	.+22     	; 0x1f52 <vfprintf+0x348>
    1f3c:	b6 01       	movw	r22, r12
    1f3e:	80 e2       	ldi	r24, 0x20	; 32
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	76 d0       	rcall	.+236    	; 0x2030 <fputc>
    1f44:	b3 94       	inc	r11
    1f46:	f8 cf       	rjmp	.-16     	; 0x1f38 <vfprintf+0x32e>
    1f48:	b2 14       	cp	r11, r2
    1f4a:	18 f4       	brcc	.+6      	; 0x1f52 <vfprintf+0x348>
    1f4c:	2b 18       	sub	r2, r11
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <vfprintf+0x34a>
    1f50:	98 2c       	mov	r9, r8
    1f52:	21 2c       	mov	r2, r1
    1f54:	a4 fe       	sbrs	r10, 4
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <vfprintf+0x36c>
    1f58:	b6 01       	movw	r22, r12
    1f5a:	80 e3       	ldi	r24, 0x30	; 48
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	68 d0       	rcall	.+208    	; 0x2030 <fputc>
    1f60:	a2 fe       	sbrs	r10, 2
    1f62:	16 c0       	rjmp	.+44     	; 0x1f90 <vfprintf+0x386>
    1f64:	a1 fc       	sbrc	r10, 1
    1f66:	03 c0       	rjmp	.+6      	; 0x1f6e <vfprintf+0x364>
    1f68:	88 e7       	ldi	r24, 0x78	; 120
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <vfprintf+0x368>
    1f6e:	88 e5       	ldi	r24, 0x58	; 88
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	b6 01       	movw	r22, r12
    1f74:	0c c0       	rjmp	.+24     	; 0x1f8e <vfprintf+0x384>
    1f76:	8a 2d       	mov	r24, r10
    1f78:	86 78       	andi	r24, 0x86	; 134
    1f7a:	51 f0       	breq	.+20     	; 0x1f90 <vfprintf+0x386>
    1f7c:	a1 fe       	sbrs	r10, 1
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <vfprintf+0x37a>
    1f80:	8b e2       	ldi	r24, 0x2B	; 43
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <vfprintf+0x37c>
    1f84:	80 e2       	ldi	r24, 0x20	; 32
    1f86:	a7 fc       	sbrc	r10, 7
    1f88:	8d e2       	ldi	r24, 0x2D	; 45
    1f8a:	b6 01       	movw	r22, r12
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	50 d0       	rcall	.+160    	; 0x2030 <fputc>
    1f90:	89 14       	cp	r8, r9
    1f92:	30 f4       	brcc	.+12     	; 0x1fa0 <vfprintf+0x396>
    1f94:	b6 01       	movw	r22, r12
    1f96:	80 e3       	ldi	r24, 0x30	; 48
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	4a d0       	rcall	.+148    	; 0x2030 <fputc>
    1f9c:	9a 94       	dec	r9
    1f9e:	f8 cf       	rjmp	.-16     	; 0x1f90 <vfprintf+0x386>
    1fa0:	8a 94       	dec	r8
    1fa2:	f3 01       	movw	r30, r6
    1fa4:	e8 0d       	add	r30, r8
    1fa6:	f1 1d       	adc	r31, r1
    1fa8:	80 81       	ld	r24, Z
    1faa:	b6 01       	movw	r22, r12
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	40 d0       	rcall	.+128    	; 0x2030 <fputc>
    1fb0:	81 10       	cpse	r8, r1
    1fb2:	f6 cf       	rjmp	.-20     	; 0x1fa0 <vfprintf+0x396>
    1fb4:	22 20       	and	r2, r2
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <vfprintf+0x3b0>
    1fb8:	4e ce       	rjmp	.-868    	; 0x1c56 <vfprintf+0x4c>
    1fba:	b6 01       	movw	r22, r12
    1fbc:	80 e2       	ldi	r24, 0x20	; 32
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	37 d0       	rcall	.+110    	; 0x2030 <fputc>
    1fc2:	2a 94       	dec	r2
    1fc4:	f7 cf       	rjmp	.-18     	; 0x1fb4 <vfprintf+0x3aa>
    1fc6:	f6 01       	movw	r30, r12
    1fc8:	86 81       	ldd	r24, Z+6	; 0x06
    1fca:	97 81       	ldd	r25, Z+7	; 0x07
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <vfprintf+0x3c8>
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	9f ef       	ldi	r25, 0xFF	; 255
    1fd2:	2b 96       	adiw	r28, 0x0b	; 11
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	9f 90       	pop	r9
    1ff4:	8f 90       	pop	r8
    1ff6:	7f 90       	pop	r7
    1ff8:	6f 90       	pop	r6
    1ffa:	5f 90       	pop	r5
    1ffc:	4f 90       	pop	r4
    1ffe:	3f 90       	pop	r3
    2000:	2f 90       	pop	r2
    2002:	08 95       	ret

00002004 <strnlen_P>:
    2004:	fc 01       	movw	r30, r24
    2006:	05 90       	lpm	r0, Z+
    2008:	61 50       	subi	r22, 0x01	; 1
    200a:	70 40       	sbci	r23, 0x00	; 0
    200c:	01 10       	cpse	r0, r1
    200e:	d8 f7       	brcc	.-10     	; 0x2006 <strnlen_P+0x2>
    2010:	80 95       	com	r24
    2012:	90 95       	com	r25
    2014:	8e 0f       	add	r24, r30
    2016:	9f 1f       	adc	r25, r31
    2018:	08 95       	ret

0000201a <strnlen>:
    201a:	fc 01       	movw	r30, r24
    201c:	61 50       	subi	r22, 0x01	; 1
    201e:	70 40       	sbci	r23, 0x00	; 0
    2020:	01 90       	ld	r0, Z+
    2022:	01 10       	cpse	r0, r1
    2024:	d8 f7       	brcc	.-10     	; 0x201c <strnlen+0x2>
    2026:	80 95       	com	r24
    2028:	90 95       	com	r25
    202a:	8e 0f       	add	r24, r30
    202c:	9f 1f       	adc	r25, r31
    202e:	08 95       	ret

00002030 <fputc>:
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	fb 01       	movw	r30, r22
    203a:	23 81       	ldd	r18, Z+3	; 0x03
    203c:	21 fd       	sbrc	r18, 1
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <fputc+0x16>
    2040:	8f ef       	ldi	r24, 0xFF	; 255
    2042:	9f ef       	ldi	r25, 0xFF	; 255
    2044:	2c c0       	rjmp	.+88     	; 0x209e <fputc+0x6e>
    2046:	22 ff       	sbrs	r18, 2
    2048:	16 c0       	rjmp	.+44     	; 0x2076 <fputc+0x46>
    204a:	46 81       	ldd	r20, Z+6	; 0x06
    204c:	57 81       	ldd	r21, Z+7	; 0x07
    204e:	24 81       	ldd	r18, Z+4	; 0x04
    2050:	35 81       	ldd	r19, Z+5	; 0x05
    2052:	42 17       	cp	r20, r18
    2054:	53 07       	cpc	r21, r19
    2056:	44 f4       	brge	.+16     	; 0x2068 <fputc+0x38>
    2058:	a0 81       	ld	r26, Z
    205a:	b1 81       	ldd	r27, Z+1	; 0x01
    205c:	9d 01       	movw	r18, r26
    205e:	2f 5f       	subi	r18, 0xFF	; 255
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
    2062:	31 83       	std	Z+1, r19	; 0x01
    2064:	20 83       	st	Z, r18
    2066:	8c 93       	st	X, r24
    2068:	26 81       	ldd	r18, Z+6	; 0x06
    206a:	37 81       	ldd	r19, Z+7	; 0x07
    206c:	2f 5f       	subi	r18, 0xFF	; 255
    206e:	3f 4f       	sbci	r19, 0xFF	; 255
    2070:	37 83       	std	Z+7, r19	; 0x07
    2072:	26 83       	std	Z+6, r18	; 0x06
    2074:	14 c0       	rjmp	.+40     	; 0x209e <fputc+0x6e>
    2076:	8b 01       	movw	r16, r22
    2078:	ec 01       	movw	r28, r24
    207a:	fb 01       	movw	r30, r22
    207c:	00 84       	ldd	r0, Z+8	; 0x08
    207e:	f1 85       	ldd	r31, Z+9	; 0x09
    2080:	e0 2d       	mov	r30, r0
    2082:	09 95       	icall
    2084:	89 2b       	or	r24, r25
    2086:	e1 f6       	brne	.-72     	; 0x2040 <fputc+0x10>
    2088:	d8 01       	movw	r26, r16
    208a:	16 96       	adiw	r26, 0x06	; 6
    208c:	8d 91       	ld	r24, X+
    208e:	9c 91       	ld	r25, X
    2090:	17 97       	sbiw	r26, 0x07	; 7
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	17 96       	adiw	r26, 0x07	; 7
    2096:	9c 93       	st	X, r25
    2098:	8e 93       	st	-X, r24
    209a:	16 97       	sbiw	r26, 0x06	; 6
    209c:	ce 01       	movw	r24, r28
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	08 95       	ret

000020a8 <__ultoa_invert>:
    20a8:	fa 01       	movw	r30, r20
    20aa:	aa 27       	eor	r26, r26
    20ac:	28 30       	cpi	r18, 0x08	; 8
    20ae:	51 f1       	breq	.+84     	; 0x2104 <__ultoa_invert+0x5c>
    20b0:	20 31       	cpi	r18, 0x10	; 16
    20b2:	81 f1       	breq	.+96     	; 0x2114 <__ultoa_invert+0x6c>
    20b4:	e8 94       	clt
    20b6:	6f 93       	push	r22
    20b8:	6e 7f       	andi	r22, 0xFE	; 254
    20ba:	6e 5f       	subi	r22, 0xFE	; 254
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255
    20be:	8f 4f       	sbci	r24, 0xFF	; 255
    20c0:	9f 4f       	sbci	r25, 0xFF	; 255
    20c2:	af 4f       	sbci	r26, 0xFF	; 255
    20c4:	b1 e0       	ldi	r27, 0x01	; 1
    20c6:	3e d0       	rcall	.+124    	; 0x2144 <__ultoa_invert+0x9c>
    20c8:	b4 e0       	ldi	r27, 0x04	; 4
    20ca:	3c d0       	rcall	.+120    	; 0x2144 <__ultoa_invert+0x9c>
    20cc:	67 0f       	add	r22, r23
    20ce:	78 1f       	adc	r23, r24
    20d0:	89 1f       	adc	r24, r25
    20d2:	9a 1f       	adc	r25, r26
    20d4:	a1 1d       	adc	r26, r1
    20d6:	68 0f       	add	r22, r24
    20d8:	79 1f       	adc	r23, r25
    20da:	8a 1f       	adc	r24, r26
    20dc:	91 1d       	adc	r25, r1
    20de:	a1 1d       	adc	r26, r1
    20e0:	6a 0f       	add	r22, r26
    20e2:	71 1d       	adc	r23, r1
    20e4:	81 1d       	adc	r24, r1
    20e6:	91 1d       	adc	r25, r1
    20e8:	a1 1d       	adc	r26, r1
    20ea:	20 d0       	rcall	.+64     	; 0x212c <__ultoa_invert+0x84>
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <__ultoa_invert+0x48>
    20ee:	68 94       	set
    20f0:	3f 91       	pop	r19
    20f2:	2a e0       	ldi	r18, 0x0A	; 10
    20f4:	26 9f       	mul	r18, r22
    20f6:	11 24       	eor	r1, r1
    20f8:	30 19       	sub	r19, r0
    20fa:	30 5d       	subi	r19, 0xD0	; 208
    20fc:	31 93       	st	Z+, r19
    20fe:	de f6       	brtc	.-74     	; 0x20b6 <__ultoa_invert+0xe>
    2100:	cf 01       	movw	r24, r30
    2102:	08 95       	ret
    2104:	46 2f       	mov	r20, r22
    2106:	47 70       	andi	r20, 0x07	; 7
    2108:	40 5d       	subi	r20, 0xD0	; 208
    210a:	41 93       	st	Z+, r20
    210c:	b3 e0       	ldi	r27, 0x03	; 3
    210e:	0f d0       	rcall	.+30     	; 0x212e <__ultoa_invert+0x86>
    2110:	c9 f7       	brne	.-14     	; 0x2104 <__ultoa_invert+0x5c>
    2112:	f6 cf       	rjmp	.-20     	; 0x2100 <__ultoa_invert+0x58>
    2114:	46 2f       	mov	r20, r22
    2116:	4f 70       	andi	r20, 0x0F	; 15
    2118:	40 5d       	subi	r20, 0xD0	; 208
    211a:	4a 33       	cpi	r20, 0x3A	; 58
    211c:	18 f0       	brcs	.+6      	; 0x2124 <__ultoa_invert+0x7c>
    211e:	49 5d       	subi	r20, 0xD9	; 217
    2120:	31 fd       	sbrc	r19, 1
    2122:	40 52       	subi	r20, 0x20	; 32
    2124:	41 93       	st	Z+, r20
    2126:	02 d0       	rcall	.+4      	; 0x212c <__ultoa_invert+0x84>
    2128:	a9 f7       	brne	.-22     	; 0x2114 <__ultoa_invert+0x6c>
    212a:	ea cf       	rjmp	.-44     	; 0x2100 <__ultoa_invert+0x58>
    212c:	b4 e0       	ldi	r27, 0x04	; 4
    212e:	a6 95       	lsr	r26
    2130:	97 95       	ror	r25
    2132:	87 95       	ror	r24
    2134:	77 95       	ror	r23
    2136:	67 95       	ror	r22
    2138:	ba 95       	dec	r27
    213a:	c9 f7       	brne	.-14     	; 0x212e <__ultoa_invert+0x86>
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	61 05       	cpc	r22, r1
    2140:	71 05       	cpc	r23, r1
    2142:	08 95       	ret
    2144:	9b 01       	movw	r18, r22
    2146:	ac 01       	movw	r20, r24
    2148:	0a 2e       	mov	r0, r26
    214a:	06 94       	lsr	r0
    214c:	57 95       	ror	r21
    214e:	47 95       	ror	r20
    2150:	37 95       	ror	r19
    2152:	27 95       	ror	r18
    2154:	ba 95       	dec	r27
    2156:	c9 f7       	brne	.-14     	; 0x214a <__ultoa_invert+0xa2>
    2158:	62 0f       	add	r22, r18
    215a:	73 1f       	adc	r23, r19
    215c:	84 1f       	adc	r24, r20
    215e:	95 1f       	adc	r25, r21
    2160:	a0 1d       	adc	r26, r0
    2162:	08 95       	ret

00002164 <_exit>:
    2164:	f8 94       	cli

00002166 <__stop_program>:
    2166:	ff cf       	rjmp	.-2      	; 0x2166 <__stop_program>
