
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002062  000020f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002062  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  00800134  00800134  0000212a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000549f  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019a0  00000000  00000000  00007aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002693  00000000  00000000  0000949f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e50  00000000  00000000  0000bb34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001592  00000000  00000000  0000c984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c0c  00000000  00000000  0000df16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00011b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c6       	rjmp	.+3386   	; 0xd54 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c6       	rjmp	.+3182   	; 0xca0 <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d1 c5       	rjmp	.+2978   	; 0xbe4 <__vector_16>
      42:	00 00       	nop
      44:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__vector_17>
      48:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	ec c4       	rjmp	.+2520   	; 0xa2e <__vector_21>
      56:	00 00       	nop
      58:	cc c4       	rjmp	.+2456   	; 0x9f2 <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0f c5       	rjmp	.+2590   	; 0xaa0 <__vector_32>
      82:	00 00       	nop
      84:	ef c4       	rjmp	.+2526   	; 0xa64 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 08       	sbc	r2, r7
      96:	2c 08       	sbc	r2, r12
      98:	32 08       	sbc	r3, r2
      9a:	38 08       	sbc	r3, r8
      9c:	3e 08       	sbc	r3, r14
      9e:	43 08       	sbc	r4, r3
      a0:	49 08       	sbc	r4, r9
      a2:	4f 08       	sbc	r4, r15

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e6       	ldi	r30, 0x62	; 98
      b8:	f0 e2       	ldi	r31, 0x20	; 32
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 33       	cpi	r26, 0x34	; 52
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	a4 e3       	ldi	r26, 0x34	; 52
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	aa 37       	cpi	r26, 0x7A	; 122
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	24 d5       	rcall	.+2632   	; 0xb24 <main>
      dc:	0c 94 2f 10 	jmp	0x205e	; 0x205e <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static bool b_saturation = false;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <f32_Integrator>
      e6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <f32_Integrator+0x1>
      ea:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <f32_Integrator+0x2>
      ee:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <controller>:
}

void controller(float f32_current_cmd, float f32_prev_current, uint8_t * u8_duty){
      f4:	4f 92       	push	r4
      f6:	5f 92       	push	r5
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	4b 01       	movw	r8, r22
     116:	5c 01       	movw	r10, r24
     118:	29 01       	movw	r4, r18
     11a:	3a 01       	movw	r6, r20

	if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     11c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     120:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     124:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     128:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4e eb       	ldi	r20, 0xBE	; 190
     132:	52 e4       	ldi	r21, 0x42	; 66
     134:	c7 01       	movw	r24, r14
     136:	b6 01       	movw	r22, r12
     138:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__gesf2>
     13c:	88 23       	and	r24, r24
     13e:	54 f4       	brge	.+20     	; 0x154 <controller+0x60>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	48 e4       	ldi	r20, 0x48	; 72
     146:	52 e4       	ldi	r21, 0x42	; 66
     148:	c7 01       	movw	r24, r14
     14a:	b6 01       	movw	r22, r12
     14c:	0e 94 86 0b 	call	0x170c	; 0x170c <__cmpsf2>
     150:	18 16       	cp	r1, r24
     152:	24 f0       	brlt	.+8      	; 0x15c <controller+0x68>
	{
		b_saturation = true ;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
     15a:	02 c0       	rjmp	.+4      	; 0x160 <controller+0x6c>
		} else {
		b_saturation = false;
     15c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
	}
	
	f32_CurrentDelta = (f32_current_cmd-f32_prev_current)	;
     160:	a3 01       	movw	r20, r6
     162:	92 01       	movw	r18, r4
     164:	c5 01       	movw	r24, r10
     166:	b4 01       	movw	r22, r8
     168:	0e 94 21 0b 	call	0x1642	; 0x1642 <__subsf3>
     16c:	6b 01       	movw	r12, r22
     16e:	7c 01       	movw	r14, r24
     170:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <f32_CurrentDelta>
     174:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <f32_CurrentDelta+0x1>
     178:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <f32_CurrentDelta+0x2>
     17c:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <f32_CurrentDelta+0x3>
	
	if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
     180:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     184:	81 11       	cpse	r24, r1
     186:	1c c0       	rjmp	.+56     	; 0x1c0 <controller+0xcc>
	{
		f32_Integrator+=f32_CurrentDelta*TimeStep ;
     188:	2a e0       	ldi	r18, 0x0A	; 10
     18a:	37 ed       	ldi	r19, 0xD7	; 215
     18c:	43 e2       	ldi	r20, 0x23	; 35
     18e:	5c e3       	ldi	r21, 0x3C	; 60
     190:	c7 01       	movw	r24, r14
     192:	b6 01       	movw	r22, r12
     194:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     198:	9b 01       	movw	r18, r22
     19a:	ac 01       	movw	r20, r24
     19c:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <f32_Integrator>
     1a0:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <f32_Integrator+0x1>
     1a4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <f32_Integrator+0x2>
     1a8:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <f32_Integrator+0x3>
     1ac:	0e 94 22 0b 	call	0x1644	; 0x1644 <__addsf3>
     1b0:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <f32_Integrator>
     1b4:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <f32_Integrator+0x1>
     1b8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <f32_Integrator+0x2>
     1bc:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <f32_Integrator+0x3>
	}
	
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
	f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     1c0:	23 e3       	ldi	r18, 0x33	; 51
     1c2:	33 e3       	ldi	r19, 0x33	; 51
     1c4:	43 e7       	ldi	r20, 0x73	; 115
     1c6:	52 e4       	ldi	r21, 0x42	; 66
     1c8:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <f32_Integrator>
     1cc:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <f32_Integrator+0x1>
     1d0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <f32_Integrator+0x2>
     1d4:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <f32_Integrator+0x3>
     1d8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     1dc:	4b 01       	movw	r8, r22
     1de:	5c 01       	movw	r10, r24
     1e0:	29 ef       	ldi	r18, 0xF9	; 249
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 e7       	ldi	r20, 0x79	; 121
     1e6:	5f e3       	ldi	r21, 0x3F	; 63
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     1f0:	9b 01       	movw	r18, r22
     1f2:	ac 01       	movw	r20, r24
     1f4:	c5 01       	movw	r24, r10
     1f6:	b4 01       	movw	r22, r8
     1f8:	0e 94 22 0b 	call	0x1644	; 0x1644 <__addsf3>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	48 e4       	ldi	r20, 0x48	; 72
     202:	52 e4       	ldi	r21, 0x42	; 66
     204:	0e 94 22 0b 	call	0x1644	; 0x1644 <__addsf3>
     208:	6b 01       	movw	r12, r22
     20a:	7c 01       	movw	r14, r24
     20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     210:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4e eb       	ldi	r20, 0xBE	; 190
     222:	52 e4       	ldi	r21, 0x42	; 66
     224:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__gesf2>
     228:	18 16       	cp	r1, r24
     22a:	6c f4       	brge	.+26     	; 0x246 <controller+0x152>
	{
		f32_DutyCycleCmd = 95;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	ae eb       	ldi	r26, 0xBE	; 190
     232:	b2 e4       	ldi	r27, 0x42	; 66
     234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     238:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     23c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     240:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     244:	16 c0       	rjmp	.+44     	; 0x272 <controller+0x17e>
	}
	
	if (f32_DutyCycleCmd < 50)
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	48 e4       	ldi	r20, 0x48	; 72
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 86 0b 	call	0x170c	; 0x170c <__cmpsf2>
     256:	88 23       	and	r24, r24
     258:	64 f4       	brge	.+24     	; 0x272 <controller+0x17e>
	{
		f32_DutyCycleCmd = 50;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a8 e4       	ldi	r26, 0x48	; 72
     260:	b2 e4       	ldi	r27, 0x42	; 66
     262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     26a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     26e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
     272:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     276:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	48 ec       	ldi	r20, 0xC8	; 200
     280:	52 e4       	ldi	r21, 0x42	; 66
     282:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     286:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     28e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     292:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__divsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	be 01       	movw	r22, r28
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 23 0c 	call	0x1846	; 0x1846 <__floatunsisf>
     2a4:	9b 01       	movw	r18, r22
     2a6:	ac 01       	movw	r20, r24
     2a8:	c7 01       	movw	r24, r14
     2aa:	b6 01       	movw	r22, r12
     2ac:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     2b0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fixsfsi>
     2b4:	e8 e9       	ldi	r30, 0x98	; 152
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	71 83       	std	Z+1, r23	; 0x01
     2ba:	60 83       	st	Z, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     2c4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	
	*u8_duty = (uint16_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     2c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2d8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     2dc:	f8 01       	movw	r30, r16
     2de:	60 83       	st	Z, r22
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	7f 90       	pop	r7
     2fa:	6f 90       	pop	r6
     2fc:	5f 90       	pop	r5
     2fe:	4f 90       	pop	r4
     300:	08 95       	ret

00000302 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     302:	24 9a       	sbi	0x04, 4	; 4
     304:	08 95       	ret

00000306 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state)
     306:	88 23       	and	r24, r24
     308:	11 f0       	breq	.+4      	; 0x30e <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     30a:	2c 9a       	sbi	0x05, 4	; 5
     30c:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     30e:	2c 98       	cbi	0x05, 4	; 5
     310:	08 95       	ret

00000312 <manage_motor>:
	}
}

void manage_motor(ModuleValues_t * vals)
{
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
	switch(vals->motor_status)
     324:	8e 89       	ldd	r24, Y+22	; 0x16
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	69 f0       	breq	.+26     	; 0x344 <manage_motor+0x32>
     32a:	30 f4       	brcc	.+12     	; 0x338 <manage_motor+0x26>
     32c:	88 23       	and	r24, r24
     32e:	09 f4       	brne	.+2      	; 0x332 <manage_motor+0x20>
     330:	48 c0       	rjmp	.+144    	; 0x3c2 <manage_motor+0xb0>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	09 f1       	breq	.+66     	; 0x378 <manage_motor+0x66>
     336:	4e c0       	rjmp	.+156    	; 0x3d4 <manage_motor+0xc2>
     338:	83 30       	cpi	r24, 0x03	; 3
     33a:	99 f1       	breq	.+102    	; 0x3a2 <manage_motor+0x90>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	09 f4       	brne	.+2      	; 0x342 <manage_motor+0x30>
     340:	45 c0       	rjmp	.+138    	; 0x3cc <manage_motor+0xba>
     342:	48 c0       	rjmp	.+144    	; 0x3d4 <manage_motor+0xc2>
	{
		case BRAKE :
			drivers(1); //drivers turn on
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	df df       	rcall	.-66     	; 0x306 <drivers>
			vals->b_driver_status = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8a 8f       	std	Y+26, r24	; 0x1a
			controller(-vals->u8_throttle_cmd, vals->f32_motor_current,&vals->u8_duty_cycle); //negative throttle cmd
     34c:	8e 01       	movw	r16, r28
     34e:	0d 5e       	subi	r16, 0xED	; 237
     350:	1f 4f       	sbci	r17, 0xFF	; 255
     352:	c8 80       	ld	r12, Y
     354:	d9 80       	ldd	r13, Y+1	; 0x01
     356:	ea 80       	ldd	r14, Y+2	; 0x02
     358:	fb 80       	ldd	r15, Y+3	; 0x03
     35a:	6a 89       	ldd	r22, Y+18	; 0x12
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	71 95       	neg	r23
     360:	61 95       	neg	r22
     362:	71 09       	sbc	r23, r1
     364:	07 2e       	mov	r0, r23
     366:	00 0c       	add	r0, r0
     368:	88 0b       	sbc	r24, r24
     36a:	99 0b       	sbc	r25, r25
     36c:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     370:	a7 01       	movw	r20, r14
     372:	96 01       	movw	r18, r12
		break;
		
		case ACCEL :
			drivers(1); //drivers turn on
     374:	bf de       	rcall	.-642    	; 0xf4 <controller>
     376:	2e c0       	rjmp	.+92     	; 0x3d4 <manage_motor+0xc2>
     378:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     37a:	c5 df       	rcall	.-118    	; 0x306 <drivers>
     37c:	81 e0       	ldi	r24, 0x01	; 1
			controller(vals->u8_throttle_cmd, vals->f32_motor_current, &vals->u8_duty_cycle);
     37e:	8a 8f       	std	Y+26, r24	; 0x1a
     380:	8e 01       	movw	r16, r28
     382:	0d 5e       	subi	r16, 0xED	; 237
     384:	1f 4f       	sbci	r17, 0xFF	; 255
     386:	c8 80       	ld	r12, Y
     388:	d9 80       	ldd	r13, Y+1	; 0x01
     38a:	ea 80       	ldd	r14, Y+2	; 0x02
     38c:	fb 80       	ldd	r15, Y+3	; 0x03
     38e:	6a 89       	ldd	r22, Y+18	; 0x12
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 23 0c 	call	0x1846	; 0x1846 <__floatunsisf>
     39a:	a7 01       	movw	r20, r14
		break;
     39c:	96 01       	movw	r18, r12
		
		case IDLE :
			drivers(1); //drivers turn on
     39e:	aa de       	rcall	.-684    	; 0xf4 <controller>
     3a0:	19 c0       	rjmp	.+50     	; 0x3d4 <manage_motor+0xc2>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
			vals->b_driver_status = 1;
     3a4:	b0 df       	rcall	.-160    	; 0x306 <drivers>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
			controller(0, vals->f32_motor_current, &vals->u8_duty_cycle); //current law running with 0 torque 
     3a8:	8a 8f       	std	Y+26, r24	; 0x1a
     3aa:	8e 01       	movw	r16, r28
     3ac:	0d 5e       	subi	r16, 0xED	; 237
     3ae:	1f 4f       	sbci	r17, 0xFF	; 255
     3b0:	28 81       	ld	r18, Y
     3b2:	39 81       	ldd	r19, Y+1	; 0x01
     3b4:	4a 81       	ldd	r20, Y+2	; 0x02
     3b6:	5b 81       	ldd	r21, Y+3	; 0x03
     3b8:	60 e0       	ldi	r22, 0x00	; 0
			//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
		break;
		
		case OFF : // drivers disabled
			drivers(0);//drivers shutdown
     3ba:	70 e0       	ldi	r23, 0x00	; 0
			vals->b_driver_status = 0;
     3bc:	cb 01       	movw	r24, r22
			reset_I(); //reset integrator
     3be:	9a de       	rcall	.-716    	; 0xf4 <controller>
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <manage_motor+0xc2>
		break;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
		
		case ERR :
			drivers(0);//drivers shutdown
     3c4:	a0 df       	rcall	.-192    	; 0x306 <drivers>
     3c6:	1a 8e       	std	Y+26, r1	; 0x1a
     3c8:	8c de       	rcall	.-744    	; 0xe2 <reset_I>
			vals->b_driver_status = 0;
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <manage_motor+0xc2>
			reset_I(); //reset integrator
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	9b df       	rcall	.-202    	; 0x306 <drivers>
		break;
	}
     3d0:	1a 8e       	std	Y+26, r1	; 0x1a
     3d2:	87 de       	rcall	.-754    	; 0xe2 <reset_I>
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	08 95       	ret

000003e6 <SPI_handler_0>:
static uint8_t u8_rxBuffer[3];

/////////////////////////  SPI  /////////////////////////

void SPI_handler_0(float * f32_motcurrent) // motor current
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(0, u8_txBuffer);
     3ec:	60 e4       	ldi	r22, 0x40	; 64
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	25 d6       	rcall	.+3146   	; 0x103e <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	43 e0       	ldi	r20, 0x03	; 3
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	6d e3       	ldi	r22, 0x3D	; 61
     3fc:	71 e0       	ldi	r23, 0x01	; 1
     3fe:	80 e4       	ldi	r24, 0x40	; 64
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 c1 0a 	call	0x1582	; 0x1582 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     406:	ed e3       	ldi	r30, 0x3D	; 61
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	61 81       	ldd	r22, Z+1	; 0x01
     40c:	6f 71       	andi	r22, 0x1F	; 31
     40e:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_motcurrent, u16_ADC0_reg);
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	76 2f       	mov	r23, r22
     414:	66 27       	eor	r22, r22
     416:	82 81       	ldd	r24, Z+2	; 0x02
     418:	68 2b       	or	r22, r24
     41a:	ce 01       	movw	r24, r28
     41c:	b2 d4       	rcall	.+2404   	; 0xd82 <handle_current_sensor>
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <SPI_handler_1>:

void SPI_handler_1(float * f32_batcurrent) // battery current
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(1, u8_txBuffer);
     42a:	60 e4       	ldi	r22, 0x40	; 64
     42c:	71 e0       	ldi	r23, 0x01	; 1
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	06 d6       	rcall	.+3084   	; 0x103e <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	43 e0       	ldi	r20, 0x03	; 3
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	6d e3       	ldi	r22, 0x3D	; 61
     43a:	71 e0       	ldi	r23, 0x01	; 1
     43c:	80 e4       	ldi	r24, 0x40	; 64
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 c1 0a 	call	0x1582	; 0x1582 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     444:	ed e3       	ldi	r30, 0x3D	; 61
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	61 81       	ldd	r22, Z+1	; 0x01
     44a:	6f 71       	andi	r22, 0x1F	; 31
     44c:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_current_sensor(f32_batcurrent, u16_ADC1_reg);
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	76 2f       	mov	r23, r22
     452:	66 27       	eor	r22, r22
     454:	82 81       	ldd	r24, Z+2	; 0x02
     456:	68 2b       	or	r22, r24
     458:	ce 01       	movw	r24, r28
     45a:	93 d4       	rcall	.+2342   	; 0xd82 <handle_current_sensor>
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <SPI_handler_2>:

void SPI_handler_2(float * f32_batvolt) //battery voltage
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(2, u8_txBuffer);
     468:	60 e4       	ldi	r22, 0x40	; 64
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	e7 d5       	rcall	.+3022   	; 0x103e <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	43 e0       	ldi	r20, 0x03	; 3
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	6d e3       	ldi	r22, 0x3D	; 61
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	80 e4       	ldi	r24, 0x40	; 64
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     482:	ed e3       	ldi	r30, 0x3D	; 61
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	61 81       	ldd	r22, Z+1	; 0x01
     488:	6f 71       	andi	r22, 0x1F	; 31
     48a:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	*f32_batvolt = (float)u16_ADC2_reg/66.1 -0.37; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V) *coeff - offset(trimming)
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	76 2f       	mov	r23, r22
     490:	66 27       	eor	r22, r22
     492:	82 81       	ldd	r24, Z+2	; 0x02
     494:	68 2b       	or	r22, r24
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 23 0c 	call	0x1846	; 0x1846 <__floatunsisf>
     49e:	23 e3       	ldi	r18, 0x33	; 51
     4a0:	33 e3       	ldi	r19, 0x33	; 51
     4a2:	44 e8       	ldi	r20, 0x84	; 132
     4a4:	52 e4       	ldi	r21, 0x42	; 66
     4a6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__divsf3>
     4aa:	24 ea       	ldi	r18, 0xA4	; 164
     4ac:	30 e7       	ldi	r19, 0x70	; 112
     4ae:	4d eb       	ldi	r20, 0xBD	; 189
     4b0:	5e e3       	ldi	r21, 0x3E	; 62
     4b2:	0e 94 21 0b 	call	0x1642	; 0x1642 <__subsf3>
     4b6:	68 83       	st	Y, r22
     4b8:	79 83       	std	Y+1, r23	; 0x01
     4ba:	8a 83       	std	Y+2, r24	; 0x02
     4bc:	9b 83       	std	Y+3, r25	; 0x03
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <SPI_handler_4>:

void SPI_handler_4(uint8_t * u8_mottemp) //motor temperature
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	ec 01       	movw	r28, r24
	Set_ADC_Channel_ext(4, u8_txBuffer);
     4ca:	60 e4       	ldi	r22, 0x40	; 64
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	b6 d5       	rcall	.+2924   	; 0x103e <Set_ADC_Channel_ext>
	spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	43 e0       	ldi	r20, 0x03	; 3
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	6d e3       	ldi	r22, 0x3D	; 61
     4da:	71 e0       	ldi	r23, 0x01	; 1
     4dc:	80 e4       	ldi	r24, 0x40	; 64
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <spi_trancieve>
	u8_rxBuffer[1]&= ~(0b111<<5);
     4e4:	ed e3       	ldi	r30, 0x3D	; 61
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	61 81       	ldd	r22, Z+1	; 0x01
     4ea:	6f 71       	andi	r22, 0x1F	; 31
     4ec:	61 83       	std	Z+1, r22	; 0x01
	u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
	
	handle_temp_sensor(u8_mottemp, u16_ADC4_reg);
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	76 2f       	mov	r23, r22
     4f2:	66 27       	eor	r22, r22
     4f4:	82 81       	ldd	r24, Z+2	; 0x02
     4f6:	68 2b       	or	r22, r24
     4f8:	ce 01       	movw	r24, r28
     4fa:	b3 d4       	rcall	.+2406   	; 0xe62 <handle_temp_sensor>
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <handle_can>:

///////////////////////  CAN  /////////////////////////


//receiving
void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	8c 01       	movw	r16, r24
     50c:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx) && vals->motor_status != ERR){
     50e:	cb 01       	movw	r24, r22
     510:	12 d7       	rcall	.+3620   	; 0x1336 <can_read_message_if_new>
     512:	88 23       	and	r24, r24
     514:	c9 f1       	breq	.+114    	; 0x588 <handle_can+0x86>
     516:	f8 01       	movw	r30, r16
     518:	86 89       	ldd	r24, Z+22	; 0x16
     51a:	84 30       	cpi	r24, 0x04	; 4
     51c:	a9 f1       	breq	.+106    	; 0x588 <handle_can+0x86>
		switch (rx->id){
     51e:	88 81       	ld	r24, Y
     520:	99 81       	ldd	r25, Y+1	; 0x01
     522:	80 33       	cpi	r24, 0x30	; 48
     524:	92 40       	sbci	r25, 0x02	; 2
     526:	81 f5       	brne	.+96     	; 0x588 <handle_can+0x86>
			case STEERING_WHEEL_CAN_ID	: //receiving can messages from the steering wheel
				
				if (rx->data.u8[3] > 10)
     528:	8e 81       	ldd	r24, Y+6	; 0x06
     52a:	8b 30       	cpi	r24, 0x0B	; 11
     52c:	a0 f0       	brcs	.+40     	; 0x556 <handle_can+0x54>
				{
					vals->motor_status = ACCEL ;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	f8 01       	movw	r30, r16
     532:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = rx->data.u8[3]/10.0 ;
     534:	6e 81       	ldd	r22, Y+6	; 0x06
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e2       	ldi	r20, 0x20	; 32
     546:	51 e4       	ldi	r21, 0x41	; 65
     548:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__divsf3>
     54c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     550:	f8 01       	movw	r30, r16
     552:	62 8b       	std	Z+18, r22	; 0x12
     554:	19 c0       	rjmp	.+50     	; 0x588 <handle_can+0x86>
				} else {
					vals->motor_status = IDLE ;
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	f8 01       	movw	r30, r16
     55a:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = 0;
     55c:	12 8a       	std	Z+18, r1	; 0x12
				}
				
				if (rx->data.u8[2] > 25 && vals->motor_status == IDLE)
     55e:	8d 81       	ldd	r24, Y+5	; 0x05
     560:	8a 31       	cpi	r24, 0x1A	; 26
     562:	90 f0       	brcs	.+36     	; 0x588 <handle_can+0x86>
				{
					vals->motor_status = BRAKE ;
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	86 8b       	std	Z+22, r24	; 0x16
					vals->u8_throttle_cmd = rx->data.u8[2]/10.0 ;
     568:	6d 81       	ldd	r22, Y+5	; 0x05
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e2       	ldi	r20, 0x20	; 32
     57a:	51 e4       	ldi	r21, 0x41	; 65
     57c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__divsf3>
     580:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     584:	f8 01       	movw	r30, r16
     586:	62 8b       	std	Z+18, r22	; 0x12
				}
			break;
		}
	}
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <handle_motor_status_can_msg>:

//sending
void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
	
	txFrame.id = MOTOR_CAN_ID;
     59e:	e1 ee       	ldi	r30, 0xE1	; 225
     5a0:	f2 e0       	ldi	r31, 0x02	; 2
     5a2:	20 e5       	ldi	r18, 0x50	; 80
     5a4:	34 e0       	ldi	r19, 0x04	; 4
     5a6:	31 83       	std	Z+1, r19	; 0x01
     5a8:	20 83       	st	Z, r18
	txFrame.length = 8;
     5aa:	28 e0       	ldi	r18, 0x08	; 8
     5ac:	22 83       	std	Z+2, r18	; 0x02
	
	if(*send){
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 81       	ld	r18, Z
     5b2:	22 23       	and	r18, r18
     5b4:	61 f1       	breq	.+88     	; 0x60e <handle_motor_status_can_msg+0x7c>
     5b6:	eb 01       	movw	r28, r22
     5b8:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     5ba:	0f 2e       	mov	r0, r31
     5bc:	f1 ee       	ldi	r31, 0xE1	; 225
     5be:	ef 2e       	mov	r14, r31
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	ff 2e       	mov	r15, r31
     5c4:	f0 2d       	mov	r31, r0
     5c6:	8e 89       	ldd	r24, Y+22	; 0x16
     5c8:	f7 01       	movw	r30, r14
     5ca:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = 0;
     5cc:	14 82       	std	Z+4, r1	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     5ce:	68 81       	ld	r22, Y
     5d0:	79 81       	ldd	r23, Y+1	; 0x01
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	9b 81       	ldd	r25, Y+3	; 0x03
     5d6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     5da:	f7 01       	movw	r30, r14
     5dc:	76 83       	std	Z+6, r23	; 0x06
     5de:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = (uint16_t)(vals->f32_energy*1000) ;
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	4a e7       	ldi	r20, 0x7A	; 122
     5e6:	54 e4       	ldi	r21, 0x44	; 68
     5e8:	6c 85       	ldd	r22, Y+12	; 0x0c
     5ea:	7d 85       	ldd	r23, Y+13	; 0x0d
     5ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     5ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     5f0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     5f4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     5f8:	f7 01       	movw	r30, r14
     5fa:	70 87       	std	Z+8, r23	; 0x08
     5fc:	67 83       	std	Z+7, r22	; 0x07
		txFrame.data.u16[3] = (uint16_t)(vals->u8_car_speed) ;
     5fe:	89 89       	ldd	r24, Y+17	; 0x11
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	92 87       	std	Z+10, r25	; 0x0a
     604:	81 87       	std	Z+9, r24	; 0x09
		
		can_send_message(&txFrame);
     606:	c7 01       	movw	r24, r14
     608:	d9 d6       	rcall	.+3506   	; 0x13bc <can_send_message>
		*send = 0;
     60a:	f8 01       	movw	r30, r16
     60c:	10 82       	st	Z, r1
	}
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <receive_uart>:

///////////////////  UART  ////////////////////

//receiving 
void receive_uart(ModuleValues_t * vals)
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	00 d0       	rcall	.+0      	; 0x626 <receive_uart+0xa>
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	fc 01       	movw	r30, r24
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     62c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <rx0_Head>
     630:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <rx0_Tail>
	if(uart_AvailableBytes()!=0 && vals->motor_status != ERR){
     634:	92 1b       	sub	r25, r18
     636:	9f 71       	andi	r25, 0x1F	; 31
     638:	79 f1       	breq	.+94     	; 0x698 <receive_uart+0x7c>
     63a:	86 89       	ldd	r24, Z+22	; 0x16
     63c:	84 30       	cpi	r24, 0x04	; 4
     63e:	61 f1       	breq	.+88     	; 0x698 <receive_uart+0x7c>
		volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     640:	8f 01       	movw	r16, r30
     642:	78 d1       	rcall	.+752    	; 0x934 <uart0_getint>
		uart_flush();
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	89 83       	std	Y+1, r24	; 0x01
		if (u16_data_received >10 && u16_data_received <= 20)
     648:	fa d0       	rcall	.+500    	; 0x83e <uart0_flush>
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	0b 97       	sbiw	r24, 0x0b	; 11
     650:	58 f0       	brcs	.+22     	; 0x668 <receive_uart+0x4c>
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	9a 81       	ldd	r25, Y+2	; 0x02
     656:	45 97       	sbiw	r24, 0x15	; 21
		{
			vals->u8_throttle_cmd = u16_data_received-10 ;
     658:	38 f4       	brcc	.+14     	; 0x668 <receive_uart+0x4c>
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	8a 50       	subi	r24, 0x0A	; 10
     660:	f8 01       	movw	r30, r16
			vals->motor_status = BRAKE ;
     662:	82 8b       	std	Z+18, r24	; 0x12
     664:	82 e0       	ldi	r24, 0x02	; 2
		}
		if (u16_data_received>0 && u16_data_received <= 10)
     666:	86 8b       	std	Z+22, r24	; 0x16
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	89 2b       	or	r24, r25
     66e:	51 f0       	breq	.+20     	; 0x684 <receive_uart+0x68>
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	0b 97       	sbiw	r24, 0x0b	; 11
		{
			vals->u8_throttle_cmd = u16_data_received ;
     676:	30 f4       	brcc	.+12     	; 0x684 <receive_uart+0x68>
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	f8 01       	movw	r30, r16
			vals->motor_status = ACCEL;
     67e:	82 8b       	std	Z+18, r24	; 0x12
     680:	81 e0       	ldi	r24, 0x01	; 1
		}
		if (u16_data_received == 0)
     682:	86 8b       	std	Z+22, r24	; 0x16
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	89 2b       	or	r24, r25
		{
			vals->u8_throttle_cmd = u16_data_received ;
     68a:	31 f4       	brne	.+12     	; 0x698 <receive_uart+0x7c>
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	f8 01       	movw	r30, r16
			vals->motor_status = IDLE;
     692:	82 8b       	std	Z+18, r24	; 0x12
     694:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     696:	86 8b       	std	Z+22, r24	; 0x16
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	08 95       	ret

000006a6 <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(ModuleValues_t vals)
{
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
	printf("%i",(int16_t)(vals.f32_motor_current*1000));
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	4a e7       	ldi	r20, 0x7A	; 122
     6b4:	54 e4       	ldi	r21, 0x44	; 68
     6b6:	6d 81       	ldd	r22, Y+5	; 0x05
     6b8:	7e 81       	ldd	r23, Y+6	; 0x06
     6ba:	8f 81       	ldd	r24, Y+7	; 0x07
     6bc:	98 85       	ldd	r25, Y+8	; 0x08
     6be:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     6c2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fixsfsi>
     6c6:	7f 93       	push	r23
     6c8:	6f 93       	push	r22
     6ca:	8d e2       	ldi	r24, 0x2D	; 45
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <printf>
	printf(",");
     6d6:	8c e2       	ldi	r24, 0x2C	; 44
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <putchar>
	//printf("%u",vals.u8_throttle_cmd*1000);
	//printf(",");
	//printf("%u",(uint16_t)(vals.u8_duty_cycle*10.0));
	//printf(",");
	printf("%u",(uint16_t)(vals.f32_batt_volt*1000));
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	4a e7       	ldi	r20, 0x7A	; 122
     6e4:	54 e4       	ldi	r21, 0x44	; 68
     6e6:	6d 85       	ldd	r22, Y+13	; 0x0d
     6e8:	7e 85       	ldd	r23, Y+14	; 0x0e
     6ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ec:	98 89       	ldd	r25, Y+16	; 0x10
     6ee:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     6f2:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     6f6:	7f 93       	push	r23
     6f8:	6f 93       	push	r22
     6fa:	80 e3       	ldi	r24, 0x30	; 48
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	9f 93       	push	r25
     700:	8f 93       	push	r24
     702:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <printf>
	printf("\n");
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <putchar>
}
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(ModuleValues_t vals)
{
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
	rgbled_turn_off(LED_ALL);
     726:	80 ee       	ldi	r24, 0xE0	; 224
     728:	08 d7       	rcall	.+3600   	; 0x153a <rgbled_turn_off>
	
	switch (vals.motor_status)
     72a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	89 f0       	breq	.+34     	; 0x752 <manage_LEDs+0x34>
     730:	28 f4       	brcc	.+10     	; 0x73c <manage_LEDs+0x1e>
     732:	88 23       	and	r24, r24
     734:	41 f0       	breq	.+16     	; 0x746 <manage_LEDs+0x28>
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	49 f0       	breq	.+18     	; 0x74c <manage_LEDs+0x2e>
     73a:	13 c0       	rjmp	.+38     	; 0x762 <manage_LEDs+0x44>
     73c:	83 30       	cpi	r24, 0x03	; 3
     73e:	61 f0       	breq	.+24     	; 0x758 <manage_LEDs+0x3a>
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	69 f0       	breq	.+26     	; 0x75e <manage_LEDs+0x40>
	{
		case OFF :
			rgbled_turn_on(LED_BLUE);
     744:	0e c0       	rjmp	.+28     	; 0x762 <manage_LEDs+0x44>
		break ;
		
		case ACCEL :
			rgbled_toggle(LED_GREEN);
     746:	80 e8       	ldi	r24, 0x80	; 128
     748:	02 d7       	rcall	.+3588   	; 0x154e <rgbled_turn_on>
		break;
     74a:	0b c0       	rjmp	.+22     	; 0x762 <manage_LEDs+0x44>
		
		case BRAKE :
			rgbled_toggle(LED_GREEN);
     74c:	80 e4       	ldi	r24, 0x40	; 64
     74e:	04 d7       	rcall	.+3592   	; 0x1558 <rgbled_toggle>
		break;
		
		case IDLE :
			rgbled_turn_on(LED_GREEN);
     750:	08 c0       	rjmp	.+16     	; 0x762 <manage_LEDs+0x44>
     752:	80 e4       	ldi	r24, 0x40	; 64
		break;
     754:	01 d7       	rcall	.+3586   	; 0x1558 <rgbled_toggle>
		
		case ERR :
			rgbled_turn_on(LED_RED);
     756:	05 c0       	rjmp	.+10     	; 0x762 <manage_LEDs+0x44>
     758:	80 e4       	ldi	r24, 0x40	; 64
     75a:	f9 d6       	rcall	.+3570   	; 0x154e <rgbled_turn_on>
		break;
	}
     75c:	02 c0       	rjmp	.+4      	; 0x762 <manage_LEDs+0x44>
     75e:	80 e2       	ldi	r24, 0x20	; 32
     760:	f6 d6       	rcall	.+3564   	; 0x154e <rgbled_turn_on>
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     768:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     76a:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     76c:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     76e:	ea e6       	ldi	r30, 0x6A	; 106
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	8c 60       	ori	r24, 0x0C	; 12
     776:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     778:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     77a:	ed 9a       	sbi	0x1d, 5	; 29
     77c:	08 95       	ret

0000077e <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint16_t u16_period) // period in ms
{
     77e:	8f 92       	push	r8
     780:	9f 92       	push	r9
     782:	af 92       	push	r10
     784:	bf 92       	push	r11
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	1f 92       	push	r1
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	6c 01       	movw	r12, r24
     79e:	7b 01       	movw	r14, r22
     7a0:	8a 01       	movw	r16, r20
	volatile uint8_t u8_new_speed = (uint8_t)(((float)*u16_counter)*D_WHEEL*PI/N_MAG/u16_period); // speed calculated in mm/ms
     7a2:	fb 01       	movw	r30, r22
     7a4:	60 81       	ld	r22, Z
     7a6:	71 81       	ldd	r23, Z+1	; 0x01
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 23 0c 	call	0x1846	; 0x1846 <__floatunsisf>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	4a ef       	ldi	r20, 0xFA	; 250
     7b6:	53 e4       	ldi	r21, 0x43	; 67
     7b8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     7bc:	23 ec       	ldi	r18, 0xC3	; 195
     7be:	35 ef       	ldi	r19, 0xF5	; 245
     7c0:	48 e4       	ldi	r20, 0x48	; 72
     7c2:	50 e4       	ldi	r21, 0x40	; 64
     7c4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     7c8:	4b 01       	movw	r8, r22
     7ca:	5c 01       	movw	r10, r24
     7cc:	b8 01       	movw	r22, r16
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 23 0c 	call	0x1846	; 0x1846 <__floatunsisf>
     7d6:	9b 01       	movw	r18, r22
     7d8:	ac 01       	movw	r20, r24
     7da:	c5 01       	movw	r24, r10
     7dc:	b4 01       	movw	r22, r8
     7de:	9a d7       	rcall	.+3892   	; 0x1714 <__divsf3>
     7e0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     7e4:	69 83       	std	Y+1, r22	; 0x01
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	*u8_speed = u8_new_speed ;
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	f6 01       	movw	r30, r12
     7ea:	80 83       	st	Z, r24
	*u16_counter = 0 ;
     7ec:	f7 01       	movw	r30, r14
     7ee:	11 82       	std	Z+1, r1	; 0x01
     7f0:	10 82       	st	Z, r1
}
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	bf 90       	pop	r11
     806:	af 90       	pop	r10
     808:	9f 90       	pop	r9
     80a:	8f 90       	pop	r8
     80c:	08 95       	ret

0000080e <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     80e:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <tx0_Head>
     812:	9f 5f       	subi	r25, 0xFF	; 255
     814:	9f 71       	andi	r25, 0x1F	; 31
     816:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <tx0_Tail>
     81a:	92 17       	cp	r25, r18
     81c:	e1 f3       	breq	.-8      	; 0x816 <uart0_putc+0x8>
     81e:	e9 2f       	mov	r30, r25
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	ec 5a       	subi	r30, 0xAC	; 172
     824:	fc 4f       	sbci	r31, 0xFC	; 252
     826:	80 83       	st	Z, r24
     828:	2f b7       	in	r18, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <tx0_Head>
     830:	e1 ec       	ldi	r30, 0xC1	; 193
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	80 62       	ori	r24, 0x20	; 32
     838:	80 83       	st	Z, r24
     83a:	2f bf       	out	0x3f, r18	; 63
     83c:	08 95       	ret

0000083e <uart0_flush>:
     83e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <tx0_Tail>
     842:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <tx0_Head>
     846:	98 13       	cpse	r25, r24
     848:	fa cf       	rjmp	.-12     	; 0x83e <uart0_flush>
     84a:	08 95       	ret

0000084c <uart1_putc>:
     84c:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <tx1_Head>
     850:	9f 5f       	subi	r25, 0xFF	; 255
     852:	9f 71       	andi	r25, 0x1F	; 31
     854:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <tx1_Tail>
     858:	92 17       	cp	r25, r18
     85a:	e1 f3       	breq	.-8      	; 0x854 <uart1_putc+0x8>
     85c:	e9 2f       	mov	r30, r25
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	e1 5f       	subi	r30, 0xF1	; 241
     862:	fc 4f       	sbci	r31, 0xFC	; 252
     864:	80 83       	st	Z, r24
     866:	2f b7       	in	r18, 0x3f	; 63
     868:	f8 94       	cli
     86a:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <tx1_Head>
     86e:	e9 ec       	ldi	r30, 0xC9	; 201
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	80 62       	ori	r24, 0x20	; 32
     876:	80 83       	st	Z, r24
     878:	2f bf       	out	0x3f, r18	; 63
     87a:	08 95       	ret

0000087c <uart_putchar>:
     87c:	cf 93       	push	r28
     87e:	c8 2f       	mov	r28, r24
     880:	fb 01       	movw	r30, r22
     882:	84 85       	ldd	r24, Z+12	; 0x0c
     884:	95 85       	ldd	r25, Z+13	; 0x0d
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	39 f0       	breq	.+14     	; 0x898 <uart_putchar+0x1c>
     88a:	ca 30       	cpi	r28, 0x0A	; 10
     88c:	11 f4       	brne	.+4      	; 0x892 <uart_putchar+0x16>
     88e:	8d e0       	ldi	r24, 0x0D	; 13
     890:	be df       	rcall	.-132    	; 0x80e <uart0_putc>
     892:	8c 2f       	mov	r24, r28
     894:	bc df       	rcall	.-136    	; 0x80e <uart0_putc>
     896:	06 c0       	rjmp	.+12     	; 0x8a4 <uart_putchar+0x28>
     898:	ca 30       	cpi	r28, 0x0A	; 10
     89a:	11 f4       	brne	.+4      	; 0x8a0 <uart_putchar+0x24>
     89c:	8d e0       	ldi	r24, 0x0D	; 13
     89e:	d6 df       	rcall	.-84     	; 0x84c <uart1_putc>
     8a0:	8c 2f       	mov	r24, r28
     8a2:	d4 df       	rcall	.-88     	; 0x84c <uart1_putc>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <uart0_getc>:
     8ac:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <rx0_Tail>
     8b0:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <rx0_Head>
     8b4:	89 17       	cp	r24, r25
     8b6:	59 f0       	breq	.+22     	; 0x8ce <uart0_getc+0x22>
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	98 2f       	mov	r25, r24
     8bc:	9f 71       	andi	r25, 0x1F	; 31
     8be:	e9 2f       	mov	r30, r25
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	e4 51       	subi	r30, 0x14	; 20
     8c4:	fd 4f       	sbci	r31, 0xFD	; 253
     8c6:	80 81       	ld	r24, Z
     8c8:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <rx0_Tail>
     8cc:	08 95       	ret
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret

000008d2 <uart0_getlnToFirstWhiteSpace>:
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	7c 01       	movw	r14, r24
     8e0:	16 2f       	mov	r17, r22
     8e2:	e4 df       	rcall	.-56     	; 0x8ac <uart0_getc>
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 83       	st	Z, r24
     8e8:	81 32       	cpi	r24, 0x21	; 33
     8ea:	d8 f3       	brcs	.-10     	; 0x8e2 <uart0_getlnToFirstWhiteSpace+0x10>
     8ec:	e7 01       	movw	r28, r14
     8ee:	21 96       	adiw	r28, 0x01	; 1
     8f0:	12 30       	cpi	r17, 0x02	; 2
     8f2:	c1 f0       	breq	.+48     	; 0x924 <uart0_getlnToFirstWhiteSpace+0x52>
     8f4:	13 50       	subi	r17, 0x03	; 3
     8f6:	81 2f       	mov	r24, r17
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	02 96       	adiw	r24, 0x02	; 2
     8fc:	87 01       	movw	r16, r14
     8fe:	08 0f       	add	r16, r24
     900:	19 1f       	adc	r17, r25
     902:	d4 df       	rcall	.-88     	; 0x8ac <uart0_getc>
     904:	88 83       	st	Y, r24
     906:	88 23       	and	r24, r24
     908:	e1 f3       	breq	.-8      	; 0x902 <uart0_getlnToFirstWhiteSpace+0x30>
     90a:	8d 30       	cpi	r24, 0x0D	; 13
     90c:	21 f4       	brne	.+8      	; 0x916 <uart0_getlnToFirstWhiteSpace+0x44>
     90e:	ce df       	rcall	.-100    	; 0x8ac <uart0_getc>
     910:	88 23       	and	r24, r24
     912:	e9 f3       	breq	.-6      	; 0x90e <uart0_getlnToFirstWhiteSpace+0x3c>
     914:	07 c0       	rjmp	.+14     	; 0x924 <uart0_getlnToFirstWhiteSpace+0x52>
     916:	81 32       	cpi	r24, 0x21	; 33
     918:	28 f0       	brcs	.+10     	; 0x924 <uart0_getlnToFirstWhiteSpace+0x52>
     91a:	21 96       	adiw	r28, 0x01	; 1
     91c:	0c 17       	cp	r16, r28
     91e:	1d 07       	cpc	r17, r29
     920:	81 f7       	brne	.-32     	; 0x902 <uart0_getlnToFirstWhiteSpace+0x30>
     922:	e8 01       	movw	r28, r16
     924:	18 82       	st	Y, r1
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	08 95       	ret

00000934 <uart0_getint>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	27 97       	sbiw	r28, 0x07	; 7
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	67 e0       	ldi	r22, 0x07	; 7
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	c1 df       	rcall	.-126    	; 0x8d2 <uart0_getlnToFirstWhiteSpace>
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <atoi>
     958:	27 96       	adiw	r28, 0x07	; 7
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <uart0_getData>:
     96a:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <rx0_Tail>
     96e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <rx0_Head>
     972:	89 17       	cp	r24, r25
     974:	61 f0       	breq	.+24     	; 0x98e <uart0_getData+0x24>
     976:	8f 5f       	subi	r24, 0xFF	; 255
     978:	8f 71       	andi	r24, 0x1F	; 31
     97a:	e8 2f       	mov	r30, r24
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	e4 51       	subi	r30, 0x14	; 20
     980:	fd 4f       	sbci	r31, 0xFD	; 253
     982:	90 81       	ld	r25, Z
     984:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <rx0_Tail>
     988:	89 2f       	mov	r24, r25
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	08 95       	ret
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	9f ef       	ldi	r25, 0xFF	; 255
     992:	08 95       	ret

00000994 <uart1_getData>:
     994:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <rx1_Tail>
     998:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <rx1_Head>
     99c:	89 17       	cp	r24, r25
     99e:	61 f0       	breq	.+24     	; 0x9b8 <uart1_getData+0x24>
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
     9a2:	8f 71       	andi	r24, 0x1F	; 31
     9a4:	e8 2f       	mov	r30, r24
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	e0 5d       	subi	r30, 0xD0	; 208
     9aa:	fc 4f       	sbci	r31, 0xFC	; 252
     9ac:	90 81       	ld	r25, Z
     9ae:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <rx1_Tail>
     9b2:	89 2f       	mov	r24, r25
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	08 95       	ret
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	08 95       	ret

000009be <uart_getchar>:
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	fc 01       	movw	r30, r24
     9c4:	84 85       	ldd	r24, Z+12	; 0x0c
     9c6:	95 85       	ldd	r25, Z+13	; 0x0d
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	41 f0       	breq	.+16     	; 0x9dc <uart_getchar+0x1e>
     9cc:	ce df       	rcall	.-100    	; 0x96a <uart0_getData>
     9ce:	ec 01       	movw	r28, r24
     9d0:	99 23       	and	r25, r25
     9d2:	e4 f3       	brlt	.-8      	; 0x9cc <uart_getchar+0xe>
     9d4:	1c df       	rcall	.-456    	; 0x80e <uart0_putc>
     9d6:	ce 01       	movw	r24, r28
     9d8:	99 27       	eor	r25, r25
     9da:	07 c0       	rjmp	.+14     	; 0x9ea <uart_getchar+0x2c>
     9dc:	db df       	rcall	.-74     	; 0x994 <uart1_getData>
     9de:	ec 01       	movw	r28, r24
     9e0:	99 23       	and	r25, r25
     9e2:	e4 f3       	brlt	.-8      	; 0x9dc <uart_getchar+0x1e>
     9e4:	33 df       	rcall	.-410    	; 0x84c <uart1_putc>
     9e6:	ce 01       	movw	r24, r28
     9e8:	99 27       	eor	r25, r25
     9ea:	99 27       	eor	r25, r25
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     9f2:	0f 93       	push	r16
     9f4:	0f b7       	in	r16, 0x3f	; 63
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
     9fa:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <tx0_Tail>
     9fe:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <tx0_Head>
     a02:	e3 95       	inc	r30
     a04:	ef 71       	andi	r30, 0x1F	; 31
     a06:	ef 13       	cpse	r30, r31
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <USART0_TX_CONTINUE>
     a0a:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     a0e:	ff 7d       	andi	r31, 0xDF	; 223
     a10:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000a14 <USART0_TX_CONTINUE>:
     a14:	e0 93 0d 03 	sts	0x030D, r30	; 0x80030d <tx0_Tail>
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ec 5a       	subi	r30, 0xAC	; 172
     a1c:	fc 4f       	sbci	r31, 0xFC	; 252
     a1e:	e0 81       	ld	r30, Z
     a20:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000a24 <USART0_TX_EXIT>:
     a24:	ff 91       	pop	r31
     a26:	ef 91       	pop	r30
     a28:	0f bf       	out	0x3f, r16	; 63
     a2a:	0f 91       	pop	r16
     a2c:	18 95       	reti

00000a2e <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     a2e:	0f 93       	push	r16
     a30:	0f b7       	in	r16, 0x3f	; 63
     a32:	9f 93       	push	r25
     a34:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
     a3c:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <rx0_Head>
     a40:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <rx0_Tail>
     a44:	e3 95       	inc	r30
     a46:	ef 71       	andi	r30, 0x1F	; 31
     a48:	fe 17       	cp	r31, r30
     a4a:	31 f0       	breq	.+12     	; 0xa58 <USART0_RX_EXIT>
     a4c:	e0 93 50 03 	sts	0x0350, r30	; 0x800350 <rx0_Head>
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	e4 51       	subi	r30, 0x14	; 20
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	90 83       	st	Z, r25

00000a58 <USART0_RX_EXIT>:
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	9f 91       	pop	r25
     a5e:	0f bf       	out	0x3f, r16	; 63
     a60:	0f 91       	pop	r16
     a62:	18 95       	reti

00000a64 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     a64:	0f 93       	push	r16
     a66:	0f b7       	in	r16, 0x3f	; 63
     a68:	ef 93       	push	r30
     a6a:	ff 93       	push	r31
     a6c:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <tx1_Tail>
     a70:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <tx1_Head>
     a74:	e3 95       	inc	r30
     a76:	ef 71       	andi	r30, 0x1F	; 31
     a78:	ef 13       	cpse	r30, r31
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <USART1_TX_CONTINUE>
     a7c:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     a80:	ff 7d       	andi	r31, 0xDF	; 223
     a82:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000a86 <USART1_TX_CONTINUE>:
     a86:	e0 93 51 03 	sts	0x0351, r30	; 0x800351 <tx1_Tail>
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	e1 5f       	subi	r30, 0xF1	; 241
     a8e:	fc 4f       	sbci	r31, 0xFC	; 252
     a90:	e0 81       	ld	r30, Z
     a92:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000a96 <USART1_TX_EXIT>:
     a96:	ff 91       	pop	r31
     a98:	ef 91       	pop	r30
     a9a:	0f bf       	out	0x3f, r16	; 63
     a9c:	0f 91       	pop	r16
     a9e:	18 95       	reti

00000aa0 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     aa0:	0f 93       	push	r16
     aa2:	0f b7       	in	r16, 0x3f	; 63
     aa4:	9f 93       	push	r25
     aa6:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
     aae:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <rx1_Head>
     ab2:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <rx1_Tail>
     ab6:	e3 95       	inc	r30
     ab8:	ef 71       	andi	r30, 0x1F	; 31
     aba:	fe 17       	cp	r31, r30
     abc:	31 f0       	breq	.+12     	; 0xaca <USART1_RX_EXIT>
     abe:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <rx1_Head>
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	e0 5d       	subi	r30, 0xD0	; 208
     ac6:	fc 4f       	sbci	r31, 0xFC	; 252
     ac8:	90 83       	st	Z, r25

00000aca <USART1_RX_EXIT>:
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	9f 91       	pop	r25
     ad0:	0f bf       	out	0x3f, r16	; 63
     ad2:	0f 91       	pop	r16
     ad4:	18 95       	reti

00000ad6 <timer1_init_ts>:
//for speed
static uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     ad6:	e1 e8       	ldi	r30, 0x81	; 129
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	83 60       	ori	r24, 0x03	; 3
     ade:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     ae0:	80 81       	ld	r24, Z
     ae2:	88 60       	ori	r24, 0x08	; 8
     ae4:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     ae6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     aea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     aee:	ef e6       	ldi	r30, 0x6F	; 111
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	82 60       	ori	r24, 0x02	; 2
     af6:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     af8:	8d e7       	ldi	r24, 0x7D	; 125
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b00:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b04:	08 95       	ret

00000b06 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     b06:	84 b5       	in	r24, 0x24	; 36
     b08:	85 60       	ori	r24, 0x05	; 5
     b0a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     b0c:	84 b5       	in	r24, 0x24	; 36
     b0e:	88 60       	ori	r24, 0x08	; 8
     b10:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     b12:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     b14:	ee e6       	ldi	r30, 0x6E	; 110
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	82 60       	ori	r24, 0x02	; 2
     b1c:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms
     b1e:	87 e2       	ldi	r24, 0x27	; 39
     b20:	87 bd       	out	0x27, r24	; 39
     b22:	08 95       	ret

00000b24 <main>:

int main(void)	
{
	cli();
	rgbled_init();
	rgbled_turn_on(LED_ALL);
     b24:	f8 94       	cli

	pwm_init();
     b26:	0d d5       	rcall	.+2586   	; 0x1542 <rgbled_init>
     b28:	80 ee       	ldi	r24, 0xE0	; 224
	can_init(0,0);
     b2a:	11 d5       	rcall	.+2594   	; 0x154e <rgbled_turn_on>
	timer1_init_ts();
     b2c:	c5 d4       	rcall	.+2442   	; 0x14b8 <pwm_init>
	timer0_init_ts();
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
	speed_init();
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     b36:	aa d3       	rcall	.+1876   	; 0x128c <can_init>
     b38:	ce df       	rcall	.-100    	; 0xad6 <timer1_init_ts>
     b3a:	e5 df       	rcall	.-54     	; 0xb06 <timer0_init_ts>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     b3c:	15 de       	rcall	.-982    	; 0x768 <speed_init>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     b40:	0f d5       	rcall	.+2590   	; 0x1560 <spi_init>
     b42:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     b46:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     b4a:	88 e9       	ldi	r24, 0x98	; 152
     b4c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     b50:	e4 e7       	ldi	r30, 0x74	; 116
	
	rgbled_init();
     b52:	f3 e0       	ldi	r31, 0x03	; 3
     b54:	84 e0       	ldi	r24, 0x04	; 4
	drivers_init();
     b56:	91 e0       	ldi	r25, 0x01	; 1
	sei();
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues); //send CAN
     b58:	93 83       	std	Z+3, r25	; 0x03
     b5a:	82 83       	std	Z+2, r24	; 0x02
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	80 83       	st	Z, r24
     b60:	f0 d4       	rcall	.+2528   	; 0x1542 <rgbled_init>
     b62:	cf db       	rcall	.-2146   	; 0x302 <drivers_init>
		handle_can(&ComValues, &rxFrame); //receive CAN
     b64:	78 94       	sei
     b66:	62 e1       	ldi	r22, 0x12	; 18
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	85 e4       	ldi	r24, 0x45	; 69
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	11 dd       	rcall	.-1502   	; 0x592 <handle_motor_status_can_msg>
		
		send_uart(ComValues);
     b70:	66 ed       	ldi	r22, 0xD6	; 214
     b72:	72 e0       	ldi	r23, 0x02	; 2
     b74:	82 e1       	ldi	r24, 0x12	; 18
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	c4 dc       	rcall	.-1656   	; 0x502 <handle_can>
     b7a:	8d b7       	in	r24, 0x3d	; 61
     b7c:	9e b7       	in	r25, 0x3e	; 62
     b7e:	4b 97       	sbiw	r24, 0x1b	; 27
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	9e bf       	out	0x3e, r25	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	8d bf       	out	0x3d, r24	; 61
     b8a:	ad b7       	in	r26, 0x3d	; 61
     b8c:	be b7       	in	r27, 0x3e	; 62
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	8b e1       	ldi	r24, 0x1B	; 27
		receive_uart(&ComValues);
     b92:	e2 e1       	ldi	r30, 0x12	; 18
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	01 90       	ld	r0, Z+
     b98:	0d 92       	st	X+, r0
		
		err_check(&ComValues); //verifying current, temperature and voltage
     b9a:	8a 95       	dec	r24
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <main+0x72>
     b9e:	83 dd       	rcall	.-1274   	; 0x6a6 <send_uart>
     ba0:	82 e1       	ldi	r24, 0x12	; 18
		manage_LEDs(ComValues); //UM LED according to motor state
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	3b dd       	rcall	.-1418   	; 0x61c <receive_uart>
     ba6:	82 e1       	ldi	r24, 0x12	; 18
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	14 d2       	rcall	.+1064   	; 0xfd4 <err_check>
     bac:	8d b7       	in	r24, 0x3d	; 61
     bae:	9e b7       	in	r25, 0x3e	; 62
     bb0:	4b 97       	sbiw	r24, 0x1b	; 27
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	9e bf       	out	0x3e, r25	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	8d bf       	out	0x3d, r24	; 61
     bbc:	ad b7       	in	r26, 0x3d	; 61
     bbe:	be b7       	in	r27, 0x3e	; 62
     bc0:	11 96       	adiw	r26, 0x01	; 1
     bc2:	8b e1       	ldi	r24, 0x1B	; 27
     bc4:	e2 e1       	ldi	r30, 0x12	; 18
     bc6:	f1 e0       	ldi	r31, 0x01	; 1
     bc8:	01 90       	ld	r0, Z+
     bca:	0d 92       	st	X+, r0
     bcc:	8a 95       	dec	r24
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <main+0xa4>
     bd0:	a6 dd       	rcall	.-1204   	; 0x71e <manage_LEDs>
     bd2:	8d b7       	in	r24, 0x3d	; 61
     bd4:	9e b7       	in	r25, 0x3e	; 62
     bd6:	c6 96       	adiw	r24, 0x36	; 54
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	9e bf       	out	0x3e, r25	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	8d bf       	out	0x3d, r24	; 61
     be2:	c1 cf       	rjmp	.-126    	; 0xb66 <main+0x42>

00000be4 <__vector_16>:
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms? TODO check loop times!!!
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	0b b6       	in	r0, 0x3b	; 59
     bf0:	0f 92       	push	r0
     bf2:	ef 92       	push	r14
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
	
	if (can_sender_counter == 1) // every 10ms
     c10:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <can_sender_counter>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	a1 f4       	brne	.+40     	; 0xc40 <__vector_16+0x5c>
	{
		//handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 10.0);
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 10) ;
     c18:	e2 e1       	ldi	r30, 0x12	; 18
     c1a:	f1 e0       	ldi	r31, 0x01	; 1
     c1c:	00 85       	ldd	r16, Z+8	; 0x08
     c1e:	11 85       	ldd	r17, Z+9	; 0x09
     c20:	22 85       	ldd	r18, Z+10	; 0x0a
     c22:	33 85       	ldd	r19, Z+11	; 0x0b
     c24:	44 81       	ldd	r20, Z+4	; 0x04
     c26:	55 81       	ldd	r21, Z+5	; 0x05
     c28:	66 81       	ldd	r22, Z+6	; 0x06
     c2a:	77 81       	ldd	r23, Z+7	; 0x07
     c2c:	0f 2e       	mov	r0, r31
     c2e:	fa e0       	ldi	r31, 0x0A	; 10
     c30:	ef 2e       	mov	r14, r31
     c32:	f0 2d       	mov	r31, r0
     c34:	8e e1       	ldi	r24, 0x1E	; 30
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	96 d1       	rcall	.+812    	; 0xf66 <handle_joulemeter>
		
		can_sender_counter = 0;
     c3a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <can_sender_counter>
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <__vector_16+0x62>
	} else {
		can_sender_counter ++;
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <can_sender_counter>
	}
	
	if (speed_handler_counter == 100) // every 1s 
     c46:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <speed_handler_counter>
     c4a:	84 36       	cpi	r24, 0x64	; 100
     c4c:	69 f4       	brne	.+26     	; 0xc68 <__vector_16+0x84>
	{
		send_can = 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <send_can>
		handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 1000);	//write real loop time when measured	
     c54:	48 ee       	ldi	r20, 0xE8	; 232
     c56:	53 e0       	ldi	r21, 0x03	; 3
     c58:	62 e4       	ldi	r22, 0x42	; 66
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	83 e2       	ldi	r24, 0x23	; 35
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	8e dd       	rcall	.-1252   	; 0x77e <handle_speed_sensor>
		speed_handler_counter = 0;
     c62:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <speed_handler_counter>
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <__vector_16+0x8a>
		} else {
		speed_handler_counter ++;
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <speed_handler_counter>
	}
	
	manage_motor(&ComValues);
     c6e:	82 e1       	ldi	r24, 0x12	; 18
     c70:	91 e0       	ldi	r25, 0x01	; 1
}
     c72:	4f db       	rcall	.-2402   	; 0x312 <manage_motor>
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	bf 91       	pop	r27
     c7a:	af 91       	pop	r26
     c7c:	9f 91       	pop	r25
     c7e:	8f 91       	pop	r24
     c80:	7f 91       	pop	r23
     c82:	6f 91       	pop	r22
     c84:	5f 91       	pop	r21
     c86:	4f 91       	pop	r20
     c88:	3f 91       	pop	r19
     c8a:	2f 91       	pop	r18
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ef 90       	pop	r14
     c92:	0f 90       	pop	r0
     c94:	0b be       	out	0x3b, r0	; 59
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0
     c9c:	1f 90       	pop	r1
     c9e:	18 95       	reti

00000ca0 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	0b b6       	in	r0, 0x3b	; 59
     cac:	0f 92       	push	r0
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31

	if (u8_SPI_count == 4)
     cc6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	31 f4       	brne	.+12     	; 0xcda <__vector_12+0x3a>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
     cce:	82 e2       	ldi	r24, 0x22	; 34
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	f8 db       	rcall	.-2064   	; 0x4c4 <SPI_handler_4>
		u8_SPI_count = 0 ;
     cd4:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <u8_SPI_count>
     cd8:	12 c0       	rjmp	.+36     	; 0xcfe <__vector_12+0x5e>
	}
	
	if (u8_SPI_count == 3)
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	21 f4       	brne	.+8      	; 0xce6 <__vector_12+0x46>
	{
		u8_SPI_count ++ ;
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
     ce4:	18 c0       	rjmp	.+48     	; 0xd16 <__vector_12+0x76>
	}
	
	if (u8_SPI_count == 2)
     ce6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	41 f4       	brne	.+16     	; 0xcfe <__vector_12+0x5e>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
     cee:	8a e1       	ldi	r24, 0x1A	; 26
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	b7 db       	rcall	.-2194   	; 0x462 <SPI_handler_2>
		u8_SPI_count ++ ;
     cf4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     cfe:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     d02:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
     d04:	41 f4       	brne	.+16     	; 0xd16 <__vector_12+0x76>
     d06:	86 e1       	ldi	r24, 0x16	; 22
     d08:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     d0a:	8c db       	rcall	.-2280   	; 0x424 <SPI_handler_1>
     d0c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
     d16:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
     d1a:	81 11       	cpse	r24, r1
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <__vector_12+0x8e>
     d1e:	82 e1       	ldi	r24, 0x12	; 18
     d20:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
     d22:	61 db       	rcall	.-2366   	; 0x3e6 <SPI_handler_0>
     d24:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_SPI_count>
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_SPI_count>
	}
}
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in frot of the reed switch)
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
	u16_speed_count ++ ;
     d62:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16_speed_count>
     d66:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16_speed_count+0x1>
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <u16_speed_count+0x1>
     d70:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u16_speed_count>
}
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.24
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     d82:	8f 92       	push	r8
     d84:	9f 92       	push	r9
     d86:	af 92       	push	r10
     d88:	bf 92       	push	r11
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <handle_current_sensor+0x1a>
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <handle_current_sensor+0x1c>
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	4e d5       	rcall	.+2716   	; 0x1846 <__floatunsisf>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 ea       	ldi	r20, 0xA0	; 160
     db0:	50 e4       	ldi	r21, 0x40	; 64
     db2:	ff d5       	rcall	.+3070   	; 0x19b2 <__mulsf3>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	59 e3       	ldi	r21, 0x39	; 57
     dbc:	fa d5       	rcall	.+3060   	; 0x19b2 <__mulsf3>
     dbe:	29 e2       	ldi	r18, 0x29	; 41
     dc0:	3c e5       	ldi	r19, 0x5C	; 92
     dc2:	4f e0       	ldi	r20, 0x0F	; 15
     dc4:	50 e4       	ldi	r21, 0x40	; 64
     dc6:	3d d4       	rcall	.+2170   	; 0x1642 <__subsf3>
     dc8:	23 ec       	ldi	r18, 0xC3	; 195
     dca:	34 e6       	ldi	r19, 0x64	; 100
     dcc:	4a e2       	ldi	r20, 0x2A	; 42
     dce:	5d e3       	ldi	r21, 0x3D	; 61
     dd0:	a1 d4       	rcall	.+2370   	; 0x1714 <__divsf3>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e4       	ldi	r20, 0x40	; 64
     dd8:	50 e4       	ldi	r21, 0x40	; 64
     dda:	9c d4       	rcall	.+2360   	; 0x1714 <__divsf3>
     ddc:	69 83       	std	Y+1, r22	; 0x01
     dde:	7a 83       	std	Y+2, r23	; 0x02
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current-1.76);// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     de4:	69 81       	ldd	r22, Y+1	; 0x01
     de6:	7a 81       	ldd	r23, Y+2	; 0x02
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	2e ea       	ldi	r18, 0xAE	; 174
     dee:	37 e4       	ldi	r19, 0x47	; 71
     df0:	41 ee       	ldi	r20, 0xE1	; 225
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	26 d4       	rcall	.+2124   	; 0x1642 <__subsf3>
     df6:	69 83       	std	Y+1, r22	; 0x01
     df8:	7a 83       	std	Y+2, r23	; 0x02
     dfa:	8b 83       	std	Y+3, r24	; 0x03
     dfc:	9c 83       	std	Y+4, r25	; 0x04
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
     dfe:	89 80       	ldd	r8, Y+1	; 0x01
     e00:	9a 80       	ldd	r9, Y+2	; 0x02
     e02:	ab 80       	ldd	r10, Y+3	; 0x03
     e04:	bc 80       	ldd	r11, Y+4	; 0x04
     e06:	26 e6       	ldi	r18, 0x66	; 102
     e08:	36 e6       	ldi	r19, 0x66	; 102
     e0a:	46 e6       	ldi	r20, 0x66	; 102
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	f8 01       	movw	r30, r16
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	cc d5       	rcall	.+2968   	; 0x19b2 <__mulsf3>
     e1a:	6b 01       	movw	r12, r22
     e1c:	7c 01       	movw	r14, r24
     e1e:	2d ec       	ldi	r18, 0xCD	; 205
     e20:	3c ec       	ldi	r19, 0xCC	; 204
     e22:	4c ec       	ldi	r20, 0xCC	; 204
     e24:	5d e3       	ldi	r21, 0x3D	; 61
     e26:	c5 01       	movw	r24, r10
     e28:	b4 01       	movw	r22, r8
     e2a:	c3 d5       	rcall	.+2950   	; 0x19b2 <__mulsf3>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	07 d4       	rcall	.+2062   	; 0x1644 <__addsf3>
     e36:	f8 01       	movw	r30, r16
     e38:	60 83       	st	Z, r22
     e3a:	71 83       	std	Z+1, r23	; 0x01
     e3c:	82 83       	std	Z+2, r24	; 0x02
     e3e:	93 83       	std	Z+3, r25	; 0x03
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	9f 90       	pop	r9
     e5e:	8f 90       	pop	r8
     e60:	08 95       	ret

00000e62 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <handle_temp_sensor+0xa>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <handle_temp_sensor+0xc>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	e6 d4       	rcall	.+2508   	; 0x1846 <__floatunsisf>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 ea       	ldi	r20, 0xA0	; 160
     e80:	50 e4       	ldi	r21, 0x40	; 64
     e82:	97 d5       	rcall	.+2862   	; 0x19b2 <__mulsf3>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	59 e3       	ldi	r21, 0x39	; 57
     e8c:	92 d5       	rcall	.+2852   	; 0x19b2 <__mulsf3>
     e8e:	69 83       	std	Y+1, r22	; 0x01
     e90:	7a 83       	std	Y+2, r23	; 0x02
     e92:	8b 83       	std	Y+3, r24	; 0x03
     e94:	9c 83       	std	Y+4, r25	; 0x04
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
     e96:	69 81       	ldd	r22, Y+1	; 0x01
     e98:	7a 81       	ldd	r23, Y+2	; 0x02
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	2d ec       	ldi	r18, 0xCD	; 205
     ea0:	3c ec       	ldi	r19, 0xCC	; 204
     ea2:	4c e6       	ldi	r20, 0x6C	; 108
     ea4:	50 e4       	ldi	r21, 0x40	; 64
     ea6:	32 d4       	rcall	.+2148   	; 0x170c <__cmpsf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	8c f0       	brlt	.+34     	; 0xece <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     eac:	69 81       	ldd	r22, Y+1	; 0x01
     eae:	7a 81       	ldd	r23, Y+2	; 0x02
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 ea       	ldi	r20, 0xA0	; 160
     eba:	51 e4       	ldi	r21, 0x41	; 65
     ebc:	7a d5       	rcall	.+2804   	; 0x19b2 <__mulsf3>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 eb       	ldi	r20, 0xB0	; 176
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	bd d3       	rcall	.+1914   	; 0x1642 <__subsf3>
     ec8:	92 d4       	rcall	.+2340   	; 0x17ee <__fixunssfsi>
     eca:	f8 01       	movw	r30, r16
     ecc:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     ece:	69 81       	ldd	r22, Y+1	; 0x01
     ed0:	7a 81       	ldd	r23, Y+2	; 0x02
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	26 e6       	ldi	r18, 0x66	; 102
     ed8:	36 e6       	ldi	r19, 0x66	; 102
     eda:	46 e9       	ldi	r20, 0x96	; 150
     edc:	50 e4       	ldi	r21, 0x40	; 64
     ede:	16 d4       	rcall	.+2092   	; 0x170c <__cmpsf2>
     ee0:	18 16       	cp	r1, r24
     ee2:	e4 f0       	brlt	.+56     	; 0xf1c <handle_temp_sensor+0xba>
     ee4:	69 81       	ldd	r22, Y+1	; 0x01
     ee6:	7a 81       	ldd	r23, Y+2	; 0x02
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	2d ec       	ldi	r18, 0xCD	; 205
     eee:	3c ec       	ldi	r19, 0xCC	; 204
     ef0:	4c e6       	ldi	r20, 0x6C	; 108
     ef2:	50 e4       	ldi	r21, 0x40	; 64
     ef4:	5a d5       	rcall	.+2740   	; 0x19aa <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     ef6:	18 16       	cp	r1, r24
     ef8:	8c f4       	brge	.+34     	; 0xf1c <handle_temp_sensor+0xba>
     efa:	69 81       	ldd	r22, Y+1	; 0x01
     efc:	7a 81       	ldd	r23, Y+2	; 0x02
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	4e e5       	ldi	r20, 0x5E	; 94
     f08:	52 e4       	ldi	r21, 0x42	; 66
     f0a:	53 d5       	rcall	.+2726   	; 0x19b2 <__mulsf3>
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e8       	ldi	r19, 0x80	; 128
     f10:	4b e1       	ldi	r20, 0x1B	; 27
     f12:	53 e4       	ldi	r21, 0x43	; 67
     f14:	96 d3       	rcall	.+1836   	; 0x1642 <__subsf3>
     f16:	6b d4       	rcall	.+2262   	; 0x17ee <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     f18:	f8 01       	movw	r30, r16
     f1a:	60 83       	st	Z, r22
     f1c:	69 81       	ldd	r22, Y+1	; 0x01
     f1e:	7a 81       	ldd	r23, Y+2	; 0x02
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	26 e6       	ldi	r18, 0x66	; 102
     f26:	36 e6       	ldi	r19, 0x66	; 102
     f28:	46 e9       	ldi	r20, 0x96	; 150
     f2a:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     f2c:	3e d5       	rcall	.+2684   	; 0x19aa <__gesf2>
     f2e:	18 16       	cp	r1, r24
     f30:	8c f4       	brge	.+34     	; 0xf54 <handle_temp_sensor+0xf2>
     f32:	69 81       	ldd	r22, Y+1	; 0x01
     f34:	7a 81       	ldd	r23, Y+2	; 0x02
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	48 e4       	ldi	r20, 0x48	; 72
     f40:	53 e4       	ldi	r21, 0x43	; 67
     f42:	37 d5       	rcall	.+2670   	; 0x19b2 <__mulsf3>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	42 e5       	ldi	r20, 0x52	; 82
     f4a:	54 e4       	ldi	r21, 0x44	; 68
     f4c:	7a d3       	rcall	.+1780   	; 0x1642 <__subsf3>
     f4e:	4f d4       	rcall	.+2206   	; 0x17ee <__fixunssfsi>
	}
}
     f50:	f8 01       	movw	r30, r16
     f52:	60 83       	st	Z, r22
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <handle_joulemeter>:

void handle_joulemeter(float *f32_energy, float f32_bat_current, float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
     f66:	8f 92       	push	r8
     f68:	9f 92       	push	r9
     f6a:	af 92       	push	r10
     f6c:	bf 92       	push	r11
     f6e:	ef 92       	push	r14
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
     f7a:	4a 01       	movw	r8, r20
     f7c:	5b 01       	movw	r10, r22
     f7e:	c9 01       	movw	r24, r18
     f80:	b8 01       	movw	r22, r16
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
     f82:	a5 01       	movw	r20, r10
     f84:	94 01       	movw	r18, r8
     f86:	15 d5       	rcall	.+2602   	; 0x19b2 <__mulsf3>
     f88:	4b 01       	movw	r8, r22
     f8a:	5c 01       	movw	r10, r24
     f8c:	6e 2d       	mov	r22, r14
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	58 d4       	rcall	.+2224   	; 0x1846 <__floatunsisf>
     f96:	9b 01       	movw	r18, r22
     f98:	ac 01       	movw	r20, r24
     f9a:	c5 01       	movw	r24, r10
     f9c:	b4 01       	movw	r22, r8
     f9e:	09 d5       	rcall	.+2578   	; 0x19b2 <__mulsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a e7       	ldi	r20, 0x7A	; 122
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	b5 d3       	rcall	.+1898   	; 0x1714 <__divsf3>
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	68 81       	ld	r22, Y
     fb0:	79 81       	ldd	r23, Y+1	; 0x01
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	46 d3       	rcall	.+1676   	; 0x1644 <__addsf3>
     fb8:	68 83       	st	Y, r22
     fba:	79 83       	std	Y+1, r23	; 0x01
     fbc:	8a 83       	std	Y+2, r24	; 0x02
     fbe:	9b 83       	std	Y+3, r25	; 0x03
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ef 90       	pop	r14
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	9f 90       	pop	r9
     fd0:	8f 90       	pop	r8
     fd2:	08 95       	ret

00000fd4 <err_check>:

void err_check(ModuleValues_t * vals)
{
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
	if (vals->f32_batt_volt < 15.0 && vals->motor_status != ERR) //under voltage
     fe2:	c8 84       	ldd	r12, Y+8	; 0x08
     fe4:	d9 84       	ldd	r13, Y+9	; 0x09
     fe6:	ea 84       	ldd	r14, Y+10	; 0x0a
     fe8:	fb 84       	ldd	r15, Y+11	; 0x0b
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e7       	ldi	r20, 0x70	; 112
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	c7 01       	movw	r24, r14
     ff4:	b6 01       	movw	r22, r12
     ff6:	8a d3       	rcall	.+1812   	; 0x170c <__cmpsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	24 f4       	brge	.+8      	; 0x1004 <err_check+0x30>
     ffc:	8e 89       	ldd	r24, Y+22	; 0x16
     ffe:	84 30       	cpi	r24, 0x04	; 4
    1000:	09 f0       	breq	.+2      	; 0x1004 <err_check+0x30>
	{
		vals->motor_status = OFF;
    1002:	1e 8a       	std	Y+22, r1	; 0x16
	}
	
	if (vals->f32_motor_current >= 15.0 || vals->f32_batt_volt > 55.0 /*|| vals->u8_motor_temp > 120*/) //over current, over voltage, over temp
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e7       	ldi	r20, 0x70	; 112
    100a:	51 e4       	ldi	r21, 0x41	; 65
    100c:	68 81       	ld	r22, Y
    100e:	79 81       	ldd	r23, Y+1	; 0x01
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	ca d4       	rcall	.+2452   	; 0x19aa <__gesf2>
    1016:	88 23       	and	r24, r24
    1018:	4c f4       	brge	.+18     	; 0x102c <err_check+0x58>
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4c e5       	ldi	r20, 0x5C	; 92
    1020:	52 e4       	ldi	r21, 0x42	; 66
    1022:	c7 01       	movw	r24, r14
    1024:	b6 01       	movw	r22, r12
    1026:	c1 d4       	rcall	.+2434   	; 0x19aa <__gesf2>
    1028:	18 16       	cp	r1, r24
    102a:	14 f4       	brge	.+4      	; 0x1030 <err_check+0x5c>
	{
		vals->motor_status = ERR;
    102c:	84 e0       	ldi	r24, 0x04	; 4
    102e:	8e 8b       	std	Y+22, r24	; 0x16
	}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <Set_ADC_Channel_ext>:
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	88 30       	cpi	r24, 0x08	; 8
    1042:	91 05       	cpc	r25, r1
    1044:	88 f5       	brcc	.+98     	; 0x10a8 <Set_ADC_Channel_ext+0x6a>
    1046:	fc 01       	movw	r30, r24
    1048:	e6 5b       	subi	r30, 0xB6	; 182
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	15 c5       	rjmp	.+2602   	; 0x1a78 <__tablejump2__>
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	fb 01       	movw	r30, r22
    1052:	80 83       	st	Z, r24
    1054:	11 82       	std	Z+1, r1	; 0x01
    1056:	08 95       	ret
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	fb 01       	movw	r30, r22
    105c:	80 83       	st	Z, r24
    105e:	80 e4       	ldi	r24, 0x40	; 64
    1060:	81 83       	std	Z+1, r24	; 0x01
    1062:	08 95       	ret
    1064:	86 e0       	ldi	r24, 0x06	; 6
    1066:	fb 01       	movw	r30, r22
    1068:	80 83       	st	Z, r24
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	81 83       	std	Z+1, r24	; 0x01
    106e:	08 95       	ret
    1070:	86 e0       	ldi	r24, 0x06	; 6
    1072:	fb 01       	movw	r30, r22
    1074:	80 83       	st	Z, r24
    1076:	80 ec       	ldi	r24, 0xC0	; 192
    1078:	81 83       	std	Z+1, r24	; 0x01
    107a:	08 95       	ret
    107c:	87 e0       	ldi	r24, 0x07	; 7
    107e:	fb 01       	movw	r30, r22
    1080:	80 83       	st	Z, r24
    1082:	11 82       	std	Z+1, r1	; 0x01
    1084:	08 95       	ret
    1086:	87 e0       	ldi	r24, 0x07	; 7
    1088:	fb 01       	movw	r30, r22
    108a:	80 83       	st	Z, r24
    108c:	80 e4       	ldi	r24, 0x40	; 64
    108e:	81 83       	std	Z+1, r24	; 0x01
    1090:	08 95       	ret
    1092:	87 e0       	ldi	r24, 0x07	; 7
    1094:	fb 01       	movw	r30, r22
    1096:	80 83       	st	Z, r24
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	81 83       	std	Z+1, r24	; 0x01
    109c:	08 95       	ret
    109e:	87 e0       	ldi	r24, 0x07	; 7
    10a0:	fb 01       	movw	r30, r22
    10a2:	80 83       	st	Z, r24
    10a4:	80 ec       	ldi	r24, 0xC0	; 192
    10a6:	81 83       	std	Z+1, r24	; 0x01
    10a8:	08 95       	ret

000010aa <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	0b b6       	in	r0, 0x3b	; 59
    10b6:	0f 92       	push	r0
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	1f 92       	push	r1
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    10d8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    10dc:	80 ff       	sbrs	r24, 0
    10de:	47 c0       	rjmp	.+142    	; 0x116e <__stack+0x6f>
    10e0:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    10e4:	90 ff       	sbrs	r25, 0
    10e6:	43 c0       	rjmp	.+134    	; 0x116e <__stack+0x6f>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    10e8:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    10ec:	ee ee       	ldi	r30, 0xEE	; 238
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 7b       	andi	r24, 0xBF	; 191
    10f8:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    10fa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <tx_off>
    10fe:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <tx_on>
    1102:	98 17       	cp	r25, r24
    1104:	89 f1       	breq	.+98     	; 0x1168 <__stack+0x69>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    1106:	8f 70       	andi	r24, 0x0F	; 15
    1108:	2b e0       	ldi	r18, 0x0B	; 11
    110a:	82 9f       	mul	r24, r18
    110c:	c0 01       	movw	r24, r0
    110e:	11 24       	eor	r1, r1
    1110:	fc 01       	movw	r30, r24
    1112:	e2 50       	subi	r30, 0x02	; 2
    1114:	fe 4f       	sbci	r31, 0xFE	; 254
    1116:	20 81       	ld	r18, Z
    1118:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    111c:	20 81       	ld	r18, Z
    111e:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    1122:	21 81       	ldd	r18, Z+1	; 0x01
    1124:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    1128:	23 81       	ldd	r18, Z+3	; 0x03
    112a:	aa ef       	ldi	r26, 0xFA	; 250
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    1130:	24 81       	ldd	r18, Z+4	; 0x04
    1132:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    1134:	25 81       	ldd	r18, Z+5	; 0x05
    1136:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    1138:	26 81       	ldd	r18, Z+6	; 0x06
    113a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    113c:	27 81       	ldd	r18, Z+7	; 0x07
    113e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    1140:	20 85       	ldd	r18, Z+8	; 0x08
    1142:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    1144:	21 85       	ldd	r18, Z+9	; 0x09
    1146:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    1148:	22 85       	ldd	r18, Z+10	; 0x0a
    114a:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    114c:	fc 01       	movw	r30, r24
    114e:	e0 50       	subi	r30, 0x00	; 0
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	80 81       	ld	r24, Z
    1154:	8f 70       	andi	r24, 0x0F	; 15
    1156:	80 64       	ori	r24, 0x40	; 64
    1158:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    115c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <tx_off>
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tx_off>
    1166:	7d c0       	rjmp	.+250    	; 0x1262 <__stack+0x163>
		} else {
			tx_busy = 0;
    1168:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <tx_busy>
    116c:	7a c0       	rjmp	.+244    	; 0x1262 <__stack+0x163>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    116e:	81 ff       	sbrs	r24, 1
    1170:	78 c0       	rjmp	.+240    	; 0x1262 <__stack+0x163>
    1172:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1176:	81 ff       	sbrs	r24, 1
    1178:	74 c0       	rjmp	.+232    	; 0x1262 <__stack+0x163>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    117a:	80 e1       	ldi	r24, 0x10	; 16
    117c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    1180:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_on>
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <rx_off>
    118c:	29 1b       	sub	r18, r25
    118e:	31 09       	sbc	r19, r1
    1190:	2f 77       	andi	r18, 0x7F	; 127
    1192:	33 27       	eor	r19, r19
    1194:	20 31       	cpi	r18, 0x10	; 16
    1196:	31 05       	cpc	r19, r1
    1198:	0c f0       	brlt	.+2      	; 0x119c <__stack+0x9d>
    119a:	58 c0       	rjmp	.+176    	; 0x124c <__stack+0x14d>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    119c:	e8 2f       	mov	r30, r24
    119e:	ef 70       	andi	r30, 0x0F	; 15
    11a0:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    11a4:	2e 2f       	mov	r18, r30
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4b e0       	ldi	r20, 0x0B	; 11
    11aa:	e4 9f       	mul	r30, r20
    11ac:	f0 01       	movw	r30, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	e2 5b       	subi	r30, 0xB2	; 178
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	9f 70       	andi	r25, 0x0F	; 15
    11b6:	42 81       	ldd	r20, Z+2	; 0x02
    11b8:	40 7f       	andi	r20, 0xF0	; 240
    11ba:	94 2b       	or	r25, r20
    11bc:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    11be:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    11c2:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    11c6:	40 7e       	andi	r20, 0xE0	; 224
    11c8:	97 70       	andi	r25, 0x07	; 7
    11ca:	94 2b       	or	r25, r20
    11cc:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    11ce:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    11d2:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    11d4:	aa ef       	ldi	r26, 0xFA	; 250
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	9c 91       	ld	r25, X
    11da:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    11dc:	9c 91       	ld	r25, X
    11de:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    11e0:	9c 91       	ld	r25, X
    11e2:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    11e4:	9c 91       	ld	r25, X
    11e6:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    11e8:	9c 91       	ld	r25, X
    11ea:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    11ec:	9c 91       	ld	r25, X
    11ee:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    11f0:	9c 91       	ld	r25, X
    11f2:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    11f4:	9c 91       	ld	r25, X
    11f6:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    11fe:	40 81       	ld	r20, Z
    1200:	42 95       	swap	r20
    1202:	46 95       	lsr	r20
    1204:	47 70       	andi	r20, 0x07	; 7
    1206:	51 81       	ldd	r21, Z+1	; 0x01
    1208:	65 2f       	mov	r22, r21
    120a:	66 0f       	add	r22, r22
    120c:	66 0f       	add	r22, r22
    120e:	66 0f       	add	r22, r22
    1210:	86 2f       	mov	r24, r22
    1212:	84 2b       	or	r24, r20
    1214:	95 2f       	mov	r25, r21
    1216:	92 95       	swap	r25
    1218:	96 95       	lsr	r25
    121a:	97 70       	andi	r25, 0x07	; 7
    121c:	89 2b       	or	r24, r25
    121e:	b1 f4       	brne	.+44     	; 0x124c <__stack+0x14d>
    1220:	8b e0       	ldi	r24, 0x0B	; 11
    1222:	82 9f       	mul	r24, r18
    1224:	f0 01       	movw	r30, r0
    1226:	83 9f       	mul	r24, r19
    1228:	f0 0d       	add	r31, r0
    122a:	11 24       	eor	r1, r1
    122c:	e2 5b       	subi	r30, 0xB2	; 178
    122e:	fe 4f       	sbci	r31, 0xFE	; 254
    1230:	83 81       	ldd	r24, Z+3	; 0x03
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	59 f4       	brne	.+22     	; 0x124c <__stack+0x14d>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1236:	98 e0       	ldi	r25, 0x08	; 8
    1238:	88 e1       	ldi	r24, 0x18	; 24
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	a8 95       	wdr
    1240:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    124a:	ff cf       	rjmp	.-2      	; 0x124a <__stack+0x14b>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    124c:	ee ee       	ldi	r30, 0xEE	; 238
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    1254:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    1256:	80 81       	ld	r24, Z
    1258:	8f 7d       	andi	r24, 0xDF	; 223
    125a:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    125c:	80 e8       	ldi	r24, 0x80	; 128
    125e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    1262:	0f 90       	pop	r0
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	ff 91       	pop	r31
    126a:	ef 91       	pop	r30
    126c:	bf 91       	pop	r27
    126e:	af 91       	pop	r26
    1270:	9f 91       	pop	r25
    1272:	8f 91       	pop	r24
    1274:	6f 91       	pop	r22
    1276:	5f 91       	pop	r21
    1278:	4f 91       	pop	r20
    127a:	3f 91       	pop	r19
    127c:	2f 91       	pop	r18
    127e:	0f 90       	pop	r0
    1280:	0b be       	out	0x3b, r0	; 59
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    1290:	e8 ed       	ldi	r30, 0xD8	; 216
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	21 e0       	ldi	r18, 0x01	; 1
    1296:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    1298:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    129c:	2c e0       	ldi	r18, 0x0C	; 12
    129e:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    12a2:	27 e3       	ldi	r18, 0x37	; 55
    12a4:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    12a8:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    12ac:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    12b0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    12b4:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    12b8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    12bc:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    12c0:	cd ee       	ldi	r28, 0xED	; 237
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
    12c4:	18 82       	st	Y, r1
	CANSTMOB = 0;
    12c6:	ae ee       	ldi	r26, 0xEE	; 238
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    12cc:	20 e1       	ldi	r18, 0x10	; 16
    12ce:	28 83       	st	Y, r18
	CANSTMOB = 0;
    12d0:	1c 92       	st	X, r1
	CANIDM4 = 0;
    12d2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    12d6:	28 2f       	mov	r18, r24
    12d8:	22 95       	swap	r18
    12da:	22 0f       	add	r18, r18
    12dc:	20 7e       	andi	r18, 0xE0	; 224
    12de:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	96 95       	lsr	r25
    12ec:	87 95       	ror	r24
    12ee:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    12f2:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    12f6:	86 2f       	mov	r24, r22
    12f8:	82 95       	swap	r24
    12fa:	88 0f       	add	r24, r24
    12fc:	80 7e       	andi	r24, 0xE0	; 224
    12fe:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    1302:	76 95       	lsr	r23
    1304:	67 95       	ror	r22
    1306:	76 95       	lsr	r23
    1308:	67 95       	ror	r22
    130a:	76 95       	lsr	r23
    130c:	67 95       	ror	r22
    130e:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    1312:	80 e8       	ldi	r24, 0x80	; 128
    1314:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    131e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    1322:	80 eb       	ldi	r24, 0xB0	; 176
    1324:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	80 83       	st	Z, r24

	reset = 0;
    132c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <reset>
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    133c:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <rx_off>
    1340:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <rx_on>
    1344:	24 17       	cp	r18, r20
    1346:	89 f1       	breq	.+98     	; 0x13aa <can_read_message_if_new+0x74>
    1348:	a4 2f       	mov	r26, r20
    134a:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    134c:	8b e0       	ldi	r24, 0x0B	; 11
    134e:	a8 9f       	mul	r26, r24
    1350:	b0 01       	movw	r22, r0
    1352:	11 24       	eor	r1, r1
    1354:	fb 01       	movw	r30, r22
    1356:	e2 5b       	subi	r30, 0xB2	; 178
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	20 81       	ld	r18, Z
    135c:	22 95       	swap	r18
    135e:	26 95       	lsr	r18
    1360:	27 70       	andi	r18, 0x07	; 7
    1362:	31 81       	ldd	r19, Z+1	; 0x01
    1364:	53 2f       	mov	r21, r19
    1366:	55 0f       	add	r21, r21
    1368:	55 0f       	add	r21, r21
    136a:	55 0f       	add	r21, r21
    136c:	25 2b       	or	r18, r21
    136e:	32 95       	swap	r19
    1370:	36 95       	lsr	r19
    1372:	37 70       	andi	r19, 0x07	; 7
    1374:	28 83       	st	Y, r18
    1376:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1378:	fb 01       	movw	r30, r22
    137a:	e0 5b       	subi	r30, 0xB0	; 176
    137c:	fe 4f       	sbci	r31, 0xFE	; 254
    137e:	20 81       	ld	r18, Z
    1380:	2f 70       	andi	r18, 0x0F	; 15
    1382:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    1384:	22 23       	and	r18, r18
    1386:	99 f0       	breq	.+38     	; 0x13ae <can_read_message_if_new+0x78>
    1388:	db 01       	movw	r26, r22
    138a:	af 5a       	subi	r26, 0xAF	; 175
    138c:	be 4f       	sbci	r27, 0xFE	; 254
    138e:	fe 01       	movw	r30, r28
    1390:	33 96       	adiw	r30, 0x03	; 3
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	2d 5f       	subi	r18, 0xFD	; 253
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	ce 01       	movw	r24, r28
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    139e:	2d 91       	ld	r18, X+
    13a0:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    13a2:	e8 17       	cp	r30, r24
    13a4:	f9 07       	cpc	r31, r25
    13a6:	d9 f7       	brne	.-10     	; 0x139e <can_read_message_if_new+0x68>
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    13ae:	4f 5f       	subi	r20, 0xFF	; 255
    13b0:	40 93 4a 01 	sts	0x014A, r20	; 0x80014a <rx_off>
	}

	return true;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    13c2:	ab ed       	ldi	r26, 0xDB	; 219
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	8c 91       	ld	r24, X
    13c8:	8f 77       	andi	r24, 0x7F	; 127
    13ca:	8c 93       	st	X, r24

	if (!tx_busy) {
    13cc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tx_busy>
    13d0:	81 11       	cpse	r24, r1
    13d2:	27 c0       	rjmp	.+78     	; 0x1422 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    13d4:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    13d8:	80 81       	ld	r24, Z
    13da:	82 95       	swap	r24
    13dc:	88 0f       	add	r24, r24
    13de:	80 7e       	andi	r24, 0xE0	; 224
    13e0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	96 95       	lsr	r25
    13ea:	87 95       	ror	r24
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	96 95       	lsr	r25
    13f2:	87 95       	ror	r24
    13f4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    13f8:	df 01       	movw	r26, r30
    13fa:	13 96       	adiw	r26, 0x03	; 3
    13fc:	9f 01       	movw	r18, r30
    13fe:	25 5f       	subi	r18, 0xF5	; 245
    1400:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1402:	ca ef       	ldi	r28, 0xFA	; 250
    1404:	d0 e0       	ldi	r29, 0x00	; 0
    1406:	9d 91       	ld	r25, X+
    1408:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    140a:	a2 17       	cp	r26, r18
    140c:	b3 07       	cpc	r27, r19
    140e:	d9 f7       	brne	.-10     	; 0x1406 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	80 64       	ori	r24, 0x40	; 64
    141a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	43 c0       	rjmp	.+134    	; 0x14a8 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1422:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <tx_on>
    1426:	82 2f       	mov	r24, r18
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <tx_off>
    142e:	83 1b       	sub	r24, r19
    1430:	91 09       	sbc	r25, r1
    1432:	8f 77       	andi	r24, 0x7F	; 127
    1434:	99 27       	eor	r25, r25
    1436:	40 97       	sbiw	r24, 0x10	; 16
    1438:	b1 f1       	breq	.+108    	; 0x14a6 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    143a:	a2 2f       	mov	r26, r18
    143c:	af 70       	andi	r26, 0x0F	; 15
    143e:	8b e0       	ldi	r24, 0x0B	; 11
    1440:	a8 9f       	mul	r26, r24
    1442:	d0 01       	movw	r26, r0
    1444:	11 24       	eor	r1, r1
    1446:	ed 01       	movw	r28, r26
    1448:	c2 50       	subi	r28, 0x02	; 2
    144a:	de 4f       	sbci	r29, 0xFE	; 254
    144c:	80 81       	ld	r24, Z
    144e:	98 2f       	mov	r25, r24
    1450:	92 95       	swap	r25
    1452:	99 0f       	add	r25, r25
    1454:	90 7e       	andi	r25, 0xE0	; 224
    1456:	88 81       	ld	r24, Y
    1458:	8f 71       	andi	r24, 0x1F	; 31
    145a:	89 2b       	or	r24, r25
    145c:	88 83       	st	Y, r24
    145e:	80 81       	ld	r24, Z
    1460:	98 2f       	mov	r25, r24
    1462:	96 95       	lsr	r25
    1464:	96 95       	lsr	r25
    1466:	96 95       	lsr	r25
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 7e       	andi	r24, 0xE0	; 224
    146c:	89 2b       	or	r24, r25
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	92 95       	swap	r25
    1474:	99 0f       	add	r25, r25
    1476:	90 7e       	andi	r25, 0xE0	; 224
    1478:	8f 71       	andi	r24, 0x1F	; 31
    147a:	89 2b       	or	r24, r25
    147c:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	98 2f       	mov	r25, r24
    1482:	9f 70       	andi	r25, 0x0F	; 15
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 7f       	andi	r24, 0xF0	; 240
    1488:	89 2b       	or	r24, r25
    148a:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    148c:	af 5f       	subi	r26, 0xFF	; 255
    148e:	bd 4f       	sbci	r27, 0xFD	; 253
    1490:	33 96       	adiw	r30, 0x03	; 3
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	01 90       	ld	r0, Z+
    1496:	0d 92       	st	X+, r0
    1498:	8a 95       	dec	r24
    149a:	e1 f7       	brne	.-8      	; 0x1494 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    149c:	2f 5f       	subi	r18, 0xFF	; 255
    149e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <tx_on>
		result = true;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    14a6:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    14a8:	eb ed       	ldi	r30, 0xDB	; 219
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	90 81       	ld	r25, Z
    14ae:	90 68       	ori	r25, 0x80	; 128
    14b0:	90 83       	st	Z, r25

	return result;
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <pwm_init>:
    14b8:	8e b1       	in	r24, 0x0e	; 14
    14ba:	87 7e       	andi	r24, 0xE7	; 231
    14bc:	8e b9       	out	0x0e, r24	; 14
    14be:	8d b1       	in	r24, 0x0d	; 13
    14c0:	88 61       	ori	r24, 0x18	; 24
    14c2:	8d b9       	out	0x0d, r24	; 13
    14c4:	a1 e9       	ldi	r26, 0x91	; 145
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	8c 91       	ld	r24, X
    14ca:	88 61       	ori	r24, 0x18	; 24
    14cc:	8c 93       	st	X, r24
    14ce:	e0 e9       	ldi	r30, 0x90	; 144
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	82 60       	ori	r24, 0x02	; 2
    14d6:	80 83       	st	Z, r24
    14d8:	80 81       	ld	r24, Z
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	80 83       	st	Z, r24
    14de:	80 81       	ld	r24, Z
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	80 83       	st	Z, r24
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 7b       	andi	r24, 0xBF	; 191
    14e8:	80 83       	st	Z, r24
    14ea:	80 81       	ld	r24, Z
    14ec:	80 62       	ori	r24, 0x20	; 32
    14ee:	80 83       	st	Z, r24
    14f0:	80 81       	ld	r24, Z
    14f2:	80 61       	ori	r24, 0x10	; 16
    14f4:	80 83       	st	Z, r24
    14f6:	8c 91       	ld	r24, X
    14f8:	81 60       	ori	r24, 0x01	; 1
    14fa:	8c 93       	st	X, r24
    14fc:	8c 91       	ld	r24, X
    14fe:	89 7f       	andi	r24, 0xF9	; 249
    1500:	8c 93       	st	X, r24
    1502:	e6 e9       	ldi	r30, 0x96	; 150
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	89 e9       	ldi	r24, 0x99	; 153
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	97 d1       	rcall	.+814    	; 0x1846 <__floatunsisf>
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	48 d2       	rcall	.+1168   	; 0x19b2 <__mulsf3>
    1522:	60 d1       	rcall	.+704    	; 0x17e4 <__fixsfsi>
    1524:	e8 e9       	ldi	r30, 0x98	; 152
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	71 83       	std	Z+1, r23	; 0x01
    152a:	60 83       	st	Z, r22
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1534:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1538:	08 95       	ret

0000153a <rgbled_turn_off>:
    153a:	95 b1       	in	r25, 0x05	; 5
    153c:	89 2b       	or	r24, r25
    153e:	85 b9       	out	0x05, r24	; 5
    1540:	08 95       	ret

00001542 <rgbled_init>:
    1542:	84 b1       	in	r24, 0x04	; 4
    1544:	80 6e       	ori	r24, 0xE0	; 224
    1546:	84 b9       	out	0x04, r24	; 4
    1548:	80 ee       	ldi	r24, 0xE0	; 224
    154a:	f7 cf       	rjmp	.-18     	; 0x153a <rgbled_turn_off>
    154c:	08 95       	ret

0000154e <rgbled_turn_on>:
    154e:	95 b1       	in	r25, 0x05	; 5
    1550:	80 95       	com	r24
    1552:	98 23       	and	r25, r24
    1554:	95 b9       	out	0x05, r25	; 5
    1556:	08 95       	ret

00001558 <rgbled_toggle>:
    1558:	95 b1       	in	r25, 0x05	; 5
    155a:	89 27       	eor	r24, r25
    155c:	85 b9       	out	0x05, r24	; 5
    155e:	08 95       	ret

00001560 <spi_init>:
    1560:	94 b1       	in	r25, 0x04	; 4
    1562:	97 60       	ori	r25, 0x07	; 7
    1564:	94 b9       	out	0x04, r25	; 4
    1566:	82 fb       	bst	r24, 2
    1568:	99 27       	eor	r25, r25
    156a:	90 f9       	bld	r25, 0
    156c:	28 2f       	mov	r18, r24
    156e:	22 70       	andi	r18, 0x02	; 2
    1570:	81 70       	andi	r24, 0x01	; 1
    1572:	80 65       	ori	r24, 0x50	; 80
    1574:	82 2b       	or	r24, r18
    1576:	8c bd       	out	0x2c, r24	; 44
    1578:	8c b5       	in	r24, 0x2c	; 44
    157a:	83 7f       	andi	r24, 0xF3	; 243
    157c:	8c bd       	out	0x2c, r24	; 44
    157e:	9d bd       	out	0x2d, r25	; 45
    1580:	08 95       	ret

00001582 <spi_trancieve>:
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	ec 01       	movw	r28, r24
    1588:	28 98       	cbi	0x05, 0	; 5
    158a:	41 15       	cp	r20, r1
    158c:	51 05       	cpc	r21, r1
    158e:	c1 f0       	breq	.+48     	; 0x15c0 <spi_trancieve+0x3e>
    1590:	fb 01       	movw	r30, r22
    1592:	dc 01       	movw	r26, r24
    1594:	46 0f       	add	r20, r22
    1596:	57 1f       	adc	r21, r23
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	20 97       	sbiw	r28, 0x00	; 0
    159c:	11 f0       	breq	.+4      	; 0x15a2 <spi_trancieve+0x20>
    159e:	9c 91       	ld	r25, X
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <spi_trancieve+0x22>
    15a2:	98 2f       	mov	r25, r24
    15a4:	9e bd       	out	0x2e, r25	; 46
    15a6:	0d b4       	in	r0, 0x2d	; 45
    15a8:	07 fe       	sbrs	r0, 7
    15aa:	fd cf       	rjmp	.-6      	; 0x15a6 <spi_trancieve+0x24>
    15ac:	61 15       	cp	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <spi_trancieve+0x34>
    15b2:	9e b5       	in	r25, 0x2e	; 46
    15b4:	90 83       	st	Z, r25
    15b6:	31 96       	adiw	r30, 0x01	; 1
    15b8:	11 96       	adiw	r26, 0x01	; 1
    15ba:	e4 17       	cp	r30, r20
    15bc:	f5 07       	cpc	r31, r21
    15be:	69 f7       	brne	.-38     	; 0x159a <spi_trancieve+0x18>
    15c0:	21 11       	cpse	r18, r1
    15c2:	28 9a       	sbi	0x05, 0	; 5
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <__vector_17>:
    15ca:	1f 92       	push	r1
    15cc:	0f 92       	push	r0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	0f 92       	push	r0
    15d2:	11 24       	eor	r1, r1
    15d4:	0b b6       	in	r0, 0x3b	; 59
    15d6:	0f 92       	push	r0
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
    15ee:	ae ec       	ldi	r26, 0xCE	; 206
    15f0:	b2 e0       	ldi	r27, 0x02	; 2
    15f2:	ee ea       	ldi	r30, 0xAE	; 174
    15f4:	f2 e0       	ldi	r31, 0x02	; 2
    15f6:	2e ec       	ldi	r18, 0xCE	; 206
    15f8:	32 e0       	ldi	r19, 0x02	; 2
    15fa:	8d 91       	ld	r24, X+
    15fc:	88 23       	and	r24, r24
    15fe:	59 f0       	breq	.+22     	; 0x1616 <__vector_17+0x4c>
    1600:	40 81       	ld	r20, Z
    1602:	51 81       	ldd	r21, Z+1	; 0x01
    1604:	62 81       	ldd	r22, Z+2	; 0x02
    1606:	73 81       	ldd	r23, Z+3	; 0x03
    1608:	50 5e       	subi	r21, 0xE0	; 224
    160a:	6f 4f       	sbci	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	40 83       	st	Z, r20
    1610:	51 83       	std	Z+1, r21	; 0x01
    1612:	62 83       	std	Z+2, r22	; 0x02
    1614:	73 83       	std	Z+3, r23	; 0x03
    1616:	34 96       	adiw	r30, 0x04	; 4
    1618:	e2 17       	cp	r30, r18
    161a:	f3 07       	cpc	r31, r19
    161c:	71 f7       	brne	.-36     	; 0x15fa <__vector_17+0x30>
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0b be       	out	0x3b, r0	; 59
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__subsf3>:
    1642:	50 58       	subi	r21, 0x80	; 128

00001644 <__addsf3>:
    1644:	bb 27       	eor	r27, r27
    1646:	aa 27       	eor	r26, r26
    1648:	0e d0       	rcall	.+28     	; 0x1666 <__addsf3x>
    164a:	75 c1       	rjmp	.+746    	; 0x1936 <__fp_round>
    164c:	66 d1       	rcall	.+716    	; 0x191a <__fp_pscA>
    164e:	30 f0       	brcs	.+12     	; 0x165c <__addsf3+0x18>
    1650:	6b d1       	rcall	.+726    	; 0x1928 <__fp_pscB>
    1652:	20 f0       	brcs	.+8      	; 0x165c <__addsf3+0x18>
    1654:	31 f4       	brne	.+12     	; 0x1662 <__addsf3+0x1e>
    1656:	9f 3f       	cpi	r25, 0xFF	; 255
    1658:	11 f4       	brne	.+4      	; 0x165e <__addsf3+0x1a>
    165a:	1e f4       	brtc	.+6      	; 0x1662 <__addsf3+0x1e>
    165c:	5b c1       	rjmp	.+694    	; 0x1914 <__fp_nan>
    165e:	0e f4       	brtc	.+2      	; 0x1662 <__addsf3+0x1e>
    1660:	e0 95       	com	r30
    1662:	e7 fb       	bst	r30, 7
    1664:	51 c1       	rjmp	.+674    	; 0x1908 <__fp_inf>

00001666 <__addsf3x>:
    1666:	e9 2f       	mov	r30, r25
    1668:	77 d1       	rcall	.+750    	; 0x1958 <__fp_split3>
    166a:	80 f3       	brcs	.-32     	; 0x164c <__addsf3+0x8>
    166c:	ba 17       	cp	r27, r26
    166e:	62 07       	cpc	r22, r18
    1670:	73 07       	cpc	r23, r19
    1672:	84 07       	cpc	r24, r20
    1674:	95 07       	cpc	r25, r21
    1676:	18 f0       	brcs	.+6      	; 0x167e <__addsf3x+0x18>
    1678:	71 f4       	brne	.+28     	; 0x1696 <__addsf3x+0x30>
    167a:	9e f5       	brtc	.+102    	; 0x16e2 <__addsf3x+0x7c>
    167c:	8f c1       	rjmp	.+798    	; 0x199c <__fp_zero>
    167e:	0e f4       	brtc	.+2      	; 0x1682 <__addsf3x+0x1c>
    1680:	e0 95       	com	r30
    1682:	0b 2e       	mov	r0, r27
    1684:	ba 2f       	mov	r27, r26
    1686:	a0 2d       	mov	r26, r0
    1688:	0b 01       	movw	r0, r22
    168a:	b9 01       	movw	r22, r18
    168c:	90 01       	movw	r18, r0
    168e:	0c 01       	movw	r0, r24
    1690:	ca 01       	movw	r24, r20
    1692:	a0 01       	movw	r20, r0
    1694:	11 24       	eor	r1, r1
    1696:	ff 27       	eor	r31, r31
    1698:	59 1b       	sub	r21, r25
    169a:	99 f0       	breq	.+38     	; 0x16c2 <__addsf3x+0x5c>
    169c:	59 3f       	cpi	r21, 0xF9	; 249
    169e:	50 f4       	brcc	.+20     	; 0x16b4 <__addsf3x+0x4e>
    16a0:	50 3e       	cpi	r21, 0xE0	; 224
    16a2:	68 f1       	brcs	.+90     	; 0x16fe <__addsf3x+0x98>
    16a4:	1a 16       	cp	r1, r26
    16a6:	f0 40       	sbci	r31, 0x00	; 0
    16a8:	a2 2f       	mov	r26, r18
    16aa:	23 2f       	mov	r18, r19
    16ac:	34 2f       	mov	r19, r20
    16ae:	44 27       	eor	r20, r20
    16b0:	58 5f       	subi	r21, 0xF8	; 248
    16b2:	f3 cf       	rjmp	.-26     	; 0x169a <__addsf3x+0x34>
    16b4:	46 95       	lsr	r20
    16b6:	37 95       	ror	r19
    16b8:	27 95       	ror	r18
    16ba:	a7 95       	ror	r26
    16bc:	f0 40       	sbci	r31, 0x00	; 0
    16be:	53 95       	inc	r21
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <__addsf3x+0x4e>
    16c2:	7e f4       	brtc	.+30     	; 0x16e2 <__addsf3x+0x7c>
    16c4:	1f 16       	cp	r1, r31
    16c6:	ba 0b       	sbc	r27, r26
    16c8:	62 0b       	sbc	r22, r18
    16ca:	73 0b       	sbc	r23, r19
    16cc:	84 0b       	sbc	r24, r20
    16ce:	ba f0       	brmi	.+46     	; 0x16fe <__addsf3x+0x98>
    16d0:	91 50       	subi	r25, 0x01	; 1
    16d2:	a1 f0       	breq	.+40     	; 0x16fc <__addsf3x+0x96>
    16d4:	ff 0f       	add	r31, r31
    16d6:	bb 1f       	adc	r27, r27
    16d8:	66 1f       	adc	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	c2 f7       	brpl	.-16     	; 0x16d0 <__addsf3x+0x6a>
    16e0:	0e c0       	rjmp	.+28     	; 0x16fe <__addsf3x+0x98>
    16e2:	ba 0f       	add	r27, r26
    16e4:	62 1f       	adc	r22, r18
    16e6:	73 1f       	adc	r23, r19
    16e8:	84 1f       	adc	r24, r20
    16ea:	48 f4       	brcc	.+18     	; 0x16fe <__addsf3x+0x98>
    16ec:	87 95       	ror	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	b7 95       	ror	r27
    16f4:	f7 95       	ror	r31
    16f6:	9e 3f       	cpi	r25, 0xFE	; 254
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <__addsf3x+0x96>
    16fa:	b3 cf       	rjmp	.-154    	; 0x1662 <__addsf3+0x1e>
    16fc:	93 95       	inc	r25
    16fe:	88 0f       	add	r24, r24
    1700:	08 f0       	brcs	.+2      	; 0x1704 <__addsf3x+0x9e>
    1702:	99 27       	eor	r25, r25
    1704:	ee 0f       	add	r30, r30
    1706:	97 95       	ror	r25
    1708:	87 95       	ror	r24
    170a:	08 95       	ret

0000170c <__cmpsf2>:
    170c:	d9 d0       	rcall	.+434    	; 0x18c0 <__fp_cmp>
    170e:	08 f4       	brcc	.+2      	; 0x1712 <__cmpsf2+0x6>
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	08 95       	ret

00001714 <__divsf3>:
    1714:	0c d0       	rcall	.+24     	; 0x172e <__divsf3x>
    1716:	0f c1       	rjmp	.+542    	; 0x1936 <__fp_round>
    1718:	07 d1       	rcall	.+526    	; 0x1928 <__fp_pscB>
    171a:	40 f0       	brcs	.+16     	; 0x172c <__divsf3+0x18>
    171c:	fe d0       	rcall	.+508    	; 0x191a <__fp_pscA>
    171e:	30 f0       	brcs	.+12     	; 0x172c <__divsf3+0x18>
    1720:	21 f4       	brne	.+8      	; 0x172a <__divsf3+0x16>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	19 f0       	breq	.+6      	; 0x172c <__divsf3+0x18>
    1726:	f0 c0       	rjmp	.+480    	; 0x1908 <__fp_inf>
    1728:	51 11       	cpse	r21, r1
    172a:	39 c1       	rjmp	.+626    	; 0x199e <__fp_szero>
    172c:	f3 c0       	rjmp	.+486    	; 0x1914 <__fp_nan>

0000172e <__divsf3x>:
    172e:	14 d1       	rcall	.+552    	; 0x1958 <__fp_split3>
    1730:	98 f3       	brcs	.-26     	; 0x1718 <__divsf3+0x4>

00001732 <__divsf3_pse>:
    1732:	99 23       	and	r25, r25
    1734:	c9 f3       	breq	.-14     	; 0x1728 <__divsf3+0x14>
    1736:	55 23       	and	r21, r21
    1738:	b1 f3       	breq	.-20     	; 0x1726 <__divsf3+0x12>
    173a:	95 1b       	sub	r25, r21
    173c:	55 0b       	sbc	r21, r21
    173e:	bb 27       	eor	r27, r27
    1740:	aa 27       	eor	r26, r26
    1742:	62 17       	cp	r22, r18
    1744:	73 07       	cpc	r23, r19
    1746:	84 07       	cpc	r24, r20
    1748:	38 f0       	brcs	.+14     	; 0x1758 <__divsf3_pse+0x26>
    174a:	9f 5f       	subi	r25, 0xFF	; 255
    174c:	5f 4f       	sbci	r21, 0xFF	; 255
    174e:	22 0f       	add	r18, r18
    1750:	33 1f       	adc	r19, r19
    1752:	44 1f       	adc	r20, r20
    1754:	aa 1f       	adc	r26, r26
    1756:	a9 f3       	breq	.-22     	; 0x1742 <__divsf3_pse+0x10>
    1758:	33 d0       	rcall	.+102    	; 0x17c0 <__divsf3_pse+0x8e>
    175a:	0e 2e       	mov	r0, r30
    175c:	3a f0       	brmi	.+14     	; 0x176c <__divsf3_pse+0x3a>
    175e:	e0 e8       	ldi	r30, 0x80	; 128
    1760:	30 d0       	rcall	.+96     	; 0x17c2 <__divsf3_pse+0x90>
    1762:	91 50       	subi	r25, 0x01	; 1
    1764:	50 40       	sbci	r21, 0x00	; 0
    1766:	e6 95       	lsr	r30
    1768:	00 1c       	adc	r0, r0
    176a:	ca f7       	brpl	.-14     	; 0x175e <__divsf3_pse+0x2c>
    176c:	29 d0       	rcall	.+82     	; 0x17c0 <__divsf3_pse+0x8e>
    176e:	fe 2f       	mov	r31, r30
    1770:	27 d0       	rcall	.+78     	; 0x17c0 <__divsf3_pse+0x8e>
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	bb 1f       	adc	r27, r27
    177a:	26 17       	cp	r18, r22
    177c:	37 07       	cpc	r19, r23
    177e:	48 07       	cpc	r20, r24
    1780:	ab 07       	cpc	r26, r27
    1782:	b0 e8       	ldi	r27, 0x80	; 128
    1784:	09 f0       	breq	.+2      	; 0x1788 <__divsf3_pse+0x56>
    1786:	bb 0b       	sbc	r27, r27
    1788:	80 2d       	mov	r24, r0
    178a:	bf 01       	movw	r22, r30
    178c:	ff 27       	eor	r31, r31
    178e:	93 58       	subi	r25, 0x83	; 131
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	2a f0       	brmi	.+10     	; 0x179e <__divsf3_pse+0x6c>
    1794:	9e 3f       	cpi	r25, 0xFE	; 254
    1796:	51 05       	cpc	r21, r1
    1798:	68 f0       	brcs	.+26     	; 0x17b4 <__divsf3_pse+0x82>
    179a:	b6 c0       	rjmp	.+364    	; 0x1908 <__fp_inf>
    179c:	00 c1       	rjmp	.+512    	; 0x199e <__fp_szero>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	ec f3       	brlt	.-6      	; 0x179c <__divsf3_pse+0x6a>
    17a2:	98 3e       	cpi	r25, 0xE8	; 232
    17a4:	dc f3       	brlt	.-10     	; 0x179c <__divsf3_pse+0x6a>
    17a6:	86 95       	lsr	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	f7 95       	ror	r31
    17b0:	9f 5f       	subi	r25, 0xFF	; 255
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__divsf3_pse+0x74>
    17b4:	88 0f       	add	r24, r24
    17b6:	91 1d       	adc	r25, r1
    17b8:	96 95       	lsr	r25
    17ba:	87 95       	ror	r24
    17bc:	97 f9       	bld	r25, 7
    17be:	08 95       	ret
    17c0:	e1 e0       	ldi	r30, 0x01	; 1
    17c2:	66 0f       	add	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	88 1f       	adc	r24, r24
    17c8:	bb 1f       	adc	r27, r27
    17ca:	62 17       	cp	r22, r18
    17cc:	73 07       	cpc	r23, r19
    17ce:	84 07       	cpc	r24, r20
    17d0:	ba 07       	cpc	r27, r26
    17d2:	20 f0       	brcs	.+8      	; 0x17dc <__divsf3_pse+0xaa>
    17d4:	62 1b       	sub	r22, r18
    17d6:	73 0b       	sbc	r23, r19
    17d8:	84 0b       	sbc	r24, r20
    17da:	ba 0b       	sbc	r27, r26
    17dc:	ee 1f       	adc	r30, r30
    17de:	88 f7       	brcc	.-30     	; 0x17c2 <__divsf3_pse+0x90>
    17e0:	e0 95       	com	r30
    17e2:	08 95       	ret

000017e4 <__fixsfsi>:
    17e4:	04 d0       	rcall	.+8      	; 0x17ee <__fixunssfsi>
    17e6:	68 94       	set
    17e8:	b1 11       	cpse	r27, r1
    17ea:	d9 c0       	rjmp	.+434    	; 0x199e <__fp_szero>
    17ec:	08 95       	ret

000017ee <__fixunssfsi>:
    17ee:	bc d0       	rcall	.+376    	; 0x1968 <__fp_splitA>
    17f0:	88 f0       	brcs	.+34     	; 0x1814 <__fixunssfsi+0x26>
    17f2:	9f 57       	subi	r25, 0x7F	; 127
    17f4:	90 f0       	brcs	.+36     	; 0x181a <__fixunssfsi+0x2c>
    17f6:	b9 2f       	mov	r27, r25
    17f8:	99 27       	eor	r25, r25
    17fa:	b7 51       	subi	r27, 0x17	; 23
    17fc:	a0 f0       	brcs	.+40     	; 0x1826 <__fixunssfsi+0x38>
    17fe:	d1 f0       	breq	.+52     	; 0x1834 <__fixunssfsi+0x46>
    1800:	66 0f       	add	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	88 1f       	adc	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	1a f0       	brmi	.+6      	; 0x1810 <__fixunssfsi+0x22>
    180a:	ba 95       	dec	r27
    180c:	c9 f7       	brne	.-14     	; 0x1800 <__fixunssfsi+0x12>
    180e:	12 c0       	rjmp	.+36     	; 0x1834 <__fixunssfsi+0x46>
    1810:	b1 30       	cpi	r27, 0x01	; 1
    1812:	81 f0       	breq	.+32     	; 0x1834 <__fixunssfsi+0x46>
    1814:	c3 d0       	rcall	.+390    	; 0x199c <__fp_zero>
    1816:	b1 e0       	ldi	r27, 0x01	; 1
    1818:	08 95       	ret
    181a:	c0 c0       	rjmp	.+384    	; 0x199c <__fp_zero>
    181c:	67 2f       	mov	r22, r23
    181e:	78 2f       	mov	r23, r24
    1820:	88 27       	eor	r24, r24
    1822:	b8 5f       	subi	r27, 0xF8	; 248
    1824:	39 f0       	breq	.+14     	; 0x1834 <__fixunssfsi+0x46>
    1826:	b9 3f       	cpi	r27, 0xF9	; 249
    1828:	cc f3       	brlt	.-14     	; 0x181c <__fixunssfsi+0x2e>
    182a:	86 95       	lsr	r24
    182c:	77 95       	ror	r23
    182e:	67 95       	ror	r22
    1830:	b3 95       	inc	r27
    1832:	d9 f7       	brne	.-10     	; 0x182a <__fixunssfsi+0x3c>
    1834:	3e f4       	brtc	.+14     	; 0x1844 <__fixunssfsi+0x56>
    1836:	90 95       	com	r25
    1838:	80 95       	com	r24
    183a:	70 95       	com	r23
    183c:	61 95       	neg	r22
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	8f 4f       	sbci	r24, 0xFF	; 255
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	08 95       	ret

00001846 <__floatunsisf>:
    1846:	e8 94       	clt
    1848:	09 c0       	rjmp	.+18     	; 0x185c <__floatsisf+0x12>

0000184a <__floatsisf>:
    184a:	97 fb       	bst	r25, 7
    184c:	3e f4       	brtc	.+14     	; 0x185c <__floatsisf+0x12>
    184e:	90 95       	com	r25
    1850:	80 95       	com	r24
    1852:	70 95       	com	r23
    1854:	61 95       	neg	r22
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	99 23       	and	r25, r25
    185e:	a9 f0       	breq	.+42     	; 0x188a <__floatsisf+0x40>
    1860:	f9 2f       	mov	r31, r25
    1862:	96 e9       	ldi	r25, 0x96	; 150
    1864:	bb 27       	eor	r27, r27
    1866:	93 95       	inc	r25
    1868:	f6 95       	lsr	r31
    186a:	87 95       	ror	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b7 95       	ror	r27
    1872:	f1 11       	cpse	r31, r1
    1874:	f8 cf       	rjmp	.-16     	; 0x1866 <__floatsisf+0x1c>
    1876:	fa f4       	brpl	.+62     	; 0x18b6 <__floatsisf+0x6c>
    1878:	bb 0f       	add	r27, r27
    187a:	11 f4       	brne	.+4      	; 0x1880 <__floatsisf+0x36>
    187c:	60 ff       	sbrs	r22, 0
    187e:	1b c0       	rjmp	.+54     	; 0x18b6 <__floatsisf+0x6c>
    1880:	6f 5f       	subi	r22, 0xFF	; 255
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	16 c0       	rjmp	.+44     	; 0x18b6 <__floatsisf+0x6c>
    188a:	88 23       	and	r24, r24
    188c:	11 f0       	breq	.+4      	; 0x1892 <__floatsisf+0x48>
    188e:	96 e9       	ldi	r25, 0x96	; 150
    1890:	11 c0       	rjmp	.+34     	; 0x18b4 <__floatsisf+0x6a>
    1892:	77 23       	and	r23, r23
    1894:	21 f0       	breq	.+8      	; 0x189e <__floatsisf+0x54>
    1896:	9e e8       	ldi	r25, 0x8E	; 142
    1898:	87 2f       	mov	r24, r23
    189a:	76 2f       	mov	r23, r22
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <__floatsisf+0x5e>
    189e:	66 23       	and	r22, r22
    18a0:	71 f0       	breq	.+28     	; 0x18be <__floatsisf+0x74>
    18a2:	96 e8       	ldi	r25, 0x86	; 134
    18a4:	86 2f       	mov	r24, r22
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	2a f0       	brmi	.+10     	; 0x18b6 <__floatsisf+0x6c>
    18ac:	9a 95       	dec	r25
    18ae:	66 0f       	add	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	da f7       	brpl	.-10     	; 0x18ac <__floatsisf+0x62>
    18b6:	88 0f       	add	r24, r24
    18b8:	96 95       	lsr	r25
    18ba:	87 95       	ror	r24
    18bc:	97 f9       	bld	r25, 7
    18be:	08 95       	ret

000018c0 <__fp_cmp>:
    18c0:	99 0f       	add	r25, r25
    18c2:	00 08       	sbc	r0, r0
    18c4:	55 0f       	add	r21, r21
    18c6:	aa 0b       	sbc	r26, r26
    18c8:	e0 e8       	ldi	r30, 0x80	; 128
    18ca:	fe ef       	ldi	r31, 0xFE	; 254
    18cc:	16 16       	cp	r1, r22
    18ce:	17 06       	cpc	r1, r23
    18d0:	e8 07       	cpc	r30, r24
    18d2:	f9 07       	cpc	r31, r25
    18d4:	c0 f0       	brcs	.+48     	; 0x1906 <__fp_cmp+0x46>
    18d6:	12 16       	cp	r1, r18
    18d8:	13 06       	cpc	r1, r19
    18da:	e4 07       	cpc	r30, r20
    18dc:	f5 07       	cpc	r31, r21
    18de:	98 f0       	brcs	.+38     	; 0x1906 <__fp_cmp+0x46>
    18e0:	62 1b       	sub	r22, r18
    18e2:	73 0b       	sbc	r23, r19
    18e4:	84 0b       	sbc	r24, r20
    18e6:	95 0b       	sbc	r25, r21
    18e8:	39 f4       	brne	.+14     	; 0x18f8 <__fp_cmp+0x38>
    18ea:	0a 26       	eor	r0, r26
    18ec:	61 f0       	breq	.+24     	; 0x1906 <__fp_cmp+0x46>
    18ee:	23 2b       	or	r18, r19
    18f0:	24 2b       	or	r18, r20
    18f2:	25 2b       	or	r18, r21
    18f4:	21 f4       	brne	.+8      	; 0x18fe <__fp_cmp+0x3e>
    18f6:	08 95       	ret
    18f8:	0a 26       	eor	r0, r26
    18fa:	09 f4       	brne	.+2      	; 0x18fe <__fp_cmp+0x3e>
    18fc:	a1 40       	sbci	r26, 0x01	; 1
    18fe:	a6 95       	lsr	r26
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	81 1d       	adc	r24, r1
    1904:	81 1d       	adc	r24, r1
    1906:	08 95       	ret

00001908 <__fp_inf>:
    1908:	97 f9       	bld	r25, 7
    190a:	9f 67       	ori	r25, 0x7F	; 127
    190c:	80 e8       	ldi	r24, 0x80	; 128
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	08 95       	ret

00001914 <__fp_nan>:
    1914:	9f ef       	ldi	r25, 0xFF	; 255
    1916:	80 ec       	ldi	r24, 0xC0	; 192
    1918:	08 95       	ret

0000191a <__fp_pscA>:
    191a:	00 24       	eor	r0, r0
    191c:	0a 94       	dec	r0
    191e:	16 16       	cp	r1, r22
    1920:	17 06       	cpc	r1, r23
    1922:	18 06       	cpc	r1, r24
    1924:	09 06       	cpc	r0, r25
    1926:	08 95       	ret

00001928 <__fp_pscB>:
    1928:	00 24       	eor	r0, r0
    192a:	0a 94       	dec	r0
    192c:	12 16       	cp	r1, r18
    192e:	13 06       	cpc	r1, r19
    1930:	14 06       	cpc	r1, r20
    1932:	05 06       	cpc	r0, r21
    1934:	08 95       	ret

00001936 <__fp_round>:
    1936:	09 2e       	mov	r0, r25
    1938:	03 94       	inc	r0
    193a:	00 0c       	add	r0, r0
    193c:	11 f4       	brne	.+4      	; 0x1942 <__fp_round+0xc>
    193e:	88 23       	and	r24, r24
    1940:	52 f0       	brmi	.+20     	; 0x1956 <__fp_round+0x20>
    1942:	bb 0f       	add	r27, r27
    1944:	40 f4       	brcc	.+16     	; 0x1956 <__fp_round+0x20>
    1946:	bf 2b       	or	r27, r31
    1948:	11 f4       	brne	.+4      	; 0x194e <__fp_round+0x18>
    194a:	60 ff       	sbrs	r22, 0
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <__fp_round+0x20>
    194e:	6f 5f       	subi	r22, 0xFF	; 255
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	8f 4f       	sbci	r24, 0xFF	; 255
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	08 95       	ret

00001958 <__fp_split3>:
    1958:	57 fd       	sbrc	r21, 7
    195a:	90 58       	subi	r25, 0x80	; 128
    195c:	44 0f       	add	r20, r20
    195e:	55 1f       	adc	r21, r21
    1960:	59 f0       	breq	.+22     	; 0x1978 <__fp_splitA+0x10>
    1962:	5f 3f       	cpi	r21, 0xFF	; 255
    1964:	71 f0       	breq	.+28     	; 0x1982 <__fp_splitA+0x1a>
    1966:	47 95       	ror	r20

00001968 <__fp_splitA>:
    1968:	88 0f       	add	r24, r24
    196a:	97 fb       	bst	r25, 7
    196c:	99 1f       	adc	r25, r25
    196e:	61 f0       	breq	.+24     	; 0x1988 <__fp_splitA+0x20>
    1970:	9f 3f       	cpi	r25, 0xFF	; 255
    1972:	79 f0       	breq	.+30     	; 0x1992 <__fp_splitA+0x2a>
    1974:	87 95       	ror	r24
    1976:	08 95       	ret
    1978:	12 16       	cp	r1, r18
    197a:	13 06       	cpc	r1, r19
    197c:	14 06       	cpc	r1, r20
    197e:	55 1f       	adc	r21, r21
    1980:	f2 cf       	rjmp	.-28     	; 0x1966 <__fp_split3+0xe>
    1982:	46 95       	lsr	r20
    1984:	f1 df       	rcall	.-30     	; 0x1968 <__fp_splitA>
    1986:	08 c0       	rjmp	.+16     	; 0x1998 <__fp_splitA+0x30>
    1988:	16 16       	cp	r1, r22
    198a:	17 06       	cpc	r1, r23
    198c:	18 06       	cpc	r1, r24
    198e:	99 1f       	adc	r25, r25
    1990:	f1 cf       	rjmp	.-30     	; 0x1974 <__fp_splitA+0xc>
    1992:	86 95       	lsr	r24
    1994:	71 05       	cpc	r23, r1
    1996:	61 05       	cpc	r22, r1
    1998:	08 94       	sec
    199a:	08 95       	ret

0000199c <__fp_zero>:
    199c:	e8 94       	clt

0000199e <__fp_szero>:
    199e:	bb 27       	eor	r27, r27
    19a0:	66 27       	eor	r22, r22
    19a2:	77 27       	eor	r23, r23
    19a4:	cb 01       	movw	r24, r22
    19a6:	97 f9       	bld	r25, 7
    19a8:	08 95       	ret

000019aa <__gesf2>:
    19aa:	8a df       	rcall	.-236    	; 0x18c0 <__fp_cmp>
    19ac:	08 f4       	brcc	.+2      	; 0x19b0 <__gesf2+0x6>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	08 95       	ret

000019b2 <__mulsf3>:
    19b2:	0b d0       	rcall	.+22     	; 0x19ca <__mulsf3x>
    19b4:	c0 cf       	rjmp	.-128    	; 0x1936 <__fp_round>
    19b6:	b1 df       	rcall	.-158    	; 0x191a <__fp_pscA>
    19b8:	28 f0       	brcs	.+10     	; 0x19c4 <__mulsf3+0x12>
    19ba:	b6 df       	rcall	.-148    	; 0x1928 <__fp_pscB>
    19bc:	18 f0       	brcs	.+6      	; 0x19c4 <__mulsf3+0x12>
    19be:	95 23       	and	r25, r21
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <__mulsf3+0x12>
    19c2:	a2 cf       	rjmp	.-188    	; 0x1908 <__fp_inf>
    19c4:	a7 cf       	rjmp	.-178    	; 0x1914 <__fp_nan>
    19c6:	11 24       	eor	r1, r1
    19c8:	ea cf       	rjmp	.-44     	; 0x199e <__fp_szero>

000019ca <__mulsf3x>:
    19ca:	c6 df       	rcall	.-116    	; 0x1958 <__fp_split3>
    19cc:	a0 f3       	brcs	.-24     	; 0x19b6 <__mulsf3+0x4>

000019ce <__mulsf3_pse>:
    19ce:	95 9f       	mul	r25, r21
    19d0:	d1 f3       	breq	.-12     	; 0x19c6 <__mulsf3+0x14>
    19d2:	95 0f       	add	r25, r21
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	55 1f       	adc	r21, r21
    19d8:	62 9f       	mul	r22, r18
    19da:	f0 01       	movw	r30, r0
    19dc:	72 9f       	mul	r23, r18
    19de:	bb 27       	eor	r27, r27
    19e0:	f0 0d       	add	r31, r0
    19e2:	b1 1d       	adc	r27, r1
    19e4:	63 9f       	mul	r22, r19
    19e6:	aa 27       	eor	r26, r26
    19e8:	f0 0d       	add	r31, r0
    19ea:	b1 1d       	adc	r27, r1
    19ec:	aa 1f       	adc	r26, r26
    19ee:	64 9f       	mul	r22, r20
    19f0:	66 27       	eor	r22, r22
    19f2:	b0 0d       	add	r27, r0
    19f4:	a1 1d       	adc	r26, r1
    19f6:	66 1f       	adc	r22, r22
    19f8:	82 9f       	mul	r24, r18
    19fa:	22 27       	eor	r18, r18
    19fc:	b0 0d       	add	r27, r0
    19fe:	a1 1d       	adc	r26, r1
    1a00:	62 1f       	adc	r22, r18
    1a02:	73 9f       	mul	r23, r19
    1a04:	b0 0d       	add	r27, r0
    1a06:	a1 1d       	adc	r26, r1
    1a08:	62 1f       	adc	r22, r18
    1a0a:	83 9f       	mul	r24, r19
    1a0c:	a0 0d       	add	r26, r0
    1a0e:	61 1d       	adc	r22, r1
    1a10:	22 1f       	adc	r18, r18
    1a12:	74 9f       	mul	r23, r20
    1a14:	33 27       	eor	r19, r19
    1a16:	a0 0d       	add	r26, r0
    1a18:	61 1d       	adc	r22, r1
    1a1a:	23 1f       	adc	r18, r19
    1a1c:	84 9f       	mul	r24, r20
    1a1e:	60 0d       	add	r22, r0
    1a20:	21 1d       	adc	r18, r1
    1a22:	82 2f       	mov	r24, r18
    1a24:	76 2f       	mov	r23, r22
    1a26:	6a 2f       	mov	r22, r26
    1a28:	11 24       	eor	r1, r1
    1a2a:	9f 57       	subi	r25, 0x7F	; 127
    1a2c:	50 40       	sbci	r21, 0x00	; 0
    1a2e:	8a f0       	brmi	.+34     	; 0x1a52 <__mulsf3_pse+0x84>
    1a30:	e1 f0       	breq	.+56     	; 0x1a6a <__mulsf3_pse+0x9c>
    1a32:	88 23       	and	r24, r24
    1a34:	4a f0       	brmi	.+18     	; 0x1a48 <__mulsf3_pse+0x7a>
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	91 50       	subi	r25, 0x01	; 1
    1a44:	50 40       	sbci	r21, 0x00	; 0
    1a46:	a9 f7       	brne	.-22     	; 0x1a32 <__mulsf3_pse+0x64>
    1a48:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	70 f0       	brcs	.+28     	; 0x1a6a <__mulsf3_pse+0x9c>
    1a4e:	5c cf       	rjmp	.-328    	; 0x1908 <__fp_inf>
    1a50:	a6 cf       	rjmp	.-180    	; 0x199e <__fp_szero>
    1a52:	5f 3f       	cpi	r21, 0xFF	; 255
    1a54:	ec f3       	brlt	.-6      	; 0x1a50 <__mulsf3_pse+0x82>
    1a56:	98 3e       	cpi	r25, 0xE8	; 232
    1a58:	dc f3       	brlt	.-10     	; 0x1a50 <__mulsf3_pse+0x82>
    1a5a:	86 95       	lsr	r24
    1a5c:	77 95       	ror	r23
    1a5e:	67 95       	ror	r22
    1a60:	b7 95       	ror	r27
    1a62:	f7 95       	ror	r31
    1a64:	e7 95       	ror	r30
    1a66:	9f 5f       	subi	r25, 0xFF	; 255
    1a68:	c1 f7       	brne	.-16     	; 0x1a5a <__mulsf3_pse+0x8c>
    1a6a:	fe 2b       	or	r31, r30
    1a6c:	88 0f       	add	r24, r24
    1a6e:	91 1d       	adc	r25, r1
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret

00001a78 <__tablejump2__>:
    1a78:	ee 0f       	add	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	00 24       	eor	r0, r0
    1a7e:	00 1c       	adc	r0, r0
    1a80:	0b be       	out	0x3b, r0	; 59
    1a82:	07 90       	elpm	r0, Z+
    1a84:	f6 91       	elpm	r31, Z
    1a86:	e0 2d       	mov	r30, r0
    1a88:	09 94       	ijmp

00001a8a <atoi>:
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	88 27       	eor	r24, r24
    1a8e:	99 27       	eor	r25, r25
    1a90:	e8 94       	clt
    1a92:	21 91       	ld	r18, Z+
    1a94:	20 32       	cpi	r18, 0x20	; 32
    1a96:	e9 f3       	breq	.-6      	; 0x1a92 <atoi+0x8>
    1a98:	29 30       	cpi	r18, 0x09	; 9
    1a9a:	10 f0       	brcs	.+4      	; 0x1aa0 <atoi+0x16>
    1a9c:	2e 30       	cpi	r18, 0x0E	; 14
    1a9e:	c8 f3       	brcs	.-14     	; 0x1a92 <atoi+0x8>
    1aa0:	2b 32       	cpi	r18, 0x2B	; 43
    1aa2:	39 f0       	breq	.+14     	; 0x1ab2 <atoi+0x28>
    1aa4:	2d 32       	cpi	r18, 0x2D	; 45
    1aa6:	31 f4       	brne	.+12     	; 0x1ab4 <atoi+0x2a>
    1aa8:	68 94       	set
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <atoi+0x28>
    1aac:	0b d0       	rcall	.+22     	; 0x1ac4 <__mulhi_const_10>
    1aae:	82 0f       	add	r24, r18
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	21 91       	ld	r18, Z+
    1ab4:	20 53       	subi	r18, 0x30	; 48
    1ab6:	2a 30       	cpi	r18, 0x0A	; 10
    1ab8:	c8 f3       	brcs	.-14     	; 0x1aac <atoi+0x22>
    1aba:	1e f4       	brtc	.+6      	; 0x1ac2 <atoi+0x38>
    1abc:	90 95       	com	r25
    1abe:	81 95       	neg	r24
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	08 95       	ret

00001ac4 <__mulhi_const_10>:
    1ac4:	7a e0       	ldi	r23, 0x0A	; 10
    1ac6:	97 9f       	mul	r25, r23
    1ac8:	90 2d       	mov	r25, r0
    1aca:	87 9f       	mul	r24, r23
    1acc:	80 2d       	mov	r24, r0
    1ace:	91 0d       	add	r25, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	08 95       	ret

00001ad4 <printf>:
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	ae 01       	movw	r20, r28
    1ade:	4b 5f       	subi	r20, 0xFB	; 251
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae2:	fa 01       	movw	r30, r20
    1ae4:	61 91       	ld	r22, Z+
    1ae6:	71 91       	ld	r23, Z+
    1ae8:	af 01       	movw	r20, r30
    1aea:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <__iob+0x2>
    1aee:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <__iob+0x3>
    1af2:	08 d0       	rcall	.+16     	; 0x1b04 <vfprintf>
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <putchar>:
    1afa:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <__iob+0x2>
    1afe:	70 91 77 03 	lds	r23, 0x0377	; 0x800377 <__iob+0x3>
    1b02:	13 c2       	rjmp	.+1062   	; 0x1f2a <fputc>

00001b04 <vfprintf>:
    1b04:	2f 92       	push	r2
    1b06:	3f 92       	push	r3
    1b08:	4f 92       	push	r4
    1b0a:	5f 92       	push	r5
    1b0c:	6f 92       	push	r6
    1b0e:	7f 92       	push	r7
    1b10:	8f 92       	push	r8
    1b12:	9f 92       	push	r9
    1b14:	af 92       	push	r10
    1b16:	bf 92       	push	r11
    1b18:	cf 92       	push	r12
    1b1a:	df 92       	push	r13
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	2b 97       	sbiw	r28, 0x0b	; 11
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	6c 01       	movw	r12, r24
    1b3a:	7b 01       	movw	r14, r22
    1b3c:	8a 01       	movw	r16, r20
    1b3e:	fc 01       	movw	r30, r24
    1b40:	17 82       	std	Z+7, r1	; 0x07
    1b42:	16 82       	std	Z+6, r1	; 0x06
    1b44:	83 81       	ldd	r24, Z+3	; 0x03
    1b46:	81 ff       	sbrs	r24, 1
    1b48:	bf c1       	rjmp	.+894    	; 0x1ec8 <vfprintf+0x3c4>
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	3c 01       	movw	r6, r24
    1b50:	f6 01       	movw	r30, r12
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	f7 01       	movw	r30, r14
    1b56:	93 fd       	sbrc	r25, 3
    1b58:	85 91       	lpm	r24, Z+
    1b5a:	93 ff       	sbrs	r25, 3
    1b5c:	81 91       	ld	r24, Z+
    1b5e:	7f 01       	movw	r14, r30
    1b60:	88 23       	and	r24, r24
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <vfprintf+0x62>
    1b64:	ad c1       	rjmp	.+858    	; 0x1ec0 <vfprintf+0x3bc>
    1b66:	85 32       	cpi	r24, 0x25	; 37
    1b68:	39 f4       	brne	.+14     	; 0x1b78 <vfprintf+0x74>
    1b6a:	93 fd       	sbrc	r25, 3
    1b6c:	85 91       	lpm	r24, Z+
    1b6e:	93 ff       	sbrs	r25, 3
    1b70:	81 91       	ld	r24, Z+
    1b72:	7f 01       	movw	r14, r30
    1b74:	85 32       	cpi	r24, 0x25	; 37
    1b76:	21 f4       	brne	.+8      	; 0x1b80 <vfprintf+0x7c>
    1b78:	b6 01       	movw	r22, r12
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	d6 d1       	rcall	.+940    	; 0x1f2a <fputc>
    1b7e:	e8 cf       	rjmp	.-48     	; 0x1b50 <vfprintf+0x4c>
    1b80:	91 2c       	mov	r9, r1
    1b82:	21 2c       	mov	r2, r1
    1b84:	31 2c       	mov	r3, r1
    1b86:	ff e1       	ldi	r31, 0x1F	; 31
    1b88:	f3 15       	cp	r31, r3
    1b8a:	d8 f0       	brcs	.+54     	; 0x1bc2 <vfprintf+0xbe>
    1b8c:	8b 32       	cpi	r24, 0x2B	; 43
    1b8e:	79 f0       	breq	.+30     	; 0x1bae <vfprintf+0xaa>
    1b90:	38 f4       	brcc	.+14     	; 0x1ba0 <vfprintf+0x9c>
    1b92:	80 32       	cpi	r24, 0x20	; 32
    1b94:	79 f0       	breq	.+30     	; 0x1bb4 <vfprintf+0xb0>
    1b96:	83 32       	cpi	r24, 0x23	; 35
    1b98:	a1 f4       	brne	.+40     	; 0x1bc2 <vfprintf+0xbe>
    1b9a:	23 2d       	mov	r18, r3
    1b9c:	20 61       	ori	r18, 0x10	; 16
    1b9e:	1d c0       	rjmp	.+58     	; 0x1bda <vfprintf+0xd6>
    1ba0:	8d 32       	cpi	r24, 0x2D	; 45
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <vfprintf+0xb8>
    1ba4:	80 33       	cpi	r24, 0x30	; 48
    1ba6:	69 f4       	brne	.+26     	; 0x1bc2 <vfprintf+0xbe>
    1ba8:	23 2d       	mov	r18, r3
    1baa:	21 60       	ori	r18, 0x01	; 1
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <vfprintf+0xd6>
    1bae:	83 2d       	mov	r24, r3
    1bb0:	82 60       	ori	r24, 0x02	; 2
    1bb2:	38 2e       	mov	r3, r24
    1bb4:	e3 2d       	mov	r30, r3
    1bb6:	e4 60       	ori	r30, 0x04	; 4
    1bb8:	3e 2e       	mov	r3, r30
    1bba:	2a c0       	rjmp	.+84     	; 0x1c10 <vfprintf+0x10c>
    1bbc:	f3 2d       	mov	r31, r3
    1bbe:	f8 60       	ori	r31, 0x08	; 8
    1bc0:	1d c0       	rjmp	.+58     	; 0x1bfc <vfprintf+0xf8>
    1bc2:	37 fc       	sbrc	r3, 7
    1bc4:	2d c0       	rjmp	.+90     	; 0x1c20 <vfprintf+0x11c>
    1bc6:	20 ed       	ldi	r18, 0xD0	; 208
    1bc8:	28 0f       	add	r18, r24
    1bca:	2a 30       	cpi	r18, 0x0A	; 10
    1bcc:	40 f0       	brcs	.+16     	; 0x1bde <vfprintf+0xda>
    1bce:	8e 32       	cpi	r24, 0x2E	; 46
    1bd0:	b9 f4       	brne	.+46     	; 0x1c00 <vfprintf+0xfc>
    1bd2:	36 fc       	sbrc	r3, 6
    1bd4:	75 c1       	rjmp	.+746    	; 0x1ec0 <vfprintf+0x3bc>
    1bd6:	23 2d       	mov	r18, r3
    1bd8:	20 64       	ori	r18, 0x40	; 64
    1bda:	32 2e       	mov	r3, r18
    1bdc:	19 c0       	rjmp	.+50     	; 0x1c10 <vfprintf+0x10c>
    1bde:	36 fe       	sbrs	r3, 6
    1be0:	06 c0       	rjmp	.+12     	; 0x1bee <vfprintf+0xea>
    1be2:	8a e0       	ldi	r24, 0x0A	; 10
    1be4:	98 9e       	mul	r9, r24
    1be6:	20 0d       	add	r18, r0
    1be8:	11 24       	eor	r1, r1
    1bea:	92 2e       	mov	r9, r18
    1bec:	11 c0       	rjmp	.+34     	; 0x1c10 <vfprintf+0x10c>
    1bee:	ea e0       	ldi	r30, 0x0A	; 10
    1bf0:	2e 9e       	mul	r2, r30
    1bf2:	20 0d       	add	r18, r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	22 2e       	mov	r2, r18
    1bf8:	f3 2d       	mov	r31, r3
    1bfa:	f0 62       	ori	r31, 0x20	; 32
    1bfc:	3f 2e       	mov	r3, r31
    1bfe:	08 c0       	rjmp	.+16     	; 0x1c10 <vfprintf+0x10c>
    1c00:	8c 36       	cpi	r24, 0x6C	; 108
    1c02:	21 f4       	brne	.+8      	; 0x1c0c <vfprintf+0x108>
    1c04:	83 2d       	mov	r24, r3
    1c06:	80 68       	ori	r24, 0x80	; 128
    1c08:	38 2e       	mov	r3, r24
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <vfprintf+0x10c>
    1c0c:	88 36       	cpi	r24, 0x68	; 104
    1c0e:	41 f4       	brne	.+16     	; 0x1c20 <vfprintf+0x11c>
    1c10:	f7 01       	movw	r30, r14
    1c12:	93 fd       	sbrc	r25, 3
    1c14:	85 91       	lpm	r24, Z+
    1c16:	93 ff       	sbrs	r25, 3
    1c18:	81 91       	ld	r24, Z+
    1c1a:	7f 01       	movw	r14, r30
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	b3 cf       	rjmp	.-154    	; 0x1b86 <vfprintf+0x82>
    1c20:	98 2f       	mov	r25, r24
    1c22:	9f 7d       	andi	r25, 0xDF	; 223
    1c24:	95 54       	subi	r25, 0x45	; 69
    1c26:	93 30       	cpi	r25, 0x03	; 3
    1c28:	28 f4       	brcc	.+10     	; 0x1c34 <vfprintf+0x130>
    1c2a:	0c 5f       	subi	r16, 0xFC	; 252
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	9f e3       	ldi	r25, 0x3F	; 63
    1c30:	99 83       	std	Y+1, r25	; 0x01
    1c32:	0d c0       	rjmp	.+26     	; 0x1c4e <vfprintf+0x14a>
    1c34:	83 36       	cpi	r24, 0x63	; 99
    1c36:	31 f0       	breq	.+12     	; 0x1c44 <vfprintf+0x140>
    1c38:	83 37       	cpi	r24, 0x73	; 115
    1c3a:	71 f0       	breq	.+28     	; 0x1c58 <vfprintf+0x154>
    1c3c:	83 35       	cpi	r24, 0x53	; 83
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <vfprintf+0x13e>
    1c40:	55 c0       	rjmp	.+170    	; 0x1cec <vfprintf+0x1e8>
    1c42:	20 c0       	rjmp	.+64     	; 0x1c84 <vfprintf+0x180>
    1c44:	f8 01       	movw	r30, r16
    1c46:	80 81       	ld	r24, Z
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	0e 5f       	subi	r16, 0xFE	; 254
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	88 24       	eor	r8, r8
    1c50:	83 94       	inc	r8
    1c52:	91 2c       	mov	r9, r1
    1c54:	53 01       	movw	r10, r6
    1c56:	12 c0       	rjmp	.+36     	; 0x1c7c <vfprintf+0x178>
    1c58:	28 01       	movw	r4, r16
    1c5a:	f2 e0       	ldi	r31, 0x02	; 2
    1c5c:	4f 0e       	add	r4, r31
    1c5e:	51 1c       	adc	r5, r1
    1c60:	f8 01       	movw	r30, r16
    1c62:	a0 80       	ld	r10, Z
    1c64:	b1 80       	ldd	r11, Z+1	; 0x01
    1c66:	36 fe       	sbrs	r3, 6
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <vfprintf+0x16c>
    1c6a:	69 2d       	mov	r22, r9
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <vfprintf+0x170>
    1c70:	6f ef       	ldi	r22, 0xFF	; 255
    1c72:	7f ef       	ldi	r23, 0xFF	; 255
    1c74:	c5 01       	movw	r24, r10
    1c76:	4e d1       	rcall	.+668    	; 0x1f14 <strnlen>
    1c78:	4c 01       	movw	r8, r24
    1c7a:	82 01       	movw	r16, r4
    1c7c:	f3 2d       	mov	r31, r3
    1c7e:	ff 77       	andi	r31, 0x7F	; 127
    1c80:	3f 2e       	mov	r3, r31
    1c82:	15 c0       	rjmp	.+42     	; 0x1cae <vfprintf+0x1aa>
    1c84:	28 01       	movw	r4, r16
    1c86:	22 e0       	ldi	r18, 0x02	; 2
    1c88:	42 0e       	add	r4, r18
    1c8a:	51 1c       	adc	r5, r1
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	a0 80       	ld	r10, Z
    1c90:	b1 80       	ldd	r11, Z+1	; 0x01
    1c92:	36 fe       	sbrs	r3, 6
    1c94:	03 c0       	rjmp	.+6      	; 0x1c9c <vfprintf+0x198>
    1c96:	69 2d       	mov	r22, r9
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <vfprintf+0x19c>
    1c9c:	6f ef       	ldi	r22, 0xFF	; 255
    1c9e:	7f ef       	ldi	r23, 0xFF	; 255
    1ca0:	c5 01       	movw	r24, r10
    1ca2:	2d d1       	rcall	.+602    	; 0x1efe <strnlen_P>
    1ca4:	4c 01       	movw	r8, r24
    1ca6:	f3 2d       	mov	r31, r3
    1ca8:	f0 68       	ori	r31, 0x80	; 128
    1caa:	3f 2e       	mov	r3, r31
    1cac:	82 01       	movw	r16, r4
    1cae:	33 fc       	sbrc	r3, 3
    1cb0:	19 c0       	rjmp	.+50     	; 0x1ce4 <vfprintf+0x1e0>
    1cb2:	82 2d       	mov	r24, r2
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	88 16       	cp	r8, r24
    1cb8:	99 06       	cpc	r9, r25
    1cba:	a0 f4       	brcc	.+40     	; 0x1ce4 <vfprintf+0x1e0>
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	33 d1       	rcall	.+614    	; 0x1f2a <fputc>
    1cc4:	2a 94       	dec	r2
    1cc6:	f5 cf       	rjmp	.-22     	; 0x1cb2 <vfprintf+0x1ae>
    1cc8:	f5 01       	movw	r30, r10
    1cca:	37 fc       	sbrc	r3, 7
    1ccc:	85 91       	lpm	r24, Z+
    1cce:	37 fe       	sbrs	r3, 7
    1cd0:	81 91       	ld	r24, Z+
    1cd2:	5f 01       	movw	r10, r30
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	28 d1       	rcall	.+592    	; 0x1f2a <fputc>
    1cda:	21 10       	cpse	r2, r1
    1cdc:	2a 94       	dec	r2
    1cde:	21 e0       	ldi	r18, 0x01	; 1
    1ce0:	82 1a       	sub	r8, r18
    1ce2:	91 08       	sbc	r9, r1
    1ce4:	81 14       	cp	r8, r1
    1ce6:	91 04       	cpc	r9, r1
    1ce8:	79 f7       	brne	.-34     	; 0x1cc8 <vfprintf+0x1c4>
    1cea:	e1 c0       	rjmp	.+450    	; 0x1eae <vfprintf+0x3aa>
    1cec:	84 36       	cpi	r24, 0x64	; 100
    1cee:	11 f0       	breq	.+4      	; 0x1cf4 <vfprintf+0x1f0>
    1cf0:	89 36       	cpi	r24, 0x69	; 105
    1cf2:	39 f5       	brne	.+78     	; 0x1d42 <vfprintf+0x23e>
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	37 fe       	sbrs	r3, 7
    1cf8:	07 c0       	rjmp	.+14     	; 0x1d08 <vfprintf+0x204>
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	0c 5f       	subi	r16, 0xFC	; 252
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	08 c0       	rjmp	.+16     	; 0x1d18 <vfprintf+0x214>
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
    1d0c:	07 2e       	mov	r0, r23
    1d0e:	00 0c       	add	r0, r0
    1d10:	88 0b       	sbc	r24, r24
    1d12:	99 0b       	sbc	r25, r25
    1d14:	0e 5f       	subi	r16, 0xFE	; 254
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	f3 2d       	mov	r31, r3
    1d1a:	ff 76       	andi	r31, 0x6F	; 111
    1d1c:	3f 2e       	mov	r3, r31
    1d1e:	97 ff       	sbrs	r25, 7
    1d20:	09 c0       	rjmp	.+18     	; 0x1d34 <vfprintf+0x230>
    1d22:	90 95       	com	r25
    1d24:	80 95       	com	r24
    1d26:	70 95       	com	r23
    1d28:	61 95       	neg	r22
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	f0 68       	ori	r31, 0x80	; 128
    1d32:	3f 2e       	mov	r3, r31
    1d34:	2a e0       	ldi	r18, 0x0A	; 10
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	a3 01       	movw	r20, r6
    1d3a:	33 d1       	rcall	.+614    	; 0x1fa2 <__ultoa_invert>
    1d3c:	88 2e       	mov	r8, r24
    1d3e:	86 18       	sub	r8, r6
    1d40:	44 c0       	rjmp	.+136    	; 0x1dca <vfprintf+0x2c6>
    1d42:	85 37       	cpi	r24, 0x75	; 117
    1d44:	31 f4       	brne	.+12     	; 0x1d52 <vfprintf+0x24e>
    1d46:	23 2d       	mov	r18, r3
    1d48:	2f 7e       	andi	r18, 0xEF	; 239
    1d4a:	b2 2e       	mov	r11, r18
    1d4c:	2a e0       	ldi	r18, 0x0A	; 10
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	25 c0       	rjmp	.+74     	; 0x1d9c <vfprintf+0x298>
    1d52:	93 2d       	mov	r25, r3
    1d54:	99 7f       	andi	r25, 0xF9	; 249
    1d56:	b9 2e       	mov	r11, r25
    1d58:	8f 36       	cpi	r24, 0x6F	; 111
    1d5a:	c1 f0       	breq	.+48     	; 0x1d8c <vfprintf+0x288>
    1d5c:	18 f4       	brcc	.+6      	; 0x1d64 <vfprintf+0x260>
    1d5e:	88 35       	cpi	r24, 0x58	; 88
    1d60:	79 f0       	breq	.+30     	; 0x1d80 <vfprintf+0x27c>
    1d62:	ae c0       	rjmp	.+348    	; 0x1ec0 <vfprintf+0x3bc>
    1d64:	80 37       	cpi	r24, 0x70	; 112
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <vfprintf+0x26a>
    1d68:	88 37       	cpi	r24, 0x78	; 120
    1d6a:	21 f0       	breq	.+8      	; 0x1d74 <vfprintf+0x270>
    1d6c:	a9 c0       	rjmp	.+338    	; 0x1ec0 <vfprintf+0x3bc>
    1d6e:	e9 2f       	mov	r30, r25
    1d70:	e0 61       	ori	r30, 0x10	; 16
    1d72:	be 2e       	mov	r11, r30
    1d74:	b4 fe       	sbrs	r11, 4
    1d76:	0d c0       	rjmp	.+26     	; 0x1d92 <vfprintf+0x28e>
    1d78:	fb 2d       	mov	r31, r11
    1d7a:	f4 60       	ori	r31, 0x04	; 4
    1d7c:	bf 2e       	mov	r11, r31
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <vfprintf+0x28e>
    1d80:	34 fe       	sbrs	r3, 4
    1d82:	0a c0       	rjmp	.+20     	; 0x1d98 <vfprintf+0x294>
    1d84:	29 2f       	mov	r18, r25
    1d86:	26 60       	ori	r18, 0x06	; 6
    1d88:	b2 2e       	mov	r11, r18
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <vfprintf+0x294>
    1d8c:	28 e0       	ldi	r18, 0x08	; 8
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <vfprintf+0x298>
    1d92:	20 e1       	ldi	r18, 0x10	; 16
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <vfprintf+0x298>
    1d98:	20 e1       	ldi	r18, 0x10	; 16
    1d9a:	32 e0       	ldi	r19, 0x02	; 2
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	b7 fe       	sbrs	r11, 7
    1da0:	07 c0       	rjmp	.+14     	; 0x1db0 <vfprintf+0x2ac>
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	0c 5f       	subi	r16, 0xFC	; 252
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	06 c0       	rjmp	.+12     	; 0x1dbc <vfprintf+0x2b8>
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 5f       	subi	r16, 0xFE	; 254
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	a3 01       	movw	r20, r6
    1dbe:	f1 d0       	rcall	.+482    	; 0x1fa2 <__ultoa_invert>
    1dc0:	88 2e       	mov	r8, r24
    1dc2:	86 18       	sub	r8, r6
    1dc4:	fb 2d       	mov	r31, r11
    1dc6:	ff 77       	andi	r31, 0x7F	; 127
    1dc8:	3f 2e       	mov	r3, r31
    1dca:	36 fe       	sbrs	r3, 6
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <vfprintf+0x2e4>
    1dce:	23 2d       	mov	r18, r3
    1dd0:	2e 7f       	andi	r18, 0xFE	; 254
    1dd2:	a2 2e       	mov	r10, r18
    1dd4:	89 14       	cp	r8, r9
    1dd6:	58 f4       	brcc	.+22     	; 0x1dee <vfprintf+0x2ea>
    1dd8:	34 fe       	sbrs	r3, 4
    1dda:	0b c0       	rjmp	.+22     	; 0x1df2 <vfprintf+0x2ee>
    1ddc:	32 fc       	sbrc	r3, 2
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <vfprintf+0x2ee>
    1de0:	83 2d       	mov	r24, r3
    1de2:	8e 7e       	andi	r24, 0xEE	; 238
    1de4:	a8 2e       	mov	r10, r24
    1de6:	05 c0       	rjmp	.+10     	; 0x1df2 <vfprintf+0x2ee>
    1de8:	b8 2c       	mov	r11, r8
    1dea:	a3 2c       	mov	r10, r3
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <vfprintf+0x2f0>
    1dee:	b8 2c       	mov	r11, r8
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <vfprintf+0x2f0>
    1df2:	b9 2c       	mov	r11, r9
    1df4:	a4 fe       	sbrs	r10, 4
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <vfprintf+0x312>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e8 0d       	add	r30, r8
    1dfc:	f1 1d       	adc	r31, r1
    1dfe:	80 81       	ld	r24, Z
    1e00:	80 33       	cpi	r24, 0x30	; 48
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <vfprintf+0x308>
    1e04:	9a 2d       	mov	r25, r10
    1e06:	99 7e       	andi	r25, 0xE9	; 233
    1e08:	a9 2e       	mov	r10, r25
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <vfprintf+0x31a>
    1e0c:	a2 fe       	sbrs	r10, 2
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <vfprintf+0x318>
    1e10:	b3 94       	inc	r11
    1e12:	b3 94       	inc	r11
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <vfprintf+0x31a>
    1e16:	8a 2d       	mov	r24, r10
    1e18:	86 78       	andi	r24, 0x86	; 134
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <vfprintf+0x31a>
    1e1c:	b3 94       	inc	r11
    1e1e:	a3 fc       	sbrc	r10, 3
    1e20:	10 c0       	rjmp	.+32     	; 0x1e42 <vfprintf+0x33e>
    1e22:	a0 fe       	sbrs	r10, 0
    1e24:	06 c0       	rjmp	.+12     	; 0x1e32 <vfprintf+0x32e>
    1e26:	b2 14       	cp	r11, r2
    1e28:	80 f4       	brcc	.+32     	; 0x1e4a <vfprintf+0x346>
    1e2a:	28 0c       	add	r2, r8
    1e2c:	92 2c       	mov	r9, r2
    1e2e:	9b 18       	sub	r9, r11
    1e30:	0d c0       	rjmp	.+26     	; 0x1e4c <vfprintf+0x348>
    1e32:	b2 14       	cp	r11, r2
    1e34:	58 f4       	brcc	.+22     	; 0x1e4c <vfprintf+0x348>
    1e36:	b6 01       	movw	r22, r12
    1e38:	80 e2       	ldi	r24, 0x20	; 32
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	76 d0       	rcall	.+236    	; 0x1f2a <fputc>
    1e3e:	b3 94       	inc	r11
    1e40:	f8 cf       	rjmp	.-16     	; 0x1e32 <vfprintf+0x32e>
    1e42:	b2 14       	cp	r11, r2
    1e44:	18 f4       	brcc	.+6      	; 0x1e4c <vfprintf+0x348>
    1e46:	2b 18       	sub	r2, r11
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <vfprintf+0x34a>
    1e4a:	98 2c       	mov	r9, r8
    1e4c:	21 2c       	mov	r2, r1
    1e4e:	a4 fe       	sbrs	r10, 4
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <vfprintf+0x36c>
    1e52:	b6 01       	movw	r22, r12
    1e54:	80 e3       	ldi	r24, 0x30	; 48
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	68 d0       	rcall	.+208    	; 0x1f2a <fputc>
    1e5a:	a2 fe       	sbrs	r10, 2
    1e5c:	16 c0       	rjmp	.+44     	; 0x1e8a <vfprintf+0x386>
    1e5e:	a1 fc       	sbrc	r10, 1
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <vfprintf+0x364>
    1e62:	88 e7       	ldi	r24, 0x78	; 120
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <vfprintf+0x368>
    1e68:	88 e5       	ldi	r24, 0x58	; 88
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	b6 01       	movw	r22, r12
    1e6e:	0c c0       	rjmp	.+24     	; 0x1e88 <vfprintf+0x384>
    1e70:	8a 2d       	mov	r24, r10
    1e72:	86 78       	andi	r24, 0x86	; 134
    1e74:	51 f0       	breq	.+20     	; 0x1e8a <vfprintf+0x386>
    1e76:	a1 fe       	sbrs	r10, 1
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <vfprintf+0x37a>
    1e7a:	8b e2       	ldi	r24, 0x2B	; 43
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <vfprintf+0x37c>
    1e7e:	80 e2       	ldi	r24, 0x20	; 32
    1e80:	a7 fc       	sbrc	r10, 7
    1e82:	8d e2       	ldi	r24, 0x2D	; 45
    1e84:	b6 01       	movw	r22, r12
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	50 d0       	rcall	.+160    	; 0x1f2a <fputc>
    1e8a:	89 14       	cp	r8, r9
    1e8c:	30 f4       	brcc	.+12     	; 0x1e9a <vfprintf+0x396>
    1e8e:	b6 01       	movw	r22, r12
    1e90:	80 e3       	ldi	r24, 0x30	; 48
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	4a d0       	rcall	.+148    	; 0x1f2a <fputc>
    1e96:	9a 94       	dec	r9
    1e98:	f8 cf       	rjmp	.-16     	; 0x1e8a <vfprintf+0x386>
    1e9a:	8a 94       	dec	r8
    1e9c:	f3 01       	movw	r30, r6
    1e9e:	e8 0d       	add	r30, r8
    1ea0:	f1 1d       	adc	r31, r1
    1ea2:	80 81       	ld	r24, Z
    1ea4:	b6 01       	movw	r22, r12
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	40 d0       	rcall	.+128    	; 0x1f2a <fputc>
    1eaa:	81 10       	cpse	r8, r1
    1eac:	f6 cf       	rjmp	.-20     	; 0x1e9a <vfprintf+0x396>
    1eae:	22 20       	and	r2, r2
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <vfprintf+0x3b0>
    1eb2:	4e ce       	rjmp	.-868    	; 0x1b50 <vfprintf+0x4c>
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	80 e2       	ldi	r24, 0x20	; 32
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	37 d0       	rcall	.+110    	; 0x1f2a <fputc>
    1ebc:	2a 94       	dec	r2
    1ebe:	f7 cf       	rjmp	.-18     	; 0x1eae <vfprintf+0x3aa>
    1ec0:	f6 01       	movw	r30, r12
    1ec2:	86 81       	ldd	r24, Z+6	; 0x06
    1ec4:	97 81       	ldd	r25, Z+7	; 0x07
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <vfprintf+0x3c8>
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	9f ef       	ldi	r25, 0xFF	; 255
    1ecc:	2b 96       	adiw	r28, 0x0b	; 11
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	7f 90       	pop	r7
    1ef2:	6f 90       	pop	r6
    1ef4:	5f 90       	pop	r5
    1ef6:	4f 90       	pop	r4
    1ef8:	3f 90       	pop	r3
    1efa:	2f 90       	pop	r2
    1efc:	08 95       	ret

00001efe <strnlen_P>:
    1efe:	fc 01       	movw	r30, r24
    1f00:	05 90       	lpm	r0, Z+
    1f02:	61 50       	subi	r22, 0x01	; 1
    1f04:	70 40       	sbci	r23, 0x00	; 0
    1f06:	01 10       	cpse	r0, r1
    1f08:	d8 f7       	brcc	.-10     	; 0x1f00 <strnlen_P+0x2>
    1f0a:	80 95       	com	r24
    1f0c:	90 95       	com	r25
    1f0e:	8e 0f       	add	r24, r30
    1f10:	9f 1f       	adc	r25, r31
    1f12:	08 95       	ret

00001f14 <strnlen>:
    1f14:	fc 01       	movw	r30, r24
    1f16:	61 50       	subi	r22, 0x01	; 1
    1f18:	70 40       	sbci	r23, 0x00	; 0
    1f1a:	01 90       	ld	r0, Z+
    1f1c:	01 10       	cpse	r0, r1
    1f1e:	d8 f7       	brcc	.-10     	; 0x1f16 <strnlen+0x2>
    1f20:	80 95       	com	r24
    1f22:	90 95       	com	r25
    1f24:	8e 0f       	add	r24, r30
    1f26:	9f 1f       	adc	r25, r31
    1f28:	08 95       	ret

00001f2a <fputc>:
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	fb 01       	movw	r30, r22
    1f34:	23 81       	ldd	r18, Z+3	; 0x03
    1f36:	21 fd       	sbrc	r18, 1
    1f38:	03 c0       	rjmp	.+6      	; 0x1f40 <fputc+0x16>
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	2c c0       	rjmp	.+88     	; 0x1f98 <fputc+0x6e>
    1f40:	22 ff       	sbrs	r18, 2
    1f42:	16 c0       	rjmp	.+44     	; 0x1f70 <fputc+0x46>
    1f44:	46 81       	ldd	r20, Z+6	; 0x06
    1f46:	57 81       	ldd	r21, Z+7	; 0x07
    1f48:	24 81       	ldd	r18, Z+4	; 0x04
    1f4a:	35 81       	ldd	r19, Z+5	; 0x05
    1f4c:	42 17       	cp	r20, r18
    1f4e:	53 07       	cpc	r21, r19
    1f50:	44 f4       	brge	.+16     	; 0x1f62 <fputc+0x38>
    1f52:	a0 81       	ld	r26, Z
    1f54:	b1 81       	ldd	r27, Z+1	; 0x01
    1f56:	9d 01       	movw	r18, r26
    1f58:	2f 5f       	subi	r18, 0xFF	; 255
    1f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5c:	31 83       	std	Z+1, r19	; 0x01
    1f5e:	20 83       	st	Z, r18
    1f60:	8c 93       	st	X, r24
    1f62:	26 81       	ldd	r18, Z+6	; 0x06
    1f64:	37 81       	ldd	r19, Z+7	; 0x07
    1f66:	2f 5f       	subi	r18, 0xFF	; 255
    1f68:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6a:	37 83       	std	Z+7, r19	; 0x07
    1f6c:	26 83       	std	Z+6, r18	; 0x06
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <fputc+0x6e>
    1f70:	8b 01       	movw	r16, r22
    1f72:	ec 01       	movw	r28, r24
    1f74:	fb 01       	movw	r30, r22
    1f76:	00 84       	ldd	r0, Z+8	; 0x08
    1f78:	f1 85       	ldd	r31, Z+9	; 0x09
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	09 95       	icall
    1f7e:	89 2b       	or	r24, r25
    1f80:	e1 f6       	brne	.-72     	; 0x1f3a <fputc+0x10>
    1f82:	d8 01       	movw	r26, r16
    1f84:	16 96       	adiw	r26, 0x06	; 6
    1f86:	8d 91       	ld	r24, X+
    1f88:	9c 91       	ld	r25, X
    1f8a:	17 97       	sbiw	r26, 0x07	; 7
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	17 96       	adiw	r26, 0x07	; 7
    1f90:	9c 93       	st	X, r25
    1f92:	8e 93       	st	-X, r24
    1f94:	16 97       	sbiw	r26, 0x06	; 6
    1f96:	ce 01       	movw	r24, r28
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <__ultoa_invert>:
    1fa2:	fa 01       	movw	r30, r20
    1fa4:	aa 27       	eor	r26, r26
    1fa6:	28 30       	cpi	r18, 0x08	; 8
    1fa8:	51 f1       	breq	.+84     	; 0x1ffe <__ultoa_invert+0x5c>
    1faa:	20 31       	cpi	r18, 0x10	; 16
    1fac:	81 f1       	breq	.+96     	; 0x200e <__ultoa_invert+0x6c>
    1fae:	e8 94       	clt
    1fb0:	6f 93       	push	r22
    1fb2:	6e 7f       	andi	r22, 0xFE	; 254
    1fb4:	6e 5f       	subi	r22, 0xFE	; 254
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	af 4f       	sbci	r26, 0xFF	; 255
    1fbe:	b1 e0       	ldi	r27, 0x01	; 1
    1fc0:	3e d0       	rcall	.+124    	; 0x203e <__ultoa_invert+0x9c>
    1fc2:	b4 e0       	ldi	r27, 0x04	; 4
    1fc4:	3c d0       	rcall	.+120    	; 0x203e <__ultoa_invert+0x9c>
    1fc6:	67 0f       	add	r22, r23
    1fc8:	78 1f       	adc	r23, r24
    1fca:	89 1f       	adc	r24, r25
    1fcc:	9a 1f       	adc	r25, r26
    1fce:	a1 1d       	adc	r26, r1
    1fd0:	68 0f       	add	r22, r24
    1fd2:	79 1f       	adc	r23, r25
    1fd4:	8a 1f       	adc	r24, r26
    1fd6:	91 1d       	adc	r25, r1
    1fd8:	a1 1d       	adc	r26, r1
    1fda:	6a 0f       	add	r22, r26
    1fdc:	71 1d       	adc	r23, r1
    1fde:	81 1d       	adc	r24, r1
    1fe0:	91 1d       	adc	r25, r1
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	20 d0       	rcall	.+64     	; 0x2026 <__ultoa_invert+0x84>
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <__ultoa_invert+0x48>
    1fe8:	68 94       	set
    1fea:	3f 91       	pop	r19
    1fec:	2a e0       	ldi	r18, 0x0A	; 10
    1fee:	26 9f       	mul	r18, r22
    1ff0:	11 24       	eor	r1, r1
    1ff2:	30 19       	sub	r19, r0
    1ff4:	30 5d       	subi	r19, 0xD0	; 208
    1ff6:	31 93       	st	Z+, r19
    1ff8:	de f6       	brtc	.-74     	; 0x1fb0 <__ultoa_invert+0xe>
    1ffa:	cf 01       	movw	r24, r30
    1ffc:	08 95       	ret
    1ffe:	46 2f       	mov	r20, r22
    2000:	47 70       	andi	r20, 0x07	; 7
    2002:	40 5d       	subi	r20, 0xD0	; 208
    2004:	41 93       	st	Z+, r20
    2006:	b3 e0       	ldi	r27, 0x03	; 3
    2008:	0f d0       	rcall	.+30     	; 0x2028 <__ultoa_invert+0x86>
    200a:	c9 f7       	brne	.-14     	; 0x1ffe <__ultoa_invert+0x5c>
    200c:	f6 cf       	rjmp	.-20     	; 0x1ffa <__ultoa_invert+0x58>
    200e:	46 2f       	mov	r20, r22
    2010:	4f 70       	andi	r20, 0x0F	; 15
    2012:	40 5d       	subi	r20, 0xD0	; 208
    2014:	4a 33       	cpi	r20, 0x3A	; 58
    2016:	18 f0       	brcs	.+6      	; 0x201e <__ultoa_invert+0x7c>
    2018:	49 5d       	subi	r20, 0xD9	; 217
    201a:	31 fd       	sbrc	r19, 1
    201c:	40 52       	subi	r20, 0x20	; 32
    201e:	41 93       	st	Z+, r20
    2020:	02 d0       	rcall	.+4      	; 0x2026 <__ultoa_invert+0x84>
    2022:	a9 f7       	brne	.-22     	; 0x200e <__ultoa_invert+0x6c>
    2024:	ea cf       	rjmp	.-44     	; 0x1ffa <__ultoa_invert+0x58>
    2026:	b4 e0       	ldi	r27, 0x04	; 4
    2028:	a6 95       	lsr	r26
    202a:	97 95       	ror	r25
    202c:	87 95       	ror	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	ba 95       	dec	r27
    2034:	c9 f7       	brne	.-14     	; 0x2028 <__ultoa_invert+0x86>
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	61 05       	cpc	r22, r1
    203a:	71 05       	cpc	r23, r1
    203c:	08 95       	ret
    203e:	9b 01       	movw	r18, r22
    2040:	ac 01       	movw	r20, r24
    2042:	0a 2e       	mov	r0, r26
    2044:	06 94       	lsr	r0
    2046:	57 95       	ror	r21
    2048:	47 95       	ror	r20
    204a:	37 95       	ror	r19
    204c:	27 95       	ror	r18
    204e:	ba 95       	dec	r27
    2050:	c9 f7       	brne	.-14     	; 0x2044 <__ultoa_invert+0xa2>
    2052:	62 0f       	add	r22, r18
    2054:	73 1f       	adc	r23, r19
    2056:	84 1f       	adc	r24, r20
    2058:	95 1f       	adc	r25, r21
    205a:	a0 1d       	adc	r26, r0
    205c:	08 95       	ret

0000205e <_exit>:
    205e:	f8 94       	cli

00002060 <__stop_program>:
    2060:	ff cf       	rjmp	.-2      	; 0x2060 <__stop_program>
