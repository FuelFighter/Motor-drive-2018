
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  000025c4  00002658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  008001e4  008001e4  0000273c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005aa7  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b11  00000000  00000000  0000873f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b9a  00000000  00000000  0000a250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ea4  00000000  00000000  0000cdec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001659  00000000  00000000  0000dc90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e48  00000000  00000000  0000f2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00013131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_1>
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_12>
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_16>
      44:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__vector_17>
      48:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c7       	rjmp	.+3732   	; 0xeea <__vector_21>
      56:	00 00       	nop
      58:	2a c7       	rjmp	.+3668   	; 0xeae <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6d c7       	rjmp	.+3802   	; 0xf5c <__vector_32>
      82:	00 00       	nop
      84:	4d c7       	rjmp	.+3738   	; 0xf20 <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	0e 0b       	sbc	r16, r30
      96:	13 0b       	sbc	r17, r19
      98:	19 0b       	sbc	r17, r25
      9a:	1f 0b       	sbc	r17, r31
      9c:	25 0b       	sbc	r18, r21
      9e:	2a 0b       	sbc	r18, r26
      a0:	30 0b       	sbc	r19, r16
      a2:	36 0b       	sbc	r19, r22

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 ec       	ldi	r30, 0xC4	; 196
      b8:	f5 e2       	ldi	r31, 0x25	; 37
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 3e       	cpi	r26, 0xE4	; 228
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	24 e0       	ldi	r18, 0x04	; 4
      cc:	a4 ee       	ldi	r26, 0xE4	; 228
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a0 34       	cpi	r26, 0x40	; 64
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	82 d7       	rcall	.+3844   	; 0xfe0 <main>
      dc:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static float f32_Integrator = 0.0 ;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <f32_Integrator>
      e6:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <f32_Integrator+0x1>
      ea:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <f32_Integrator+0x2>
      ee:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <set_I>:
}

void set_I(uint8_t duty)
{
	f32_Integrator = (duty-50.0)/Ki;
      f4:	68 2f       	mov	r22, r24
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__floatsisf>
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	48 e4       	ldi	r20, 0x48	; 72
     106:	52 e4       	ldi	r21, 0x42	; 66
     108:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subsf3>
     10c:	23 e3       	ldi	r18, 0x33	; 51
     10e:	33 e3       	ldi	r19, 0x33	; 51
     110:	43 e7       	ldi	r20, 0x73	; 115
     112:	52 e4       	ldi	r21, 0x42	; 66
     114:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     118:	60 93 e5 01 	sts	0x01E5, r22	; 0x8001e5 <f32_Integrator>
     11c:	70 93 e6 01 	sts	0x01E6, r23	; 0x8001e6 <f32_Integrator+0x1>
     120:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <f32_Integrator+0x2>
     124:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <f32_Integrator+0x3>
     128:	08 95       	ret

0000012a <controller>:
}

void controller(volatile ModuleValues_t *vals){
     12a:	8f 92       	push	r8
     12c:	9f 92       	push	r9
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ec 01       	movw	r28, r24
	static float f32_DutyCycleCmd = 50.0 ;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	int8_t i8_throttle_cmd = 0;
	
	if (vals->motor_status == BRAKE)
     144:	8a 8d       	ldd	r24, Y+26	; 0x1a
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	21 f4       	brne	.+8      	; 0x152 <controller+0x28>
	{
		i8_throttle_cmd = -(int8_t)vals->u8_brake_cmd ;
     14a:	6c 89       	ldd	r22, Y+20	; 0x14
     14c:	16 2f       	mov	r17, r22
     14e:	11 95       	neg	r17
     150:	01 c0       	rjmp	.+2      	; 0x154 <controller+0x2a>
void controller(volatile ModuleValues_t *vals){
	
	static float f32_DutyCycleCmd = 50.0 ;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	int8_t i8_throttle_cmd = 0;
     152:	10 e0       	ldi	r17, 0x00	; 0
	
	if (vals->motor_status == BRAKE)
	{
		i8_throttle_cmd = -(int8_t)vals->u8_brake_cmd ;
	}
	if (vals->motor_status == ACCEL)
     154:	8a 8d       	ldd	r24, Y+26	; 0x1a
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	09 f4       	brne	.+2      	; 0x15c <controller+0x32>
	{
		i8_throttle_cmd = vals->u8_accel_cmd ;
     15a:	1b 89       	ldd	r17, Y+19	; 0x13
	}
	
	if (vals->ctrl_type == CURRENT)
     15c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     15e:	81 11       	cpse	r24, r1
     160:	8b c0       	rjmp	.+278    	; 0x278 <controller+0x14e>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     162:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     166:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     16a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     16e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	4e eb       	ldi	r20, 0xBE	; 190
     178:	52 e4       	ldi	r21, 0x42	; 66
     17a:	c7 01       	movw	r24, r14
     17c:	b6 01       	movw	r22, r12
     17e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__gesf2>
     182:	88 23       	and	r24, r24
     184:	54 f4       	brge	.+20     	; 0x19a <controller+0x70>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	48 e4       	ldi	r20, 0x48	; 72
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	c7 01       	movw	r24, r14
     190:	b6 01       	movw	r22, r12
     192:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__cmpsf2>
     196:	18 16       	cp	r1, r24
     198:	ac f0       	brlt	.+42     	; 0x1c4 <controller+0x9a>
		{
			b_saturation = 1 ;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
		} else {
			b_saturation = 0;
		}
		
		f32_CurrentDelta = ((float)(i8_throttle_cmd)-vals->f32_motor_current)	;
     1a0:	c8 80       	ld	r12, Y
     1a2:	d9 80       	ldd	r13, Y+1	; 0x01
     1a4:	ea 80       	ldd	r14, Y+2	; 0x02
     1a6:	fb 80       	ldd	r15, Y+3	; 0x03
     1a8:	61 2f       	mov	r22, r17
     1aa:	11 0f       	add	r17, r17
     1ac:	77 0b       	sbc	r23, r23
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__floatsisf>
     1b6:	a7 01       	movw	r20, r14
     1b8:	96 01       	movw	r18, r12
     1ba:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subsf3>
     1be:	6b 01       	movw	r12, r22
     1c0:	7c 01       	movw	r14, r24
     1c2:	2d c0       	rjmp	.+90     	; 0x21e <controller+0xf4>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
		{
			b_saturation = 1 ;
		} else {
			b_saturation = 0;
     1c4:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__data_end>
		}
		
		f32_CurrentDelta = ((float)(i8_throttle_cmd)-vals->f32_motor_current)	;
     1c8:	c8 80       	ld	r12, Y
     1ca:	d9 80       	ldd	r13, Y+1	; 0x01
     1cc:	ea 80       	ldd	r14, Y+2	; 0x02
     1ce:	fb 80       	ldd	r15, Y+3	; 0x03
     1d0:	61 2f       	mov	r22, r17
     1d2:	11 0f       	add	r17, r17
     1d4:	77 0b       	sbc	r23, r23
     1d6:	88 0b       	sbc	r24, r24
     1d8:	99 0b       	sbc	r25, r25
     1da:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__floatsisf>
     1de:	a7 01       	movw	r20, r14
     1e0:	96 01       	movw	r18, r12
     1e2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subsf3>
     1e6:	6b 01       	movw	r12, r22
     1e8:	7c 01       	movw	r14, r24
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     1ea:	2a e0       	ldi	r18, 0x0A	; 10
     1ec:	37 ed       	ldi	r19, 0xD7	; 215
     1ee:	43 e2       	ldi	r20, 0x23	; 35
     1f0:	5c e3       	ldi	r21, 0x3C	; 60
     1f2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     1f6:	9b 01       	movw	r18, r22
     1f8:	ac 01       	movw	r20, r24
     1fa:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <f32_Integrator>
     1fe:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <f32_Integrator+0x1>
     202:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <f32_Integrator+0x2>
     206:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <f32_Integrator+0x3>
     20a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__addsf3>
     20e:	60 93 e5 01 	sts	0x01E5, r22	; 0x8001e5 <f32_Integrator>
     212:	70 93 e6 01 	sts	0x01E6, r23	; 0x8001e6 <f32_Integrator+0x1>
     216:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <f32_Integrator+0x2>
     21a:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     21e:	23 e3       	ldi	r18, 0x33	; 51
     220:	33 e3       	ldi	r19, 0x33	; 51
     222:	43 e7       	ldi	r20, 0x73	; 115
     224:	52 e4       	ldi	r21, 0x42	; 66
     226:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <f32_Integrator>
     22a:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <f32_Integrator+0x1>
     22e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <f32_Integrator+0x2>
     232:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <f32_Integrator+0x3>
     236:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     23a:	4b 01       	movw	r8, r22
     23c:	5c 01       	movw	r10, r24
     23e:	29 ef       	ldi	r18, 0xF9	; 249
     240:	3f e0       	ldi	r19, 0x0F	; 15
     242:	49 e7       	ldi	r20, 0x79	; 121
     244:	5f e3       	ldi	r21, 0x3F	; 63
     246:	c7 01       	movw	r24, r14
     248:	b6 01       	movw	r22, r12
     24a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     24e:	9b 01       	movw	r18, r22
     250:	ac 01       	movw	r20, r24
     252:	c5 01       	movw	r24, r10
     254:	b4 01       	movw	r22, r8
     256:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__addsf3>
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	48 e4       	ldi	r20, 0x48	; 72
     260:	52 e4       	ldi	r21, 0x42	; 66
     262:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__addsf3>
     266:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     26a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     272:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     276:	2f c0       	rjmp	.+94     	; 0x2d6 <controller+0x1ac>
	
	}else if (vals->ctrl_type == PWM)
     278:	8f 8d       	ldd	r24, Y+31	; 0x1f
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	61 f5       	brne	.+88     	; 0x2d6 <controller+0x1ac>
	{
		f32_DutyCycleCmd = (float)(vals->u8_duty_cycle);
     27e:	6d 89       	ldd	r22, Y+21	; 0x15
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     28a:	6b 01       	movw	r12, r22
     28c:	7c 01       	movw	r14, r24
     28e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     292:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     296:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     29a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		if (vals->f32_motor_current > 0.5)
     29e:	68 81       	ld	r22, Y
     2a0:	79 81       	ldd	r23, Y+1	; 0x01
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	5f e3       	ldi	r21, 0x3F	; 63
     2ae:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__gesf2>
     2b2:	18 16       	cp	r1, r24
     2b4:	84 f4       	brge	.+32     	; 0x2d6 <controller+0x1ac>
		{
			f32_DutyCycleCmd -- ;
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 e8       	ldi	r20, 0x80	; 128
     2bc:	5f e3       	ldi	r21, 0x3F	; 63
     2be:	c7 01       	movw	r24, r14
     2c0:	b6 01       	movw	r22, r12
     2c2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subsf3>
     2c6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     2ca:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     2ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     2d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		}
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     2d6:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     2da:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     2de:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     2e2:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	4e eb       	ldi	r20, 0xBE	; 190
     2ec:	52 e4       	ldi	r21, 0x42	; 66
     2ee:	c7 01       	movw	r24, r14
     2f0:	b6 01       	movw	r22, r12
     2f2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__gesf2>
     2f6:	18 16       	cp	r1, r24
     2f8:	6c f4       	brge	.+26     	; 0x314 <controller+0x1ea>
	{
		f32_DutyCycleCmd = 95;
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	ae eb       	ldi	r26, 0xBE	; 190
     300:	b2 e4       	ldi	r27, 0x42	; 66
     302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     306:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     30a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     30e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     312:	16 c0       	rjmp	.+44     	; 0x340 <controller+0x216>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	48 e4       	ldi	r20, 0x48	; 72
     31a:	52 e4       	ldi	r21, 0x42	; 66
     31c:	c7 01       	movw	r24, r14
     31e:	b6 01       	movw	r22, r12
     320:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__cmpsf2>
     324:	88 23       	and	r24, r24
     326:	64 f4       	brge	.+24     	; 0x340 <controller+0x216>
	{
		f32_DutyCycleCmd = 50;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	a8 e4       	ldi	r26, 0x48	; 72
     32e:	b2 e4       	ldi	r27, 0x42	; 66
     330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     334:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     338:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     33c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     340:	06 e9       	ldi	r16, 0x96	; 150
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	f8 01       	movw	r30, r16
     346:	e0 80       	ld	r14, Z
     348:	f1 80       	ldd	r15, Z+1	; 0x01
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	48 ec       	ldi	r20, 0xC8	; 200
     350:	52 e4       	ldi	r21, 0x42	; 66
     352:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     356:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     35a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     35e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     362:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     366:	4b 01       	movw	r8, r22
     368:	5c 01       	movw	r10, r24
     36a:	b7 01       	movw	r22, r14
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     374:	9b 01       	movw	r18, r22
     376:	ac 01       	movw	r20, r24
     378:	c5 01       	movw	r24, r10
     37a:	b4 01       	movw	r22, r8
     37c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     380:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fixsfsi>
     384:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     388:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     38c:	f8 01       	movw	r30, r16
     38e:	60 81       	ld	r22, Z
     390:	71 81       	ldd	r23, Z+1	; 0x01
     392:	00 81       	ld	r16, Z
     394:	11 81       	ldd	r17, Z+1	; 0x01
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     39e:	6b 01       	movw	r12, r22
     3a0:	7c 01       	movw	r14, r24
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	48 ec       	ldi	r20, 0xC8	; 200
     3a8:	52 e4       	ldi	r21, 0x42	; 66
     3aa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     3ae:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     3b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     3b6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     3ba:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     3be:	4b 01       	movw	r8, r22
     3c0:	5c 01       	movw	r10, r24
     3c2:	b8 01       	movw	r22, r16
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c5 01       	movw	r24, r10
     3d2:	b4 01       	movw	r22, r8
     3d4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     3d8:	9b 01       	movw	r18, r22
     3da:	ac 01       	movw	r20, r24
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subsf3>
     3e4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fixsfsi>
     3e8:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     3ec:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	vals->u8_duty_cycle = (uint8_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     3f0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     3f4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     3f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     3fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     400:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     404:	6d 8b       	std	Y+21, r22	; 0x15
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	08 95       	ret

00000420 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     420:	24 9a       	sbi	0x04, 4	; 4
     422:	08 95       	ret

00000424 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state == 1)
     424:	81 30       	cpi	r24, 0x01	; 1
     426:	11 f4       	brne	.+4      	; 0x42c <drivers+0x8>
	{
		PORTB |= (1 << PB4) ;
     428:	2c 9a       	sbi	0x05, 4	; 5
     42a:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     42c:	2c 98       	cbi	0x05, 4	; 5
     42e:	08 95       	ret

00000430 <SPI_handler_0>:
		}else if (vals->ctrl_type == PWM)
		{
			vals->u8_duty_cycle = i16_data_received;
		}
	}
}
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
     436:	6c ee       	ldi	r22, 0xEC	; 236
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 06 0b 	call	0x160c	; 0x160c <Set_ADC_Channel_ext>
     440:	21 e0       	ldi	r18, 0x01	; 1
     442:	43 e0       	ldi	r20, 0x03	; 3
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	69 ee       	ldi	r22, 0xE9	; 233
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	8c ee       	ldi	r24, 0xEC	; 236
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <spi_trancieve>
     452:	e9 ee       	ldi	r30, 0xE9	; 233
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	61 81       	ldd	r22, Z+1	; 0x01
     458:	6f 71       	andi	r22, 0x1F	; 31
     45a:	61 83       	std	Z+1, r22	; 0x01
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	76 2f       	mov	r23, r22
     460:	66 27       	eor	r22, r22
     462:	82 81       	ldd	r24, Z+2	; 0x02
     464:	68 2b       	or	r22, r24
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	ce 01       	movw	r24, r28
     46a:	8e d7       	rcall	.+3868   	; 0x1388 <handle_current_sensor>
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <SPI_handler_1>:
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
     478:	6c ee       	ldi	r22, 0xEC	; 236
     47a:	71 e0       	ldi	r23, 0x01	; 1
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	0e 94 06 0b 	call	0x160c	; 0x160c <Set_ADC_Channel_ext>
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	43 e0       	ldi	r20, 0x03	; 3
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	69 ee       	ldi	r22, 0xE9	; 233
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	8c ee       	ldi	r24, 0xEC	; 236
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 67 0d 	call	0x1ace	; 0x1ace <spi_trancieve>
     494:	e9 ee       	ldi	r30, 0xE9	; 233
     496:	f1 e0       	ldi	r31, 0x01	; 1
     498:	61 81       	ldd	r22, Z+1	; 0x01
     49a:	6f 71       	andi	r22, 0x1F	; 31
     49c:	61 83       	std	Z+1, r22	; 0x01
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	76 2f       	mov	r23, r22
     4a2:	66 27       	eor	r22, r22
     4a4:	82 81       	ldd	r24, Z+2	; 0x02
     4a6:	68 2b       	or	r22, r24
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	ce 01       	movw	r24, r28
     4ac:	6d d7       	rcall	.+3802   	; 0x1388 <handle_current_sensor>
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <SPI_handler_2>:
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	ec 01       	movw	r28, r24
     4ba:	6c ee       	ldi	r22, 0xEC	; 236
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	0e 94 06 0b 	call	0x160c	; 0x160c <Set_ADC_Channel_ext>
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	43 e0       	ldi	r20, 0x03	; 3
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	69 ee       	ldi	r22, 0xE9	; 233
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	8c ee       	ldi	r24, 0xEC	; 236
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <spi_trancieve>
     4d6:	e9 ee       	ldi	r30, 0xE9	; 233
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	61 81       	ldd	r22, Z+1	; 0x01
     4dc:	6f 71       	andi	r22, 0x1F	; 31
     4de:	61 83       	std	Z+1, r22	; 0x01
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	76 2f       	mov	r23, r22
     4e4:	66 27       	eor	r22, r22
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	68 2b       	or	r22, r24
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     4f2:	23 e3       	ldi	r18, 0x33	; 51
     4f4:	33 e3       	ldi	r19, 0x33	; 51
     4f6:	44 e8       	ldi	r20, 0x84	; 132
     4f8:	52 e4       	ldi	r21, 0x42	; 66
     4fa:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     4fe:	24 ea       	ldi	r18, 0xA4	; 164
     500:	30 e7       	ldi	r19, 0x70	; 112
     502:	4d eb       	ldi	r20, 0xBD	; 189
     504:	5e e3       	ldi	r21, 0x3E	; 62
     506:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subsf3>
     50a:	68 83       	st	Y, r22
     50c:	79 83       	std	Y+1, r23	; 0x01
     50e:	8a 83       	std	Y+2, r24	; 0x02
     510:	9b 83       	std	Y+3, r25	; 0x03
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <SPI_handler_4>:
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	6c ee       	ldi	r22, 0xEC	; 236
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	0e 94 06 0b 	call	0x160c	; 0x160c <Set_ADC_Channel_ext>
     528:	21 e0       	ldi	r18, 0x01	; 1
     52a:	43 e0       	ldi	r20, 0x03	; 3
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	69 ee       	ldi	r22, 0xE9	; 233
     530:	71 e0       	ldi	r23, 0x01	; 1
     532:	8c ee       	ldi	r24, 0xEC	; 236
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 67 0d 	call	0x1ace	; 0x1ace <spi_trancieve>
     53a:	e9 ee       	ldi	r30, 0xE9	; 233
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	61 81       	ldd	r22, Z+1	; 0x01
     540:	6f 71       	andi	r22, 0x1F	; 31
     542:	61 83       	std	Z+1, r22	; 0x01
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	76 2f       	mov	r23, r22
     548:	66 27       	eor	r22, r22
     54a:	82 81       	ldd	r24, Z+2	; 0x02
     54c:	68 2b       	or	r22, r24
     54e:	ce 01       	movw	r24, r28
     550:	97 d7       	rcall	.+3886   	; 0x1480 <handle_temp_sensor>
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <handle_can>:
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	8c 01       	movw	r16, r24
     562:	eb 01       	movw	r28, r22
     564:	cb 01       	movw	r24, r22
     566:	0e 94 82 0c 	call	0x1904	; 0x1904 <can_read_message_if_new>
     56a:	88 23       	and	r24, r24
     56c:	09 f4       	brne	.+2      	; 0x570 <handle_can+0x18>
     56e:	45 c0       	rjmp	.+138    	; 0x5fa <handle_can+0xa2>
     570:	f8 01       	movw	r30, r16
     572:	82 8d       	ldd	r24, Z+26	; 0x1a
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	09 f4       	brne	.+2      	; 0x57a <handle_can+0x22>
     578:	40 c0       	rjmp	.+128    	; 0x5fa <handle_can+0xa2>
     57a:	88 81       	ld	r24, Y
     57c:	99 81       	ldd	r25, Y+1	; 0x01
     57e:	80 32       	cpi	r24, 0x20	; 32
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	9f 07       	cpc	r25, r31
     584:	a9 f1       	breq	.+106    	; 0x5f0 <handle_can+0x98>
     586:	80 33       	cpi	r24, 0x30	; 48
     588:	92 40       	sbci	r25, 0x02	; 2
     58a:	b9 f5       	brne	.+110    	; 0x5fa <handle_can+0xa2>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	f8 01       	movw	r30, r16
     590:	83 8f       	std	Z+27, r24	; 0x1b
     592:	17 8e       	std	Z+31, r1	; 0x1f
     594:	89 e1       	ldi	r24, 0x19	; 25
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	97 8b       	std	Z+23, r25	; 0x17
     59a:	86 8b       	std	Z+22, r24	; 0x16
     59c:	8e 81       	ldd	r24, Y+6	; 0x06
     59e:	8b 30       	cpi	r24, 0x0B	; 11
     5a0:	60 f0       	brcs	.+24     	; 0x5ba <handle_can+0x62>
     5a2:	9d ec       	ldi	r25, 0xCD	; 205
     5a4:	89 9f       	mul	r24, r25
     5a6:	81 2d       	mov	r24, r1
     5a8:	11 24       	eor	r1, r1
     5aa:	86 95       	lsr	r24
     5ac:	86 95       	lsr	r24
     5ae:	86 95       	lsr	r24
     5b0:	83 8b       	std	Z+19, r24	; 0x13
     5b2:	8d e0       	ldi	r24, 0x0D	; 13
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	91 8f       	std	Z+25, r25	; 0x19
     5b8:	80 8f       	std	Z+24, r24	; 0x18
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	8a 31       	cpi	r24, 0x1A	; 26
     5be:	80 f0       	brcs	.+32     	; 0x5e0 <handle_can+0x88>
     5c0:	9d ec       	ldi	r25, 0xCD	; 205
     5c2:	89 9f       	mul	r24, r25
     5c4:	81 2d       	mov	r24, r1
     5c6:	11 24       	eor	r1, r1
     5c8:	86 95       	lsr	r24
     5ca:	86 95       	lsr	r24
     5cc:	86 95       	lsr	r24
     5ce:	f8 01       	movw	r30, r16
     5d0:	84 8b       	std	Z+20, r24	; 0x14
     5d2:	8d e0       	ldi	r24, 0x0D	; 13
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	91 8f       	std	Z+25, r25	; 0x19
     5d8:	80 8f       	std	Z+24, r24	; 0x18
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	8a 31       	cpi	r24, 0x1A	; 26
     5de:	10 f4       	brcc	.+4      	; 0x5e4 <handle_can+0x8c>
     5e0:	f8 01       	movw	r30, r16
     5e2:	14 8a       	std	Z+20, r1	; 0x14
     5e4:	8e 81       	ldd	r24, Y+6	; 0x06
     5e6:	8b 30       	cpi	r24, 0x0B	; 11
     5e8:	40 f4       	brcc	.+16     	; 0x5fa <handle_can+0xa2>
     5ea:	f8 01       	movw	r30, r16
     5ec:	13 8a       	std	Z+19, r1	; 0x13
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <handle_can+0xa2>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	f8 01       	movw	r30, r16
     5f4:	80 a3       	std	Z+32, r24	; 0x20
     5f6:	8d 81       	ldd	r24, Y+5	; 0x05
     5f8:	84 8f       	std	Z+28, r24	; 0x1c
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	08 95       	ret

00000604 <handle_motor_status_can_msg>:
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	07 ea       	ldi	r16, 0xA7	; 167
     612:	13 e0       	ldi	r17, 0x03	; 3
     614:	80 e5       	ldi	r24, 0x50	; 80
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	f8 01       	movw	r30, r16
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	80 83       	st	Z, r24
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	82 83       	std	Z+2, r24	; 0x02
     622:	89 a1       	ldd	r24, Y+33	; 0x21
     624:	83 83       	std	Z+3, r24	; 0x03
     626:	6f 81       	ldd	r22, Y+7	; 0x07
     628:	78 85       	ldd	r23, Y+8	; 0x08
     62a:	89 85       	ldd	r24, Y+9	; 0x09
     62c:	9a 85       	ldd	r25, Y+10	; 0x0a
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e2       	ldi	r20, 0x20	; 32
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     63a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fixsfsi>
     63e:	f8 01       	movw	r30, r16
     640:	64 83       	std	Z+4, r22	; 0x04
     642:	6f 85       	ldd	r22, Y+15	; 0x0f
     644:	78 89       	ldd	r23, Y+16	; 0x10
     646:	89 89       	ldd	r24, Y+17	; 0x11
     648:	9a 89       	ldd	r25, Y+18	; 0x12
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e2       	ldi	r20, 0x20	; 32
     650:	51 e4       	ldi	r21, 0x41	; 65
     652:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     656:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     65a:	f8 01       	movw	r30, r16
     65c:	76 83       	std	Z+6, r23	; 0x06
     65e:	65 83       	std	Z+5, r22	; 0x05
     660:	6b 89       	ldd	r22, Y+19	; 0x13
     662:	7c 89       	ldd	r23, Y+20	; 0x14
     664:	8d 89       	ldd	r24, Y+21	; 0x15
     666:	9e 89       	ldd	r25, Y+22	; 0x16
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	48 ec       	ldi	r20, 0xC8	; 200
     66e:	52 e4       	ldi	r21, 0x42	; 66
     670:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     674:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     678:	f8 01       	movw	r30, r16
     67a:	70 87       	std	Z+8, r23	; 0x08
     67c:	67 83       	std	Z+7, r22	; 0x07
     67e:	68 8d       	ldd	r22, Y+24	; 0x18
     680:	79 8d       	ldd	r23, Y+25	; 0x19
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     68a:	26 e6       	ldi	r18, 0x66	; 102
     68c:	36 e6       	ldi	r19, 0x66	; 102
     68e:	46 e6       	ldi	r20, 0x66	; 102
     690:	50 e4       	ldi	r21, 0x40	; 64
     692:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     696:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     69a:	f8 01       	movw	r30, r16
     69c:	61 87       	std	Z+9, r22	; 0x09
     69e:	8f 89       	ldd	r24, Y+23	; 0x17
     6a0:	82 87       	std	Z+10, r24	; 0x0a
     6a2:	c8 01       	movw	r24, r16
     6a4:	0e 94 c5 0c 	call	0x198a	; 0x198a <can_send_message>
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <handle_clutch_cmd_can_msg>:
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	ec e9       	ldi	r30, 0x9C	; 156
     6bc:	f3 e0       	ldi	r31, 0x03	; 3
     6be:	81 e5       	ldi	r24, 0x51	; 81
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	91 83       	std	Z+1, r25	; 0x01
     6c4:	80 83       	st	Z, r24
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	82 83       	std	Z+2, r24	; 0x02
     6ca:	8a a1       	ldd	r24, Y+34	; 0x22
     6cc:	83 83       	std	Z+3, r24	; 0x03
     6ce:	cf 01       	movw	r24, r30
     6d0:	0e 94 c5 0c 	call	0x198a	; 0x198a <can_send_message>
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(volatile ModuleValues_t vals)
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
	//printf("%i,%i,%u,%u,%u,%u,%i",(int16_t)(vals.f32_motor_current*1000),(int16_t)(vals.f32_batt_current*1000),(uint16_t)(vals.f32_batt_volt*1000),vals.u8_car_speed,vals.u8_duty_cycle,vals.u8_motor_temp,vals.i8_throttle_cmd);
	printf("\r\n");
     6e2:	83 e3       	ldi	r24, 0x33	; 51
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 03 10 	call	0x2006	; 0x2006 <puts>
	printf("batt curr : %i",(int16_t)(vals.f32_batt_current*10));
     6ea:	69 85       	ldd	r22, Y+9	; 0x09
     6ec:	7a 85       	ldd	r23, Y+10	; 0x0a
     6ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e2       	ldi	r20, 0x20	; 32
     6f8:	51 e4       	ldi	r21, 0x41	; 65
     6fa:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     6fe:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fixsfsi>
     702:	7f 93       	push	r23
     704:	6f 93       	push	r22
     706:	85 e3       	ldi	r24, 0x35	; 53
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     712:	8c e2       	ldi	r24, 0x2C	; 44
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf(" batt volt : %u",(uint16_t)(vals.f32_batt_volt*10));
     71a:	6d 85       	ldd	r22, Y+13	; 0x0d
     71c:	7e 85       	ldd	r23, Y+14	; 0x0e
     71e:	8f 85       	ldd	r24, Y+15	; 0x0f
     720:	98 89       	ldd	r25, Y+16	; 0x10
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e2       	ldi	r20, 0x20	; 32
     728:	51 e4       	ldi	r21, 0x41	; 65
     72a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     72e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     732:	7f 93       	push	r23
     734:	6f 93       	push	r22
     736:	84 e4       	ldi	r24, 0x44	; 68
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     742:	8c e2       	ldi	r24, 0x2C	; 44
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf(" mot curr : %i",(int16_t)(vals.f32_motor_current*10));
     74a:	6d 81       	ldd	r22, Y+5	; 0x05
     74c:	7e 81       	ldd	r23, Y+6	; 0x06
     74e:	8f 81       	ldd	r24, Y+7	; 0x07
     750:	98 85       	ldd	r25, Y+8	; 0x08
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 e2       	ldi	r20, 0x20	; 32
     758:	51 e4       	ldi	r21, 0x41	; 65
     75a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     75e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fixsfsi>
     762:	7f 93       	push	r23
     764:	6f 93       	push	r22
     766:	84 e5       	ldi	r24, 0x54	; 84
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     772:	8c e2       	ldi	r24, 0x2C	; 44
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf(" duty : %u",vals.u8_duty_cycle);
     77a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	83 e6       	ldi	r24, 0x63	; 99
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     78c:	8c e2       	ldi	r24, 0x2C	; 44
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	if (vals.u8_accel_cmd > 0)
     794:	88 8d       	ldd	r24, Y+24	; 0x18
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	88 23       	and	r24, r24
     7a2:	71 f0       	breq	.+28     	; 0x7c0 <send_uart+0xe6>
	{
		printf(" cmd : %u",vals.u8_accel_cmd);
     7a4:	88 8d       	ldd	r24, Y+24	; 0x18
     7a6:	1f 92       	push	r1
     7a8:	8f 93       	push	r24
     7aa:	8e e6       	ldi	r24, 0x6E	; 110
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	9f 93       	push	r25
     7b0:	8f 93       	push	r24
     7b2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	11 c0       	rjmp	.+34     	; 0x7e2 <send_uart+0x108>
	}else
	{
		printf(" cmd : %i",-(int8_t)vals.u8_brake_cmd);
     7c0:	89 8d       	ldd	r24, Y+25	; 0x19
     7c2:	99 27       	eor	r25, r25
     7c4:	81 95       	neg	r24
     7c6:	0c f4       	brge	.+2      	; 0x7ca <send_uart+0xf0>
     7c8:	90 95       	com	r25
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	88 e7       	ldi	r24, 0x78	; 120
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
	}
	printf(",");
     7e2:	8c e2       	ldi	r24, 0x2C	; 44
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf("speed km/h : %u",(uint16_t)(vals.u16_car_speed*3.6));
     7ea:	6e 89       	ldd	r22, Y+22	; 0x16
     7ec:	7f 89       	ldd	r23, Y+23	; 0x17
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     7f6:	26 e6       	ldi	r18, 0x66	; 102
     7f8:	36 e6       	ldi	r19, 0x66	; 102
     7fa:	46 e6       	ldi	r20, 0x66	; 102
     7fc:	50 e4       	ldi	r21, 0x40	; 64
     7fe:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     802:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     806:	7f 93       	push	r23
     808:	6f 93       	push	r22
     80a:	82 e8       	ldi	r24, 0x82	; 130
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     816:	8c e2       	ldi	r24, 0x2C	; 44
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf(" gear req : %u",vals.gear_required);
     81e:	8a a1       	ldd	r24, Y+34	; 0x22
     820:	1f 92       	push	r1
     822:	8f 93       	push	r24
     824:	82 e9       	ldi	r24, 0x92	; 146
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     830:	8c e2       	ldi	r24, 0x2C	; 44
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf(" gear status : %u",vals.gear_status);
     838:	89 a1       	ldd	r24, Y+33	; 0x21
     83a:	1f 92       	push	r1
     83c:	8f 93       	push	r24
     83e:	81 ea       	ldi	r24, 0xA1	; 161
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	9f 93       	push	r25
     844:	8f 93       	push	r24
     846:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     84a:	8c e2       	ldi	r24, 0x2C	; 44
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf(" ctrl mode (0:Cur, 1:PWM) : %u",vals.ctrl_type);
     852:	8c a1       	ldd	r24, Y+36	; 0x24
     854:	1f 92       	push	r1
     856:	8f 93       	push	r24
     858:	83 eb       	ldi	r24, 0xB3	; 179
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
	printf(",");
     864:	8c e2       	ldi	r24, 0x2C	; 44
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <putchar>
	printf(" motor mode : %u",vals.motor_status);
     86c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     86e:	1f 92       	push	r1
     870:	8f 93       	push	r24
     872:	82 ed       	ldi	r24, 0xD2	; 210
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	9f 93       	push	r25
     878:	8f 93       	push	r24
     87a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
}
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(volatile ModuleValues_t vals)
{	
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     896:	8f 8d       	ldd	r24, Y+31	; 0x1f
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	51 f1       	breq	.+84     	; 0x8f0 <manage_LEDs+0x62>
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <manage_LEDs+0x1a>
     89e:	88 23       	and	r24, r24
     8a0:	49 f0       	breq	.+18     	; 0x8b4 <manage_LEDs+0x26>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	d9 f0       	breq	.+54     	; 0x8dc <manage_LEDs+0x4e>
     8a6:	41 c0       	rjmp	.+130    	; 0x92a <manage_LEDs+0x9c>
     8a8:	84 30       	cpi	r24, 0x04	; 4
     8aa:	b1 f1       	breq	.+108    	; 0x918 <manage_LEDs+0x8a>
     8ac:	58 f1       	brcs	.+86     	; 0x904 <manage_LEDs+0x76>
     8ae:	85 30       	cpi	r24, 0x05	; 5
     8b0:	59 f0       	breq	.+22     	; 0x8c8 <manage_LEDs+0x3a>
     8b2:	3b c0       	rjmp	.+118    	; 0x92a <manage_LEDs+0x9c>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     8b4:	80 e4       	ldi	r24, 0x40	; 64
     8b6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_off(LED_RED);
     8ba:	80 e2       	ldi	r24, 0x20	; 32
     8bc:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     8c0:	80 e8       	ldi	r24, 0x80	; 128
     8c2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <rgbled_turn_on>
		break ;
     8c6:	31 c0       	rjmp	.+98     	; 0x92a <manage_LEDs+0x9c>
		
		case ENGAGE :
			rgbled_turn_off(LED_RED);
     8c8:	80 e2       	ldi	r24, 0x20	; 32
     8ca:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     8ce:	80 e4       	ldi	r24, 0x40	; 64
     8d0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <rgbled_turn_on>
			rgbled_turn_on(LED_BLUE);
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <rgbled_turn_on>
		break ;
     8da:	27 c0       	rjmp	.+78     	; 0x92a <manage_LEDs+0x9c>
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     8dc:	80 e2       	ldi	r24, 0x20	; 32
     8de:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8e2:	80 e8       	ldi	r24, 0x80	; 128
     8e4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     8e8:	80 e4       	ldi	r24, 0x40	; 64
     8ea:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <rgbled_toggle>
		break;
     8ee:	1d c0       	rjmp	.+58     	; 0x92a <manage_LEDs+0x9c>
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     8f0:	80 e2       	ldi	r24, 0x20	; 32
     8f2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8f6:	80 e8       	ldi	r24, 0x80	; 128
     8f8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     8fc:	80 e4       	ldi	r24, 0x40	; 64
     8fe:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <rgbled_toggle>
		break;
     902:	13 c0       	rjmp	.+38     	; 0x92a <manage_LEDs+0x9c>
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     904:	80 e2       	ldi	r24, 0x20	; 32
     906:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     90a:	80 e8       	ldi	r24, 0x80	; 128
     90c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     910:	80 e4       	ldi	r24, 0x40	; 64
     912:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <rgbled_turn_on>
		break;
     916:	09 c0       	rjmp	.+18     	; 0x92a <manage_LEDs+0x9c>
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     918:	80 e4       	ldi	r24, 0x40	; 64
     91a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     91e:	80 e8       	ldi	r24, 0x80	; 128
     920:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <rgbled_turn_on>
		break;
	}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <speed_init>:
static uint16_t u16_speed_array [4];

void speed_init()
{
	//pin
	DDRD &= ~(1<<PD0); //define pin as input
     930:	50 98       	cbi	0x0a, 0	; 10
	PORTD &= ~(1<<PD0); //no pull-up 
     932:	58 98       	cbi	0x0b, 0	; 11
	//int
	EIMSK &= ~(1<<INT0) ; // interrupt disable to prevent interrupt raise during init
     934:	e8 98       	cbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00)|(1<<ISC01); // interrupt on rising edge
     936:	e9 e6       	ldi	r30, 0x69	; 105
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	83 60       	ori	r24, 0x03	; 3
     93e:	80 83       	st	Z, r24
	EIFR |= (1<<INTF0) ; // clear flag
     940:	e0 9a       	sbi	0x1c, 0	; 28
	EIMSK |= (1<<INT0) ; // interrupt enable
     942:	e8 9a       	sbi	0x1d, 0	; 29
     944:	08 95       	ret

00000946 <handle_speed_sensor>:
		u16_speed_array[n] = 0;
	}
}

void handle_speed_sensor(volatile uint16_t *u16_speed, volatile uint16_t *u16_counter) // period in ms
{
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
	//uint8_t u8_new_speed = (uint8_t)(DISTANCE/(*u16_counter); // speed calculated in mm/ms
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	//static uint8_t u8_array_pointer_old = 0;
	//static uint8_t u8_array_pointer_new = 1;
	
	if (*u16_counter > 100)
     94e:	fb 01       	movw	r30, r22
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	25 36       	cpi	r18, 0x65	; 101
     956:	31 05       	cpc	r19, r1
     958:	b8 f0       	brcs	.+46     	; 0x988 <handle_speed_sensor+0x42>
     95a:	eb 01       	movw	r28, r22
     95c:	8c 01       	movw	r16, r24
		}
		if (u8_array_pointer_old == 5)
		{
			u8_array_pointer_old = 0;
		}*/
		*u16_speed = (uint16_t)(f32_speed_ratio/((float)*u16_counter));
     95e:	60 81       	ld	r22, Z
     960:	71 81       	ldd	r23, Z+1	; 0x01
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	74 e6       	ldi	r23, 0x64	; 100
     972:	88 e8       	ldi	r24, 0x88	; 136
     974:	95 e4       	ldi	r25, 0x45	; 69
     976:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     97a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     97e:	f8 01       	movw	r30, r16
     980:	71 83       	std	Z+1, r23	; 0x01
     982:	60 83       	st	Z, r22
		//printf("\r%u %u\n", *u16_speed, *u16_counter);
		*u16_counter = 0 ;
     984:	19 82       	std	Y+1, r1	; 0x01
     986:	18 82       	st	Y, r1
	}	
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <compute_synch_duty>:

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	1f 92       	push	r1
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	69 01       	movw	r12, r18
     9a8:	7a 01       	movw	r14, r20
	uint8_t Duty = 50 ;
	if (gear == GEAR1)
     9aa:	61 30       	cpi	r22, 0x01	; 1
     9ac:	01 f5       	brne	.+64     	; 0x9ee <compute_synch_duty+0x5c>
	{
		Duty = (speed_10ms*DUTY_CALC1/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5		
     9ae:	69 81       	ldd	r22, Y+1	; 0x01
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__floatsisf>
     9ba:	2f e7       	ldi	r18, 0x7F	; 127
     9bc:	33 ea       	ldi	r19, 0xA3	; 163
     9be:	47 e5       	ldi	r20, 0x57	; 87
     9c0:	5e e3       	ldi	r21, 0x3E	; 62
     9c2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     9c6:	a7 01       	movw	r20, r14
     9c8:	96 01       	movw	r18, r12
     9ca:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	48 ec       	ldi	r20, 0xC8	; 200
     9d4:	52 e4       	ldi	r21, 0x42	; 66
     9d6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	48 e4       	ldi	r20, 0x48	; 72
     9e0:	52 e4       	ldi	r21, 0x42	; 66
     9e2:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__addsf3>
     9e6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     9ea:	86 2f       	mov	r24, r22
     9ec:	23 c0       	rjmp	.+70     	; 0xa34 <compute_synch_duty+0xa2>
	}
	if (gear == GEAR2)
     9ee:	62 30       	cpi	r22, 0x02	; 2
     9f0:	01 f5       	brne	.+64     	; 0xa32 <compute_synch_duty+0xa0>
	{
		Duty = (speed_10ms*DUTY_CALC2/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
     9f2:	69 81       	ldd	r22, Y+1	; 0x01
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__floatsisf>
     9fe:	2d e3       	ldi	r18, 0x3D	; 61
     a00:	32 e0       	ldi	r19, 0x02	; 2
     a02:	4a e8       	ldi	r20, 0x8A	; 138
     a04:	5c e3       	ldi	r21, 0x3C	; 60
     a06:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	48 ec       	ldi	r20, 0xC8	; 200
     a18:	52 e4       	ldi	r21, 0x42	; 66
     a1a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	48 e4       	ldi	r20, 0x48	; 72
     a24:	52 e4       	ldi	r21, 0x42	; 66
     a26:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__addsf3>
     a2a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__fixunssfsi>
     a2e:	86 2f       	mov	r24, r22
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <compute_synch_duty+0xa2>
	}	
}

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
	uint8_t Duty = 50 ;
     a32:	82 e3       	ldi	r24, 0x32	; 50
	if (gear == GEAR2)
	{
		Duty = (speed_10ms*DUTY_CALC2/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
	}
	return Duty ;
}
     a34:	0f 90       	pop	r0
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <state_handler>:

static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	ec 01       	movw	r28, r24
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a4e:	68 85       	ldd	r22, Y+8	; 0x08
     a50:	79 85       	ldd	r23, Y+9	; 0x09
     a52:	8a 85       	ldd	r24, Y+10	; 0x0a
     a54:	9b 85       	ldd	r25, Y+11	; 0x0b
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e7       	ldi	r20, 0x70	; 112
     a5c:	51 e4       	ldi	r21, 0x41	; 65
     a5e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__gesf2>
     a62:	88 23       	and	r24, r24
     a64:	8c f1       	brlt	.+98     	; 0xac8 <state_handler+0x84>
     a66:	68 85       	ldd	r22, Y+8	; 0x08
     a68:	79 85       	ldd	r23, Y+9	; 0x09
     a6a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	48 ec       	ldi	r20, 0xC8	; 200
     a74:	52 e4       	ldi	r21, 0x42	; 66
     a76:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__cmpsf2>
     a7a:	88 23       	and	r24, r24
     a7c:	0c f4       	brge	.+2      	; 0xa80 <state_handler+0x3c>
     a7e:	2a c1       	rjmp	.+596    	; 0xcd4 <state_handler+0x290>
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	25 c0       	rjmp	.+74     	; 0xace <state_handler+0x8a>
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     a84:	68 85       	ldd	r22, Y+8	; 0x08
     a86:	79 85       	ldd	r23, Y+9	; 0x09
     a88:	8a 85       	ldd	r24, Y+10	; 0x0a
     a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	4c e5       	ldi	r20, 0x5C	; 92
     a92:	52 e4       	ldi	r21, 0x42	; 66
     a94:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__gesf2>
     a98:	18 16       	cp	r1, r24
     a9a:	c4 f4       	brge	.+48     	; 0xacc <state_handler+0x88>
	{
		b_major_fault = 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <b_major_fault>
	}
	
	switch(vals->motor_status)
     aa2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	09 f4       	brne	.+2      	; 0xaaa <state_handler+0x66>
     aa8:	bc c0       	rjmp	.+376    	; 0xc22 <state_handler+0x1de>
     aaa:	30 f4       	brcc	.+12     	; 0xab8 <state_handler+0x74>
     aac:	88 23       	and	r24, r24
     aae:	09 f1       	breq	.+66     	; 0xaf2 <state_handler+0xae>
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	09 f4       	brne	.+2      	; 0xab6 <state_handler+0x72>
     ab4:	8e c0       	rjmp	.+284    	; 0xbd2 <state_handler+0x18e>
     ab6:	f0 c0       	rjmp	.+480    	; 0xc98 <state_handler+0x254>
     ab8:	84 30       	cpi	r24, 0x04	; 4
     aba:	09 f4       	brne	.+2      	; 0xabe <state_handler+0x7a>
     abc:	e2 c0       	rjmp	.+452    	; 0xc82 <state_handler+0x23e>
     abe:	60 f1       	brcs	.+88     	; 0xb18 <state_handler+0xd4>
     ac0:	85 30       	cpi	r24, 0x05	; 5
     ac2:	09 f4       	brne	.+2      	; 0xac6 <state_handler+0x82>
     ac4:	4c c0       	rjmp	.+152    	; 0xb5e <state_handler+0x11a>
     ac6:	e8 c0       	rjmp	.+464    	; 0xc98 <state_handler+0x254>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     ac8:	10 e0       	ldi	r17, 0x00	; 0
     aca:	01 c0       	rjmp	.+2      	; 0xace <state_handler+0x8a>
     acc:	11 e0       	ldi	r17, 0x01	; 1
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
	{
		b_major_fault = 1;
	}
	
	switch(vals->motor_status)
     ace:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	09 f4       	brne	.+2      	; 0xad6 <state_handler+0x92>
     ad4:	a7 c0       	rjmp	.+334    	; 0xc24 <state_handler+0x1e0>
     ad6:	30 f4       	brcc	.+12     	; 0xae4 <state_handler+0xa0>
     ad8:	88 23       	and	r24, r24
     ada:	61 f0       	breq	.+24     	; 0xaf4 <state_handler+0xb0>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	09 f4       	brne	.+2      	; 0xae2 <state_handler+0x9e>
     ae0:	79 c0       	rjmp	.+242    	; 0xbd4 <state_handler+0x190>
     ae2:	db c0       	rjmp	.+438    	; 0xc9a <state_handler+0x256>
     ae4:	84 30       	cpi	r24, 0x04	; 4
     ae6:	09 f4       	brne	.+2      	; 0xaea <state_handler+0xa6>
     ae8:	c2 c0       	rjmp	.+388    	; 0xc6e <state_handler+0x22a>
     aea:	b8 f0       	brcs	.+46     	; 0xb1a <state_handler+0xd6>
     aec:	85 30       	cpi	r24, 0x05	; 5
     aee:	c1 f1       	breq	.+112    	; 0xb60 <state_handler+0x11c>
     af0:	d4 c0       	rjmp	.+424    	; 0xc9a <state_handler+0x256>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     af2:	11 e0       	ldi	r17, 0x01	; 1
	
	switch(vals->motor_status)
	{
		case OFF:
			//transition 1
			if (vals->u16_watchdog_can > 0 && b_board_powered)
     af4:	8e 89       	ldd	r24, Y+22	; 0x16
     af6:	9f 89       	ldd	r25, Y+23	; 0x17
     af8:	89 2b       	or	r24, r25
     afa:	21 f0       	breq	.+8      	; 0xb04 <state_handler+0xc0>
     afc:	11 23       	and	r17, r17
     afe:	11 f0       	breq	.+4      	; 0xb04 <state_handler+0xc0>
			{
				vals->motor_status = IDLE;
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	8a 8f       	std	Y+26, r24	; 0x1a
			}
			//During
			drivers(0);//drivers shutdown
     b04:	80 e0       	ldi	r24, 0x00	; 0
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     b06:	8e dc       	rcall	.-1764   	; 0x424 <drivers>
     b08:	1e 8e       	std	Y+30, r1	; 0x1e
			vals->u8_brake_cmd = 0;
     b0a:	eb da       	rcall	.-2602   	; 0xe2 <reset_I>
			vals->u8_accel_cmd = 0;
     b0c:	1c 8a       	std	Y+20, r1	; 0x14
			vals->u8_duty_cycle = 50;
     b0e:	1b 8a       	std	Y+19, r1	; 0x13
     b10:	82 e3       	ldi	r24, 0x32	; 50
			vals->gear_required = NEUTRAL ;
     b12:	8d 8b       	std	Y+21, r24	; 0x15
		
		break;
     b14:	1d 8e       	std	Y+29, r1	; 0x1d
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     b16:	c1 c0       	rjmp	.+386    	; 0xc9a <state_handler+0x256>
		
		break;
		
		case IDLE: 
		
			if (vals->pwtrain_type == BELT)
     b18:	11 e0       	ldi	r17, 0x01	; 1
     b1a:	88 a1       	ldd	r24, Y+32	; 0x20
     b1c:	81 11       	cpse	r24, r1
			{
				//transition 7
				if (vals->u8_brake_cmd > 0)
     b1e:	0e c0       	rjmp	.+28     	; 0xb3c <state_handler+0xf8>
     b20:	8c 89       	ldd	r24, Y+20	; 0x14
     b22:	88 23       	and	r24, r24
				{
					vals->motor_status = BRAKE;
     b24:	11 f0       	breq	.+4      	; 0xb2a <state_handler+0xe6>
     b26:	82 e0       	ldi	r24, 0x02	; 2
				}
				//transition 5
				if (vals->u8_accel_cmd > 0)
     b28:	8a 8f       	std	Y+26, r24	; 0x1a
     b2a:	8b 89       	ldd	r24, Y+19	; 0x13
     b2c:	88 23       	and	r24, r24
				{
					vals->motor_status = ACCEL;
     b2e:	11 f0       	breq	.+4      	; 0xb34 <state_handler+0xf0>
				}
				drivers(1);//drivers enable
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	8a 8f       	std	Y+26, r24	; 0x1a
				controller(vals); //current loop running with 0 torque
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	76 dc       	rcall	.-1812   	; 0x424 <drivers>
     b38:	ce 01       	movw	r24, r28
				//(integrator naturally following the speed of the car as it decreases, to prevent a big step at the next acceleration.)
			}
			
			if (vals->pwtrain_type == GEAR)
     b3a:	f7 da       	rcall	.-2578   	; 0x12a <controller>
     b3c:	88 a1       	ldd	r24, Y+32	; 0x20
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	09 f0       	breq	.+2      	; 0xb44 <state_handler+0x100>
			{
				//transition 5
				if (vals->u8_accel_cmd > 0 || vals->u8_brake_cmd > 0)
     b42:	ab c0       	rjmp	.+342    	; 0xc9a <state_handler+0x256>
     b44:	8b 89       	ldd	r24, Y+19	; 0x13
     b46:	81 11       	cpse	r24, r1
     b48:	03 c0       	rjmp	.+6      	; 0xb50 <state_handler+0x10c>
     b4a:	8c 89       	ldd	r24, Y+20	; 0x14
				{
					vals->motor_status = ENGAGE;
     b4c:	88 23       	and	r24, r24
				}
				drivers(0); //disable
     b4e:	11 f0       	breq	.+4      	; 0xb54 <state_handler+0x110>
     b50:	85 e0       	ldi	r24, 0x05	; 5
				vals->gear_required = NEUTRAL ;
				reset_I();
     b52:	8a 8f       	std	Y+26, r24	; 0x1a
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	66 dc       	rcall	.-1844   	; 0x424 <drivers>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     b58:	1d 8e       	std	Y+29, r1	; 0x1d
			}
			
		break;
		
		case ENGAGE: // /!\ TODO : with the two gears, all turning motion has to be inverted for the inner gear.
			drivers(1);
     b5a:	c3 da       	rcall	.-2682   	; 0xe2 <reset_I>
     b5c:	9e c0       	rjmp	.+316    	; 0xc9a <state_handler+0x256>
     b5e:	11 e0       	ldi	r17, 0x01	; 1
			vals->gear_required = GEAR1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
			vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, vals->gear_required, vals->f32_batt_volt) ; //Setting duty
     b62:	60 dc       	rcall	.-1856   	; 0x424 <drivers>
     b64:	01 e0       	ldi	r16, 0x01	; 1
     b66:	0d 8f       	std	Y+29, r16	; 0x1d
     b68:	28 85       	ldd	r18, Y+8	; 0x08
     b6a:	39 85       	ldd	r19, Y+9	; 0x09
     b6c:	4a 85       	ldd	r20, Y+10	; 0x0a
     b6e:	5b 85       	ldd	r21, Y+11	; 0x0b
			set_I(vals->u8_duty_cycle) ; //set integrator
     b70:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b72:	89 89       	ldd	r24, Y+17	; 0x11
     b74:	9a 89       	ldd	r25, Y+18	; 0x12
			save_ctrl_type = vals->ctrl_type ; // PWM type ctrl is needed only for the engagement process. The mode will be reverted to previous in ACCEL and BRAKE modes
     b76:	0d df       	rcall	.-486    	; 0x992 <compute_synch_duty>
			vals->ctrl_type = PWM ;
     b78:	8d 8b       	std	Y+21, r24	; 0x15
			controller(vals) ; //speed up motor to synch speed
     b7a:	8d 89       	ldd	r24, Y+21	; 0x15
     b7c:	bb da       	rcall	.-2698   	; 0xf4 <set_I>
     b7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
			//transition 9, GEAR
			if (vals->u8_brake_cmd > 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     b80:	0f 8f       	std	Y+31, r16	; 0x1f
     b82:	ce 01       	movw	r24, r28
     b84:	d2 da       	rcall	.-2652   	; 0x12a <controller>
     b86:	8c 89       	ldd	r24, Y+20	; 0x14
     b88:	88 23       	and	r24, r24
     b8a:	49 f0       	breq	.+18     	; 0xb9e <state_handler+0x15a>
     b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b90:	98 13       	cpse	r25, r24
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <state_handler+0x15a>
			{
				vals->motor_status = BRAKE;
     b94:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b96:	88 23       	and	r24, r24
			}
			//transition 10, GEAR
			if (vals->u8_accel_cmd > 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     b98:	11 f0       	breq	.+4      	; 0xb9e <state_handler+0x15a>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	8a 8f       	std	Y+26, r24	; 0x1a
     b9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ba0:	88 23       	and	r24, r24
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <state_handler+0x172>
     ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba8:	98 13       	cpse	r25, r24
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <state_handler+0x172>
			{
				vals->motor_status = ACCEL;
     bac:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bae:	88 23       	and	r24, r24
			}
			//transition 11, GEAR
			if (vals->u8_accel_cmd == 0 && vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <state_handler+0x172>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	8a 8f       	std	Y+26, r24	; 0x1a
     bb6:	8b 89       	ldd	r24, Y+19	; 0x13
     bb8:	81 11       	cpse	r24, r1
     bba:	6f c0       	rjmp	.+222    	; 0xc9a <state_handler+0x256>
     bbc:	8c 89       	ldd	r24, Y+20	; 0x14
     bbe:	81 11       	cpse	r24, r1
     bc0:	6c c0       	rjmp	.+216    	; 0xc9a <state_handler+0x256>
     bc2:	88 8d       	ldd	r24, Y+24	; 0x18
     bc4:	99 8d       	ldd	r25, Y+25	; 0x19
			{
				vals->motor_status = IDLE;
     bc6:	89 2b       	or	r24, r25
     bc8:	09 f0       	breq	.+2      	; 0xbcc <state_handler+0x188>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     bca:	67 c0       	rjmp	.+206    	; 0xc9a <state_handler+0x256>
			}
		break;
		
		case ACCEL:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 10)
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8a 8f       	std	Y+26, r24	; 0x1a
     bd0:	64 c0       	rjmp	.+200    	; 0xc9a <state_handler+0x256>
     bd2:	11 e0       	ldi	r17, 0x01	; 1
			{
				vals->u8_accel_cmd = 0;// goes here
     bd4:	8e 89       	ldd	r24, Y+22	; 0x16
			}
			
			//vals->ctrl_type = save_ctrl_type ;
			vals->ctrl_type = CURRENT;
     bd6:	9f 89       	ldd	r25, Y+23	; 0x17
			controller(vals);
     bd8:	40 97       	sbiw	r24, 0x10	; 16
     bda:	08 f4       	brcc	.+2      	; 0xbde <state_handler+0x19a>
     bdc:	1b 8a       	std	Y+19, r1	; 0x13
			
			//transition 6
			if (vals->u8_accel_cmd == 0 && vals->u16_watchdog_throttle == 0)
     bde:	1f 8e       	std	Y+31, r1	; 0x1f
     be0:	ce 01       	movw	r24, r28
     be2:	a3 da       	rcall	.-2746   	; 0x12a <controller>
     be4:	8b 89       	ldd	r24, Y+19	; 0x13
     be6:	81 11       	cpse	r24, r1
     be8:	06 c0       	rjmp	.+12     	; 0xbf6 <state_handler+0x1b2>
     bea:	88 8d       	ldd	r24, Y+24	; 0x18
			{
				vals->motor_status = IDLE;
     bec:	99 8d       	ldd	r25, Y+25	; 0x19
     bee:	89 2b       	or	r24, r25
			}
			//transition 12, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <state_handler+0x1b2>
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8a 8f       	std	Y+26, r24	; 0x1a
     bf6:	88 a1       	ldd	r24, Y+32	; 0x20
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	29 f4       	brne	.+10     	; 0xc06 <state_handler+0x1c2>
			{
				vals->motor_status = ENGAGE;//goes here
     bfc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bfe:	81 11       	cpse	r24, r1
			}
			//transition 14, GEAR
			if (vals->pwtrain_type == GEAR && vals->u8_brake_cmd > 0 && vals->u8_accel_cmd == 0)
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <state_handler+0x1c2>
     c02:	85 e0       	ldi	r24, 0x05	; 5
     c04:	8a 8f       	std	Y+26, r24	; 0x1a
     c06:	88 a1       	ldd	r24, Y+32	; 0x20
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <state_handler+0x1ca>
     c0c:	46 c0       	rjmp	.+140    	; 0xc9a <state_handler+0x256>
     c0e:	8c 89       	ldd	r24, Y+20	; 0x14
     c10:	88 23       	and	r24, r24
     c12:	09 f4       	brne	.+2      	; 0xc16 <state_handler+0x1d2>
			{
				vals->motor_status = BRAKE;//goes here
     c14:	42 c0       	rjmp	.+132    	; 0xc9a <state_handler+0x256>
     c16:	8b 89       	ldd	r24, Y+19	; 0x13
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     c18:	81 11       	cpse	r24, r1
			}
		break;
		
		case BRAKE:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 10)
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <state_handler+0x256>
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	8a 8f       	std	Y+26, r24	; 0x1a
     c20:	3c c0       	rjmp	.+120    	; 0xc9a <state_handler+0x256>
			{
				vals->u8_brake_cmd = 0;
     c22:	11 e0       	ldi	r17, 0x01	; 1
			}
			//vals->ctrl_type = save_ctrl_type ;
			vals->ctrl_type = CURRENT ;
     c24:	8e 89       	ldd	r24, Y+22	; 0x16
			controller(vals); //negative throttle cmd
     c26:	9f 89       	ldd	r25, Y+23	; 0x17
     c28:	40 97       	sbiw	r24, 0x10	; 16
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <state_handler+0x1ea>
			//transition 8
			if (vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     c2c:	1c 8a       	std	Y+20, r1	; 0x14
     c2e:	1f 8e       	std	Y+31, r1	; 0x1f
     c30:	ce 01       	movw	r24, r28
     c32:	7b da       	rcall	.-2826   	; 0x12a <controller>
     c34:	8c 89       	ldd	r24, Y+20	; 0x14
     c36:	81 11       	cpse	r24, r1
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <state_handler+0x202>
			{
				vals->motor_status = IDLE;
     c3a:	88 8d       	ldd	r24, Y+24	; 0x18
     c3c:	99 8d       	ldd	r25, Y+25	; 0x19
			}
			//transition 13, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     c3e:	89 2b       	or	r24, r25
     c40:	11 f4       	brne	.+4      	; 0xc46 <state_handler+0x202>
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	8a 8f       	std	Y+26, r24	; 0x1a
     c46:	88 a1       	ldd	r24, Y+32	; 0x20
     c48:	81 30       	cpi	r24, 0x01	; 1
			{
				vals->motor_status = ENGAGE;
     c4a:	29 f4       	brne	.+10     	; 0xc56 <state_handler+0x212>
     c4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
			}
			//transition 15, GEAR
			if (vals->pwtrain_type == GEAR && vals->u8_brake_cmd == 0 && vals->u8_accel_cmd > 0)
     c4e:	81 11       	cpse	r24, r1
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <state_handler+0x212>
     c52:	85 e0       	ldi	r24, 0x05	; 5
     c54:	8a 8f       	std	Y+26, r24	; 0x1a
     c56:	88 a1       	ldd	r24, Y+32	; 0x20
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	f9 f4       	brne	.+62     	; 0xc9a <state_handler+0x256>
     c5c:	8c 89       	ldd	r24, Y+20	; 0x14
     c5e:	81 11       	cpse	r24, r1
			{
				vals->motor_status = ACCEL;
     c60:	1c c0       	rjmp	.+56     	; 0xc9a <state_handler+0x256>
     c62:	8b 89       	ldd	r24, Y+19	; 0x13
			}
		break;
		
		case ERR:
			//transition 4
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
     c64:	88 23       	and	r24, r24
     c66:	c9 f0       	breq	.+50     	; 0xc9a <state_handler+0x256>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	8a 8f       	std	Y+26, r24	; 0x1a
     c6c:	16 c0       	rjmp	.+44     	; 0xc9a <state_handler+0x256>
			{
				vals->motor_status = IDLE;
     c6e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <b_major_fault>
     c72:	81 11       	cpse	r24, r1
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <state_handler+0x240>
			//transition 4
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
			{
				vals->motor_status = IDLE;
			}
			drivers(0);//drivers shutdown
     c76:	88 89       	ldd	r24, Y+16	; 0x10
     c78:	84 36       	cpi	r24, 0x64	; 100
     c7a:	20 f4       	brcc	.+8      	; 0xc84 <state_handler+0x240>
			vals->b_driver_status = 0;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
			vals->gear_required = NEUTRAL;
     c7e:	8a 8f       	std	Y+26, r24	; 0x1a
			reset_I(); //reset integrator
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <state_handler+0x240>
     c82:	11 e0       	ldi	r17, 0x01	; 1
			vals->u8_brake_cmd = 0;
     c84:	80 e0       	ldi	r24, 0x00	; 0
			vals->u8_accel_cmd = 0;
     c86:	ce db       	rcall	.-2148   	; 0x424 <drivers>
			vals->u8_duty_cycle = 50;
     c88:	1e 8e       	std	Y+30, r1	; 0x1e
     c8a:	1d 8e       	std	Y+29, r1	; 0x1d
		break;	
     c8c:	2a da       	rcall	.-2988   	; 0xe2 <reset_I>
static uint8_t b_major_fault = 0;
static ControlType_t save_ctrl_type ;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     c8e:	1c 8a       	std	Y+20, r1	; 0x14
			vals->u8_accel_cmd = 0;
			vals->u8_duty_cycle = 50;
		break;	
	}
	
	if ((vals->motor_status == IDLE || vals->motor_status == ACCEL || vals->motor_status == BRAKE || vals->motor_status == ENGAGE) && (vals->u16_watchdog_can == 0 || !b_board_powered))
     c90:	1b 8a       	std	Y+19, r1	; 0x13
     c92:	82 e3       	ldi	r24, 0x32	; 50
     c94:	8d 8b       	std	Y+21, r24	; 0x15
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <state_handler+0x256>
     c98:	11 e0       	ldi	r17, 0x01	; 1
     c9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	49 f0       	breq	.+18     	; 0xcb2 <state_handler+0x26e>
     ca0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	31 f0       	breq	.+12     	; 0xcb2 <state_handler+0x26e>
     ca6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	19 f0       	breq	.+6      	; 0xcb2 <state_handler+0x26e>
     cac:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cae:	85 30       	cpi	r24, 0x05	; 5
     cb0:	39 f4       	brne	.+14     	; 0xcc0 <state_handler+0x27c>
     cb2:	8e 89       	ldd	r24, Y+22	; 0x16
	{
		// transition 2
		vals->motor_status = OFF;
     cb4:	9f 89       	ldd	r25, Y+23	; 0x17
	}
	
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
     cb6:	89 2b       	or	r24, r25
     cb8:	11 f0       	breq	.+4      	; 0xcbe <state_handler+0x27a>
     cba:	11 11       	cpse	r17, r1
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <state_handler+0x27c>
     cbe:	1a 8e       	std	Y+26, r1	; 0x1a
     cc0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <b_major_fault>
	{
		//transition 3
		vals->motor_status = ERR;
     cc4:	81 11       	cpse	r24, r1
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <state_handler+0x28a>
	}
     cc8:	88 89       	ldd	r24, Y+16	; 0x10

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     cca:	84 36       	cpi	r24, 0x64	; 100
     ccc:	88 f0       	brcs	.+34     	; 0xcf0 <state_handler+0x2ac>
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	8a 8f       	std	Y+26, r24	; 0x1a
     cd2:	0e c0       	rjmp	.+28     	; 0xcf0 <state_handler+0x2ac>
     cd4:	68 81       	ld	r22, Y
     cd6:	79 81       	ldd	r23, Y+1	; 0x01
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	9b 81       	ldd	r25, Y+3	; 0x03
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e7       	ldi	r20, 0x70	; 112
     ce2:	51 e4       	ldi	r21, 0x41	; 65
     ce4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__gesf2>
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		//transition 3
		vals->motor_status = ERR;
	}
     ce8:	88 23       	and	r24, r24
     cea:	0c f0       	brlt	.+2      	; 0xcee <state_handler+0x2aa>
     cec:	d7 ce       	rjmp	.-594    	; 0xa9c <state_handler+0x58>
     cee:	ca ce       	rjmp	.-620    	; 0xa84 <state_handler+0x40>
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <pwm_init>:

#include "pwm.h"
#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     cfe:	8e b1       	in	r24, 0x0e	; 14
     d00:	87 7e       	andi	r24, 0xE7	; 231
     d02:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     d04:	8d b1       	in	r24, 0x0d	; 13
     d06:	88 61       	ori	r24, 0x18	; 24
     d08:	8d b9       	out	0x0d, r24	; 13
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
		
	}else{//UNIPOLAR
		
		//Timer 3 phase correct pwm, TOP at ICR (mode 10)
		TCCR3B |= (1<<WGM33);
     d0a:	a1 e9       	ldi	r26, 0x91	; 145
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	8c 91       	ld	r24, X
     d10:	80 61       	ori	r24, 0x10	; 16
     d12:	8c 93       	st	X, r24
		TCCR3B &= ~(1<<WGM32);
     d14:	8c 91       	ld	r24, X
     d16:	87 7f       	andi	r24, 0xF7	; 247
     d18:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     d1a:	e0 e9       	ldi	r30, 0x90	; 144
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     d24:	80 81       	ld	r24, Z
     d26:	8e 7f       	andi	r24, 0xFE	; 254
     d28:	80 83       	st	Z, r24
		
		// Set OC3A on Compare Match when up-counting. clear OC3A on Compare Match when downcounting.
		TCCR3A |= (1<<COM3A1);
     d2a:	80 81       	ld	r24, Z
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     d30:	80 81       	ld	r24, Z
     d32:	8f 7b       	andi	r24, 0xBF	; 191
     d34:	80 83       	st	Z, r24
		
		// Set OC3B on Compare Match when up-counting. Clear OC3B on Compare Match when downcounting.
		TCCR3A |= (1<<COM3B1);
     d36:	80 81       	ld	r24, Z
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3B0);
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7e       	andi	r24, 0xEF	; 239
     d40:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		TCCR3B |= (1<<CS30);
     d42:	8c 91       	ld	r24, X
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     d48:	8c 91       	ld	r24, X
     d4a:	89 7f       	andi	r24, 0xF9	; 249
     d4c:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x85; //30kHz  0x85, 20kHz : 0x100
     d4e:	c6 e9       	ldi	r28, 0x96	; 150
     d50:	d0 e0       	ldi	r29, 0x00	; 0
     d52:	85 e8       	ldi	r24, 0x85	; 133
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	99 83       	std	Y+1, r25	; 0x01
     d58:	88 83       	st	Y, r24
		
		//initialising compare registers at Duty cycle 50%
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3
     d5a:	68 81       	ld	r22, Y
     d5c:	79 81       	ldd	r23, Y+1	; 0x01
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatunsisf>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	5f e3       	ldi	r21, 0x3F	; 63
     d6e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__mulsf3>
     d72:	de d7       	rcall	.+4028   	; 0x1d30 <__fixsfsi>
     d74:	e8 e9       	ldi	r30, 0x98	; 152
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	71 83       	std	Z+1, r23	; 0x01
     d7a:	60 83       	st	Z, r22
		OCR3B = ICR3-OCR3A ; //PWM_PE4
     d7c:	88 81       	ld	r24, Y
     d7e:	99 81       	ldd	r25, Y+1	; 0x01
     d80:	20 81       	ld	r18, Z
     d82:	31 81       	ldd	r19, Z+1	; 0x01
     d84:	82 1b       	sub	r24, r18
     d86:	93 0b       	sbc	r25, r19
     d88:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d8c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     d96:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <tx0_Head>
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	9f 71       	andi	r25, 0x1F	; 31
     d9e:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <tx0_Tail>
     da2:	92 17       	cp	r25, r18
     da4:	e1 f3       	breq	.-8      	; 0xd9e <uart0_putc+0x8>
     da6:	e9 2f       	mov	r30, r25
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	e6 5e       	subi	r30, 0xE6	; 230
     dac:	fb 4f       	sbci	r31, 0xFB	; 251
     dae:	80 83       	st	Z, r24
     db0:	2f b7       	in	r18, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <tx0_Head>
     db8:	e1 ec       	ldi	r30, 0xC1	; 193
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 62       	ori	r24, 0x20	; 32
     dc0:	80 83       	st	Z, r24
     dc2:	2f bf       	out	0x3f, r18	; 63
     dc4:	08 95       	ret

00000dc6 <uart1_putc>:
     dc6:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <tx1_Head>
     dca:	9f 5f       	subi	r25, 0xFF	; 255
     dcc:	9f 71       	andi	r25, 0x1F	; 31
     dce:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <tx1_Tail>
     dd2:	92 17       	cp	r25, r18
     dd4:	e1 f3       	breq	.-8      	; 0xdce <uart1_putc+0x8>
     dd6:	e9 2f       	mov	r30, r25
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	eb 52       	subi	r30, 0x2B	; 43
     ddc:	fc 4f       	sbci	r31, 0xFC	; 252
     dde:	80 83       	st	Z, r24
     de0:	2f b7       	in	r18, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <tx1_Head>
     de8:	e9 ec       	ldi	r30, 0xC9	; 201
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 62       	ori	r24, 0x20	; 32
     df0:	80 83       	st	Z, r24
     df2:	2f bf       	out	0x3f, r18	; 63
     df4:	08 95       	ret

00000df6 <uart_putchar>:
     df6:	cf 93       	push	r28
     df8:	c8 2f       	mov	r28, r24
     dfa:	fb 01       	movw	r30, r22
     dfc:	84 85       	ldd	r24, Z+12	; 0x0c
     dfe:	95 85       	ldd	r25, Z+13	; 0x0d
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	39 f0       	breq	.+14     	; 0xe12 <uart_putchar+0x1c>
     e04:	ca 30       	cpi	r28, 0x0A	; 10
     e06:	11 f4       	brne	.+4      	; 0xe0c <uart_putchar+0x16>
     e08:	8d e0       	ldi	r24, 0x0D	; 13
     e0a:	c5 df       	rcall	.-118    	; 0xd96 <uart0_putc>
     e0c:	8c 2f       	mov	r24, r28
     e0e:	c3 df       	rcall	.-122    	; 0xd96 <uart0_putc>
     e10:	06 c0       	rjmp	.+12     	; 0xe1e <uart_putchar+0x28>
     e12:	ca 30       	cpi	r28, 0x0A	; 10
     e14:	11 f4       	brne	.+4      	; 0xe1a <uart_putchar+0x24>
     e16:	8d e0       	ldi	r24, 0x0D	; 13
     e18:	d6 df       	rcall	.-84     	; 0xdc6 <uart1_putc>
     e1a:	8c 2f       	mov	r24, r28
     e1c:	d4 df       	rcall	.-88     	; 0xdc6 <uart1_putc>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <uart0_getData>:
     e26:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <rx0_Tail>
     e2a:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <rx0_Head>
     e2e:	89 17       	cp	r24, r25
     e30:	61 f0       	breq	.+24     	; 0xe4a <uart0_getData+0x24>
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	8f 71       	andi	r24, 0x1F	; 31
     e36:	e8 2f       	mov	r30, r24
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	ee 54       	subi	r30, 0x4E	; 78
     e3c:	fc 4f       	sbci	r31, 0xFC	; 252
     e3e:	90 81       	ld	r25, Z
     e40:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <rx0_Tail>
     e44:	89 2f       	mov	r24, r25
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	08 95       	ret
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	08 95       	ret

00000e50 <uart1_getData>:
     e50:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <rx1_Tail>
     e54:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <rx1_Head>
     e58:	89 17       	cp	r24, r25
     e5a:	61 f0       	breq	.+24     	; 0xe74 <uart1_getData+0x24>
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	8f 71       	andi	r24, 0x1F	; 31
     e60:	e8 2f       	mov	r30, r24
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	ea 50       	subi	r30, 0x0A	; 10
     e66:	fc 4f       	sbci	r31, 0xFC	; 252
     e68:	90 81       	ld	r25, Z
     e6a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <rx1_Tail>
     e6e:	89 2f       	mov	r24, r25
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	08 95       	ret
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	9f ef       	ldi	r25, 0xFF	; 255
     e78:	08 95       	ret

00000e7a <uart_getchar>:
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	fc 01       	movw	r30, r24
     e80:	84 85       	ldd	r24, Z+12	; 0x0c
     e82:	95 85       	ldd	r25, Z+13	; 0x0d
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	41 f0       	breq	.+16     	; 0xe98 <uart_getchar+0x1e>
     e88:	ce df       	rcall	.-100    	; 0xe26 <uart0_getData>
     e8a:	ec 01       	movw	r28, r24
     e8c:	99 23       	and	r25, r25
     e8e:	e4 f3       	brlt	.-8      	; 0xe88 <uart_getchar+0xe>
     e90:	82 df       	rcall	.-252    	; 0xd96 <uart0_putc>
     e92:	ce 01       	movw	r24, r28
     e94:	99 27       	eor	r25, r25
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <uart_getchar+0x2c>
     e98:	db df       	rcall	.-74     	; 0xe50 <uart1_getData>
     e9a:	ec 01       	movw	r28, r24
     e9c:	99 23       	and	r25, r25
     e9e:	e4 f3       	brlt	.-8      	; 0xe98 <uart_getchar+0x1e>
     ea0:	92 df       	rcall	.-220    	; 0xdc6 <uart1_putc>
     ea2:	ce 01       	movw	r24, r28
     ea4:	99 27       	eor	r25, r25
     ea6:	99 27       	eor	r25, r25
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     eae:	0f 93       	push	r16
     eb0:	0f b7       	in	r16, 0x3f	; 63
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <tx0_Tail>
     eba:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <tx0_Head>
     ebe:	e3 95       	inc	r30
     ec0:	ef 71       	andi	r30, 0x1F	; 31
     ec2:	ef 13       	cpse	r30, r31
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <USART0_TX_CONTINUE>
     ec6:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     eca:	ff 7d       	andi	r31, 0xDF	; 223
     ecc:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000ed0 <USART0_TX_CONTINUE>:
     ed0:	e0 93 d3 03 	sts	0x03D3, r30	; 0x8003d3 <tx0_Tail>
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	e6 5e       	subi	r30, 0xE6	; 230
     ed8:	fb 4f       	sbci	r31, 0xFB	; 251
     eda:	e0 81       	ld	r30, Z
     edc:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000ee0 <USART0_TX_EXIT>:
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	0f bf       	out	0x3f, r16	; 63
     ee6:	0f 91       	pop	r16
     ee8:	18 95       	reti

00000eea <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     eea:	0f 93       	push	r16
     eec:	0f b7       	in	r16, 0x3f	; 63
     eee:	9f 93       	push	r25
     ef0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
     ef8:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <rx0_Head>
     efc:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <rx0_Tail>
     f00:	e3 95       	inc	r30
     f02:	ef 71       	andi	r30, 0x1F	; 31
     f04:	fe 17       	cp	r31, r30
     f06:	31 f0       	breq	.+12     	; 0xf14 <USART0_RX_EXIT>
     f08:	e0 93 16 04 	sts	0x0416, r30	; 0x800416 <rx0_Head>
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	ee 54       	subi	r30, 0x4E	; 78
     f10:	fc 4f       	sbci	r31, 0xFC	; 252
     f12:	90 83       	st	Z, r25

00000f14 <USART0_RX_EXIT>:
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	9f 91       	pop	r25
     f1a:	0f bf       	out	0x3f, r16	; 63
     f1c:	0f 91       	pop	r16
     f1e:	18 95       	reti

00000f20 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f20:	0f 93       	push	r16
     f22:	0f b7       	in	r16, 0x3f	; 63
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
     f28:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <tx1_Tail>
     f2c:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <tx1_Head>
     f30:	e3 95       	inc	r30
     f32:	ef 71       	andi	r30, 0x1F	; 31
     f34:	ef 13       	cpse	r30, r31
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <USART1_TX_CONTINUE>
     f38:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     f3c:	ff 7d       	andi	r31, 0xDF	; 223
     f3e:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000f42 <USART1_TX_CONTINUE>:
     f42:	e0 93 17 04 	sts	0x0417, r30	; 0x800417 <tx1_Tail>
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	eb 52       	subi	r30, 0x2B	; 43
     f4a:	fc 4f       	sbci	r31, 0xFC	; 252
     f4c:	e0 81       	ld	r30, Z
     f4e:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000f52 <USART1_TX_EXIT>:
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	0f bf       	out	0x3f, r16	; 63
     f58:	0f 91       	pop	r16
     f5a:	18 95       	reti

00000f5c <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f5c:	0f 93       	push	r16
     f5e:	0f b7       	in	r16, 0x3f	; 63
     f60:	9f 93       	push	r25
     f62:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <rx1_Head>
     f6e:	f0 91 d2 03 	lds	r31, 0x03D2	; 0x8003d2 <rx1_Tail>
     f72:	e3 95       	inc	r30
     f74:	ef 71       	andi	r30, 0x1F	; 31
     f76:	fe 17       	cp	r31, r30
     f78:	31 f0       	breq	.+12     	; 0xf86 <USART1_RX_EXIT>
     f7a:	e0 93 18 04 	sts	0x0418, r30	; 0x800418 <rx1_Head>
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	ea 50       	subi	r30, 0x0A	; 10
     f82:	fc 4f       	sbci	r31, 0xFC	; 252
     f84:	90 83       	st	Z, r25

00000f86 <USART1_RX_EXIT>:
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	9f 91       	pop	r25
     f8c:	0f bf       	out	0x3f, r16	; 63
     f8e:	0f 91       	pop	r16
     f90:	18 95       	reti

00000f92 <timer1_init_ts>:
//for speed
volatile uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     f92:	e1 e8       	ldi	r30, 0x81	; 129
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	83 60       	ori	r24, 0x03	; 3
     f9a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     f9c:	80 81       	ld	r24, Z
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     fa2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fa6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     faa:	ef e6       	ldi	r30, 0x6F	; 111
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
     fb4:	8d e7       	ldi	r24, 0x7D	; 125
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fbc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     fc0:	08 95       	ret

00000fc2 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     fc2:	84 b5       	in	r24, 0x24	; 36
     fc4:	85 60       	ori	r24, 0x05	; 5
     fc6:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     fc8:	84 b5       	in	r24, 0x24	; 36
     fca:	88 60       	ori	r24, 0x08	; 8
     fcc:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     fce:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     fd0:	ee e6       	ldi	r30, 0x6E	; 110
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	82 60       	ori	r24, 0x02	; 2
     fd8:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
     fda:	87 e2       	ldi	r24, 0x27	; 39
     fdc:	87 bd       	out	0x27, r24	; 39
     fde:	08 95       	ret

00000fe0 <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
     fe0:	f8 94       	cli
     fe2:	55 d5       	rcall	.+2730   	; 0x1a8e <rgbled_init>
	can_init(0,0);
     fe4:	8a de       	rcall	.-748    	; 0xcfa <pwm_init>
     fe6:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     fe8:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
     fee:	35 d4       	rcall	.+2154   	; 0x185a <can_init>
     ff0:	d0 df       	rcall	.-96     	; 0xf92 <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
     ff2:	e7 df       	rcall	.-50     	; 0xfc2 <timer0_init_ts>
     ff4:	9d dc       	rcall	.-1734   	; 0x930 <speed_init>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     ff8:	59 d5       	rcall	.+2738   	; 0x1aac <spi_init>
     ffa:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     ffe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
    1002:	88 e9       	ldi	r24, 0x98	; 152
    1004:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
    1008:	ea e3       	ldi	r30, 0x3A	; 58
    100a:	f4 e0       	ldi	r31, 0x04	; 4
    100c:	84 e0       	ldi	r24, 0x04	; 4
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
    1012:	82 83       	std	Z+2, r24	; 0x02
	drivers(0);
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
	sei();
    1018:	03 da       	rcall	.-3066   	; 0x420 <drivers_init>
		if (b_send_can)
		{
			if (b_select_can_msg)// sending one or the other
			{
				handle_motor_status_can_msg(ComValues); //send motor status on CAN
				b_select_can_msg = 1;
    101a:	80 e0       	ldi	r24, 0x00	; 0
	drivers(0);
	sei();
	
    while (1){
		
		handle_can(&ComValues, &rxFrame); //receive CAN
    101c:	03 da       	rcall	.-3066   	; 0x424 <drivers>
    101e:	78 94       	sei
    1020:	c1 e0       	ldi	r28, 0x01	; 1
    1022:	66 e8       	ldi	r22, 0x86	; 134
    1024:	73 e0       	ldi	r23, 0x03	; 3
    1026:	82 e1       	ldi	r24, 0x12	; 18
		//receive_uart(&ComValues);
		
		if (b_send_can)
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	96 da       	rcall	.-2772   	; 0x558 <handle_can>
    102c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <b_send_can>
    1030:	88 23       	and	r24, r24
		{
			if (b_select_can_msg)// sending one or the other
    1032:	09 f4       	brne	.+2      	; 0x1036 <main+0x56>
    1034:	41 c0       	rjmp	.+130    	; 0x10b8 <main+0xd8>
    1036:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <b_select_can_msg>
			{
				handle_motor_status_can_msg(ComValues); //send motor status on CAN
    103a:	88 23       	and	r24, r24
    103c:	f1 f0       	breq	.+60     	; 0x107a <main+0x9a>
    103e:	8d b7       	in	r24, 0x3d	; 61
    1040:	9e b7       	in	r25, 0x3e	; 62
    1042:	81 97       	sbiw	r24, 0x21	; 33
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	9e bf       	out	0x3e, r25	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	8d bf       	out	0x3d, r24	; 61
    104e:	ad b7       	in	r26, 0x3d	; 61
    1050:	be b7       	in	r27, 0x3e	; 62
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	81 e2       	ldi	r24, 0x21	; 33
    1056:	e2 e1       	ldi	r30, 0x12	; 18
    1058:	f1 e0       	ldi	r31, 0x01	; 1
    105a:	01 90       	ld	r0, Z+
    105c:	0d 92       	st	X+, r0
    105e:	8a 95       	dec	r24
				b_select_can_msg = 1;
    1060:	e1 f7       	brne	.-8      	; 0x105a <main+0x7a>
    1062:	d0 da       	rcall	.-2656   	; 0x604 <handle_motor_status_can_msg>
    1064:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <b_select_can_msg>
    1068:	8d b7       	in	r24, 0x3d	; 61
    106a:	9e b7       	in	r25, 0x3e	; 62
    106c:	81 96       	adiw	r24, 0x21	; 33
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	9e bf       	out	0x3e, r25	; 62
    1074:	0f be       	out	0x3f, r0	; 63
			}else{
				handle_clutch_cmd_can_msg(ComValues); // send clutch command on CAN
    1076:	8d bf       	out	0x3d, r24	; 61
    1078:	1d c0       	rjmp	.+58     	; 0x10b4 <main+0xd4>
    107a:	8d b7       	in	r24, 0x3d	; 61
    107c:	9e b7       	in	r25, 0x3e	; 62
    107e:	81 97       	sbiw	r24, 0x21	; 33
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	9e bf       	out	0x3e, r25	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	8d bf       	out	0x3d, r24	; 61
    108a:	ad b7       	in	r26, 0x3d	; 61
    108c:	be b7       	in	r27, 0x3e	; 62
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	81 e2       	ldi	r24, 0x21	; 33
    1092:	e2 e1       	ldi	r30, 0x12	; 18
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	01 90       	ld	r0, Z+
    1098:	0d 92       	st	X+, r0
    109a:	8a 95       	dec	r24
				b_select_can_msg = 0;
    109c:	e1 f7       	brne	.-8      	; 0x1096 <main+0xb6>
    109e:	09 db       	rcall	.-2542   	; 0x6b2 <handle_clutch_cmd_can_msg>
    10a0:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <b_select_can_msg>
    10a4:	8d b7       	in	r24, 0x3d	; 61
    10a6:	9e b7       	in	r25, 0x3e	; 62
    10a8:	81 96       	adiw	r24, 0x21	; 33
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	9e bf       	out	0x3e, r25	; 62
			}
			b_send_can = 0;
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	8d bf       	out	0x3d, r24	; 61
		}
		
		if (b_send_uart)
    10b4:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <b_send_can>
    10b8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <b_send_uart>
    10bc:	88 23       	and	r24, r24
		{
			send_uart(ComValues);
    10be:	09 f4       	brne	.+2      	; 0x10c2 <main+0xe2>
    10c0:	b0 cf       	rjmp	.-160    	; 0x1022 <main+0x42>
    10c2:	8d b7       	in	r24, 0x3d	; 61
    10c4:	9e b7       	in	r25, 0x3e	; 62
    10c6:	81 97       	sbiw	r24, 0x21	; 33
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	9e bf       	out	0x3e, r25	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	8d bf       	out	0x3d, r24	; 61
    10d2:	ad b7       	in	r26, 0x3d	; 61
    10d4:	be b7       	in	r27, 0x3e	; 62
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	81 e2       	ldi	r24, 0x21	; 33
    10da:	e2 e1       	ldi	r30, 0x12	; 18
    10dc:	f1 e0       	ldi	r31, 0x01	; 1
    10de:	01 90       	ld	r0, Z+
    10e0:	0d 92       	st	X+, r0
    10e2:	8a 95       	dec	r24
			b_send_uart = 0;
    10e4:	e1 f7       	brne	.-8      	; 0x10de <main+0xfe>
    10e6:	f9 da       	rcall	.-2574   	; 0x6da <send_uart>
    10e8:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <b_send_uart>
    10ec:	8d b7       	in	r24, 0x3d	; 61
    10ee:	9e b7       	in	r25, 0x3e	; 62
    10f0:	81 96       	adiw	r24, 0x21	; 33
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	9e bf       	out	0x3e, r25	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	8d bf       	out	0x3d, r24	; 61
    10fc:	92 cf       	rjmp	.-220    	; 0x1022 <main+0x42>

000010fe <__vector_16>:
		}
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	0b b6       	in	r0, 0x3b	; 59
    110a:	0f 92       	push	r0
    110c:	ef 92       	push	r14
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	2f 93       	push	r18
    1114:	3f 93       	push	r19
    1116:	4f 93       	push	r20
    1118:	5f 93       	push	r21
    111a:	6f 93       	push	r22
    111c:	7f 93       	push	r23
    111e:	8f 93       	push	r24
    1120:	9f 93       	push	r25
    1122:	af 93       	push	r26
    1124:	bf 93       	push	r27
    1126:	ef 93       	push	r30
    1128:	ff 93       	push	r31
	
	if (systic_counter_fast == 7) // every 41ms
    112a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <systic_counter_fast>
    112e:	87 30       	cpi	r24, 0x07	; 7
    1130:	09 f0       	breq	.+2      	; 0x1134 <__stack+0x35>
    1132:	47 c0       	rjmp	.+142    	; 0x11c2 <__stack+0xc3>
	{
		state_handler(&ComValues);
    1134:	82 e1       	ldi	r24, 0x12	; 18
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	85 dc       	rcall	.-1782   	; 0xa44 <state_handler>
		b_send_can = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <b_send_can>
		b_send_uart = 1;
    1140:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <b_send_uart>
		if (ComValues.u16_watchdog_can != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    1144:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ComValues+0x16>
    1148:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ComValues+0x17>
    114c:	89 2b       	or	r24, r25
    114e:	59 f0       	breq	.+22     	; 0x1166 <__stack+0x67>
    1150:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ComValues+0x1b>
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	39 f4       	brne	.+14     	; 0x1166 <__stack+0x67>
		{
			ComValues.u16_watchdog_can -- ;
    1158:	e2 e1       	ldi	r30, 0x12	; 18
    115a:	f1 e0       	ldi	r31, 0x01	; 1
    115c:	86 89       	ldd	r24, Z+22	; 0x16
    115e:	97 89       	ldd	r25, Z+23	; 0x17
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	97 8b       	std	Z+23, r25	; 0x17
    1164:	86 8b       	std	Z+22, r24	; 0x16
		}
		
		if (ComValues.u16_watchdog_throttle != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    1166:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ComValues+0x18>
    116a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ComValues+0x19>
    116e:	89 2b       	or	r24, r25
    1170:	61 f0       	breq	.+24     	; 0x118a <__stack+0x8b>
    1172:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ComValues+0x1b>
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	41 f4       	brne	.+16     	; 0x118a <__stack+0x8b>
		{
			ComValues.u16_watchdog_throttle -- ;
    117a:	e2 e1       	ldi	r30, 0x12	; 18
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	80 8d       	ldd	r24, Z+24	; 0x18
    1180:	91 8d       	ldd	r25, Z+25	; 0x19
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	91 8f       	std	Z+25, r25	; 0x19
    1186:	80 8f       	std	Z+24, r24	; 0x18
    1188:	08 c0       	rjmp	.+16     	; 0x119a <__stack+0x9b>
		}else if (ComValues.message_mode == UART)
    118a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ComValues+0x1b>
    118e:	81 11       	cpse	r24, r1
    1190:	04 c0       	rjmp	.+8      	; 0x119a <__stack+0x9b>
		{
			ComValues.u16_watchdog_throttle = 0 ;
    1192:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ComValues+0x19>
    1196:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ComValues+0x18>
		}
		
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 41) ;		
    119a:	e2 e1       	ldi	r30, 0x12	; 18
    119c:	f1 e0       	ldi	r31, 0x01	; 1
    119e:	00 85       	ldd	r16, Z+8	; 0x08
    11a0:	11 85       	ldd	r17, Z+9	; 0x09
    11a2:	22 85       	ldd	r18, Z+10	; 0x0a
    11a4:	33 85       	ldd	r19, Z+11	; 0x0b
    11a6:	44 81       	ldd	r20, Z+4	; 0x04
    11a8:	55 81       	ldd	r21, Z+5	; 0x05
    11aa:	66 81       	ldd	r22, Z+6	; 0x06
    11ac:	77 81       	ldd	r23, Z+7	; 0x07
    11ae:	0f 2e       	mov	r0, r31
    11b0:	f9 e2       	ldi	r31, 0x29	; 41
    11b2:	ef 2e       	mov	r14, r31
    11b4:	f0 2d       	mov	r31, r0
    11b6:	8e e1       	ldi	r24, 0x1E	; 30
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	cb d1       	rcall	.+918    	; 0x1552 <handle_joulemeter>
		systic_counter_fast = 0;
    11bc:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <systic_counter_fast>
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <__stack+0xc9>
	} else {
		systic_counter_fast ++;
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
    11c8:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <systic_counter_slow>
    11cc:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <systic_counter_slow+0x1>
    11d0:	84 36       	cpi	r24, 0x64	; 100
    11d2:	91 05       	cpc	r25, r1
    11d4:	01 f5       	brne	.+64     	; 0x1216 <__stack+0x117>
	{
		manage_LEDs(ComValues); //UM LED according to motor state
    11d6:	8d b7       	in	r24, 0x3d	; 61
    11d8:	9e b7       	in	r25, 0x3e	; 62
    11da:	81 97       	sbiw	r24, 0x21	; 33
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	9e bf       	out	0x3e, r25	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	8d bf       	out	0x3d, r24	; 61
    11e6:	ad b7       	in	r26, 0x3d	; 61
    11e8:	be b7       	in	r27, 0x3e	; 62
    11ea:	11 96       	adiw	r26, 0x01	; 1
    11ec:	81 e2       	ldi	r24, 0x21	; 33
    11ee:	e2 e1       	ldi	r30, 0x12	; 18
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	01 90       	ld	r0, Z+
    11f4:	0d 92       	st	X+, r0
    11f6:	8a 95       	dec	r24
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <__stack+0xf3>
    11fa:	49 db       	rcall	.-2414   	; 0x88e <manage_LEDs>
		systic_counter_slow = 0;
    11fc:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <systic_counter_slow+0x1>
    1200:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <systic_counter_slow>
    1204:	8d b7       	in	r24, 0x3d	; 61
    1206:	9e b7       	in	r25, 0x3e	; 62
    1208:	81 96       	adiw	r24, 0x21	; 33
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	9e bf       	out	0x3e, r25	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	8d bf       	out	0x3d, r24	; 61
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <__stack+0x121>
		} else {
		systic_counter_slow ++;
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <systic_counter_slow+0x1>
    121c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <systic_counter_slow>
	}
}
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ef 90       	pop	r14
    123e:	0f 90       	pop	r0
    1240:	0b be       	out	0x3b, r0	; 59
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	0b b6       	in	r0, 0x3b	; 59
    1258:	0f 92       	push	r0
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	4f 93       	push	r20
    1260:	5f 93       	push	r21
    1262:	6f 93       	push	r22
    1264:	7f 93       	push	r23
    1266:	8f 93       	push	r24
    1268:	9f 93       	push	r25
    126a:	af 93       	push	r26
    126c:	bf 93       	push	r27
    126e:	ef 93       	push	r30
    1270:	ff 93       	push	r31
	
	if (u16_speed_count < 3000 ) //after 5s with no magnet, speed = 0
    1272:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <u16_speed_count>
    1276:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <u16_speed_count+0x1>
    127a:	88 3b       	cpi	r24, 0xB8	; 184
    127c:	9b 40       	sbci	r25, 0x0B	; 11
    127e:	50 f4       	brcc	.+20     	; 0x1294 <__vector_12+0x48>
	{
		u16_speed_count ++ ;
    1280:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <u16_speed_count>
    1284:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <u16_speed_count+0x1>
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <u16_speed_count+0x1>
    128e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <u16_speed_count>
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <__vector_12+0x58>
	} else
	{
		ComValues.u16_car_speed = 0;
    1294:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ComValues+0x12>
    1298:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ComValues+0x11>
		u16_speed_count = 0;
    129c:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <u16_speed_count+0x1>
    12a0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <u16_speed_count>
	}
	
	if (u8_SPI_count == 4)
    12a4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <u8_SPI_count>
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	31 f4       	brne	.+12     	; 0x12b8 <__vector_12+0x6c>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
    12ac:	82 e2       	ldi	r24, 0x22	; 34
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	33 d9       	rcall	.-3482   	; 0x518 <SPI_handler_4>
		u8_SPI_count = 0 ;
    12b2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <u8_SPI_count>
    12b6:	12 c0       	rjmp	.+36     	; 0x12dc <__vector_12+0x90>
	}
	
	if (u8_SPI_count == 3)
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <__vector_12+0x78>
	{
		u8_SPI_count ++ ;
    12bc:	84 e0       	ldi	r24, 0x04	; 4
    12be:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <u8_SPI_count>
    12c2:	18 c0       	rjmp	.+48     	; 0x12f4 <__vector_12+0xa8>
	}
	
	if (u8_SPI_count == 2)
    12c4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <u8_SPI_count>
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	41 f4       	brne	.+16     	; 0x12dc <__vector_12+0x90>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
    12cc:	8a e1       	ldi	r24, 0x1A	; 26
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	f1 d8       	rcall	.-3614   	; 0x4b4 <SPI_handler_2>
		u8_SPI_count ++ ;
    12d2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <u8_SPI_count>
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
    12dc:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <u8_SPI_count>
    12e0:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
    12e2:	41 f4       	brne	.+16     	; 0x12f4 <__vector_12+0xa8>
    12e4:	86 e1       	ldi	r24, 0x16	; 22
    12e6:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    12e8:	c4 d8       	rcall	.-3704   	; 0x472 <SPI_handler_1>
    12ea:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <u8_SPI_count>
    12ee:	8f 5f       	subi	r24, 0xFF	; 255
    12f0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
    12f4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
    12f8:	81 11       	cpse	r24, r1
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <__vector_12+0xc0>
    12fc:	82 e1       	ldi	r24, 0x12	; 18
    12fe:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    1300:	97 d8       	rcall	.-3794   	; 0x430 <SPI_handler_0>
    1302:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <u8_SPI_count>
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <u8_SPI_count>
	}
}
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	bf 91       	pop	r27
    1312:	af 91       	pop	r26
    1314:	9f 91       	pop	r25
    1316:	8f 91       	pop	r24
    1318:	7f 91       	pop	r23
    131a:	6f 91       	pop	r22
    131c:	5f 91       	pop	r21
    131e:	4f 91       	pop	r20
    1320:	3f 91       	pop	r19
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0b be       	out	0x3b, r0	; 59
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	0f 90       	pop	r0
    132e:	1f 90       	pop	r1
    1330:	18 95       	reti

00001332 <__vector_1>:


ISR(INT0_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of the reed switch)
{
    1332:	1f 92       	push	r1
    1334:	0f 92       	push	r0
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	0f 92       	push	r0
    133a:	11 24       	eor	r1, r1
    133c:	0b b6       	in	r0, 0x3b	; 59
    133e:	0f 92       	push	r0
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
	handle_speed_sensor(&ComValues.u16_car_speed, &u16_speed_count);
    1358:	6f ee       	ldi	r22, 0xEF	; 239
    135a:	71 e0       	ldi	r23, 0x01	; 1
    135c:	83 e2       	ldi	r24, 0x23	; 35
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	f2 da       	rcall	.-2588   	; 0x946 <handle_speed_sensor>
	
}
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	7f 91       	pop	r23
    1370:	6f 91       	pop	r22
    1372:	5f 91       	pop	r21
    1374:	4f 91       	pop	r20
    1376:	3f 91       	pop	r19
    1378:	2f 91       	pop	r18
    137a:	0f 90       	pop	r0
    137c:	0b be       	out	0x3b, r0	; 59
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	0f 90       	pop	r0
    1384:	1f 90       	pop	r1
    1386:	18 95       	reti

00001388 <handle_current_sensor>:
#define CORRECTION_OFFSET_BAT 0.2
#define CORRECTION_OFFSET_MOT 0.2
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(volatile float *f32_current, uint16_t u16_ADC_reg, uint8_t u8_sensor_num)
{
    1388:	8f 92       	push	r8
    138a:	9f 92       	push	r9
    138c:	af 92       	push	r10
    138e:	bf 92       	push	r11
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <handle_current_sensor+0x1a>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <handle_current_sensor+0x1c>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8c 01       	movw	r16, r24
    13aa:	f4 2e       	mov	r15, r20
	volatile float f_new_current = ((((volatile float)u16_ADC_reg*5.0/4096.0) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY) ;// /3 because current passes 3x in transducer for more precision.
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	f0 d4       	rcall	.+2528   	; 0x1d92 <__floatunsisf>
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 ea       	ldi	r20, 0xA0	; 160
    13b8:	50 e4       	ldi	r21, 0x40	; 64
    13ba:	a1 d5       	rcall	.+2882   	; 0x1efe <__mulsf3>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	59 e3       	ldi	r21, 0x39	; 57
    13c4:	9c d5       	rcall	.+2872   	; 0x1efe <__mulsf3>
    13c6:	2e ea       	ldi	r18, 0xAE	; 174
    13c8:	37 e4       	ldi	r19, 0x47	; 71
    13ca:	41 e2       	ldi	r20, 0x21	; 33
    13cc:	50 e4       	ldi	r21, 0x40	; 64
    13ce:	df d3       	rcall	.+1982   	; 0x1b8e <__subsf3>
    13d0:	23 ec       	ldi	r18, 0xC3	; 195
    13d2:	34 e6       	ldi	r19, 0x64	; 100
    13d4:	4a e2       	ldi	r20, 0x2A	; 42
    13d6:	5d e3       	ldi	r21, 0x3D	; 61
    13d8:	43 d4       	rcall	.+2182   	; 0x1c60 <__divsf3>
    13da:	69 83       	std	Y+1, r22	; 0x01
    13dc:	7a 83       	std	Y+2, r23	; 0x02
    13de:	8b 83       	std	Y+3, r24	; 0x03
    13e0:	9c 83       	std	Y+4, r25	; 0x04
	if (u8_sensor_num)
    13e2:	ff 20       	and	r15, r15
    13e4:	71 f0       	breq	.+28     	; 0x1402 <handle_current_sensor+0x7a>
	{//batt
		f_new_current = (f_new_current+CORRECTION_OFFSET_BAT);// correction of offset
    13e6:	69 81       	ldd	r22, Y+1	; 0x01
    13e8:	7a 81       	ldd	r23, Y+2	; 0x02
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	2d ec       	ldi	r18, 0xCD	; 205
    13f0:	3c ec       	ldi	r19, 0xCC	; 204
    13f2:	4c e4       	ldi	r20, 0x4C	; 76
    13f4:	5e e3       	ldi	r21, 0x3E	; 62
    13f6:	cc d3       	rcall	.+1944   	; 0x1b90 <__addsf3>
    13f8:	69 83       	std	Y+1, r22	; 0x01
    13fa:	7a 83       	std	Y+2, r23	; 0x02
    13fc:	8b 83       	std	Y+3, r24	; 0x03
    13fe:	9c 83       	std	Y+4, r25	; 0x04
    1400:	0d c0       	rjmp	.+26     	; 0x141c <handle_current_sensor+0x94>
	}else{
		f_new_current = (f_new_current+CORRECTION_OFFSET_MOT);// correction of offset
    1402:	69 81       	ldd	r22, Y+1	; 0x01
    1404:	7a 81       	ldd	r23, Y+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	2d ec       	ldi	r18, 0xCD	; 205
    140c:	3c ec       	ldi	r19, 0xCC	; 204
    140e:	4c e4       	ldi	r20, 0x4C	; 76
    1410:	5e e3       	ldi	r21, 0x3E	; 62
    1412:	be d3       	rcall	.+1916   	; 0x1b90 <__addsf3>
    1414:	69 83       	std	Y+1, r22	; 0x01
    1416:	7a 83       	std	Y+2, r23	; 0x02
    1418:	8b 83       	std	Y+3, r24	; 0x03
    141a:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    141c:	f8 01       	movw	r30, r16
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	89 80       	ldd	r8, Y+1	; 0x01
    1428:	9a 80       	ldd	r9, Y+2	; 0x02
    142a:	ab 80       	ldd	r10, Y+3	; 0x03
    142c:	bc 80       	ldd	r11, Y+4	; 0x04
    142e:	26 e6       	ldi	r18, 0x66	; 102
    1430:	36 e6       	ldi	r19, 0x66	; 102
    1432:	46 e6       	ldi	r20, 0x66	; 102
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	63 d5       	rcall	.+2758   	; 0x1efe <__mulsf3>
    1438:	6b 01       	movw	r12, r22
    143a:	7c 01       	movw	r14, r24
    143c:	2d ec       	ldi	r18, 0xCD	; 205
    143e:	3c ec       	ldi	r19, 0xCC	; 204
    1440:	4c ec       	ldi	r20, 0xCC	; 204
    1442:	5d e3       	ldi	r21, 0x3D	; 61
    1444:	c5 01       	movw	r24, r10
    1446:	b4 01       	movw	r22, r8
    1448:	5a d5       	rcall	.+2740   	; 0x1efe <__mulsf3>
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	c7 01       	movw	r24, r14
    1450:	b6 01       	movw	r22, r12
    1452:	9e d3       	rcall	.+1852   	; 0x1b90 <__addsf3>
    1454:	f8 01       	movw	r30, r16
    1456:	60 83       	st	Z, r22
    1458:	71 83       	std	Z+1, r23	; 0x01
    145a:	82 83       	std	Z+2, r24	; 0x02
    145c:	93 83       	std	Z+3, r25	; 0x03
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	08 95       	ret

00001480 <handle_temp_sensor>:

void handle_temp_sensor(volatile uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
	float f_sens_volt = ((float)u16_ADC_reg*5.0/4096.0);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	7f d4       	rcall	.+2302   	; 0x1d92 <__floatunsisf>
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 ea       	ldi	r20, 0xA0	; 160
    149a:	50 e4       	ldi	r21, 0x40	; 64
    149c:	30 d5       	rcall	.+2656   	; 0x1efe <__mulsf3>
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	59 e3       	ldi	r21, 0x39	; 57
    14a6:	2b d5       	rcall	.+2646   	; 0x1efe <__mulsf3>
    14a8:	6b 01       	movw	r12, r22
    14aa:	7c 01       	movw	r14, r24
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    14ac:	2d ec       	ldi	r18, 0xCD	; 205
    14ae:	3c ec       	ldi	r19, 0xCC	; 204
    14b0:	4c e6       	ldi	r20, 0x6C	; 108
    14b2:	50 e4       	ldi	r21, 0x40	; 64
    14b4:	d1 d3       	rcall	.+1954   	; 0x1c58 <__cmpsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	74 f0       	brlt	.+28     	; 0x14d6 <handle_temp_sensor+0x56>
	{
		*u8_temp = (uint8_t)(20.0*f_sens_volt-22.0);
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 ea       	ldi	r20, 0xA0	; 160
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	c7 01       	movw	r24, r14
    14c4:	b6 01       	movw	r22, r12
    14c6:	1b d5       	rcall	.+2614   	; 0x1efe <__mulsf3>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 eb       	ldi	r20, 0xB0	; 176
    14ce:	51 e4       	ldi	r21, 0x41	; 65
    14d0:	5e d3       	rcall	.+1724   	; 0x1b8e <__subsf3>
    14d2:	33 d4       	rcall	.+2150   	; 0x1d3a <__fixunssfsi>
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    14d4:	68 83       	st	Y, r22
    14d6:	26 e6       	ldi	r18, 0x66	; 102
    14d8:	36 e6       	ldi	r19, 0x66	; 102
    14da:	46 e9       	ldi	r20, 0x96	; 150
    14dc:	50 e4       	ldi	r21, 0x40	; 64
    14de:	c7 01       	movw	r24, r14
    14e0:	b6 01       	movw	r22, r12
    14e2:	ba d3       	rcall	.+1908   	; 0x1c58 <__cmpsf2>
    14e4:	18 16       	cp	r1, r24
    14e6:	bc f0       	brlt	.+46     	; 0x1516 <handle_temp_sensor+0x96>
    14e8:	2d ec       	ldi	r18, 0xCD	; 205
    14ea:	3c ec       	ldi	r19, 0xCC	; 204
    14ec:	4c e6       	ldi	r20, 0x6C	; 108
    14ee:	50 e4       	ldi	r21, 0x40	; 64
    14f0:	c7 01       	movw	r24, r14
    14f2:	b6 01       	movw	r22, r12
    14f4:	00 d5       	rcall	.+2560   	; 0x1ef6 <__gesf2>
    14f6:	18 16       	cp	r1, r24
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    14f8:	74 f4       	brge	.+28     	; 0x1516 <handle_temp_sensor+0x96>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4e e5       	ldi	r20, 0x5E	; 94
    1500:	52 e4       	ldi	r21, 0x42	; 66
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	fb d4       	rcall	.+2550   	; 0x1efe <__mulsf3>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e8       	ldi	r19, 0x80	; 128
    150c:	4b e1       	ldi	r20, 0x1B	; 27
    150e:	53 e4       	ldi	r21, 0x43	; 67
    1510:	3e d3       	rcall	.+1660   	; 0x1b8e <__subsf3>
    1512:	13 d4       	rcall	.+2086   	; 0x1d3a <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
    1514:	68 83       	st	Y, r22
    1516:	26 e6       	ldi	r18, 0x66	; 102
    1518:	36 e6       	ldi	r19, 0x66	; 102
    151a:	46 e9       	ldi	r20, 0x96	; 150
    151c:	50 e4       	ldi	r21, 0x40	; 64
    151e:	c7 01       	movw	r24, r14
    1520:	b6 01       	movw	r22, r12
	{
		*u8_temp = (uint8_t)(200.0*f_sens_volt-840.0);
    1522:	e9 d4       	rcall	.+2514   	; 0x1ef6 <__gesf2>
    1524:	18 16       	cp	r1, r24
    1526:	74 f4       	brge	.+28     	; 0x1544 <handle_temp_sensor+0xc4>
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	48 e4       	ldi	r20, 0x48	; 72
    152e:	53 e4       	ldi	r21, 0x43	; 67
    1530:	c7 01       	movw	r24, r14
    1532:	b6 01       	movw	r22, r12
    1534:	e4 d4       	rcall	.+2504   	; 0x1efe <__mulsf3>
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	42 e5       	ldi	r20, 0x52	; 82
    153c:	54 e4       	ldi	r21, 0x44	; 68
    153e:	27 d3       	rcall	.+1614   	; 0x1b8e <__subsf3>
    1540:	fc d3       	rcall	.+2040   	; 0x1d3a <__fixunssfsi>
    1542:	68 83       	st	Y, r22
	}
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	08 95       	ret

00001552 <handle_joulemeter>:

void handle_joulemeter(volatile float *f32_energy, volatile float f32_bat_current, volatile float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    1552:	4f 92       	push	r4
    1554:	5f 92       	push	r5
    1556:	6f 92       	push	r6
    1558:	7f 92       	push	r7
    155a:	8f 92       	push	r8
    155c:	9f 92       	push	r9
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	28 97       	sbiw	r28, 0x08	; 8
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	6c 01       	movw	r12, r24
    1582:	49 83       	std	Y+1, r20	; 0x01
    1584:	5a 83       	std	Y+2, r21	; 0x02
    1586:	6b 83       	std	Y+3, r22	; 0x03
    1588:	7c 83       	std	Y+4, r23	; 0x04
    158a:	0d 83       	std	Y+5, r16	; 0x05
    158c:	1e 83       	std	Y+6, r17	; 0x06
    158e:	2f 83       	std	Y+7, r18	; 0x07
    1590:	38 87       	std	Y+8, r19	; 0x08
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    1592:	6d 81       	ldd	r22, Y+5	; 0x05
    1594:	7e 81       	ldd	r23, Y+6	; 0x06
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	98 85       	ldd	r25, Y+8	; 0x08
    159a:	29 81       	ldd	r18, Y+1	; 0x01
    159c:	3a 81       	ldd	r19, Y+2	; 0x02
    159e:	4b 81       	ldd	r20, Y+3	; 0x03
    15a0:	5c 81       	ldd	r21, Y+4	; 0x04
    15a2:	f6 01       	movw	r30, r12
    15a4:	80 80       	ld	r8, Z
    15a6:	91 80       	ldd	r9, Z+1	; 0x01
    15a8:	a2 80       	ldd	r10, Z+2	; 0x02
    15aa:	b3 80       	ldd	r11, Z+3	; 0x03
    15ac:	a8 d4       	rcall	.+2384   	; 0x1efe <__mulsf3>
    15ae:	2b 01       	movw	r4, r22
    15b0:	3c 01       	movw	r6, r24
    15b2:	6e 2d       	mov	r22, r14
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	eb d3       	rcall	.+2006   	; 0x1d92 <__floatunsisf>
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	c3 01       	movw	r24, r6
    15c2:	b2 01       	movw	r22, r4
    15c4:	9c d4       	rcall	.+2360   	; 0x1efe <__mulsf3>
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4a e7       	ldi	r20, 0x7A	; 122
    15cc:	54 e4       	ldi	r21, 0x44	; 68
    15ce:	48 d3       	rcall	.+1680   	; 0x1c60 <__divsf3>
    15d0:	a5 01       	movw	r20, r10
    15d2:	94 01       	movw	r18, r8
    15d4:	dd d2       	rcall	.+1466   	; 0x1b90 <__addsf3>
    15d6:	f6 01       	movw	r30, r12
    15d8:	60 83       	st	Z, r22
    15da:	71 83       	std	Z+1, r23	; 0x01
    15dc:	82 83       	std	Z+2, r24	; 0x02
    15de:	93 83       	std	Z+3, r25	; 0x03
    15e0:	28 96       	adiw	r28, 0x08	; 8
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	bf 90       	pop	r11
    15fc:	af 90       	pop	r10
    15fe:	9f 90       	pop	r9
    1600:	8f 90       	pop	r8
    1602:	7f 90       	pop	r7
    1604:	6f 90       	pop	r6
    1606:	5f 90       	pop	r5
    1608:	4f 90       	pop	r4
    160a:	08 95       	ret

0000160c <Set_ADC_Channel_ext>:
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
}

void Set_ADC_Channel_ext(uint8_t u8_CHn, uint8_t * u8_ADC_tx) //for MCP3208 external ADC
{
	switch(u8_CHn)
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	88 30       	cpi	r24, 0x08	; 8
    1610:	91 05       	cpc	r25, r1
    1612:	88 f5       	brcc	.+98     	; 0x1676 <Set_ADC_Channel_ext+0x6a>
    1614:	fc 01       	movw	r30, r24
    1616:	e6 5b       	subi	r30, 0xB6	; 182
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	d4 c4       	rjmp	.+2472   	; 0x1fc4 <__tablejump2__>
	{
		case 0 :
			u8_ADC_tx[0] = 0b00000110 ;
    161c:	86 e0       	ldi	r24, 0x06	; 6
    161e:	fb 01       	movw	r30, r22
    1620:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b00 ;
    1622:	11 82       	std	Z+1, r1	; 0x01
		break;
    1624:	08 95       	ret
		
		case 1 :
			u8_ADC_tx[0] = 0b00000110 ;
    1626:	86 e0       	ldi	r24, 0x06	; 6
    1628:	fb 01       	movw	r30, r22
    162a:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b01 << 6 ;
    162c:	80 e4       	ldi	r24, 0x40	; 64
    162e:	81 83       	std	Z+1, r24	; 0x01
		break;
    1630:	08 95       	ret
		
		case 2 :
			u8_ADC_tx[0] = 0b00000110 ;
    1632:	86 e0       	ldi	r24, 0x06	; 6
    1634:	fb 01       	movw	r30, r22
    1636:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b10 << 6 ;
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	81 83       	std	Z+1, r24	; 0x01
		break;
    163c:	08 95       	ret
		
		case 3 :
		u8_ADC_tx[0] = 0b00000110 ;
    163e:	86 e0       	ldi	r24, 0x06	; 6
    1640:	fb 01       	movw	r30, r22
    1642:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    1644:	80 ec       	ldi	r24, 0xC0	; 192
    1646:	81 83       	std	Z+1, r24	; 0x01
		break;
    1648:	08 95       	ret
		
		case 4 :
		u8_ADC_tx[0] = 0b00000111 ;
    164a:	87 e0       	ldi	r24, 0x07	; 7
    164c:	fb 01       	movw	r30, r22
    164e:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b00 << 6 ;
    1650:	11 82       	std	Z+1, r1	; 0x01
		break;
    1652:	08 95       	ret
		
		case 5 :
		u8_ADC_tx[0] = 0b00000111 ;
    1654:	87 e0       	ldi	r24, 0x07	; 7
    1656:	fb 01       	movw	r30, r22
    1658:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b01 << 6 ;
    165a:	80 e4       	ldi	r24, 0x40	; 64
    165c:	81 83       	std	Z+1, r24	; 0x01
		break;
    165e:	08 95       	ret
		
		case 6 :
		u8_ADC_tx[0] = 0b00000111 ;
    1660:	87 e0       	ldi	r24, 0x07	; 7
    1662:	fb 01       	movw	r30, r22
    1664:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b10 << 6 ;
    1666:	80 e8       	ldi	r24, 0x80	; 128
    1668:	81 83       	std	Z+1, r24	; 0x01
		break;
    166a:	08 95       	ret
		
		case 7 :
		u8_ADC_tx[0] = 0b00000111 ;
    166c:	87 e0       	ldi	r24, 0x07	; 7
    166e:	fb 01       	movw	r30, r22
    1670:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    1672:	80 ec       	ldi	r24, 0xC0	; 192
    1674:	81 83       	std	Z+1, r24	; 0x01
    1676:	08 95       	ret

00001678 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	0b b6       	in	r0, 0x3b	; 59
    1684:	0f 92       	push	r0
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	1f 92       	push	r1
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    16a6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    16aa:	80 ff       	sbrs	r24, 0
    16ac:	47 c0       	rjmp	.+142    	; 0x173c <__vector_18+0xc4>
    16ae:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    16b2:	90 ff       	sbrs	r25, 0
    16b4:	43 c0       	rjmp	.+134    	; 0x173c <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    16b6:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    16ba:	ee ee       	ldi	r30, 0xEE	; 238
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 7b       	andi	r24, 0xBF	; 191
    16c6:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    16c8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <tx_off>
    16cc:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <tx_on>
    16d0:	98 17       	cp	r25, r24
    16d2:	89 f1       	breq	.+98     	; 0x1736 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    16d4:	8f 70       	andi	r24, 0x0F	; 15
    16d6:	2b e0       	ldi	r18, 0x0B	; 11
    16d8:	82 9f       	mul	r24, r18
    16da:	c0 01       	movw	r24, r0
    16dc:	11 24       	eor	r1, r1
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 55       	subi	r30, 0x52	; 82
    16e2:	fd 4f       	sbci	r31, 0xFD	; 253
    16e4:	20 81       	ld	r18, Z
    16e6:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    16ea:	20 81       	ld	r18, Z
    16ec:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    16f0:	21 81       	ldd	r18, Z+1	; 0x01
    16f2:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    16f6:	23 81       	ldd	r18, Z+3	; 0x03
    16f8:	aa ef       	ldi	r26, 0xFA	; 250
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    16fe:	24 81       	ldd	r18, Z+4	; 0x04
    1700:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    1702:	25 81       	ldd	r18, Z+5	; 0x05
    1704:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    1706:	26 81       	ldd	r18, Z+6	; 0x06
    1708:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    170a:	27 81       	ldd	r18, Z+7	; 0x07
    170c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    170e:	20 85       	ldd	r18, Z+8	; 0x08
    1710:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    1712:	21 85       	ldd	r18, Z+9	; 0x09
    1714:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    1716:	22 85       	ldd	r18, Z+10	; 0x0a
    1718:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    171a:	fc 01       	movw	r30, r24
    171c:	e0 55       	subi	r30, 0x50	; 80
    171e:	fd 4f       	sbci	r31, 0xFD	; 253
    1720:	80 81       	ld	r24, Z
    1722:	8f 70       	andi	r24, 0x0F	; 15
    1724:	80 64       	ori	r24, 0x40	; 64
    1726:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    172a:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <tx_off>
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <tx_off>
    1734:	7d c0       	rjmp	.+250    	; 0x1830 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    1736:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <tx_busy>
    173a:	7a c0       	rjmp	.+244    	; 0x1830 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    173c:	81 ff       	sbrs	r24, 1
    173e:	78 c0       	rjmp	.+240    	; 0x1830 <__vector_18+0x1b8>
    1740:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1744:	81 ff       	sbrs	r24, 1
    1746:	74 c0       	rjmp	.+232    	; 0x1830 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    1748:	80 e1       	ldi	r24, 0x10	; 16
    174a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    174e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <rx_on>
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <rx_off>
    175a:	29 1b       	sub	r18, r25
    175c:	31 09       	sbc	r19, r1
    175e:	2f 77       	andi	r18, 0x7F	; 127
    1760:	33 27       	eor	r19, r19
    1762:	20 31       	cpi	r18, 0x10	; 16
    1764:	31 05       	cpc	r19, r1
    1766:	0c f0       	brlt	.+2      	; 0x176a <__vector_18+0xf2>
    1768:	58 c0       	rjmp	.+176    	; 0x181a <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    176a:	e8 2f       	mov	r30, r24
    176c:	ef 70       	andi	r30, 0x0F	; 15
    176e:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1772:	2e 2f       	mov	r18, r30
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4b e0       	ldi	r20, 0x0B	; 11
    1778:	e4 9f       	mul	r30, r20
    177a:	f0 01       	movw	r30, r0
    177c:	11 24       	eor	r1, r1
    177e:	e2 50       	subi	r30, 0x02	; 2
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	9f 70       	andi	r25, 0x0F	; 15
    1784:	42 81       	ldd	r20, Z+2	; 0x02
    1786:	40 7f       	andi	r20, 0xF0	; 240
    1788:	94 2b       	or	r25, r20
    178a:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    178c:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1790:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1794:	40 7e       	andi	r20, 0xE0	; 224
    1796:	97 70       	andi	r25, 0x07	; 7
    1798:	94 2b       	or	r25, r20
    179a:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    179c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17a0:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    17a2:	aa ef       	ldi	r26, 0xFA	; 250
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	9c 91       	ld	r25, X
    17a8:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    17aa:	9c 91       	ld	r25, X
    17ac:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    17ae:	9c 91       	ld	r25, X
    17b0:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    17b2:	9c 91       	ld	r25, X
    17b4:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    17b6:	9c 91       	ld	r25, X
    17b8:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    17ba:	9c 91       	ld	r25, X
    17bc:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    17be:	9c 91       	ld	r25, X
    17c0:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    17c2:	9c 91       	ld	r25, X
    17c4:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    17cc:	40 81       	ld	r20, Z
    17ce:	42 95       	swap	r20
    17d0:	46 95       	lsr	r20
    17d2:	47 70       	andi	r20, 0x07	; 7
    17d4:	51 81       	ldd	r21, Z+1	; 0x01
    17d6:	65 2f       	mov	r22, r21
    17d8:	66 0f       	add	r22, r22
    17da:	66 0f       	add	r22, r22
    17dc:	66 0f       	add	r22, r22
    17de:	86 2f       	mov	r24, r22
    17e0:	84 2b       	or	r24, r20
    17e2:	95 2f       	mov	r25, r21
    17e4:	92 95       	swap	r25
    17e6:	96 95       	lsr	r25
    17e8:	97 70       	andi	r25, 0x07	; 7
    17ea:	89 2b       	or	r24, r25
    17ec:	b1 f4       	brne	.+44     	; 0x181a <__vector_18+0x1a2>
    17ee:	8b e0       	ldi	r24, 0x0B	; 11
    17f0:	82 9f       	mul	r24, r18
    17f2:	f0 01       	movw	r30, r0
    17f4:	83 9f       	mul	r24, r19
    17f6:	f0 0d       	add	r31, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	e2 50       	subi	r30, 0x02	; 2
    17fc:	fe 4f       	sbci	r31, 0xFE	; 254
    17fe:	83 81       	ldd	r24, Z+3	; 0x03
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	59 f4       	brne	.+22     	; 0x181a <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1804:	98 e0       	ldi	r25, 0x08	; 8
    1806:	88 e1       	ldi	r24, 0x18	; 24
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	a8 95       	wdr
    180e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1818:	ff cf       	rjmp	.-2      	; 0x1818 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    181a:	ee ee       	ldi	r30, 0xEE	; 238
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    1822:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    1824:	80 81       	ld	r24, Z
    1826:	8f 7d       	andi	r24, 0xDF	; 223
    1828:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    182a:	80 e8       	ldi	r24, 0x80	; 128
    182c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    1830:	0f 90       	pop	r0
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	ff 91       	pop	r31
    1838:	ef 91       	pop	r30
    183a:	bf 91       	pop	r27
    183c:	af 91       	pop	r26
    183e:	9f 91       	pop	r25
    1840:	8f 91       	pop	r24
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	0b be       	out	0x3b, r0	; 59
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    185e:	e8 ed       	ldi	r30, 0xD8	; 216
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    1866:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    186a:	2c e0       	ldi	r18, 0x0C	; 12
    186c:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    1870:	27 e3       	ldi	r18, 0x37	; 55
    1872:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    1876:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    187a:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    187e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1882:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    1886:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    188a:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    188e:	cd ee       	ldi	r28, 0xED	; 237
    1890:	d0 e0       	ldi	r29, 0x00	; 0
    1892:	18 82       	st	Y, r1
	CANSTMOB = 0;
    1894:	ae ee       	ldi	r26, 0xEE	; 238
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    189a:	20 e1       	ldi	r18, 0x10	; 16
    189c:	28 83       	st	Y, r18
	CANSTMOB = 0;
    189e:	1c 92       	st	X, r1
	CANIDM4 = 0;
    18a0:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    18a4:	28 2f       	mov	r18, r24
    18a6:	22 95       	swap	r18
    18a8:	22 0f       	add	r18, r18
    18aa:	20 7e       	andi	r18, 0xE0	; 224
    18ac:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    18b0:	96 95       	lsr	r25
    18b2:	87 95       	ror	r24
    18b4:	96 95       	lsr	r25
    18b6:	87 95       	ror	r24
    18b8:	96 95       	lsr	r25
    18ba:	87 95       	ror	r24
    18bc:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    18c0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    18c4:	86 2f       	mov	r24, r22
    18c6:	82 95       	swap	r24
    18c8:	88 0f       	add	r24, r24
    18ca:	80 7e       	andi	r24, 0xE0	; 224
    18cc:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    18d0:	76 95       	lsr	r23
    18d2:	67 95       	ror	r22
    18d4:	76 95       	lsr	r23
    18d6:	67 95       	ror	r22
    18d8:	76 95       	lsr	r23
    18da:	67 95       	ror	r22
    18dc:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    18e0:	80 e8       	ldi	r24, 0x80	; 128
    18e2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    18ec:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    18f0:	80 eb       	ldi	r24, 0xB0	; 176
    18f2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	80 83       	st	Z, r24

	reset = 0;
    18fa:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <reset>
}
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    190a:	40 91 fa 01 	lds	r20, 0x01FA	; 0x8001fa <rx_off>
    190e:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <rx_on>
    1912:	24 17       	cp	r18, r20
    1914:	89 f1       	breq	.+98     	; 0x1978 <can_read_message_if_new+0x74>
    1916:	a4 2f       	mov	r26, r20
    1918:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    191a:	8b e0       	ldi	r24, 0x0B	; 11
    191c:	a8 9f       	mul	r26, r24
    191e:	b0 01       	movw	r22, r0
    1920:	11 24       	eor	r1, r1
    1922:	fb 01       	movw	r30, r22
    1924:	e2 50       	subi	r30, 0x02	; 2
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	20 81       	ld	r18, Z
    192a:	22 95       	swap	r18
    192c:	26 95       	lsr	r18
    192e:	27 70       	andi	r18, 0x07	; 7
    1930:	31 81       	ldd	r19, Z+1	; 0x01
    1932:	53 2f       	mov	r21, r19
    1934:	55 0f       	add	r21, r21
    1936:	55 0f       	add	r21, r21
    1938:	55 0f       	add	r21, r21
    193a:	25 2b       	or	r18, r21
    193c:	32 95       	swap	r19
    193e:	36 95       	lsr	r19
    1940:	37 70       	andi	r19, 0x07	; 7
    1942:	28 83       	st	Y, r18
    1944:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1946:	fb 01       	movw	r30, r22
    1948:	e0 50       	subi	r30, 0x00	; 0
    194a:	fe 4f       	sbci	r31, 0xFE	; 254
    194c:	20 81       	ld	r18, Z
    194e:	2f 70       	andi	r18, 0x0F	; 15
    1950:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    1952:	22 23       	and	r18, r18
    1954:	99 f0       	breq	.+38     	; 0x197c <can_read_message_if_new+0x78>
    1956:	db 01       	movw	r26, r22
    1958:	af 5f       	subi	r26, 0xFF	; 255
    195a:	bd 4f       	sbci	r27, 0xFD	; 253
    195c:	fe 01       	movw	r30, r28
    195e:	33 96       	adiw	r30, 0x03	; 3
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	2d 5f       	subi	r18, 0xFD	; 253
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	ce 01       	movw	r24, r28
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    196c:	2d 91       	ld	r18, X+
    196e:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    1970:	e8 17       	cp	r30, r24
    1972:	f9 07       	cpc	r31, r25
    1974:	d9 f7       	brne	.-10     	; 0x196c <can_read_message_if_new+0x68>
    1976:	02 c0       	rjmp	.+4      	; 0x197c <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    197c:	4f 5f       	subi	r20, 0xFF	; 255
    197e:	40 93 fa 01 	sts	0x01FA, r20	; 0x8001fa <rx_off>
	}

	return true;
    1982:	81 e0       	ldi	r24, 0x01	; 1
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    1990:	ab ed       	ldi	r26, 0xDB	; 219
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	8c 91       	ld	r24, X
    1996:	8f 77       	andi	r24, 0x7F	; 127
    1998:	8c 93       	st	X, r24

	if (!tx_busy) {
    199a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <tx_busy>
    199e:	81 11       	cpse	r24, r1
    19a0:	27 c0       	rjmp	.+78     	; 0x19f0 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    19a2:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    19a6:	80 81       	ld	r24, Z
    19a8:	82 95       	swap	r24
    19aa:	88 0f       	add	r24, r24
    19ac:	80 7e       	andi	r24, 0xE0	; 224
    19ae:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	96 95       	lsr	r25
    19bc:	87 95       	ror	r24
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    19c6:	df 01       	movw	r26, r30
    19c8:	13 96       	adiw	r26, 0x03	; 3
    19ca:	9f 01       	movw	r18, r30
    19cc:	25 5f       	subi	r18, 0xF5	; 245
    19ce:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    19d0:	ca ef       	ldi	r28, 0xFA	; 250
    19d2:	d0 e0       	ldi	r29, 0x00	; 0
    19d4:	9d 91       	ld	r25, X+
    19d6:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    19d8:	a2 17       	cp	r26, r18
    19da:	b3 07       	cpc	r27, r19
    19dc:	d9 f7       	brne	.-10     	; 0x19d4 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	80 64       	ori	r24, 0x40	; 64
    19e8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	43 c0       	rjmp	.+134    	; 0x1a76 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    19f0:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <tx_on>
    19f4:	82 2f       	mov	r24, r18
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <tx_off>
    19fc:	83 1b       	sub	r24, r19
    19fe:	91 09       	sbc	r25, r1
    1a00:	8f 77       	andi	r24, 0x7F	; 127
    1a02:	99 27       	eor	r25, r25
    1a04:	40 97       	sbiw	r24, 0x10	; 16
    1a06:	b1 f1       	breq	.+108    	; 0x1a74 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1a08:	a2 2f       	mov	r26, r18
    1a0a:	af 70       	andi	r26, 0x0F	; 15
    1a0c:	8b e0       	ldi	r24, 0x0B	; 11
    1a0e:	a8 9f       	mul	r26, r24
    1a10:	d0 01       	movw	r26, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	ed 01       	movw	r28, r26
    1a16:	c2 55       	subi	r28, 0x52	; 82
    1a18:	dd 4f       	sbci	r29, 0xFD	; 253
    1a1a:	80 81       	ld	r24, Z
    1a1c:	98 2f       	mov	r25, r24
    1a1e:	92 95       	swap	r25
    1a20:	99 0f       	add	r25, r25
    1a22:	90 7e       	andi	r25, 0xE0	; 224
    1a24:	88 81       	ld	r24, Y
    1a26:	8f 71       	andi	r24, 0x1F	; 31
    1a28:	89 2b       	or	r24, r25
    1a2a:	88 83       	st	Y, r24
    1a2c:	80 81       	ld	r24, Z
    1a2e:	98 2f       	mov	r25, r24
    1a30:	96 95       	lsr	r25
    1a32:	96 95       	lsr	r25
    1a34:	96 95       	lsr	r25
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	80 7e       	andi	r24, 0xE0	; 224
    1a3a:	89 2b       	or	r24, r25
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	92 95       	swap	r25
    1a42:	99 0f       	add	r25, r25
    1a44:	90 7e       	andi	r25, 0xE0	; 224
    1a46:	8f 71       	andi	r24, 0x1F	; 31
    1a48:	89 2b       	or	r24, r25
    1a4a:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	98 2f       	mov	r25, r24
    1a50:	9f 70       	andi	r25, 0x0F	; 15
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	80 7f       	andi	r24, 0xF0	; 240
    1a56:	89 2b       	or	r24, r25
    1a58:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1a5a:	af 54       	subi	r26, 0x4F	; 79
    1a5c:	bd 4f       	sbci	r27, 0xFD	; 253
    1a5e:	33 96       	adiw	r30, 0x03	; 3
    1a60:	88 e0       	ldi	r24, 0x08	; 8
    1a62:	01 90       	ld	r0, Z+
    1a64:	0d 92       	st	X+, r0
    1a66:	8a 95       	dec	r24
    1a68:	e1 f7       	brne	.-8      	; 0x1a62 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    1a6a:	2f 5f       	subi	r18, 0xFF	; 255
    1a6c:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <tx_on>
		result = true;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    1a74:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1a76:	eb ed       	ldi	r30, 0xDB	; 219
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	90 81       	ld	r25, Z
    1a7c:	90 68       	ori	r25, 0x80	; 128
    1a7e:	90 83       	st	Z, r25

	return result;
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
    1a86:	95 b1       	in	r25, 0x05	; 5
    1a88:	89 2b       	or	r24, r25
    1a8a:	85 b9       	out	0x05, r24	; 5
    1a8c:	08 95       	ret

00001a8e <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
    1a8e:	84 b1       	in	r24, 0x04	; 4
    1a90:	80 6e       	ori	r24, 0xE0	; 224
    1a92:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
    1a94:	80 ee       	ldi	r24, 0xE0	; 224
    1a96:	f7 cf       	rjmp	.-18     	; 0x1a86 <rgbled_turn_off>
    1a98:	08 95       	ret

00001a9a <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
    1a9a:	95 b1       	in	r25, 0x05	; 5
    1a9c:	80 95       	com	r24
    1a9e:	98 23       	and	r25, r24
    1aa0:	95 b9       	out	0x05, r25	; 5
    1aa2:	08 95       	ret

00001aa4 <rgbled_toggle>:
}

void rgbled_toggle(RgbLedColor_t color) {
	PORTB ^= color;
    1aa4:	95 b1       	in	r25, 0x05	; 5
    1aa6:	89 27       	eor	r24, r25
    1aa8:	85 b9       	out	0x05, r24	; 5
    1aaa:	08 95       	ret

00001aac <spi_init>:
#define PIN_SCK PB1
#define PIN_SS PB0

void spi_init(spi_prescale_t clock_prescale) {
	// Set MOSI, SS, and SCK output, all others input
	DDR_SPI |= (1 << PIN_MOSI) | (1 << PIN_SCK) | (1 << PIN_SS);
    1aac:	94 b1       	in	r25, 0x04	; 4
    1aae:	97 60       	ori	r25, 0x07	; 7
    1ab0:	94 b9       	out	0x04, r25	; 4
	
	uint8_t SPI2X_val = (uint8_t)((clock_prescale >> 2) & 0b001);
    1ab2:	82 fb       	bst	r24, 2
    1ab4:	99 27       	eor	r25, r25
    1ab6:	90 f9       	bld	r25, 0
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0) | (1 << CPOL) | (1 << CPHA);
	SPSR = (SPI2X_val << SPI2X);
*/

	// Enable SPI, Master, selected prescaling, mode 0 (CPOL = CPHA = 0)
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0);
    1ab8:	28 2f       	mov	r18, r24
    1aba:	22 70       	andi	r18, 0x02	; 2
    1abc:	81 70       	andi	r24, 0x01	; 1
    1abe:	80 65       	ori	r24, 0x50	; 80
    1ac0:	82 2b       	or	r24, r18
    1ac2:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA));
    1ac4:	8c b5       	in	r24, 0x2c	; 44
    1ac6:	83 7f       	andi	r24, 0xF3	; 243
    1ac8:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPI2X_val << SPI2X);
    1aca:	9d bd       	out	0x2d, r25	; 45
    1acc:	08 95       	ret

00001ace <spi_trancieve>:

}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	ec 01       	movw	r28, r24
	PORTB &= ~(1 << PIN_SS);
    1ad4:	28 98       	cbi	0x05, 0	; 5

	for (size_t i = 0; i < length; i++) {
    1ad6:	41 15       	cp	r20, r1
    1ad8:	51 05       	cpc	r21, r1
    1ada:	c1 f0       	breq	.+48     	; 0x1b0c <spi_trancieve+0x3e>
    1adc:	fb 01       	movw	r30, r22
    1ade:	dc 01       	movw	r26, r24
    1ae0:	46 0f       	add	r20, r22
    1ae2:	57 1f       	adc	r21, r23
		SPDR = (tx_buffer != NULL) ? tx_buffer[i] : 0xFF;
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	20 97       	sbiw	r28, 0x00	; 0
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <spi_trancieve+0x20>
    1aea:	9c 91       	ld	r25, X
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <spi_trancieve+0x22>
    1aee:	98 2f       	mov	r25, r24
    1af0:	9e bd       	out	0x2e, r25	; 46

		while(!(SPSR & (1 << SPIF)));
    1af2:	0d b4       	in	r0, 0x2d	; 45
    1af4:	07 fe       	sbrs	r0, 7
    1af6:	fd cf       	rjmp	.-6      	; 0x1af2 <spi_trancieve+0x24>
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
    1af8:	61 15       	cp	r22, r1
    1afa:	71 05       	cpc	r23, r1
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <spi_trancieve+0x34>
    1afe:	9e b5       	in	r25, 0x2e	; 46
    1b00:	90 83       	st	Z, r25
    1b02:	31 96       	adiw	r30, 0x01	; 1
    1b04:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
	PORTB &= ~(1 << PIN_SS);

	for (size_t i = 0; i < length; i++) {
    1b06:	e4 17       	cp	r30, r20
    1b08:	f5 07       	cpc	r31, r21
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <spi_trancieve+0x18>
		while(!(SPSR & (1 << SPIF)));
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
	}

	if (last_in_transmission) {
    1b0c:	21 11       	cpse	r18, r1
		PORTB |= (1 << PIN_SS);
    1b0e:	28 9a       	sbi	0x05, 0	; 5
	}
}
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
    1b16:	1f 92       	push	r1
    1b18:	0f 92       	push	r0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	0f 92       	push	r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	0b b6       	in	r0, 0x3b	; 59
    1b22:	0f 92       	push	r0
    1b24:	2f 93       	push	r18
    1b26:	3f 93       	push	r19
    1b28:	4f 93       	push	r20
    1b2a:	5f 93       	push	r21
    1b2c:	6f 93       	push	r22
    1b2e:	7f 93       	push	r23
    1b30:	8f 93       	push	r24
    1b32:	af 93       	push	r26
    1b34:	bf 93       	push	r27
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
    1b3a:	ae e7       	ldi	r26, 0x7E	; 126
    1b3c:	b3 e0       	ldi	r27, 0x03	; 3
    1b3e:	ee e5       	ldi	r30, 0x5E	; 94
    1b40:	f3 e0       	ldi	r31, 0x03	; 3
    1b42:	2e e7       	ldi	r18, 0x7E	; 126
    1b44:	33 e0       	ldi	r19, 0x03	; 3
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
    1b46:	8d 91       	ld	r24, X+
    1b48:	88 23       	and	r24, r24
    1b4a:	59 f0       	breq	.+22     	; 0x1b62 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
    1b4c:	40 81       	ld	r20, Z
    1b4e:	51 81       	ldd	r21, Z+1	; 0x01
    1b50:	62 81       	ldd	r22, Z+2	; 0x02
    1b52:	73 81       	ldd	r23, Z+3	; 0x03
    1b54:	50 5e       	subi	r21, 0xE0	; 224
    1b56:	6f 4f       	sbci	r22, 0xFF	; 255
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	40 83       	st	Z, r20
    1b5c:	51 83       	std	Z+1, r21	; 0x01
    1b5e:	62 83       	std	Z+2, r22	; 0x02
    1b60:	73 83       	std	Z+3, r23	; 0x03
    1b62:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
    1b64:	e2 17       	cp	r30, r18
    1b66:	f3 07       	cpc	r31, r19
    1b68:	71 f7       	brne	.-36     	; 0x1b46 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
    1b6a:	ff 91       	pop	r31
    1b6c:	ef 91       	pop	r30
    1b6e:	bf 91       	pop	r27
    1b70:	af 91       	pop	r26
    1b72:	8f 91       	pop	r24
    1b74:	7f 91       	pop	r23
    1b76:	6f 91       	pop	r22
    1b78:	5f 91       	pop	r21
    1b7a:	4f 91       	pop	r20
    1b7c:	3f 91       	pop	r19
    1b7e:	2f 91       	pop	r18
    1b80:	0f 90       	pop	r0
    1b82:	0b be       	out	0x3b, r0	; 59
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <__subsf3>:
    1b8e:	50 58       	subi	r21, 0x80	; 128

00001b90 <__addsf3>:
    1b90:	bb 27       	eor	r27, r27
    1b92:	aa 27       	eor	r26, r26
    1b94:	0e d0       	rcall	.+28     	; 0x1bb2 <__addsf3x>
    1b96:	75 c1       	rjmp	.+746    	; 0x1e82 <__fp_round>
    1b98:	66 d1       	rcall	.+716    	; 0x1e66 <__fp_pscA>
    1b9a:	30 f0       	brcs	.+12     	; 0x1ba8 <__addsf3+0x18>
    1b9c:	6b d1       	rcall	.+726    	; 0x1e74 <__fp_pscB>
    1b9e:	20 f0       	brcs	.+8      	; 0x1ba8 <__addsf3+0x18>
    1ba0:	31 f4       	brne	.+12     	; 0x1bae <__addsf3+0x1e>
    1ba2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <__addsf3+0x1a>
    1ba6:	1e f4       	brtc	.+6      	; 0x1bae <__addsf3+0x1e>
    1ba8:	5b c1       	rjmp	.+694    	; 0x1e60 <__fp_nan>
    1baa:	0e f4       	brtc	.+2      	; 0x1bae <__addsf3+0x1e>
    1bac:	e0 95       	com	r30
    1bae:	e7 fb       	bst	r30, 7
    1bb0:	51 c1       	rjmp	.+674    	; 0x1e54 <__fp_inf>

00001bb2 <__addsf3x>:
    1bb2:	e9 2f       	mov	r30, r25
    1bb4:	77 d1       	rcall	.+750    	; 0x1ea4 <__fp_split3>
    1bb6:	80 f3       	brcs	.-32     	; 0x1b98 <__addsf3+0x8>
    1bb8:	ba 17       	cp	r27, r26
    1bba:	62 07       	cpc	r22, r18
    1bbc:	73 07       	cpc	r23, r19
    1bbe:	84 07       	cpc	r24, r20
    1bc0:	95 07       	cpc	r25, r21
    1bc2:	18 f0       	brcs	.+6      	; 0x1bca <__addsf3x+0x18>
    1bc4:	71 f4       	brne	.+28     	; 0x1be2 <__addsf3x+0x30>
    1bc6:	9e f5       	brtc	.+102    	; 0x1c2e <__addsf3x+0x7c>
    1bc8:	8f c1       	rjmp	.+798    	; 0x1ee8 <__fp_zero>
    1bca:	0e f4       	brtc	.+2      	; 0x1bce <__addsf3x+0x1c>
    1bcc:	e0 95       	com	r30
    1bce:	0b 2e       	mov	r0, r27
    1bd0:	ba 2f       	mov	r27, r26
    1bd2:	a0 2d       	mov	r26, r0
    1bd4:	0b 01       	movw	r0, r22
    1bd6:	b9 01       	movw	r22, r18
    1bd8:	90 01       	movw	r18, r0
    1bda:	0c 01       	movw	r0, r24
    1bdc:	ca 01       	movw	r24, r20
    1bde:	a0 01       	movw	r20, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	ff 27       	eor	r31, r31
    1be4:	59 1b       	sub	r21, r25
    1be6:	99 f0       	breq	.+38     	; 0x1c0e <__addsf3x+0x5c>
    1be8:	59 3f       	cpi	r21, 0xF9	; 249
    1bea:	50 f4       	brcc	.+20     	; 0x1c00 <__addsf3x+0x4e>
    1bec:	50 3e       	cpi	r21, 0xE0	; 224
    1bee:	68 f1       	brcs	.+90     	; 0x1c4a <__addsf3x+0x98>
    1bf0:	1a 16       	cp	r1, r26
    1bf2:	f0 40       	sbci	r31, 0x00	; 0
    1bf4:	a2 2f       	mov	r26, r18
    1bf6:	23 2f       	mov	r18, r19
    1bf8:	34 2f       	mov	r19, r20
    1bfa:	44 27       	eor	r20, r20
    1bfc:	58 5f       	subi	r21, 0xF8	; 248
    1bfe:	f3 cf       	rjmp	.-26     	; 0x1be6 <__addsf3x+0x34>
    1c00:	46 95       	lsr	r20
    1c02:	37 95       	ror	r19
    1c04:	27 95       	ror	r18
    1c06:	a7 95       	ror	r26
    1c08:	f0 40       	sbci	r31, 0x00	; 0
    1c0a:	53 95       	inc	r21
    1c0c:	c9 f7       	brne	.-14     	; 0x1c00 <__addsf3x+0x4e>
    1c0e:	7e f4       	brtc	.+30     	; 0x1c2e <__addsf3x+0x7c>
    1c10:	1f 16       	cp	r1, r31
    1c12:	ba 0b       	sbc	r27, r26
    1c14:	62 0b       	sbc	r22, r18
    1c16:	73 0b       	sbc	r23, r19
    1c18:	84 0b       	sbc	r24, r20
    1c1a:	ba f0       	brmi	.+46     	; 0x1c4a <__addsf3x+0x98>
    1c1c:	91 50       	subi	r25, 0x01	; 1
    1c1e:	a1 f0       	breq	.+40     	; 0x1c48 <__addsf3x+0x96>
    1c20:	ff 0f       	add	r31, r31
    1c22:	bb 1f       	adc	r27, r27
    1c24:	66 1f       	adc	r22, r22
    1c26:	77 1f       	adc	r23, r23
    1c28:	88 1f       	adc	r24, r24
    1c2a:	c2 f7       	brpl	.-16     	; 0x1c1c <__addsf3x+0x6a>
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <__addsf3x+0x98>
    1c2e:	ba 0f       	add	r27, r26
    1c30:	62 1f       	adc	r22, r18
    1c32:	73 1f       	adc	r23, r19
    1c34:	84 1f       	adc	r24, r20
    1c36:	48 f4       	brcc	.+18     	; 0x1c4a <__addsf3x+0x98>
    1c38:	87 95       	ror	r24
    1c3a:	77 95       	ror	r23
    1c3c:	67 95       	ror	r22
    1c3e:	b7 95       	ror	r27
    1c40:	f7 95       	ror	r31
    1c42:	9e 3f       	cpi	r25, 0xFE	; 254
    1c44:	08 f0       	brcs	.+2      	; 0x1c48 <__addsf3x+0x96>
    1c46:	b3 cf       	rjmp	.-154    	; 0x1bae <__addsf3+0x1e>
    1c48:	93 95       	inc	r25
    1c4a:	88 0f       	add	r24, r24
    1c4c:	08 f0       	brcs	.+2      	; 0x1c50 <__addsf3x+0x9e>
    1c4e:	99 27       	eor	r25, r25
    1c50:	ee 0f       	add	r30, r30
    1c52:	97 95       	ror	r25
    1c54:	87 95       	ror	r24
    1c56:	08 95       	ret

00001c58 <__cmpsf2>:
    1c58:	d9 d0       	rcall	.+434    	; 0x1e0c <__fp_cmp>
    1c5a:	08 f4       	brcc	.+2      	; 0x1c5e <__cmpsf2+0x6>
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	08 95       	ret

00001c60 <__divsf3>:
    1c60:	0c d0       	rcall	.+24     	; 0x1c7a <__divsf3x>
    1c62:	0f c1       	rjmp	.+542    	; 0x1e82 <__fp_round>
    1c64:	07 d1       	rcall	.+526    	; 0x1e74 <__fp_pscB>
    1c66:	40 f0       	brcs	.+16     	; 0x1c78 <__divsf3+0x18>
    1c68:	fe d0       	rcall	.+508    	; 0x1e66 <__fp_pscA>
    1c6a:	30 f0       	brcs	.+12     	; 0x1c78 <__divsf3+0x18>
    1c6c:	21 f4       	brne	.+8      	; 0x1c76 <__divsf3+0x16>
    1c6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <__divsf3+0x18>
    1c72:	f0 c0       	rjmp	.+480    	; 0x1e54 <__fp_inf>
    1c74:	51 11       	cpse	r21, r1
    1c76:	39 c1       	rjmp	.+626    	; 0x1eea <__fp_szero>
    1c78:	f3 c0       	rjmp	.+486    	; 0x1e60 <__fp_nan>

00001c7a <__divsf3x>:
    1c7a:	14 d1       	rcall	.+552    	; 0x1ea4 <__fp_split3>
    1c7c:	98 f3       	brcs	.-26     	; 0x1c64 <__divsf3+0x4>

00001c7e <__divsf3_pse>:
    1c7e:	99 23       	and	r25, r25
    1c80:	c9 f3       	breq	.-14     	; 0x1c74 <__divsf3+0x14>
    1c82:	55 23       	and	r21, r21
    1c84:	b1 f3       	breq	.-20     	; 0x1c72 <__divsf3+0x12>
    1c86:	95 1b       	sub	r25, r21
    1c88:	55 0b       	sbc	r21, r21
    1c8a:	bb 27       	eor	r27, r27
    1c8c:	aa 27       	eor	r26, r26
    1c8e:	62 17       	cp	r22, r18
    1c90:	73 07       	cpc	r23, r19
    1c92:	84 07       	cpc	r24, r20
    1c94:	38 f0       	brcs	.+14     	; 0x1ca4 <__divsf3_pse+0x26>
    1c96:	9f 5f       	subi	r25, 0xFF	; 255
    1c98:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	44 1f       	adc	r20, r20
    1ca0:	aa 1f       	adc	r26, r26
    1ca2:	a9 f3       	breq	.-22     	; 0x1c8e <__divsf3_pse+0x10>
    1ca4:	33 d0       	rcall	.+102    	; 0x1d0c <__divsf3_pse+0x8e>
    1ca6:	0e 2e       	mov	r0, r30
    1ca8:	3a f0       	brmi	.+14     	; 0x1cb8 <__divsf3_pse+0x3a>
    1caa:	e0 e8       	ldi	r30, 0x80	; 128
    1cac:	30 d0       	rcall	.+96     	; 0x1d0e <__divsf3_pse+0x90>
    1cae:	91 50       	subi	r25, 0x01	; 1
    1cb0:	50 40       	sbci	r21, 0x00	; 0
    1cb2:	e6 95       	lsr	r30
    1cb4:	00 1c       	adc	r0, r0
    1cb6:	ca f7       	brpl	.-14     	; 0x1caa <__divsf3_pse+0x2c>
    1cb8:	29 d0       	rcall	.+82     	; 0x1d0c <__divsf3_pse+0x8e>
    1cba:	fe 2f       	mov	r31, r30
    1cbc:	27 d0       	rcall	.+78     	; 0x1d0c <__divsf3_pse+0x8e>
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	26 17       	cp	r18, r22
    1cc8:	37 07       	cpc	r19, r23
    1cca:	48 07       	cpc	r20, r24
    1ccc:	ab 07       	cpc	r26, r27
    1cce:	b0 e8       	ldi	r27, 0x80	; 128
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <__divsf3_pse+0x56>
    1cd2:	bb 0b       	sbc	r27, r27
    1cd4:	80 2d       	mov	r24, r0
    1cd6:	bf 01       	movw	r22, r30
    1cd8:	ff 27       	eor	r31, r31
    1cda:	93 58       	subi	r25, 0x83	; 131
    1cdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cde:	2a f0       	brmi	.+10     	; 0x1cea <__divsf3_pse+0x6c>
    1ce0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce2:	51 05       	cpc	r21, r1
    1ce4:	68 f0       	brcs	.+26     	; 0x1d00 <__divsf3_pse+0x82>
    1ce6:	b6 c0       	rjmp	.+364    	; 0x1e54 <__fp_inf>
    1ce8:	00 c1       	rjmp	.+512    	; 0x1eea <__fp_szero>
    1cea:	5f 3f       	cpi	r21, 0xFF	; 255
    1cec:	ec f3       	brlt	.-6      	; 0x1ce8 <__divsf3_pse+0x6a>
    1cee:	98 3e       	cpi	r25, 0xE8	; 232
    1cf0:	dc f3       	brlt	.-10     	; 0x1ce8 <__divsf3_pse+0x6a>
    1cf2:	86 95       	lsr	r24
    1cf4:	77 95       	ror	r23
    1cf6:	67 95       	ror	r22
    1cf8:	b7 95       	ror	r27
    1cfa:	f7 95       	ror	r31
    1cfc:	9f 5f       	subi	r25, 0xFF	; 255
    1cfe:	c9 f7       	brne	.-14     	; 0x1cf2 <__divsf3_pse+0x74>
    1d00:	88 0f       	add	r24, r24
    1d02:	91 1d       	adc	r25, r1
    1d04:	96 95       	lsr	r25
    1d06:	87 95       	ror	r24
    1d08:	97 f9       	bld	r25, 7
    1d0a:	08 95       	ret
    1d0c:	e1 e0       	ldi	r30, 0x01	; 1
    1d0e:	66 0f       	add	r22, r22
    1d10:	77 1f       	adc	r23, r23
    1d12:	88 1f       	adc	r24, r24
    1d14:	bb 1f       	adc	r27, r27
    1d16:	62 17       	cp	r22, r18
    1d18:	73 07       	cpc	r23, r19
    1d1a:	84 07       	cpc	r24, r20
    1d1c:	ba 07       	cpc	r27, r26
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <__divsf3_pse+0xaa>
    1d20:	62 1b       	sub	r22, r18
    1d22:	73 0b       	sbc	r23, r19
    1d24:	84 0b       	sbc	r24, r20
    1d26:	ba 0b       	sbc	r27, r26
    1d28:	ee 1f       	adc	r30, r30
    1d2a:	88 f7       	brcc	.-30     	; 0x1d0e <__divsf3_pse+0x90>
    1d2c:	e0 95       	com	r30
    1d2e:	08 95       	ret

00001d30 <__fixsfsi>:
    1d30:	04 d0       	rcall	.+8      	; 0x1d3a <__fixunssfsi>
    1d32:	68 94       	set
    1d34:	b1 11       	cpse	r27, r1
    1d36:	d9 c0       	rjmp	.+434    	; 0x1eea <__fp_szero>
    1d38:	08 95       	ret

00001d3a <__fixunssfsi>:
    1d3a:	bc d0       	rcall	.+376    	; 0x1eb4 <__fp_splitA>
    1d3c:	88 f0       	brcs	.+34     	; 0x1d60 <__fixunssfsi+0x26>
    1d3e:	9f 57       	subi	r25, 0x7F	; 127
    1d40:	90 f0       	brcs	.+36     	; 0x1d66 <__fixunssfsi+0x2c>
    1d42:	b9 2f       	mov	r27, r25
    1d44:	99 27       	eor	r25, r25
    1d46:	b7 51       	subi	r27, 0x17	; 23
    1d48:	a0 f0       	brcs	.+40     	; 0x1d72 <__fixunssfsi+0x38>
    1d4a:	d1 f0       	breq	.+52     	; 0x1d80 <__fixunssfsi+0x46>
    1d4c:	66 0f       	add	r22, r22
    1d4e:	77 1f       	adc	r23, r23
    1d50:	88 1f       	adc	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	1a f0       	brmi	.+6      	; 0x1d5c <__fixunssfsi+0x22>
    1d56:	ba 95       	dec	r27
    1d58:	c9 f7       	brne	.-14     	; 0x1d4c <__fixunssfsi+0x12>
    1d5a:	12 c0       	rjmp	.+36     	; 0x1d80 <__fixunssfsi+0x46>
    1d5c:	b1 30       	cpi	r27, 0x01	; 1
    1d5e:	81 f0       	breq	.+32     	; 0x1d80 <__fixunssfsi+0x46>
    1d60:	c3 d0       	rcall	.+390    	; 0x1ee8 <__fp_zero>
    1d62:	b1 e0       	ldi	r27, 0x01	; 1
    1d64:	08 95       	ret
    1d66:	c0 c0       	rjmp	.+384    	; 0x1ee8 <__fp_zero>
    1d68:	67 2f       	mov	r22, r23
    1d6a:	78 2f       	mov	r23, r24
    1d6c:	88 27       	eor	r24, r24
    1d6e:	b8 5f       	subi	r27, 0xF8	; 248
    1d70:	39 f0       	breq	.+14     	; 0x1d80 <__fixunssfsi+0x46>
    1d72:	b9 3f       	cpi	r27, 0xF9	; 249
    1d74:	cc f3       	brlt	.-14     	; 0x1d68 <__fixunssfsi+0x2e>
    1d76:	86 95       	lsr	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	b3 95       	inc	r27
    1d7e:	d9 f7       	brne	.-10     	; 0x1d76 <__fixunssfsi+0x3c>
    1d80:	3e f4       	brtc	.+14     	; 0x1d90 <__fixunssfsi+0x56>
    1d82:	90 95       	com	r25
    1d84:	80 95       	com	r24
    1d86:	70 95       	com	r23
    1d88:	61 95       	neg	r22
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	08 95       	ret

00001d92 <__floatunsisf>:
    1d92:	e8 94       	clt
    1d94:	09 c0       	rjmp	.+18     	; 0x1da8 <__floatsisf+0x12>

00001d96 <__floatsisf>:
    1d96:	97 fb       	bst	r25, 7
    1d98:	3e f4       	brtc	.+14     	; 0x1da8 <__floatsisf+0x12>
    1d9a:	90 95       	com	r25
    1d9c:	80 95       	com	r24
    1d9e:	70 95       	com	r23
    1da0:	61 95       	neg	r22
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	8f 4f       	sbci	r24, 0xFF	; 255
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	99 23       	and	r25, r25
    1daa:	a9 f0       	breq	.+42     	; 0x1dd6 <__floatsisf+0x40>
    1dac:	f9 2f       	mov	r31, r25
    1dae:	96 e9       	ldi	r25, 0x96	; 150
    1db0:	bb 27       	eor	r27, r27
    1db2:	93 95       	inc	r25
    1db4:	f6 95       	lsr	r31
    1db6:	87 95       	ror	r24
    1db8:	77 95       	ror	r23
    1dba:	67 95       	ror	r22
    1dbc:	b7 95       	ror	r27
    1dbe:	f1 11       	cpse	r31, r1
    1dc0:	f8 cf       	rjmp	.-16     	; 0x1db2 <__floatsisf+0x1c>
    1dc2:	fa f4       	brpl	.+62     	; 0x1e02 <__floatsisf+0x6c>
    1dc4:	bb 0f       	add	r27, r27
    1dc6:	11 f4       	brne	.+4      	; 0x1dcc <__floatsisf+0x36>
    1dc8:	60 ff       	sbrs	r22, 0
    1dca:	1b c0       	rjmp	.+54     	; 0x1e02 <__floatsisf+0x6c>
    1dcc:	6f 5f       	subi	r22, 0xFF	; 255
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd4:	16 c0       	rjmp	.+44     	; 0x1e02 <__floatsisf+0x6c>
    1dd6:	88 23       	and	r24, r24
    1dd8:	11 f0       	breq	.+4      	; 0x1dde <__floatsisf+0x48>
    1dda:	96 e9       	ldi	r25, 0x96	; 150
    1ddc:	11 c0       	rjmp	.+34     	; 0x1e00 <__floatsisf+0x6a>
    1dde:	77 23       	and	r23, r23
    1de0:	21 f0       	breq	.+8      	; 0x1dea <__floatsisf+0x54>
    1de2:	9e e8       	ldi	r25, 0x8E	; 142
    1de4:	87 2f       	mov	r24, r23
    1de6:	76 2f       	mov	r23, r22
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <__floatsisf+0x5e>
    1dea:	66 23       	and	r22, r22
    1dec:	71 f0       	breq	.+28     	; 0x1e0a <__floatsisf+0x74>
    1dee:	96 e8       	ldi	r25, 0x86	; 134
    1df0:	86 2f       	mov	r24, r22
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	2a f0       	brmi	.+10     	; 0x1e02 <__floatsisf+0x6c>
    1df8:	9a 95       	dec	r25
    1dfa:	66 0f       	add	r22, r22
    1dfc:	77 1f       	adc	r23, r23
    1dfe:	88 1f       	adc	r24, r24
    1e00:	da f7       	brpl	.-10     	; 0x1df8 <__floatsisf+0x62>
    1e02:	88 0f       	add	r24, r24
    1e04:	96 95       	lsr	r25
    1e06:	87 95       	ror	r24
    1e08:	97 f9       	bld	r25, 7
    1e0a:	08 95       	ret

00001e0c <__fp_cmp>:
    1e0c:	99 0f       	add	r25, r25
    1e0e:	00 08       	sbc	r0, r0
    1e10:	55 0f       	add	r21, r21
    1e12:	aa 0b       	sbc	r26, r26
    1e14:	e0 e8       	ldi	r30, 0x80	; 128
    1e16:	fe ef       	ldi	r31, 0xFE	; 254
    1e18:	16 16       	cp	r1, r22
    1e1a:	17 06       	cpc	r1, r23
    1e1c:	e8 07       	cpc	r30, r24
    1e1e:	f9 07       	cpc	r31, r25
    1e20:	c0 f0       	brcs	.+48     	; 0x1e52 <__fp_cmp+0x46>
    1e22:	12 16       	cp	r1, r18
    1e24:	13 06       	cpc	r1, r19
    1e26:	e4 07       	cpc	r30, r20
    1e28:	f5 07       	cpc	r31, r21
    1e2a:	98 f0       	brcs	.+38     	; 0x1e52 <__fp_cmp+0x46>
    1e2c:	62 1b       	sub	r22, r18
    1e2e:	73 0b       	sbc	r23, r19
    1e30:	84 0b       	sbc	r24, r20
    1e32:	95 0b       	sbc	r25, r21
    1e34:	39 f4       	brne	.+14     	; 0x1e44 <__fp_cmp+0x38>
    1e36:	0a 26       	eor	r0, r26
    1e38:	61 f0       	breq	.+24     	; 0x1e52 <__fp_cmp+0x46>
    1e3a:	23 2b       	or	r18, r19
    1e3c:	24 2b       	or	r18, r20
    1e3e:	25 2b       	or	r18, r21
    1e40:	21 f4       	brne	.+8      	; 0x1e4a <__fp_cmp+0x3e>
    1e42:	08 95       	ret
    1e44:	0a 26       	eor	r0, r26
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <__fp_cmp+0x3e>
    1e48:	a1 40       	sbci	r26, 0x01	; 1
    1e4a:	a6 95       	lsr	r26
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	81 1d       	adc	r24, r1
    1e50:	81 1d       	adc	r24, r1
    1e52:	08 95       	ret

00001e54 <__fp_inf>:
    1e54:	97 f9       	bld	r25, 7
    1e56:	9f 67       	ori	r25, 0x7F	; 127
    1e58:	80 e8       	ldi	r24, 0x80	; 128
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	08 95       	ret

00001e60 <__fp_nan>:
    1e60:	9f ef       	ldi	r25, 0xFF	; 255
    1e62:	80 ec       	ldi	r24, 0xC0	; 192
    1e64:	08 95       	ret

00001e66 <__fp_pscA>:
    1e66:	00 24       	eor	r0, r0
    1e68:	0a 94       	dec	r0
    1e6a:	16 16       	cp	r1, r22
    1e6c:	17 06       	cpc	r1, r23
    1e6e:	18 06       	cpc	r1, r24
    1e70:	09 06       	cpc	r0, r25
    1e72:	08 95       	ret

00001e74 <__fp_pscB>:
    1e74:	00 24       	eor	r0, r0
    1e76:	0a 94       	dec	r0
    1e78:	12 16       	cp	r1, r18
    1e7a:	13 06       	cpc	r1, r19
    1e7c:	14 06       	cpc	r1, r20
    1e7e:	05 06       	cpc	r0, r21
    1e80:	08 95       	ret

00001e82 <__fp_round>:
    1e82:	09 2e       	mov	r0, r25
    1e84:	03 94       	inc	r0
    1e86:	00 0c       	add	r0, r0
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <__fp_round+0xc>
    1e8a:	88 23       	and	r24, r24
    1e8c:	52 f0       	brmi	.+20     	; 0x1ea2 <__fp_round+0x20>
    1e8e:	bb 0f       	add	r27, r27
    1e90:	40 f4       	brcc	.+16     	; 0x1ea2 <__fp_round+0x20>
    1e92:	bf 2b       	or	r27, r31
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <__fp_round+0x18>
    1e96:	60 ff       	sbrs	r22, 0
    1e98:	04 c0       	rjmp	.+8      	; 0x1ea2 <__fp_round+0x20>
    1e9a:	6f 5f       	subi	r22, 0xFF	; 255
    1e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea2:	08 95       	ret

00001ea4 <__fp_split3>:
    1ea4:	57 fd       	sbrc	r21, 7
    1ea6:	90 58       	subi	r25, 0x80	; 128
    1ea8:	44 0f       	add	r20, r20
    1eaa:	55 1f       	adc	r21, r21
    1eac:	59 f0       	breq	.+22     	; 0x1ec4 <__fp_splitA+0x10>
    1eae:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb0:	71 f0       	breq	.+28     	; 0x1ece <__fp_splitA+0x1a>
    1eb2:	47 95       	ror	r20

00001eb4 <__fp_splitA>:
    1eb4:	88 0f       	add	r24, r24
    1eb6:	97 fb       	bst	r25, 7
    1eb8:	99 1f       	adc	r25, r25
    1eba:	61 f0       	breq	.+24     	; 0x1ed4 <__fp_splitA+0x20>
    1ebc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ebe:	79 f0       	breq	.+30     	; 0x1ede <__fp_splitA+0x2a>
    1ec0:	87 95       	ror	r24
    1ec2:	08 95       	ret
    1ec4:	12 16       	cp	r1, r18
    1ec6:	13 06       	cpc	r1, r19
    1ec8:	14 06       	cpc	r1, r20
    1eca:	55 1f       	adc	r21, r21
    1ecc:	f2 cf       	rjmp	.-28     	; 0x1eb2 <__fp_split3+0xe>
    1ece:	46 95       	lsr	r20
    1ed0:	f1 df       	rcall	.-30     	; 0x1eb4 <__fp_splitA>
    1ed2:	08 c0       	rjmp	.+16     	; 0x1ee4 <__fp_splitA+0x30>
    1ed4:	16 16       	cp	r1, r22
    1ed6:	17 06       	cpc	r1, r23
    1ed8:	18 06       	cpc	r1, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	f1 cf       	rjmp	.-30     	; 0x1ec0 <__fp_splitA+0xc>
    1ede:	86 95       	lsr	r24
    1ee0:	71 05       	cpc	r23, r1
    1ee2:	61 05       	cpc	r22, r1
    1ee4:	08 94       	sec
    1ee6:	08 95       	ret

00001ee8 <__fp_zero>:
    1ee8:	e8 94       	clt

00001eea <__fp_szero>:
    1eea:	bb 27       	eor	r27, r27
    1eec:	66 27       	eor	r22, r22
    1eee:	77 27       	eor	r23, r23
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	97 f9       	bld	r25, 7
    1ef4:	08 95       	ret

00001ef6 <__gesf2>:
    1ef6:	8a df       	rcall	.-236    	; 0x1e0c <__fp_cmp>
    1ef8:	08 f4       	brcc	.+2      	; 0x1efc <__gesf2+0x6>
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	08 95       	ret

00001efe <__mulsf3>:
    1efe:	0b d0       	rcall	.+22     	; 0x1f16 <__mulsf3x>
    1f00:	c0 cf       	rjmp	.-128    	; 0x1e82 <__fp_round>
    1f02:	b1 df       	rcall	.-158    	; 0x1e66 <__fp_pscA>
    1f04:	28 f0       	brcs	.+10     	; 0x1f10 <__mulsf3+0x12>
    1f06:	b6 df       	rcall	.-148    	; 0x1e74 <__fp_pscB>
    1f08:	18 f0       	brcs	.+6      	; 0x1f10 <__mulsf3+0x12>
    1f0a:	95 23       	and	r25, r21
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <__mulsf3+0x12>
    1f0e:	a2 cf       	rjmp	.-188    	; 0x1e54 <__fp_inf>
    1f10:	a7 cf       	rjmp	.-178    	; 0x1e60 <__fp_nan>
    1f12:	11 24       	eor	r1, r1
    1f14:	ea cf       	rjmp	.-44     	; 0x1eea <__fp_szero>

00001f16 <__mulsf3x>:
    1f16:	c6 df       	rcall	.-116    	; 0x1ea4 <__fp_split3>
    1f18:	a0 f3       	brcs	.-24     	; 0x1f02 <__mulsf3+0x4>

00001f1a <__mulsf3_pse>:
    1f1a:	95 9f       	mul	r25, r21
    1f1c:	d1 f3       	breq	.-12     	; 0x1f12 <__mulsf3+0x14>
    1f1e:	95 0f       	add	r25, r21
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	55 1f       	adc	r21, r21
    1f24:	62 9f       	mul	r22, r18
    1f26:	f0 01       	movw	r30, r0
    1f28:	72 9f       	mul	r23, r18
    1f2a:	bb 27       	eor	r27, r27
    1f2c:	f0 0d       	add	r31, r0
    1f2e:	b1 1d       	adc	r27, r1
    1f30:	63 9f       	mul	r22, r19
    1f32:	aa 27       	eor	r26, r26
    1f34:	f0 0d       	add	r31, r0
    1f36:	b1 1d       	adc	r27, r1
    1f38:	aa 1f       	adc	r26, r26
    1f3a:	64 9f       	mul	r22, r20
    1f3c:	66 27       	eor	r22, r22
    1f3e:	b0 0d       	add	r27, r0
    1f40:	a1 1d       	adc	r26, r1
    1f42:	66 1f       	adc	r22, r22
    1f44:	82 9f       	mul	r24, r18
    1f46:	22 27       	eor	r18, r18
    1f48:	b0 0d       	add	r27, r0
    1f4a:	a1 1d       	adc	r26, r1
    1f4c:	62 1f       	adc	r22, r18
    1f4e:	73 9f       	mul	r23, r19
    1f50:	b0 0d       	add	r27, r0
    1f52:	a1 1d       	adc	r26, r1
    1f54:	62 1f       	adc	r22, r18
    1f56:	83 9f       	mul	r24, r19
    1f58:	a0 0d       	add	r26, r0
    1f5a:	61 1d       	adc	r22, r1
    1f5c:	22 1f       	adc	r18, r18
    1f5e:	74 9f       	mul	r23, r20
    1f60:	33 27       	eor	r19, r19
    1f62:	a0 0d       	add	r26, r0
    1f64:	61 1d       	adc	r22, r1
    1f66:	23 1f       	adc	r18, r19
    1f68:	84 9f       	mul	r24, r20
    1f6a:	60 0d       	add	r22, r0
    1f6c:	21 1d       	adc	r18, r1
    1f6e:	82 2f       	mov	r24, r18
    1f70:	76 2f       	mov	r23, r22
    1f72:	6a 2f       	mov	r22, r26
    1f74:	11 24       	eor	r1, r1
    1f76:	9f 57       	subi	r25, 0x7F	; 127
    1f78:	50 40       	sbci	r21, 0x00	; 0
    1f7a:	8a f0       	brmi	.+34     	; 0x1f9e <__mulsf3_pse+0x84>
    1f7c:	e1 f0       	breq	.+56     	; 0x1fb6 <__mulsf3_pse+0x9c>
    1f7e:	88 23       	and	r24, r24
    1f80:	4a f0       	brmi	.+18     	; 0x1f94 <__mulsf3_pse+0x7a>
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	bb 1f       	adc	r27, r27
    1f88:	66 1f       	adc	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	91 50       	subi	r25, 0x01	; 1
    1f90:	50 40       	sbci	r21, 0x00	; 0
    1f92:	a9 f7       	brne	.-22     	; 0x1f7e <__mulsf3_pse+0x64>
    1f94:	9e 3f       	cpi	r25, 0xFE	; 254
    1f96:	51 05       	cpc	r21, r1
    1f98:	70 f0       	brcs	.+28     	; 0x1fb6 <__mulsf3_pse+0x9c>
    1f9a:	5c cf       	rjmp	.-328    	; 0x1e54 <__fp_inf>
    1f9c:	a6 cf       	rjmp	.-180    	; 0x1eea <__fp_szero>
    1f9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa0:	ec f3       	brlt	.-6      	; 0x1f9c <__mulsf3_pse+0x82>
    1fa2:	98 3e       	cpi	r25, 0xE8	; 232
    1fa4:	dc f3       	brlt	.-10     	; 0x1f9c <__mulsf3_pse+0x82>
    1fa6:	86 95       	lsr	r24
    1fa8:	77 95       	ror	r23
    1faa:	67 95       	ror	r22
    1fac:	b7 95       	ror	r27
    1fae:	f7 95       	ror	r31
    1fb0:	e7 95       	ror	r30
    1fb2:	9f 5f       	subi	r25, 0xFF	; 255
    1fb4:	c1 f7       	brne	.-16     	; 0x1fa6 <__mulsf3_pse+0x8c>
    1fb6:	fe 2b       	or	r31, r30
    1fb8:	88 0f       	add	r24, r24
    1fba:	91 1d       	adc	r25, r1
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	97 f9       	bld	r25, 7
    1fc2:	08 95       	ret

00001fc4 <__tablejump2__>:
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	00 24       	eor	r0, r0
    1fca:	00 1c       	adc	r0, r0
    1fcc:	0b be       	out	0x3b, r0	; 59
    1fce:	07 90       	elpm	r0, Z+
    1fd0:	f6 91       	elpm	r31, Z
    1fd2:	e0 2d       	mov	r30, r0
    1fd4:	09 94       	ijmp

00001fd6 <printf>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	ae 01       	movw	r20, r28
    1fe0:	4b 5f       	subi	r20, 0xFB	; 251
    1fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe4:	fa 01       	movw	r30, r20
    1fe6:	61 91       	ld	r22, Z+
    1fe8:	71 91       	ld	r23, Z+
    1fea:	af 01       	movw	r20, r30
    1fec:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <__iob+0x2>
    1ff0:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <__iob+0x3>
    1ff4:	38 d0       	rcall	.+112    	; 0x2066 <vfprintf>
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <putchar>:
    1ffc:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <__iob+0x2>
    2000:	70 91 3d 04 	lds	r23, 0x043D	; 0x80043d <__iob+0x3>
    2004:	43 c2       	rjmp	.+1158   	; 0x248c <fputc>

00002006 <puts>:
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <__iob+0x2>
    2012:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <__iob+0x3>
    2016:	23 81       	ldd	r18, Z+3	; 0x03
    2018:	21 ff       	sbrs	r18, 1
    201a:	1b c0       	rjmp	.+54     	; 0x2052 <puts+0x4c>
    201c:	8c 01       	movw	r16, r24
    201e:	d0 e0       	ldi	r29, 0x00	; 0
    2020:	c0 e0       	ldi	r28, 0x00	; 0
    2022:	f8 01       	movw	r30, r16
    2024:	81 91       	ld	r24, Z+
    2026:	8f 01       	movw	r16, r30
    2028:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <__iob+0x2>
    202c:	70 91 3d 04 	lds	r23, 0x043D	; 0x80043d <__iob+0x3>
    2030:	db 01       	movw	r26, r22
    2032:	18 96       	adiw	r26, 0x08	; 8
    2034:	ed 91       	ld	r30, X+
    2036:	fc 91       	ld	r31, X
    2038:	19 97       	sbiw	r26, 0x09	; 9
    203a:	88 23       	and	r24, r24
    203c:	31 f0       	breq	.+12     	; 0x204a <puts+0x44>
    203e:	09 95       	icall
    2040:	89 2b       	or	r24, r25
    2042:	79 f3       	breq	.-34     	; 0x2022 <puts+0x1c>
    2044:	df ef       	ldi	r29, 0xFF	; 255
    2046:	cf ef       	ldi	r28, 0xFF	; 255
    2048:	ec cf       	rjmp	.-40     	; 0x2022 <puts+0x1c>
    204a:	8a e0       	ldi	r24, 0x0A	; 10
    204c:	09 95       	icall
    204e:	89 2b       	or	r24, r25
    2050:	19 f0       	breq	.+6      	; 0x2058 <puts+0x52>
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	9f ef       	ldi	r25, 0xFF	; 255
    2056:	02 c0       	rjmp	.+4      	; 0x205c <puts+0x56>
    2058:	8d 2f       	mov	r24, r29
    205a:	9c 2f       	mov	r25, r28
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	08 95       	ret

00002066 <vfprintf>:
    2066:	2f 92       	push	r2
    2068:	3f 92       	push	r3
    206a:	4f 92       	push	r4
    206c:	5f 92       	push	r5
    206e:	6f 92       	push	r6
    2070:	7f 92       	push	r7
    2072:	8f 92       	push	r8
    2074:	9f 92       	push	r9
    2076:	af 92       	push	r10
    2078:	bf 92       	push	r11
    207a:	cf 92       	push	r12
    207c:	df 92       	push	r13
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	2b 97       	sbiw	r28, 0x0b	; 11
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	6c 01       	movw	r12, r24
    209c:	7b 01       	movw	r14, r22
    209e:	8a 01       	movw	r16, r20
    20a0:	fc 01       	movw	r30, r24
    20a2:	17 82       	std	Z+7, r1	; 0x07
    20a4:	16 82       	std	Z+6, r1	; 0x06
    20a6:	83 81       	ldd	r24, Z+3	; 0x03
    20a8:	81 ff       	sbrs	r24, 1
    20aa:	bf c1       	rjmp	.+894    	; 0x242a <vfprintf+0x3c4>
    20ac:	ce 01       	movw	r24, r28
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	3c 01       	movw	r6, r24
    20b2:	f6 01       	movw	r30, r12
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	f7 01       	movw	r30, r14
    20b8:	93 fd       	sbrc	r25, 3
    20ba:	85 91       	lpm	r24, Z+
    20bc:	93 ff       	sbrs	r25, 3
    20be:	81 91       	ld	r24, Z+
    20c0:	7f 01       	movw	r14, r30
    20c2:	88 23       	and	r24, r24
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <vfprintf+0x62>
    20c6:	ad c1       	rjmp	.+858    	; 0x2422 <vfprintf+0x3bc>
    20c8:	85 32       	cpi	r24, 0x25	; 37
    20ca:	39 f4       	brne	.+14     	; 0x20da <vfprintf+0x74>
    20cc:	93 fd       	sbrc	r25, 3
    20ce:	85 91       	lpm	r24, Z+
    20d0:	93 ff       	sbrs	r25, 3
    20d2:	81 91       	ld	r24, Z+
    20d4:	7f 01       	movw	r14, r30
    20d6:	85 32       	cpi	r24, 0x25	; 37
    20d8:	21 f4       	brne	.+8      	; 0x20e2 <vfprintf+0x7c>
    20da:	b6 01       	movw	r22, r12
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	d6 d1       	rcall	.+940    	; 0x248c <fputc>
    20e0:	e8 cf       	rjmp	.-48     	; 0x20b2 <vfprintf+0x4c>
    20e2:	91 2c       	mov	r9, r1
    20e4:	21 2c       	mov	r2, r1
    20e6:	31 2c       	mov	r3, r1
    20e8:	ff e1       	ldi	r31, 0x1F	; 31
    20ea:	f3 15       	cp	r31, r3
    20ec:	d8 f0       	brcs	.+54     	; 0x2124 <vfprintf+0xbe>
    20ee:	8b 32       	cpi	r24, 0x2B	; 43
    20f0:	79 f0       	breq	.+30     	; 0x2110 <vfprintf+0xaa>
    20f2:	38 f4       	brcc	.+14     	; 0x2102 <vfprintf+0x9c>
    20f4:	80 32       	cpi	r24, 0x20	; 32
    20f6:	79 f0       	breq	.+30     	; 0x2116 <vfprintf+0xb0>
    20f8:	83 32       	cpi	r24, 0x23	; 35
    20fa:	a1 f4       	brne	.+40     	; 0x2124 <vfprintf+0xbe>
    20fc:	23 2d       	mov	r18, r3
    20fe:	20 61       	ori	r18, 0x10	; 16
    2100:	1d c0       	rjmp	.+58     	; 0x213c <vfprintf+0xd6>
    2102:	8d 32       	cpi	r24, 0x2D	; 45
    2104:	61 f0       	breq	.+24     	; 0x211e <vfprintf+0xb8>
    2106:	80 33       	cpi	r24, 0x30	; 48
    2108:	69 f4       	brne	.+26     	; 0x2124 <vfprintf+0xbe>
    210a:	23 2d       	mov	r18, r3
    210c:	21 60       	ori	r18, 0x01	; 1
    210e:	16 c0       	rjmp	.+44     	; 0x213c <vfprintf+0xd6>
    2110:	83 2d       	mov	r24, r3
    2112:	82 60       	ori	r24, 0x02	; 2
    2114:	38 2e       	mov	r3, r24
    2116:	e3 2d       	mov	r30, r3
    2118:	e4 60       	ori	r30, 0x04	; 4
    211a:	3e 2e       	mov	r3, r30
    211c:	2a c0       	rjmp	.+84     	; 0x2172 <vfprintf+0x10c>
    211e:	f3 2d       	mov	r31, r3
    2120:	f8 60       	ori	r31, 0x08	; 8
    2122:	1d c0       	rjmp	.+58     	; 0x215e <vfprintf+0xf8>
    2124:	37 fc       	sbrc	r3, 7
    2126:	2d c0       	rjmp	.+90     	; 0x2182 <vfprintf+0x11c>
    2128:	20 ed       	ldi	r18, 0xD0	; 208
    212a:	28 0f       	add	r18, r24
    212c:	2a 30       	cpi	r18, 0x0A	; 10
    212e:	40 f0       	brcs	.+16     	; 0x2140 <vfprintf+0xda>
    2130:	8e 32       	cpi	r24, 0x2E	; 46
    2132:	b9 f4       	brne	.+46     	; 0x2162 <vfprintf+0xfc>
    2134:	36 fc       	sbrc	r3, 6
    2136:	75 c1       	rjmp	.+746    	; 0x2422 <vfprintf+0x3bc>
    2138:	23 2d       	mov	r18, r3
    213a:	20 64       	ori	r18, 0x40	; 64
    213c:	32 2e       	mov	r3, r18
    213e:	19 c0       	rjmp	.+50     	; 0x2172 <vfprintf+0x10c>
    2140:	36 fe       	sbrs	r3, 6
    2142:	06 c0       	rjmp	.+12     	; 0x2150 <vfprintf+0xea>
    2144:	8a e0       	ldi	r24, 0x0A	; 10
    2146:	98 9e       	mul	r9, r24
    2148:	20 0d       	add	r18, r0
    214a:	11 24       	eor	r1, r1
    214c:	92 2e       	mov	r9, r18
    214e:	11 c0       	rjmp	.+34     	; 0x2172 <vfprintf+0x10c>
    2150:	ea e0       	ldi	r30, 0x0A	; 10
    2152:	2e 9e       	mul	r2, r30
    2154:	20 0d       	add	r18, r0
    2156:	11 24       	eor	r1, r1
    2158:	22 2e       	mov	r2, r18
    215a:	f3 2d       	mov	r31, r3
    215c:	f0 62       	ori	r31, 0x20	; 32
    215e:	3f 2e       	mov	r3, r31
    2160:	08 c0       	rjmp	.+16     	; 0x2172 <vfprintf+0x10c>
    2162:	8c 36       	cpi	r24, 0x6C	; 108
    2164:	21 f4       	brne	.+8      	; 0x216e <vfprintf+0x108>
    2166:	83 2d       	mov	r24, r3
    2168:	80 68       	ori	r24, 0x80	; 128
    216a:	38 2e       	mov	r3, r24
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <vfprintf+0x10c>
    216e:	88 36       	cpi	r24, 0x68	; 104
    2170:	41 f4       	brne	.+16     	; 0x2182 <vfprintf+0x11c>
    2172:	f7 01       	movw	r30, r14
    2174:	93 fd       	sbrc	r25, 3
    2176:	85 91       	lpm	r24, Z+
    2178:	93 ff       	sbrs	r25, 3
    217a:	81 91       	ld	r24, Z+
    217c:	7f 01       	movw	r14, r30
    217e:	81 11       	cpse	r24, r1
    2180:	b3 cf       	rjmp	.-154    	; 0x20e8 <vfprintf+0x82>
    2182:	98 2f       	mov	r25, r24
    2184:	9f 7d       	andi	r25, 0xDF	; 223
    2186:	95 54       	subi	r25, 0x45	; 69
    2188:	93 30       	cpi	r25, 0x03	; 3
    218a:	28 f4       	brcc	.+10     	; 0x2196 <vfprintf+0x130>
    218c:	0c 5f       	subi	r16, 0xFC	; 252
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	9f e3       	ldi	r25, 0x3F	; 63
    2192:	99 83       	std	Y+1, r25	; 0x01
    2194:	0d c0       	rjmp	.+26     	; 0x21b0 <vfprintf+0x14a>
    2196:	83 36       	cpi	r24, 0x63	; 99
    2198:	31 f0       	breq	.+12     	; 0x21a6 <vfprintf+0x140>
    219a:	83 37       	cpi	r24, 0x73	; 115
    219c:	71 f0       	breq	.+28     	; 0x21ba <vfprintf+0x154>
    219e:	83 35       	cpi	r24, 0x53	; 83
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <vfprintf+0x13e>
    21a2:	55 c0       	rjmp	.+170    	; 0x224e <vfprintf+0x1e8>
    21a4:	20 c0       	rjmp	.+64     	; 0x21e6 <vfprintf+0x180>
    21a6:	f8 01       	movw	r30, r16
    21a8:	80 81       	ld	r24, Z
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	0e 5f       	subi	r16, 0xFE	; 254
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	88 24       	eor	r8, r8
    21b2:	83 94       	inc	r8
    21b4:	91 2c       	mov	r9, r1
    21b6:	53 01       	movw	r10, r6
    21b8:	12 c0       	rjmp	.+36     	; 0x21de <vfprintf+0x178>
    21ba:	28 01       	movw	r4, r16
    21bc:	f2 e0       	ldi	r31, 0x02	; 2
    21be:	4f 0e       	add	r4, r31
    21c0:	51 1c       	adc	r5, r1
    21c2:	f8 01       	movw	r30, r16
    21c4:	a0 80       	ld	r10, Z
    21c6:	b1 80       	ldd	r11, Z+1	; 0x01
    21c8:	36 fe       	sbrs	r3, 6
    21ca:	03 c0       	rjmp	.+6      	; 0x21d2 <vfprintf+0x16c>
    21cc:	69 2d       	mov	r22, r9
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <vfprintf+0x170>
    21d2:	6f ef       	ldi	r22, 0xFF	; 255
    21d4:	7f ef       	ldi	r23, 0xFF	; 255
    21d6:	c5 01       	movw	r24, r10
    21d8:	4e d1       	rcall	.+668    	; 0x2476 <strnlen>
    21da:	4c 01       	movw	r8, r24
    21dc:	82 01       	movw	r16, r4
    21de:	f3 2d       	mov	r31, r3
    21e0:	ff 77       	andi	r31, 0x7F	; 127
    21e2:	3f 2e       	mov	r3, r31
    21e4:	15 c0       	rjmp	.+42     	; 0x2210 <vfprintf+0x1aa>
    21e6:	28 01       	movw	r4, r16
    21e8:	22 e0       	ldi	r18, 0x02	; 2
    21ea:	42 0e       	add	r4, r18
    21ec:	51 1c       	adc	r5, r1
    21ee:	f8 01       	movw	r30, r16
    21f0:	a0 80       	ld	r10, Z
    21f2:	b1 80       	ldd	r11, Z+1	; 0x01
    21f4:	36 fe       	sbrs	r3, 6
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <vfprintf+0x198>
    21f8:	69 2d       	mov	r22, r9
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <vfprintf+0x19c>
    21fe:	6f ef       	ldi	r22, 0xFF	; 255
    2200:	7f ef       	ldi	r23, 0xFF	; 255
    2202:	c5 01       	movw	r24, r10
    2204:	2d d1       	rcall	.+602    	; 0x2460 <strnlen_P>
    2206:	4c 01       	movw	r8, r24
    2208:	f3 2d       	mov	r31, r3
    220a:	f0 68       	ori	r31, 0x80	; 128
    220c:	3f 2e       	mov	r3, r31
    220e:	82 01       	movw	r16, r4
    2210:	33 fc       	sbrc	r3, 3
    2212:	19 c0       	rjmp	.+50     	; 0x2246 <vfprintf+0x1e0>
    2214:	82 2d       	mov	r24, r2
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	88 16       	cp	r8, r24
    221a:	99 06       	cpc	r9, r25
    221c:	a0 f4       	brcc	.+40     	; 0x2246 <vfprintf+0x1e0>
    221e:	b6 01       	movw	r22, r12
    2220:	80 e2       	ldi	r24, 0x20	; 32
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	33 d1       	rcall	.+614    	; 0x248c <fputc>
    2226:	2a 94       	dec	r2
    2228:	f5 cf       	rjmp	.-22     	; 0x2214 <vfprintf+0x1ae>
    222a:	f5 01       	movw	r30, r10
    222c:	37 fc       	sbrc	r3, 7
    222e:	85 91       	lpm	r24, Z+
    2230:	37 fe       	sbrs	r3, 7
    2232:	81 91       	ld	r24, Z+
    2234:	5f 01       	movw	r10, r30
    2236:	b6 01       	movw	r22, r12
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	28 d1       	rcall	.+592    	; 0x248c <fputc>
    223c:	21 10       	cpse	r2, r1
    223e:	2a 94       	dec	r2
    2240:	21 e0       	ldi	r18, 0x01	; 1
    2242:	82 1a       	sub	r8, r18
    2244:	91 08       	sbc	r9, r1
    2246:	81 14       	cp	r8, r1
    2248:	91 04       	cpc	r9, r1
    224a:	79 f7       	brne	.-34     	; 0x222a <vfprintf+0x1c4>
    224c:	e1 c0       	rjmp	.+450    	; 0x2410 <vfprintf+0x3aa>
    224e:	84 36       	cpi	r24, 0x64	; 100
    2250:	11 f0       	breq	.+4      	; 0x2256 <vfprintf+0x1f0>
    2252:	89 36       	cpi	r24, 0x69	; 105
    2254:	39 f5       	brne	.+78     	; 0x22a4 <vfprintf+0x23e>
    2256:	f8 01       	movw	r30, r16
    2258:	37 fe       	sbrs	r3, 7
    225a:	07 c0       	rjmp	.+14     	; 0x226a <vfprintf+0x204>
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	0c 5f       	subi	r16, 0xFC	; 252
    2266:	1f 4f       	sbci	r17, 0xFF	; 255
    2268:	08 c0       	rjmp	.+16     	; 0x227a <vfprintf+0x214>
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	07 2e       	mov	r0, r23
    2270:	00 0c       	add	r0, r0
    2272:	88 0b       	sbc	r24, r24
    2274:	99 0b       	sbc	r25, r25
    2276:	0e 5f       	subi	r16, 0xFE	; 254
    2278:	1f 4f       	sbci	r17, 0xFF	; 255
    227a:	f3 2d       	mov	r31, r3
    227c:	ff 76       	andi	r31, 0x6F	; 111
    227e:	3f 2e       	mov	r3, r31
    2280:	97 ff       	sbrs	r25, 7
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <vfprintf+0x230>
    2284:	90 95       	com	r25
    2286:	80 95       	com	r24
    2288:	70 95       	com	r23
    228a:	61 95       	neg	r22
    228c:	7f 4f       	sbci	r23, 0xFF	; 255
    228e:	8f 4f       	sbci	r24, 0xFF	; 255
    2290:	9f 4f       	sbci	r25, 0xFF	; 255
    2292:	f0 68       	ori	r31, 0x80	; 128
    2294:	3f 2e       	mov	r3, r31
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	a3 01       	movw	r20, r6
    229c:	33 d1       	rcall	.+614    	; 0x2504 <__ultoa_invert>
    229e:	88 2e       	mov	r8, r24
    22a0:	86 18       	sub	r8, r6
    22a2:	44 c0       	rjmp	.+136    	; 0x232c <vfprintf+0x2c6>
    22a4:	85 37       	cpi	r24, 0x75	; 117
    22a6:	31 f4       	brne	.+12     	; 0x22b4 <vfprintf+0x24e>
    22a8:	23 2d       	mov	r18, r3
    22aa:	2f 7e       	andi	r18, 0xEF	; 239
    22ac:	b2 2e       	mov	r11, r18
    22ae:	2a e0       	ldi	r18, 0x0A	; 10
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	25 c0       	rjmp	.+74     	; 0x22fe <vfprintf+0x298>
    22b4:	93 2d       	mov	r25, r3
    22b6:	99 7f       	andi	r25, 0xF9	; 249
    22b8:	b9 2e       	mov	r11, r25
    22ba:	8f 36       	cpi	r24, 0x6F	; 111
    22bc:	c1 f0       	breq	.+48     	; 0x22ee <vfprintf+0x288>
    22be:	18 f4       	brcc	.+6      	; 0x22c6 <vfprintf+0x260>
    22c0:	88 35       	cpi	r24, 0x58	; 88
    22c2:	79 f0       	breq	.+30     	; 0x22e2 <vfprintf+0x27c>
    22c4:	ae c0       	rjmp	.+348    	; 0x2422 <vfprintf+0x3bc>
    22c6:	80 37       	cpi	r24, 0x70	; 112
    22c8:	19 f0       	breq	.+6      	; 0x22d0 <vfprintf+0x26a>
    22ca:	88 37       	cpi	r24, 0x78	; 120
    22cc:	21 f0       	breq	.+8      	; 0x22d6 <vfprintf+0x270>
    22ce:	a9 c0       	rjmp	.+338    	; 0x2422 <vfprintf+0x3bc>
    22d0:	e9 2f       	mov	r30, r25
    22d2:	e0 61       	ori	r30, 0x10	; 16
    22d4:	be 2e       	mov	r11, r30
    22d6:	b4 fe       	sbrs	r11, 4
    22d8:	0d c0       	rjmp	.+26     	; 0x22f4 <vfprintf+0x28e>
    22da:	fb 2d       	mov	r31, r11
    22dc:	f4 60       	ori	r31, 0x04	; 4
    22de:	bf 2e       	mov	r11, r31
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <vfprintf+0x28e>
    22e2:	34 fe       	sbrs	r3, 4
    22e4:	0a c0       	rjmp	.+20     	; 0x22fa <vfprintf+0x294>
    22e6:	29 2f       	mov	r18, r25
    22e8:	26 60       	ori	r18, 0x06	; 6
    22ea:	b2 2e       	mov	r11, r18
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <vfprintf+0x294>
    22ee:	28 e0       	ldi	r18, 0x08	; 8
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <vfprintf+0x298>
    22f4:	20 e1       	ldi	r18, 0x10	; 16
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <vfprintf+0x298>
    22fa:	20 e1       	ldi	r18, 0x10	; 16
    22fc:	32 e0       	ldi	r19, 0x02	; 2
    22fe:	f8 01       	movw	r30, r16
    2300:	b7 fe       	sbrs	r11, 7
    2302:	07 c0       	rjmp	.+14     	; 0x2312 <vfprintf+0x2ac>
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	0c 5f       	subi	r16, 0xFC	; 252
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	06 c0       	rjmp	.+12     	; 0x231e <vfprintf+0x2b8>
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 5f       	subi	r16, 0xFE	; 254
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	a3 01       	movw	r20, r6
    2320:	f1 d0       	rcall	.+482    	; 0x2504 <__ultoa_invert>
    2322:	88 2e       	mov	r8, r24
    2324:	86 18       	sub	r8, r6
    2326:	fb 2d       	mov	r31, r11
    2328:	ff 77       	andi	r31, 0x7F	; 127
    232a:	3f 2e       	mov	r3, r31
    232c:	36 fe       	sbrs	r3, 6
    232e:	0d c0       	rjmp	.+26     	; 0x234a <vfprintf+0x2e4>
    2330:	23 2d       	mov	r18, r3
    2332:	2e 7f       	andi	r18, 0xFE	; 254
    2334:	a2 2e       	mov	r10, r18
    2336:	89 14       	cp	r8, r9
    2338:	58 f4       	brcc	.+22     	; 0x2350 <vfprintf+0x2ea>
    233a:	34 fe       	sbrs	r3, 4
    233c:	0b c0       	rjmp	.+22     	; 0x2354 <vfprintf+0x2ee>
    233e:	32 fc       	sbrc	r3, 2
    2340:	09 c0       	rjmp	.+18     	; 0x2354 <vfprintf+0x2ee>
    2342:	83 2d       	mov	r24, r3
    2344:	8e 7e       	andi	r24, 0xEE	; 238
    2346:	a8 2e       	mov	r10, r24
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <vfprintf+0x2ee>
    234a:	b8 2c       	mov	r11, r8
    234c:	a3 2c       	mov	r10, r3
    234e:	03 c0       	rjmp	.+6      	; 0x2356 <vfprintf+0x2f0>
    2350:	b8 2c       	mov	r11, r8
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <vfprintf+0x2f0>
    2354:	b9 2c       	mov	r11, r9
    2356:	a4 fe       	sbrs	r10, 4
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <vfprintf+0x312>
    235a:	fe 01       	movw	r30, r28
    235c:	e8 0d       	add	r30, r8
    235e:	f1 1d       	adc	r31, r1
    2360:	80 81       	ld	r24, Z
    2362:	80 33       	cpi	r24, 0x30	; 48
    2364:	21 f4       	brne	.+8      	; 0x236e <vfprintf+0x308>
    2366:	9a 2d       	mov	r25, r10
    2368:	99 7e       	andi	r25, 0xE9	; 233
    236a:	a9 2e       	mov	r10, r25
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <vfprintf+0x31a>
    236e:	a2 fe       	sbrs	r10, 2
    2370:	06 c0       	rjmp	.+12     	; 0x237e <vfprintf+0x318>
    2372:	b3 94       	inc	r11
    2374:	b3 94       	inc	r11
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <vfprintf+0x31a>
    2378:	8a 2d       	mov	r24, r10
    237a:	86 78       	andi	r24, 0x86	; 134
    237c:	09 f0       	breq	.+2      	; 0x2380 <vfprintf+0x31a>
    237e:	b3 94       	inc	r11
    2380:	a3 fc       	sbrc	r10, 3
    2382:	10 c0       	rjmp	.+32     	; 0x23a4 <vfprintf+0x33e>
    2384:	a0 fe       	sbrs	r10, 0
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <vfprintf+0x32e>
    2388:	b2 14       	cp	r11, r2
    238a:	80 f4       	brcc	.+32     	; 0x23ac <vfprintf+0x346>
    238c:	28 0c       	add	r2, r8
    238e:	92 2c       	mov	r9, r2
    2390:	9b 18       	sub	r9, r11
    2392:	0d c0       	rjmp	.+26     	; 0x23ae <vfprintf+0x348>
    2394:	b2 14       	cp	r11, r2
    2396:	58 f4       	brcc	.+22     	; 0x23ae <vfprintf+0x348>
    2398:	b6 01       	movw	r22, r12
    239a:	80 e2       	ldi	r24, 0x20	; 32
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	76 d0       	rcall	.+236    	; 0x248c <fputc>
    23a0:	b3 94       	inc	r11
    23a2:	f8 cf       	rjmp	.-16     	; 0x2394 <vfprintf+0x32e>
    23a4:	b2 14       	cp	r11, r2
    23a6:	18 f4       	brcc	.+6      	; 0x23ae <vfprintf+0x348>
    23a8:	2b 18       	sub	r2, r11
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <vfprintf+0x34a>
    23ac:	98 2c       	mov	r9, r8
    23ae:	21 2c       	mov	r2, r1
    23b0:	a4 fe       	sbrs	r10, 4
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <vfprintf+0x36c>
    23b4:	b6 01       	movw	r22, r12
    23b6:	80 e3       	ldi	r24, 0x30	; 48
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	68 d0       	rcall	.+208    	; 0x248c <fputc>
    23bc:	a2 fe       	sbrs	r10, 2
    23be:	16 c0       	rjmp	.+44     	; 0x23ec <vfprintf+0x386>
    23c0:	a1 fc       	sbrc	r10, 1
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <vfprintf+0x364>
    23c4:	88 e7       	ldi	r24, 0x78	; 120
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <vfprintf+0x368>
    23ca:	88 e5       	ldi	r24, 0x58	; 88
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	b6 01       	movw	r22, r12
    23d0:	0c c0       	rjmp	.+24     	; 0x23ea <vfprintf+0x384>
    23d2:	8a 2d       	mov	r24, r10
    23d4:	86 78       	andi	r24, 0x86	; 134
    23d6:	51 f0       	breq	.+20     	; 0x23ec <vfprintf+0x386>
    23d8:	a1 fe       	sbrs	r10, 1
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <vfprintf+0x37a>
    23dc:	8b e2       	ldi	r24, 0x2B	; 43
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <vfprintf+0x37c>
    23e0:	80 e2       	ldi	r24, 0x20	; 32
    23e2:	a7 fc       	sbrc	r10, 7
    23e4:	8d e2       	ldi	r24, 0x2D	; 45
    23e6:	b6 01       	movw	r22, r12
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	50 d0       	rcall	.+160    	; 0x248c <fputc>
    23ec:	89 14       	cp	r8, r9
    23ee:	30 f4       	brcc	.+12     	; 0x23fc <vfprintf+0x396>
    23f0:	b6 01       	movw	r22, r12
    23f2:	80 e3       	ldi	r24, 0x30	; 48
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	4a d0       	rcall	.+148    	; 0x248c <fputc>
    23f8:	9a 94       	dec	r9
    23fa:	f8 cf       	rjmp	.-16     	; 0x23ec <vfprintf+0x386>
    23fc:	8a 94       	dec	r8
    23fe:	f3 01       	movw	r30, r6
    2400:	e8 0d       	add	r30, r8
    2402:	f1 1d       	adc	r31, r1
    2404:	80 81       	ld	r24, Z
    2406:	b6 01       	movw	r22, r12
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	40 d0       	rcall	.+128    	; 0x248c <fputc>
    240c:	81 10       	cpse	r8, r1
    240e:	f6 cf       	rjmp	.-20     	; 0x23fc <vfprintf+0x396>
    2410:	22 20       	and	r2, r2
    2412:	09 f4       	brne	.+2      	; 0x2416 <vfprintf+0x3b0>
    2414:	4e ce       	rjmp	.-868    	; 0x20b2 <vfprintf+0x4c>
    2416:	b6 01       	movw	r22, r12
    2418:	80 e2       	ldi	r24, 0x20	; 32
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	37 d0       	rcall	.+110    	; 0x248c <fputc>
    241e:	2a 94       	dec	r2
    2420:	f7 cf       	rjmp	.-18     	; 0x2410 <vfprintf+0x3aa>
    2422:	f6 01       	movw	r30, r12
    2424:	86 81       	ldd	r24, Z+6	; 0x06
    2426:	97 81       	ldd	r25, Z+7	; 0x07
    2428:	02 c0       	rjmp	.+4      	; 0x242e <vfprintf+0x3c8>
    242a:	8f ef       	ldi	r24, 0xFF	; 255
    242c:	9f ef       	ldi	r25, 0xFF	; 255
    242e:	2b 96       	adiw	r28, 0x0b	; 11
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
    244a:	bf 90       	pop	r11
    244c:	af 90       	pop	r10
    244e:	9f 90       	pop	r9
    2450:	8f 90       	pop	r8
    2452:	7f 90       	pop	r7
    2454:	6f 90       	pop	r6
    2456:	5f 90       	pop	r5
    2458:	4f 90       	pop	r4
    245a:	3f 90       	pop	r3
    245c:	2f 90       	pop	r2
    245e:	08 95       	ret

00002460 <strnlen_P>:
    2460:	fc 01       	movw	r30, r24
    2462:	05 90       	lpm	r0, Z+
    2464:	61 50       	subi	r22, 0x01	; 1
    2466:	70 40       	sbci	r23, 0x00	; 0
    2468:	01 10       	cpse	r0, r1
    246a:	d8 f7       	brcc	.-10     	; 0x2462 <strnlen_P+0x2>
    246c:	80 95       	com	r24
    246e:	90 95       	com	r25
    2470:	8e 0f       	add	r24, r30
    2472:	9f 1f       	adc	r25, r31
    2474:	08 95       	ret

00002476 <strnlen>:
    2476:	fc 01       	movw	r30, r24
    2478:	61 50       	subi	r22, 0x01	; 1
    247a:	70 40       	sbci	r23, 0x00	; 0
    247c:	01 90       	ld	r0, Z+
    247e:	01 10       	cpse	r0, r1
    2480:	d8 f7       	brcc	.-10     	; 0x2478 <strnlen+0x2>
    2482:	80 95       	com	r24
    2484:	90 95       	com	r25
    2486:	8e 0f       	add	r24, r30
    2488:	9f 1f       	adc	r25, r31
    248a:	08 95       	ret

0000248c <fputc>:
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	fb 01       	movw	r30, r22
    2496:	23 81       	ldd	r18, Z+3	; 0x03
    2498:	21 fd       	sbrc	r18, 1
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <fputc+0x16>
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	9f ef       	ldi	r25, 0xFF	; 255
    24a0:	2c c0       	rjmp	.+88     	; 0x24fa <fputc+0x6e>
    24a2:	22 ff       	sbrs	r18, 2
    24a4:	16 c0       	rjmp	.+44     	; 0x24d2 <fputc+0x46>
    24a6:	46 81       	ldd	r20, Z+6	; 0x06
    24a8:	57 81       	ldd	r21, Z+7	; 0x07
    24aa:	24 81       	ldd	r18, Z+4	; 0x04
    24ac:	35 81       	ldd	r19, Z+5	; 0x05
    24ae:	42 17       	cp	r20, r18
    24b0:	53 07       	cpc	r21, r19
    24b2:	44 f4       	brge	.+16     	; 0x24c4 <fputc+0x38>
    24b4:	a0 81       	ld	r26, Z
    24b6:	b1 81       	ldd	r27, Z+1	; 0x01
    24b8:	9d 01       	movw	r18, r26
    24ba:	2f 5f       	subi	r18, 0xFF	; 255
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	31 83       	std	Z+1, r19	; 0x01
    24c0:	20 83       	st	Z, r18
    24c2:	8c 93       	st	X, r24
    24c4:	26 81       	ldd	r18, Z+6	; 0x06
    24c6:	37 81       	ldd	r19, Z+7	; 0x07
    24c8:	2f 5f       	subi	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	37 83       	std	Z+7, r19	; 0x07
    24ce:	26 83       	std	Z+6, r18	; 0x06
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <fputc+0x6e>
    24d2:	8b 01       	movw	r16, r22
    24d4:	ec 01       	movw	r28, r24
    24d6:	fb 01       	movw	r30, r22
    24d8:	00 84       	ldd	r0, Z+8	; 0x08
    24da:	f1 85       	ldd	r31, Z+9	; 0x09
    24dc:	e0 2d       	mov	r30, r0
    24de:	09 95       	icall
    24e0:	89 2b       	or	r24, r25
    24e2:	e1 f6       	brne	.-72     	; 0x249c <fputc+0x10>
    24e4:	d8 01       	movw	r26, r16
    24e6:	16 96       	adiw	r26, 0x06	; 6
    24e8:	8d 91       	ld	r24, X+
    24ea:	9c 91       	ld	r25, X
    24ec:	17 97       	sbiw	r26, 0x07	; 7
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	17 96       	adiw	r26, 0x07	; 7
    24f2:	9c 93       	st	X, r25
    24f4:	8e 93       	st	-X, r24
    24f6:	16 97       	sbiw	r26, 0x06	; 6
    24f8:	ce 01       	movw	r24, r28
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	08 95       	ret

00002504 <__ultoa_invert>:
    2504:	fa 01       	movw	r30, r20
    2506:	aa 27       	eor	r26, r26
    2508:	28 30       	cpi	r18, 0x08	; 8
    250a:	51 f1       	breq	.+84     	; 0x2560 <__ultoa_invert+0x5c>
    250c:	20 31       	cpi	r18, 0x10	; 16
    250e:	81 f1       	breq	.+96     	; 0x2570 <__ultoa_invert+0x6c>
    2510:	e8 94       	clt
    2512:	6f 93       	push	r22
    2514:	6e 7f       	andi	r22, 0xFE	; 254
    2516:	6e 5f       	subi	r22, 0xFE	; 254
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	8f 4f       	sbci	r24, 0xFF	; 255
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	af 4f       	sbci	r26, 0xFF	; 255
    2520:	b1 e0       	ldi	r27, 0x01	; 1
    2522:	3e d0       	rcall	.+124    	; 0x25a0 <__ultoa_invert+0x9c>
    2524:	b4 e0       	ldi	r27, 0x04	; 4
    2526:	3c d0       	rcall	.+120    	; 0x25a0 <__ultoa_invert+0x9c>
    2528:	67 0f       	add	r22, r23
    252a:	78 1f       	adc	r23, r24
    252c:	89 1f       	adc	r24, r25
    252e:	9a 1f       	adc	r25, r26
    2530:	a1 1d       	adc	r26, r1
    2532:	68 0f       	add	r22, r24
    2534:	79 1f       	adc	r23, r25
    2536:	8a 1f       	adc	r24, r26
    2538:	91 1d       	adc	r25, r1
    253a:	a1 1d       	adc	r26, r1
    253c:	6a 0f       	add	r22, r26
    253e:	71 1d       	adc	r23, r1
    2540:	81 1d       	adc	r24, r1
    2542:	91 1d       	adc	r25, r1
    2544:	a1 1d       	adc	r26, r1
    2546:	20 d0       	rcall	.+64     	; 0x2588 <__ultoa_invert+0x84>
    2548:	09 f4       	brne	.+2      	; 0x254c <__ultoa_invert+0x48>
    254a:	68 94       	set
    254c:	3f 91       	pop	r19
    254e:	2a e0       	ldi	r18, 0x0A	; 10
    2550:	26 9f       	mul	r18, r22
    2552:	11 24       	eor	r1, r1
    2554:	30 19       	sub	r19, r0
    2556:	30 5d       	subi	r19, 0xD0	; 208
    2558:	31 93       	st	Z+, r19
    255a:	de f6       	brtc	.-74     	; 0x2512 <__ultoa_invert+0xe>
    255c:	cf 01       	movw	r24, r30
    255e:	08 95       	ret
    2560:	46 2f       	mov	r20, r22
    2562:	47 70       	andi	r20, 0x07	; 7
    2564:	40 5d       	subi	r20, 0xD0	; 208
    2566:	41 93       	st	Z+, r20
    2568:	b3 e0       	ldi	r27, 0x03	; 3
    256a:	0f d0       	rcall	.+30     	; 0x258a <__ultoa_invert+0x86>
    256c:	c9 f7       	brne	.-14     	; 0x2560 <__ultoa_invert+0x5c>
    256e:	f6 cf       	rjmp	.-20     	; 0x255c <__ultoa_invert+0x58>
    2570:	46 2f       	mov	r20, r22
    2572:	4f 70       	andi	r20, 0x0F	; 15
    2574:	40 5d       	subi	r20, 0xD0	; 208
    2576:	4a 33       	cpi	r20, 0x3A	; 58
    2578:	18 f0       	brcs	.+6      	; 0x2580 <__ultoa_invert+0x7c>
    257a:	49 5d       	subi	r20, 0xD9	; 217
    257c:	31 fd       	sbrc	r19, 1
    257e:	40 52       	subi	r20, 0x20	; 32
    2580:	41 93       	st	Z+, r20
    2582:	02 d0       	rcall	.+4      	; 0x2588 <__ultoa_invert+0x84>
    2584:	a9 f7       	brne	.-22     	; 0x2570 <__ultoa_invert+0x6c>
    2586:	ea cf       	rjmp	.-44     	; 0x255c <__ultoa_invert+0x58>
    2588:	b4 e0       	ldi	r27, 0x04	; 4
    258a:	a6 95       	lsr	r26
    258c:	97 95       	ror	r25
    258e:	87 95       	ror	r24
    2590:	77 95       	ror	r23
    2592:	67 95       	ror	r22
    2594:	ba 95       	dec	r27
    2596:	c9 f7       	brne	.-14     	; 0x258a <__ultoa_invert+0x86>
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 05       	cpc	r22, r1
    259c:	71 05       	cpc	r23, r1
    259e:	08 95       	ret
    25a0:	9b 01       	movw	r18, r22
    25a2:	ac 01       	movw	r20, r24
    25a4:	0a 2e       	mov	r0, r26
    25a6:	06 94       	lsr	r0
    25a8:	57 95       	ror	r21
    25aa:	47 95       	ror	r20
    25ac:	37 95       	ror	r19
    25ae:	27 95       	ror	r18
    25b0:	ba 95       	dec	r27
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <__ultoa_invert+0xa2>
    25b4:	62 0f       	add	r22, r18
    25b6:	73 1f       	adc	r23, r19
    25b8:	84 1f       	adc	r24, r20
    25ba:	95 1f       	adc	r25, r21
    25bc:	a0 1d       	adc	r26, r0
    25be:	08 95       	ret

000025c0 <_exit>:
    25c0:	f8 94       	cli

000025c2 <__stop_program>:
    25c2:	ff cf       	rjmp	.-2      	; 0x25c2 <__stop_program>
