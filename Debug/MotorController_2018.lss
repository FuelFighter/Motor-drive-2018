
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000260e  000026a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000260e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000260  0080013e  0080013e  000026e0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000273c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005acb  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b11  00000000  00000000  00008707  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b9c  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eb8  00000000  00000000  0000cdb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001695  00000000  00000000  0000dc6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e28  00000000  00000000  0000f301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00013129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_6>
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_12>
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_16>
      44:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__vector_17>
      48:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_18>
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c7       	rjmp	.+3824   	; 0xf46 <__vector_21>
      56:	00 00       	nop
      58:	58 c7       	rjmp	.+3760   	; 0xf0a <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9b c7       	rjmp	.+3894   	; 0xfb8 <__vector_32>
      82:	00 00       	nop
      84:	7b c7       	rjmp	.+3830   	; 0xf7c <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	33 0b       	sbc	r19, r19
      96:	38 0b       	sbc	r19, r24
      98:	3e 0b       	sbc	r19, r30
      9a:	44 0b       	sbc	r20, r20
      9c:	4a 0b       	sbc	r20, r26
      9e:	4f 0b       	sbc	r20, r31
      a0:	55 0b       	sbc	r21, r21
      a2:	5b 0b       	sbc	r21, r27

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee e0       	ldi	r30, 0x0E	; 14
      b8:	f6 e2       	ldi	r31, 0x26	; 38
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	ae 33       	cpi	r26, 0x3E	; 62
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	ae e3       	ldi	r26, 0x3E	; 62
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ae 39       	cpi	r26, 0x9E	; 158
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	b0 d7       	rcall	.+3936   	; 0x103c <main>
      dc:	0c 94 05 13 	jmp	0x260a	; 0x260a <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <reset_I>:

static float f32_Integrator = 0.0 ;

void reset_I(void)
{
	f32_Integrator = 0;
      e2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <f32_Integrator>
      e6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <f32_Integrator+0x1>
      ea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <f32_Integrator+0x2>
      ee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <f32_Integrator+0x3>
      f2:	08 95       	ret

000000f4 <set_I>:
}

void set_I(uint8_t duty)
{
	f32_Integrator = (duty-50.0)/Ki;
      f4:	68 2f       	mov	r22, r24
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__floatsisf>
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	48 e4       	ldi	r20, 0x48	; 72
     106:	52 e4       	ldi	r21, 0x42	; 66
     108:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__subsf3>
     10c:	23 e3       	ldi	r18, 0x33	; 51
     10e:	33 e3       	ldi	r19, 0x33	; 51
     110:	43 ec       	ldi	r20, 0xC3	; 195
     112:	51 e4       	ldi	r21, 0x41	; 65
     114:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     118:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <f32_Integrator>
     11c:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <f32_Integrator+0x1>
     120:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <f32_Integrator+0x2>
     124:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <f32_Integrator+0x3>
     128:	08 95       	ret

0000012a <controller>:
}

void controller(volatile ModuleValues_t *vals){
     12a:	8f 92       	push	r8
     12c:	9f 92       	push	r9
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ec 01       	movw	r28, r24
	static float f32_DutyCycleCmd = 50.0 ;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	int8_t i8_throttle_cmd = 0;
	
	if (vals->motor_status == BRAKE)
     144:	8c 8d       	ldd	r24, Y+28	; 0x1c
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	21 f4       	brne	.+8      	; 0x152 <controller+0x28>
	{
		i8_throttle_cmd = -(int8_t)vals->u8_brake_cmd ;
     14a:	6e 89       	ldd	r22, Y+22	; 0x16
     14c:	16 2f       	mov	r17, r22
     14e:	11 95       	neg	r17
     150:	01 c0       	rjmp	.+2      	; 0x154 <controller+0x2a>
void controller(volatile ModuleValues_t *vals){
	
	static float f32_DutyCycleCmd = 50.0 ;
	float f32_CurrentDelta = 0.0 ;
	static uint8_t b_saturation = 0;
	int8_t i8_throttle_cmd = 0;
     152:	10 e0       	ldi	r17, 0x00	; 0
	
	if (vals->motor_status == BRAKE)
	{
		i8_throttle_cmd = -(int8_t)vals->u8_brake_cmd ;
	}
	if (vals->motor_status == ACCEL)
     154:	8c 8d       	ldd	r24, Y+28	; 0x1c
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	09 f4       	brne	.+2      	; 0x15c <controller+0x32>
	{
		i8_throttle_cmd = vals->u8_accel_cmd ;
     15a:	1d 89       	ldd	r17, Y+21	; 0x15
	}
	
	if (vals->ctrl_type == CURRENT)
     15c:	89 a1       	ldd	r24, Y+33	; 0x21
     15e:	81 11       	cpse	r24, r1
     160:	8b c0       	rjmp	.+278    	; 0x278 <controller+0x14e>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
     162:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     166:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     16a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     16e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	4e eb       	ldi	r20, 0xBE	; 190
     178:	52 e4       	ldi	r21, 0x42	; 66
     17a:	c7 01       	movw	r24, r14
     17c:	b6 01       	movw	r22, r12
     17e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__gesf2>
     182:	88 23       	and	r24, r24
     184:	54 f4       	brge	.+20     	; 0x19a <controller+0x70>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	48 e4       	ldi	r20, 0x48	; 72
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	c7 01       	movw	r24, r14
     190:	b6 01       	movw	r22, r12
     192:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     196:	18 16       	cp	r1, r24
     198:	ac f0       	brlt	.+42     	; 0x1c4 <controller+0x9a>
		{
			b_saturation = 1 ;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
		} else {
			b_saturation = 0;
		}
		
		f32_CurrentDelta = ((float)(i8_throttle_cmd)-vals->f32_motor_current)	;
     1a0:	c8 80       	ld	r12, Y
     1a2:	d9 80       	ldd	r13, Y+1	; 0x01
     1a4:	ea 80       	ldd	r14, Y+2	; 0x02
     1a6:	fb 80       	ldd	r15, Y+3	; 0x03
     1a8:	61 2f       	mov	r22, r17
     1aa:	11 0f       	add	r17, r17
     1ac:	77 0b       	sbc	r23, r23
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__floatsisf>
     1b6:	a7 01       	movw	r20, r14
     1b8:	96 01       	movw	r18, r12
     1ba:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__subsf3>
     1be:	6b 01       	movw	r12, r22
     1c0:	7c 01       	movw	r14, r24
     1c2:	2d c0       	rjmp	.+90     	; 0x21e <controller+0xf4>
	{
		if (f32_DutyCycleCmd >= 95 || f32_DutyCycleCmd <= 50)
		{
			b_saturation = 1 ;
		} else {
			b_saturation = 0;
     1c4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		}
		
		f32_CurrentDelta = ((float)(i8_throttle_cmd)-vals->f32_motor_current)	;
     1c8:	c8 80       	ld	r12, Y
     1ca:	d9 80       	ldd	r13, Y+1	; 0x01
     1cc:	ea 80       	ldd	r14, Y+2	; 0x02
     1ce:	fb 80       	ldd	r15, Y+3	; 0x03
     1d0:	61 2f       	mov	r22, r17
     1d2:	11 0f       	add	r17, r17
     1d4:	77 0b       	sbc	r23, r23
     1d6:	88 0b       	sbc	r24, r24
     1d8:	99 0b       	sbc	r25, r25
     1da:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__floatsisf>
     1de:	a7 01       	movw	r20, r14
     1e0:	96 01       	movw	r18, r12
     1e2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__subsf3>
     1e6:	6b 01       	movw	r12, r22
     1e8:	7c 01       	movw	r14, r24
		
		if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit) integral windup protection
		{
			f32_Integrator+=f32_CurrentDelta*TimeStep ;
     1ea:	2a e0       	ldi	r18, 0x0A	; 10
     1ec:	37 ed       	ldi	r19, 0xD7	; 215
     1ee:	43 ea       	ldi	r20, 0xA3	; 163
     1f0:	5b e3       	ldi	r21, 0x3B	; 59
     1f2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     1f6:	9b 01       	movw	r18, r22
     1f8:	ac 01       	movw	r20, r24
     1fa:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <f32_Integrator>
     1fe:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <f32_Integrator+0x1>
     202:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <f32_Integrator+0x2>
     206:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <f32_Integrator+0x3>
     20a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__addsf3>
     20e:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <f32_Integrator>
     212:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <f32_Integrator+0x1>
     216:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <f32_Integrator+0x2>
     21a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <f32_Integrator+0x3>
		}
		
		f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator*Ki ;
		f32_DutyCycleCmd=f32_DutyCycleCmd+50.0 ;
     21e:	23 e3       	ldi	r18, 0x33	; 51
     220:	33 e3       	ldi	r19, 0x33	; 51
     222:	43 ec       	ldi	r20, 0xC3	; 195
     224:	51 e4       	ldi	r21, 0x41	; 65
     226:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <f32_Integrator>
     22a:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <f32_Integrator+0x1>
     22e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <f32_Integrator+0x2>
     232:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <f32_Integrator+0x3>
     236:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     23a:	4b 01       	movw	r8, r22
     23c:	5c 01       	movw	r10, r24
     23e:	29 e6       	ldi	r18, 0x69	; 105
     240:	3f e6       	ldi	r19, 0x6F	; 111
     242:	40 ed       	ldi	r20, 0xD0	; 208
     244:	5e e3       	ldi	r21, 0x3E	; 62
     246:	c7 01       	movw	r24, r14
     248:	b6 01       	movw	r22, r12
     24a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     24e:	9b 01       	movw	r18, r22
     250:	ac 01       	movw	r20, r24
     252:	c5 01       	movw	r24, r10
     254:	b4 01       	movw	r22, r8
     256:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__addsf3>
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	48 e4       	ldi	r20, 0x48	; 72
     260:	52 e4       	ldi	r21, 0x42	; 66
     262:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__addsf3>
     266:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     26a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     272:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     276:	19 c0       	rjmp	.+50     	; 0x2aa <controller+0x180>
	
	}else if (vals->ctrl_type == PWM)
     278:	89 a1       	ldd	r24, Y+33	; 0x21
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	b1 f4       	brne	.+44     	; 0x2aa <controller+0x180>
	{
		f32_DutyCycleCmd = (float)(vals->u8_duty_cycle);
     27e:	6f 89       	ldd	r22, Y+23	; 0x17
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     28a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     28e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     292:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     296:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		if (vals->f32_motor_current > 0.5)
     29a:	88 81       	ld	r24, Y
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	aa 81       	ldd	r26, Y+2	; 0x02
     2a0:	bb 81       	ldd	r27, Y+3	; 0x03
		{
			//f32_DutyCycleCmd -- ;
		}
		if (vals->f32_motor_current < -0.5)
     2a2:	88 81       	ld	r24, Y
     2a4:	99 81       	ldd	r25, Y+1	; 0x01
     2a6:	aa 81       	ldd	r26, Y+2	; 0x02
     2a8:	bb 81       	ldd	r27, Y+3	; 0x03
		}
	}
	
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     2aa:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     2ae:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     2b2:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     2b6:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	4e eb       	ldi	r20, 0xBE	; 190
     2c0:	52 e4       	ldi	r21, 0x42	; 66
     2c2:	c7 01       	movw	r24, r14
     2c4:	b6 01       	movw	r22, r12
     2c6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__gesf2>
     2ca:	18 16       	cp	r1, r24
     2cc:	6c f4       	brge	.+26     	; 0x2e8 <controller+0x1be>
	{
		f32_DutyCycleCmd = 95;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	ae eb       	ldi	r26, 0xBE	; 190
     2d4:	b2 e4       	ldi	r27, 0x42	; 66
     2d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     2e6:	16 c0       	rjmp	.+44     	; 0x314 <controller+0x1ea>
	}
	
	if (f32_DutyCycleCmd < 50)// bounding at 50 to prevent rheostatic braking and backwards motion
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	48 e4       	ldi	r20, 0x48	; 72
     2ee:	52 e4       	ldi	r21, 0x42	; 66
     2f0:	c7 01       	movw	r24, r14
     2f2:	b6 01       	movw	r22, r12
     2f4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     2f8:	88 23       	and	r24, r24
     2fa:	64 f4       	brge	.+24     	; 0x314 <controller+0x1ea>
	{
		f32_DutyCycleCmd = 50;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	a8 e4       	ldi	r26, 0x48	; 72
     302:	b2 e4       	ldi	r27, 0x42	; 66
     304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     308:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     30c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     310:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if (SW_MODE == BIPOLAR)
	{
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3 (non inverted)
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
	}else{//UNIPOLAR
		OCR3A = (int)((f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE3
     314:	06 e9       	ldi	r16, 0x96	; 150
     316:	10 e0       	ldi	r17, 0x00	; 0
     318:	f8 01       	movw	r30, r16
     31a:	e0 80       	ld	r14, Z
     31c:	f1 80       	ldd	r15, Z+1	; 0x01
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	48 ec       	ldi	r20, 0xC8	; 200
     324:	52 e4       	ldi	r21, 0x42	; 66
     326:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     32a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     32e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     332:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     336:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     33a:	4b 01       	movw	r8, r22
     33c:	5c 01       	movw	r10, r24
     33e:	b7 01       	movw	r22, r14
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     348:	9b 01       	movw	r18, r22
     34a:	ac 01       	movw	r20, r24
     34c:	c5 01       	movw	r24, r10
     34e:	b4 01       	movw	r22, r8
     350:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     354:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     358:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     35c:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		OCR3B = (int)(ICR3-(f32_DutyCycleCmd/100.0)*ICR3) ; //PWM_PE4
     360:	f8 01       	movw	r30, r16
     362:	60 81       	ld	r22, Z
     364:	71 81       	ldd	r23, Z+1	; 0x01
     366:	00 81       	ld	r16, Z
     368:	11 81       	ldd	r17, Z+1	; 0x01
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     372:	6b 01       	movw	r12, r22
     374:	7c 01       	movw	r14, r24
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	48 ec       	ldi	r20, 0xC8	; 200
     37c:	52 e4       	ldi	r21, 0x42	; 66
     37e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     382:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     386:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     38a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     38e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     392:	4b 01       	movw	r8, r22
     394:	5c 01       	movw	r10, r24
     396:	b8 01       	movw	r22, r16
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     3ac:	9b 01       	movw	r18, r22
     3ae:	ac 01       	movw	r20, r24
     3b0:	c7 01       	movw	r24, r14
     3b2:	b6 01       	movw	r22, r12
     3b4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__subsf3>
     3b8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     3bc:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     3c0:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
	
	vals->u8_duty_cycle = (uint8_t)f32_DutyCycleCmd ; //exporting the duty cycle to be able to read in on the CAN and USB
     3c4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     3c8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     3cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     3d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     3d4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     3d8:	6f 8b       	std	Y+23, r22	; 0x17

}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	bf 90       	pop	r11
     3ec:	af 90       	pop	r10
     3ee:	9f 90       	pop	r9
     3f0:	8f 90       	pop	r8
     3f2:	08 95       	ret

000003f4 <drivers_init>:

void drivers_init() // defining pin PB4 as logical output
{
	DDRB |= (1 << PB4) ;
     3f4:	24 9a       	sbi	0x04, 4	; 4
     3f6:	08 95       	ret

000003f8 <drivers>:
}

void drivers(uint8_t b_state) //when pin PB4 is high : drivers are shut down, when pin is low, drivers are ON (inverted logic) IR2104SPbF drivers
{
	if (b_state == 1)
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		PORTB |= (1 << PB4) ;
     3fc:	2c 9a       	sbi	0x05, 4	; 5
     3fe:	08 95       	ret
	}else{
		PORTB &= ~(1 << PB4) ;
     400:	2c 98       	cbi	0x05, 4	; 5
     402:	08 95       	ret

00000404 <SPI_handler_0>:
		}else if (vals->ctrl_type == PWM)
		{
			vals->u8_duty_cycle = i16_data_received;
		}
	}
}
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
     40a:	66 e4       	ldi	r22, 0x46	; 70
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Set_ADC_Channel_ext>
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	43 e0       	ldi	r20, 0x03	; 3
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	63 e4       	ldi	r22, 0x43	; 67
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	86 e4       	ldi	r24, 0x46	; 70
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <spi_trancieve>
     426:	e3 e4       	ldi	r30, 0x43	; 67
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	61 81       	ldd	r22, Z+1	; 0x01
     42c:	6f 71       	andi	r22, 0x1F	; 31
     42e:	61 83       	std	Z+1, r22	; 0x01
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	76 2f       	mov	r23, r22
     434:	66 27       	eor	r22, r22
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	68 2b       	or	r22, r24
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	ce 01       	movw	r24, r28
     43e:	ca d7       	rcall	.+3988   	; 0x13d4 <handle_current_sensor>
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <SPI_handler_1>:
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	ec 01       	movw	r28, r24
     44c:	66 e4       	ldi	r22, 0x46	; 70
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Set_ADC_Channel_ext>
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	43 e0       	ldi	r20, 0x03	; 3
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	63 e4       	ldi	r22, 0x43	; 67
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	86 e4       	ldi	r24, 0x46	; 70
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <spi_trancieve>
     468:	e3 e4       	ldi	r30, 0x43	; 67
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	61 81       	ldd	r22, Z+1	; 0x01
     46e:	6f 71       	andi	r22, 0x1F	; 31
     470:	61 83       	std	Z+1, r22	; 0x01
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	76 2f       	mov	r23, r22
     476:	66 27       	eor	r22, r22
     478:	82 81       	ldd	r24, Z+2	; 0x02
     47a:	68 2b       	or	r22, r24
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	ce 01       	movw	r24, r28
     480:	a9 d7       	rcall	.+3922   	; 0x13d4 <handle_current_sensor>
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <SPI_handler_2>:
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec 01       	movw	r28, r24
     48e:	66 e4       	ldi	r22, 0x46	; 70
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Set_ADC_Channel_ext>
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	43 e0       	ldi	r20, 0x03	; 3
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	63 e4       	ldi	r22, 0x43	; 67
     4a0:	71 e0       	ldi	r23, 0x01	; 1
     4a2:	86 e4       	ldi	r24, 0x46	; 70
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <spi_trancieve>
     4aa:	e3 e4       	ldi	r30, 0x43	; 67
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	61 81       	ldd	r22, Z+1	; 0x01
     4b0:	6f 71       	andi	r22, 0x1F	; 31
     4b2:	61 83       	std	Z+1, r22	; 0x01
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	76 2f       	mov	r23, r22
     4b8:	66 27       	eor	r22, r22
     4ba:	82 81       	ldd	r24, Z+2	; 0x02
     4bc:	68 2b       	or	r22, r24
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	49 e8       	ldi	r20, 0x89	; 137
     4cc:	52 e4       	ldi	r21, 0x42	; 66
     4ce:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     4d2:	2a e9       	ldi	r18, 0x9A	; 154
     4d4:	39 e9       	ldi	r19, 0x99	; 153
     4d6:	49 e9       	ldi	r20, 0x99	; 153
     4d8:	5e e3       	ldi	r21, 0x3E	; 62
     4da:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__addsf3>
     4de:	68 83       	st	Y, r22
     4e0:	79 83       	std	Y+1, r23	; 0x01
     4e2:	8a 83       	std	Y+2, r24	; 0x02
     4e4:	9b 83       	std	Y+3, r25	; 0x03
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <SPI_handler_4>:
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
     4f2:	66 e4       	ldi	r22, 0x46	; 70
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Set_ADC_Channel_ext>
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	43 e0       	ldi	r20, 0x03	; 3
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	63 e4       	ldi	r22, 0x43	; 67
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	86 e4       	ldi	r24, 0x46	; 70
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <spi_trancieve>
     50e:	e3 e4       	ldi	r30, 0x43	; 67
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	61 81       	ldd	r22, Z+1	; 0x01
     514:	6f 71       	andi	r22, 0x1F	; 31
     516:	61 83       	std	Z+1, r22	; 0x01
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	76 2f       	mov	r23, r22
     51c:	66 27       	eor	r22, r22
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	68 2b       	or	r22, r24
     522:	ce 01       	movw	r24, r28
     524:	d2 d7       	rcall	.+4004   	; 0x14ca <handle_temp_sensor>
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <handle_can>:
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	8c 01       	movw	r16, r24
     536:	eb 01       	movw	r28, r22
     538:	cb 01       	movw	r24, r22
     53a:	0e 94 a7 0c 	call	0x194e	; 0x194e <can_read_message_if_new>
     53e:	88 23       	and	r24, r24
     540:	09 f4       	brne	.+2      	; 0x544 <handle_can+0x18>
     542:	49 c0       	rjmp	.+146    	; 0x5d6 <handle_can+0xaa>
     544:	f8 01       	movw	r30, r16
     546:	84 8d       	ldd	r24, Z+28	; 0x1c
     548:	84 30       	cpi	r24, 0x04	; 4
     54a:	09 f4       	brne	.+2      	; 0x54e <handle_can+0x22>
     54c:	44 c0       	rjmp	.+136    	; 0x5d6 <handle_can+0xaa>
     54e:	88 81       	ld	r24, Y
     550:	99 81       	ldd	r25, Y+1	; 0x01
     552:	80 32       	cpi	r24, 0x20	; 32
     554:	f2 e0       	ldi	r31, 0x02	; 2
     556:	9f 07       	cpc	r25, r31
     558:	a9 f1       	breq	.+106    	; 0x5c4 <handle_can+0x98>
     55a:	80 33       	cpi	r24, 0x30	; 48
     55c:	92 40       	sbci	r25, 0x02	; 2
     55e:	d9 f5       	brne	.+118    	; 0x5d6 <handle_can+0xaa>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	f8 01       	movw	r30, r16
     564:	85 8f       	std	Z+29, r24	; 0x1d
     566:	11 a2       	std	Z+33, r1	; 0x21
     568:	82 e3       	ldi	r24, 0x32	; 50
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	91 8f       	std	Z+25, r25	; 0x19
     56e:	80 8f       	std	Z+24, r24	; 0x18
     570:	8e 81       	ldd	r24, Y+6	; 0x06
     572:	8b 30       	cpi	r24, 0x0B	; 11
     574:	60 f0       	brcs	.+24     	; 0x58e <handle_can+0x62>
     576:	9d ec       	ldi	r25, 0xCD	; 205
     578:	89 9f       	mul	r24, r25
     57a:	81 2d       	mov	r24, r1
     57c:	11 24       	eor	r1, r1
     57e:	86 95       	lsr	r24
     580:	86 95       	lsr	r24
     582:	86 95       	lsr	r24
     584:	85 8b       	std	Z+21, r24	; 0x15
     586:	8e e1       	ldi	r24, 0x1E	; 30
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	93 8f       	std	Z+27, r25	; 0x1b
     58c:	82 8f       	std	Z+26, r24	; 0x1a
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	8c 31       	cpi	r24, 0x1C	; 28
     592:	80 f0       	brcs	.+32     	; 0x5b4 <handle_can+0x88>
     594:	9d ec       	ldi	r25, 0xCD	; 205
     596:	89 9f       	mul	r24, r25
     598:	81 2d       	mov	r24, r1
     59a:	11 24       	eor	r1, r1
     59c:	86 95       	lsr	r24
     59e:	86 95       	lsr	r24
     5a0:	86 95       	lsr	r24
     5a2:	f8 01       	movw	r30, r16
     5a4:	86 8b       	std	Z+22, r24	; 0x16
     5a6:	8e e1       	ldi	r24, 0x1E	; 30
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	93 8f       	std	Z+27, r25	; 0x1b
     5ac:	82 8f       	std	Z+26, r24	; 0x1a
     5ae:	8d 81       	ldd	r24, Y+5	; 0x05
     5b0:	8c 31       	cpi	r24, 0x1C	; 28
     5b2:	10 f4       	brcc	.+4      	; 0x5b8 <handle_can+0x8c>
     5b4:	f8 01       	movw	r30, r16
     5b6:	16 8a       	std	Z+22, r1	; 0x16
     5b8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ba:	8b 30       	cpi	r24, 0x0B	; 11
     5bc:	60 f4       	brcc	.+24     	; 0x5d6 <handle_can+0xaa>
     5be:	f8 01       	movw	r30, r16
     5c0:	15 8a       	std	Z+21, r1	; 0x15
     5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <handle_can+0xaa>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	f8 01       	movw	r30, r16
     5c8:	82 a3       	std	Z+34, r24	; 0x22
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	9c 81       	ldd	r25, Y+4	; 0x04
     5ce:	94 8b       	std	Z+20, r25	; 0x14
     5d0:	83 8b       	std	Z+19, r24	; 0x13
     5d2:	8d 81       	ldd	r24, Y+5	; 0x05
     5d4:	86 8f       	std	Z+30, r24	; 0x1e
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <handle_motor_status_can_msg>:
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	05 e0       	ldi	r16, 0x05	; 5
     5ee:	13 e0       	ldi	r17, 0x03	; 3
     5f0:	80 e6       	ldi	r24, 0x60	; 96
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	f8 01       	movw	r30, r16
     5f6:	91 83       	std	Z+1, r25	; 0x01
     5f8:	80 83       	st	Z, r24
     5fa:	88 e0       	ldi	r24, 0x08	; 8
     5fc:	82 83       	std	Z+2, r24	; 0x02
     5fe:	8b a1       	ldd	r24, Y+35	; 0x23
     600:	83 83       	std	Z+3, r24	; 0x03
     602:	6f 81       	ldd	r22, Y+7	; 0x07
     604:	78 85       	ldd	r23, Y+8	; 0x08
     606:	89 85       	ldd	r24, Y+9	; 0x09
     608:	9a 85       	ldd	r25, Y+10	; 0x0a
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	40 e2       	ldi	r20, 0x20	; 32
     610:	51 e4       	ldi	r21, 0x41	; 65
     612:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     616:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     61a:	f8 01       	movw	r30, r16
     61c:	64 83       	std	Z+4, r22	; 0x04
     61e:	6f 85       	ldd	r22, Y+15	; 0x0f
     620:	78 89       	ldd	r23, Y+16	; 0x10
     622:	89 89       	ldd	r24, Y+17	; 0x11
     624:	9a 89       	ldd	r25, Y+18	; 0x12
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e2       	ldi	r20, 0x20	; 32
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     632:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     636:	f8 01       	movw	r30, r16
     638:	76 83       	std	Z+6, r23	; 0x06
     63a:	65 83       	std	Z+5, r22	; 0x05
     63c:	6b 89       	ldd	r22, Y+19	; 0x13
     63e:	7c 89       	ldd	r23, Y+20	; 0x14
     640:	8d 89       	ldd	r24, Y+21	; 0x15
     642:	9e 89       	ldd	r25, Y+22	; 0x16
     644:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     648:	07 2e       	mov	r0, r23
     64a:	00 0c       	add	r0, r0
     64c:	88 0b       	sbc	r24, r24
     64e:	99 0b       	sbc	r25, r25
     650:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__floatsisf>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	48 ec       	ldi	r20, 0xC8	; 200
     65a:	52 e4       	ldi	r21, 0x42	; 66
     65c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     660:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     664:	9b 01       	movw	r18, r22
     666:	77 23       	and	r23, r23
     668:	24 f4       	brge	.+8      	; 0x672 <handle_motor_status_can_msg+0x92>
     66a:	22 27       	eor	r18, r18
     66c:	33 27       	eor	r19, r19
     66e:	26 1b       	sub	r18, r22
     670:	37 0b       	sbc	r19, r23
     672:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <txFrame+0x8>
     676:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <txFrame+0x7>
     67a:	68 8d       	ldd	r22, Y+24	; 0x18
     67c:	79 8d       	ldd	r23, Y+25	; 0x19
     67e:	05 e0       	ldi	r16, 0x05	; 5
     680:	13 e0       	ldi	r17, 0x03	; 3
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     68a:	26 e6       	ldi	r18, 0x66	; 102
     68c:	36 e6       	ldi	r19, 0x66	; 102
     68e:	46 e6       	ldi	r20, 0x66	; 102
     690:	50 e4       	ldi	r21, 0x40	; 64
     692:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	5f e3       	ldi	r21, 0x3F	; 63
     69e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     6a2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     6a6:	f8 01       	movw	r30, r16
     6a8:	61 87       	std	Z+9, r22	; 0x09
     6aa:	8f 89       	ldd	r24, Y+23	; 0x17
     6ac:	82 87       	std	Z+10, r24	; 0x0a
     6ae:	c8 01       	movw	r24, r16
     6b0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <can_send_message>
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <handle_clutch_cmd_can_msg>:
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	ea ef       	ldi	r30, 0xFA	; 250
     6c8:	f2 e0       	ldi	r31, 0x02	; 2
     6ca:	81 e6       	ldi	r24, 0x61	; 97
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	91 83       	std	Z+1, r25	; 0x01
     6d0:	80 83       	st	Z, r24
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	82 83       	std	Z+2, r24	; 0x02
     6d6:	8c a1       	ldd	r24, Y+36	; 0x24
     6d8:	83 83       	std	Z+3, r24	; 0x03
     6da:	cf 01       	movw	r24, r30
     6dc:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <can_send_message>
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <send_uart>:

//sending
//sends motor current and current cmd through USB
void send_uart(volatile ModuleValues_t vals)
{
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
	//printf("%i,%i,%u,%u,%u,%u,%i",(int16_t)(vals.f32_motor_current*1000),(int16_t)(vals.f32_batt_current*1000),(uint16_t)(vals.f32_batt_volt*1000),vals.u8_car_speed,vals.u8_duty_cycle,vals.u8_motor_temp,vals.i8_throttle_cmd);
	printf("\r\n");
     6f6:	85 e3       	ldi	r24, 0x35	; 53
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 28 10 	call	0x2050	; 0x2050 <puts>
	printf(" ctrl mode (0:Cur, 1:PWM) : %u",vals.ctrl_type);
	printf(",");
	printf(" motor mode : %u",vals.motor_status);
	*/
	
	printf("%i",(int16_t)(vals.f32_motor_current*1000));
     6fe:	69 85       	ldd	r22, Y+9	; 0x09
     700:	7a 85       	ldd	r23, Y+10	; 0x0a
     702:	8b 85       	ldd	r24, Y+11	; 0x0b
     704:	9c 85       	ldd	r25, Y+12	; 0x0c
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	4a e7       	ldi	r20, 0x7A	; 122
     70c:	54 e4       	ldi	r21, 0x44	; 68
     70e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     712:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     716:	7f 93       	push	r23
     718:	6f 93       	push	r22
     71a:	0f 2e       	mov	r0, r31
     71c:	f7 e3       	ldi	r31, 0x37	; 55
     71e:	ef 2e       	mov	r14, r31
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	ff 2e       	mov	r15, r31
     724:	f0 2d       	mov	r31, r0
     726:	ff 92       	push	r15
     728:	ef 92       	push	r14
     72a:	0e 94 10 10 	call	0x2020	; 0x2020 <printf>
	printf(",");
     72e:	8c e2       	ldi	r24, 0x2C	; 44
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 23 10 	call	0x2046	; 0x2046 <putchar>
	printf("%u",vals.u8_duty_cycle);
     736:	88 a1       	ldd	r24, Y+32	; 0x20
     738:	1f 92       	push	r1
     73a:	8f 93       	push	r24
     73c:	0a e3       	ldi	r16, 0x3A	; 58
     73e:	11 e0       	ldi	r17, 0x01	; 1
     740:	1f 93       	push	r17
     742:	0f 93       	push	r16
     744:	0e 94 10 10 	call	0x2020	; 0x2020 <printf>
	printf(",");
     748:	8c e2       	ldi	r24, 0x2C	; 44
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 23 10 	call	0x2046	; 0x2046 <putchar>
	printf("%u",vals.u8_accel_cmd*1000);
     750:	4e 8d       	ldd	r20, Y+30	; 0x1e
     752:	28 ee       	ldi	r18, 0xE8	; 232
     754:	33 e0       	ldi	r19, 0x03	; 3
     756:	42 9f       	mul	r20, r18
     758:	c0 01       	movw	r24, r0
     75a:	43 9f       	mul	r20, r19
     75c:	90 0d       	add	r25, r0
     75e:	11 24       	eor	r1, r1
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	1f 93       	push	r17
     766:	0f 93       	push	r16
     768:	0e 94 10 10 	call	0x2020	; 0x2020 <printf>
	printf(",");
     76c:	8c e2       	ldi	r24, 0x2C	; 44
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 23 10 	call	0x2046	; 0x2046 <putchar>
	printf("%u",(uint16_t)(vals.u16_car_speed*360.0));	// vehicle speed in m/h
     774:	6a 8d       	ldd	r22, Y+26	; 0x1a
     776:	7b 8d       	ldd	r23, Y+27	; 0x1b
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	44 eb       	ldi	r20, 0xB4	; 180
     786:	53 e4       	ldi	r21, 0x43	; 67
     788:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     78c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     790:	7f 93       	push	r23
     792:	6f 93       	push	r22
     794:	1f 93       	push	r17
     796:	0f 93       	push	r16
     798:	0e 94 10 10 	call	0x2020	; 0x2020 <printf>
	printf(",");
     79c:	8c e2       	ldi	r24, 0x2C	; 44
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 23 10 	call	0x2046	; 0x2046 <putchar>
	//printf("%u",(uint16_t)(vals.u16_motor_speed/4.29));
	printf("%u",(uint16_t)(vals.u16_motor_speed*5.03));	// vehicle speed in m/h = rpm*18/375/60*2*pi*0.556/2*3.6
     7a4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     7a6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     7b0:	23 ec       	ldi	r18, 0xC3	; 195
     7b2:	35 ef       	ldi	r19, 0xF5	; 245
     7b4:	40 ea       	ldi	r20, 0xA0	; 160
     7b6:	50 e4       	ldi	r21, 0x40	; 64
     7b8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     7bc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     7c0:	7f 93       	push	r23
     7c2:	6f 93       	push	r22
     7c4:	1f 93       	push	r17
     7c6:	0f 93       	push	r16
     7c8:	0e 94 10 10 	call	0x2020	; 0x2020 <printf>
	printf(",");
     7cc:	8c e2       	ldi	r24, 0x2C	; 44
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 23 10 	call	0x2046	; 0x2046 <putchar>
	printf("%u",(uint16_t)(vals.f32_batt_volt*10));
     7d4:	69 89       	ldd	r22, Y+17	; 0x11
     7d6:	7a 89       	ldd	r23, Y+18	; 0x12
     7d8:	8b 89       	ldd	r24, Y+19	; 0x13
     7da:	9c 89       	ldd	r25, Y+20	; 0x14
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	51 e4       	ldi	r21, 0x41	; 65
     7e4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     7e8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     7ec:	7f 93       	push	r23
     7ee:	6f 93       	push	r22
     7f0:	1f 93       	push	r17
     7f2:	0f 93       	push	r16
     7f4:	0e 94 10 10 	call	0x2020	; 0x2020 <printf>
	printf(",");
     7f8:	8c e2       	ldi	r24, 0x2C	; 44
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 23 10 	call	0x2046	; 0x2046 <putchar>
	printf("%i",(int16_t)(vals.f32_batt_current*1000));
     800:	6d 85       	ldd	r22, Y+13	; 0x0d
     802:	7e 85       	ldd	r23, Y+14	; 0x0e
     804:	8f 85       	ldd	r24, Y+15	; 0x0f
     806:	98 89       	ldd	r25, Y+16	; 0x10
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	4a e7       	ldi	r20, 0x7A	; 122
     80e:	54 e4       	ldi	r21, 0x44	; 68
     810:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     814:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     818:	7f 93       	push	r23
     81a:	6f 93       	push	r22
     81c:	ff 92       	push	r15
     81e:	ef 92       	push	r14
     820:	0e 94 10 10 	call	0x2020	; 0x2020 <printf>
	
}
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	08 95       	ret

0000083c <manage_LEDs>:

///////////////// LED /////////////////////
void manage_LEDs(volatile ModuleValues_t vals)
{	
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
	switch (vals.motor_status)
     844:	89 a1       	ldd	r24, Y+33	; 0x21
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	91 f1       	breq	.+100    	; 0x8ae <manage_LEDs+0x72>
     84a:	28 f4       	brcc	.+10     	; 0x856 <manage_LEDs+0x1a>
     84c:	88 23       	and	r24, r24
     84e:	49 f0       	breq	.+18     	; 0x862 <manage_LEDs+0x26>
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	19 f1       	breq	.+70     	; 0x89a <manage_LEDs+0x5e>
     854:	49 c0       	rjmp	.+146    	; 0x8e8 <manage_LEDs+0xac>
     856:	84 30       	cpi	r24, 0x04	; 4
     858:	f1 f1       	breq	.+124    	; 0x8d6 <manage_LEDs+0x9a>
     85a:	98 f1       	brcs	.+102    	; 0x8c2 <manage_LEDs+0x86>
     85c:	85 30       	cpi	r24, 0x05	; 5
     85e:	99 f0       	breq	.+38     	; 0x886 <manage_LEDs+0x4a>
     860:	43 c0       	rjmp	.+134    	; 0x8e8 <manage_LEDs+0xac>
	{
		case OFF :
			rgbled_turn_off(LED_GREEN);
     862:	80 e4       	ldi	r24, 0x40	; 64
     864:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_on(LED_BLUE);
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_on>
			if (vals.u16_watchdog_can == 0) //no can messages
     86e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     870:	9e 8d       	ldd	r25, Y+30	; 0x1e
     872:	89 2b       	or	r24, r25
     874:	21 f4       	brne	.+8      	; 0x87e <manage_LEDs+0x42>
			{
				rgbled_turn_on(LED_RED);
     876:	80 e2       	ldi	r24, 0x20	; 32
     878:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_on>
     87c:	35 c0       	rjmp	.+106    	; 0x8e8 <manage_LEDs+0xac>
			}else{
				rgbled_turn_off(LED_RED);
     87e:	80 e2       	ldi	r24, 0x20	; 32
     880:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
     884:	31 c0       	rjmp	.+98     	; 0x8e8 <manage_LEDs+0xac>
			}
		break ;
		
		case ENGAGE :
			rgbled_turn_off(LED_RED);
     886:	80 e2       	ldi	r24, 0x20	; 32
     888:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     88c:	80 e4       	ldi	r24, 0x40	; 64
     88e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_on>
			rgbled_turn_on(LED_BLUE);
     892:	80 e8       	ldi	r24, 0x80	; 128
     894:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_on>
		break ;
     898:	27 c0       	rjmp	.+78     	; 0x8e8 <manage_LEDs+0xac>
		
		case ACCEL :
			rgbled_turn_off(LED_RED);
     89a:	80 e2       	ldi	r24, 0x20	; 32
     89c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8a0:	80 e8       	ldi	r24, 0x80	; 128
     8a2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <rgbled_toggle>
		break;
     8ac:	1d c0       	rjmp	.+58     	; 0x8e8 <manage_LEDs+0xac>
		
		case BRAKE :
			rgbled_turn_off(LED_RED);
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_toggle(LED_GREEN);
     8ba:	80 e4       	ldi	r24, 0x40	; 64
     8bc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <rgbled_toggle>
		break;
     8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <manage_LEDs+0xac>
		
		case IDLE :
			rgbled_turn_off(LED_RED);
     8c2:	80 e2       	ldi	r24, 0x20	; 32
     8c4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8c8:	80 e8       	ldi	r24, 0x80	; 128
     8ca:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_on(LED_GREEN);
     8ce:	80 e4       	ldi	r24, 0x40	; 64
     8d0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_on>
		break;
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <manage_LEDs+0xac>
		
		case ERR :
			rgbled_turn_off(LED_GREEN);
     8d6:	80 e4       	ldi	r24, 0x40	; 64
     8d8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_off(LED_BLUE);
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <rgbled_turn_off>
			rgbled_turn_on(LED_RED);
     8e2:	80 e2       	ldi	r24, 0x20	; 32
     8e4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <rgbled_turn_on>
		break;
	}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <speed_init>:
static uint16_t u16_speed_array [4];

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     8ee:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up
     8f0:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     8f2:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50); //|(1<<ISC51); // interrupt on rising edge
     8f4:	ea e6       	ldi	r30, 0x6A	; 106
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	84 60       	ori	r24, 0x04	; 4
     8fc:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     8fe:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     900:	ed 9a       	sbi	0x1d, 5	; 29
     902:	08 95       	ret

00000904 <handle_speed_sensor>:
		u16_speed_array[n] = 0;
	}
}

void handle_speed_sensor(volatile uint16_t *u16_speed, volatile uint16_t *u16_counter) // period in 1ms
{
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	//uint8_t u8_new_speed = (uint8_t)(DISTANCE/(*u16_counter); // speed calculated in mm/ms
	//*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
	//static uint8_t u8_array_pointer_old = 0;
	//static uint8_t u8_array_pointer_new = 1;
	
	if (*u16_counter > 6)
     90c:	fb 01       	movw	r30, r22
     90e:	20 81       	ld	r18, Z
     910:	31 81       	ldd	r19, Z+1	; 0x01
     912:	27 30       	cpi	r18, 0x07	; 7
     914:	31 05       	cpc	r19, r1
     916:	b8 f0       	brcs	.+46     	; 0x946 <handle_speed_sensor+0x42>
     918:	eb 01       	movw	r28, r22
     91a:	8c 01       	movw	r16, r24
		}
		if (u8_array_pointer_old == 5)
		{
			u8_array_pointer_old = 0;
		}*/
		*u16_speed = (uint16_t)(f32_speed_ratio/((float)*u16_counter));
     91c:	60 81       	ld	r22, Z
     91e:	71 81       	ldd	r23, Z+1	; 0x01
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	76 e7       	ldi	r23, 0x76	; 118
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	96 e4       	ldi	r25, 0x46	; 70
     934:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     938:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     93c:	f8 01       	movw	r30, r16
     93e:	71 83       	std	Z+1, r23	; 0x01
     940:	60 83       	st	Z, r22
		//printf("\r%u %u\n", *u16_speed, *u16_counter);
		*u16_counter = 0 ;
     942:	19 82       	std	Y+1, r1	; 0x01
     944:	18 82       	st	Y, r1
	}	
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <compute_synch_duty>:

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	1f 92       	push	r1
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	69 01       	movw	r12, r18
     966:	7a 01       	movw	r14, r20
	uint8_t Duty = 50 ;
	if (gear == GEAR1)//gear powertrain
     968:	61 30       	cpi	r22, 0x01	; 1
     96a:	19 f5       	brne	.+70     	; 0x9b2 <compute_synch_duty+0x62>
	{
		Duty = (speed_10ms*DUTY_CALC1/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5
     96c:	69 81       	ldd	r22, Y+1	; 0x01
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__floatsisf>
     978:	29 e3       	ldi	r18, 0x39	; 57
     97a:	3d e2       	ldi	r19, 0x2D	; 45
     97c:	4a e7       	ldi	r20, 0x7A	; 122
     97e:	5e e3       	ldi	r21, 0x3E	; 62
     980:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     984:	a7 01       	movw	r20, r14
     986:	96 01       	movw	r18, r12
     988:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	48 ec       	ldi	r20, 0xC8	; 200
     992:	52 e4       	ldi	r21, 0x42	; 66
     994:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	48 e4       	ldi	r20, 0x48	; 72
     99e:	52 e4       	ldi	r21, 0x42	; 66
     9a0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__addsf3>
     9a4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     9a8:	86 2f       	mov	r24, r22
		if (Duty == 50)
     9aa:	62 33       	cpi	r22, 0x32	; 50
     9ac:	29 f5       	brne	.+74     	; 0x9f8 <compute_synch_duty+0xa8>
		{
			Duty = 52 ;
     9ae:	84 e3       	ldi	r24, 0x34	; 52
     9b0:	23 c0       	rjmp	.+70     	; 0x9f8 <compute_synch_duty+0xa8>
		}		
	}
	if (gear == GEAR2)//for belt powertrain
     9b2:	62 30       	cpi	r22, 0x02	; 2
     9b4:	01 f5       	brne	.+64     	; 0x9f6 <compute_synch_duty+0xa6>
	{
		Duty = (speed_10ms*DUTY_CALC2/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
     9b6:	69 81       	ldd	r22, Y+1	; 0x01
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__floatsisf>
     9c2:	22 e0       	ldi	r18, 0x02	; 2
     9c4:	3b e7       	ldi	r19, 0x7B	; 123
     9c6:	40 e5       	ldi	r20, 0x50	; 80
     9c8:	5e e3       	ldi	r21, 0x3E	; 62
     9ca:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     9ce:	a7 01       	movw	r20, r14
     9d0:	96 01       	movw	r18, r12
     9d2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__divsf3>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	48 ec       	ldi	r20, 0xC8	; 200
     9dc:	52 e4       	ldi	r21, 0x42	; 66
     9de:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	48 e4       	ldi	r20, 0x48	; 72
     9e8:	52 e4       	ldi	r21, 0x42	; 66
     9ea:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__addsf3>
     9ee:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixunssfsi>
     9f2:	86 2f       	mov	r24, r22
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <compute_synch_duty+0xa8>
	}	
}

uint8_t compute_synch_duty(volatile uint8_t speed_10ms, ClutchState_t gear, float vbatt) // computing the duty cycle to reach synchronous speed before engaging the gears
{
	uint8_t Duty = 50 ;
     9f6:	82 e3       	ldi	r24, 0x32	; 50
	if (gear == GEAR2)//for belt powertrain
	{
		Duty = (speed_10ms*DUTY_CALC2/vbatt)*100 + 50 ;// Vm/2Vbatt +0.5	
	}
	return Duty ;
}
     9f8:	0f 90       	pop	r0
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	08 95       	ret

00000a08 <state_handler>:
static uint8_t fault_count = 0;
static uint16_t fault_timeout = 0;
static uint8_t fault_clear_count = 0;

void state_handler(volatile ModuleValues_t * vals)
{
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ec 01       	movw	r28, r24
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a12:	68 85       	ldd	r22, Y+8	; 0x08
     a14:	79 85       	ldd	r23, Y+9	; 0x09
     a16:	8a 85       	ldd	r24, Y+10	; 0x0a
     a18:	9b 85       	ldd	r25, Y+11	; 0x0b
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e7       	ldi	r20, 0x70	; 112
     a20:	51 e4       	ldi	r21, 0x41	; 65
     a22:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__gesf2>
     a26:	88 23       	and	r24, r24
     a28:	d4 f1       	brlt	.+116    	; 0xa9e <state_handler+0x96>
     a2a:	68 85       	ldd	r22, Y+8	; 0x08
     a2c:	79 85       	ldd	r23, Y+9	; 0x09
     a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a30:	9b 85       	ldd	r25, Y+11	; 0x0b
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	48 ec       	ldi	r20, 0xC8	; 200
     a38:	52 e4       	ldi	r21, 0x42	; 66
     a3a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     a3e:	88 23       	and	r24, r24
     a40:	0c f4       	brge	.+2      	; 0xa44 <state_handler+0x3c>
     a42:	4c c1       	rjmp	.+664    	; 0xcdc <state_handler+0x2d4>
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	30 c0       	rjmp	.+96     	; 0xaa8 <state_handler+0xa0>
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP|| vals->f32_motor_current <= -MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     a48:	68 81       	ld	r22, Y
     a4a:	79 81       	ldd	r23, Y+1	; 0x01
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	9b 81       	ldd	r25, Y+3	; 0x03
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e7       	ldi	r20, 0x70	; 112
     a56:	51 ec       	ldi	r21, 0xC1	; 193
     a58:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	64 f4       	brge	.+24     	; 0xa78 <state_handler+0x70>
     a60:	68 85       	ldd	r22, Y+8	; 0x08
     a62:	79 85       	ldd	r23, Y+9	; 0x09
     a64:	8a 85       	ldd	r24, Y+10	; 0x0a
     a66:	9b 85       	ldd	r25, Y+11	; 0x0b
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	4c e5       	ldi	r20, 0x5C	; 92
     a6e:	52 e4       	ldi	r21, 0x42	; 66
     a70:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__gesf2>
     a74:	18 16       	cp	r1, r24
     a76:	ac f4       	brge	.+42     	; 0xaa2 <state_handler+0x9a>
	{
		fault_count ++ ;
     a78:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <fault_count>
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <fault_count>
		if (fault_count == 3)
     a82:	83 30       	cpi	r24, 0x03	; 3
     a84:	81 f4       	brne	.+32     	; 0xaa6 <state_handler+0x9e>
		{
			b_major_fault = 1;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <b_major_fault>
			fault_timeout = 600 ;
			fault_clear_count ++;
     a8c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <fault_clear_count>
     a90:	8f 5f       	subi	r24, 0xFF	; 255
     a92:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <fault_clear_count>
		}
	}
	if (fault_timeout > 0)
     a96:	88 e5       	ldi	r24, 0x58	; 88
     a98:	92 e0       	ldi	r25, 0x02	; 2
static uint16_t fault_timeout = 0;
static uint8_t fault_clear_count = 0;

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
     a9a:	11 e0       	ldi	r17, 0x01	; 1
     a9c:	0b c0       	rjmp	.+22     	; 0xab4 <state_handler+0xac>
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <state_handler+0xa0>
     aa2:	11 e0       	ldi	r17, 0x01	; 1
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <state_handler+0xa0>
     aa6:	11 e0       	ldi	r17, 0x01	; 1
			b_major_fault = 1;
			fault_timeout = 600 ;
			fault_clear_count ++;
		}
	}
	if (fault_timeout > 0)
     aa8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <fault_timeout>
     aac:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <fault_timeout+0x1>
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	c1 f0       	breq	.+48     	; 0xae4 <state_handler+0xdc>
	{
		fault_timeout -- ;
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <fault_timeout+0x1>
     aba:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <fault_timeout>
	}else if(b_major_fault && fault_clear_count < 3){
		b_major_fault = 0;
	}

	switch(vals->motor_status)
     abe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	09 f4       	brne	.+2      	; 0xac6 <state_handler+0xbe>
     ac4:	b5 c0       	rjmp	.+362    	; 0xc30 <state_handler+0x228>
     ac6:	30 f4       	brcc	.+12     	; 0xad4 <state_handler+0xcc>
     ac8:	88 23       	and	r24, r24
     aca:	c9 f0       	breq	.+50     	; 0xafe <state_handler+0xf6>
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	09 f4       	brne	.+2      	; 0xad2 <state_handler+0xca>
     ad0:	86 c0       	rjmp	.+268    	; 0xbde <state_handler+0x1d6>
     ad2:	e7 c0       	rjmp	.+462    	; 0xca2 <state_handler+0x29a>
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	09 f4       	brne	.+2      	; 0xada <state_handler+0xd2>
     ad8:	d2 c0       	rjmp	.+420    	; 0xc7e <state_handler+0x276>
     ada:	18 f1       	brcs	.+70     	; 0xb22 <state_handler+0x11a>
     adc:	85 30       	cpi	r24, 0x05	; 5
     ade:	09 f4       	brne	.+2      	; 0xae2 <state_handler+0xda>
     ae0:	45 c0       	rjmp	.+138    	; 0xb6c <state_handler+0x164>
     ae2:	df c0       	rjmp	.+446    	; 0xca2 <state_handler+0x29a>
		}
	}
	if (fault_timeout > 0)
	{
		fault_timeout -- ;
	}else if(b_major_fault && fault_clear_count < 3){
     ae4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <b_major_fault>
     ae8:	88 23       	and	r24, r24
     aea:	09 f4       	brne	.+2      	; 0xaee <state_handler+0xe6>
     aec:	1a c1       	rjmp	.+564    	; 0xd22 <state_handler+0x31a>
     aee:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <fault_clear_count>
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	08 f0       	brcs	.+2      	; 0xaf8 <state_handler+0xf0>
     af6:	00 c1       	rjmp	.+512    	; 0xcf8 <state_handler+0x2f0>
		b_major_fault = 0;
     af8:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <b_major_fault>
     afc:	12 c1       	rjmp	.+548    	; 0xd22 <state_handler+0x31a>

	switch(vals->motor_status)
	{
		case OFF:
			//transition 1
			if (vals->u16_watchdog_can > 0 && b_board_powered)
     afe:	88 8d       	ldd	r24, Y+24	; 0x18
     b00:	99 8d       	ldd	r25, Y+25	; 0x19
     b02:	89 2b       	or	r24, r25
     b04:	21 f0       	breq	.+8      	; 0xb0e <state_handler+0x106>
     b06:	11 23       	and	r17, r17
     b08:	11 f0       	breq	.+4      	; 0xb0e <state_handler+0x106>
			{
				vals->motor_status = IDLE;
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			//During
			drivers(0);//drivers shutdown
     b0e:	80 e0       	ldi	r24, 0x00	; 0
			vals->b_driver_status = 0;
			reset_I(); //reset integrator
     b10:	73 dc       	rcall	.-1818   	; 0x3f8 <drivers>
     b12:	18 a2       	std	Y+32, r1	; 0x20
			vals->u8_brake_cmd = 0;
     b14:	e6 da       	rcall	.-2612   	; 0xe2 <reset_I>
			vals->u8_accel_cmd = 0;
     b16:	1e 8a       	std	Y+22, r1	; 0x16
			vals->u8_duty_cycle = 50;
     b18:	1d 8a       	std	Y+21, r1	; 0x15
     b1a:	82 e3       	ldi	r24, 0x32	; 50
			vals->gear_required = NEUTRAL ;
     b1c:	8f 8b       	std	Y+23, r24	; 0x17
		
		break;
     b1e:	1f 8e       	std	Y+31, r1	; 0x1f
		
		case IDLE: 
		
			if (vals->pwtrain_type == BELT)
     b20:	c0 c0       	rjmp	.+384    	; 0xca2 <state_handler+0x29a>
     b22:	8a a1       	ldd	r24, Y+34	; 0x22
			{
				controller(vals);
     b24:	81 11       	cpse	r24, r1
     b26:	0c c0       	rjmp	.+24     	; 0xb40 <state_handler+0x138>
     b28:	ce 01       	movw	r24, r28
				//drivers(0); //disable
				//reset_I();
				//vals->u8_duty_cycle = 50 ;
				
				//transition 7
				if (vals->u8_brake_cmd > 0)
     b2a:	ff da       	rcall	.-2562   	; 0x12a <controller>
     b2c:	8e 89       	ldd	r24, Y+22	; 0x16
     b2e:	88 23       	and	r24, r24
				{
					//vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, GEAR2, vals->f32_batt_volt) ; //Setting duty
					//set_I(vals->u8_duty_cycle) ; //set integrator
					vals->motor_status = BRAKE;
     b30:	11 f0       	breq	.+4      	; 0xb36 <state_handler+0x12e>
     b32:	82 e0       	ldi	r24, 0x02	; 2
				}
				//transition 5
				if (vals->u8_accel_cmd > 0)
     b34:	8c 8f       	std	Y+28, r24	; 0x1c
     b36:	8d 89       	ldd	r24, Y+21	; 0x15
     b38:	88 23       	and	r24, r24
				{
					//vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, GEAR2, vals->f32_batt_volt) ; //Setting duty
					//set_I(vals->u8_duty_cycle) ; //set integrator
					vals->motor_status = ACCEL;
     b3a:	11 f0       	breq	.+4      	; 0xb40 <state_handler+0x138>
     b3c:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
			
			if (vals->pwtrain_type == GEAR)
     b3e:	8c 8f       	std	Y+28, r24	; 0x1c
     b40:	8a a1       	ldd	r24, Y+34	; 0x22
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	09 f0       	breq	.+2      	; 0xb48 <state_handler+0x140>
			{
				//transition 5
				if ((vals->u8_accel_cmd > 0 || vals->u8_brake_cmd > 0) && vals->gear_status == NEUTRAL)
     b46:	ad c0       	rjmp	.+346    	; 0xca2 <state_handler+0x29a>
     b48:	8d 89       	ldd	r24, Y+21	; 0x15
     b4a:	81 11       	cpse	r24, r1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <state_handler+0x14c>
     b4e:	8e 89       	ldd	r24, Y+22	; 0x16
     b50:	88 23       	and	r24, r24
     b52:	29 f0       	breq	.+10     	; 0xb5e <state_handler+0x156>
     b54:	8e 8d       	ldd	r24, Y+30	; 0x1e
				{
					vals->motor_status = ENGAGE;
				}
				drivers(0); //disable
     b56:	81 11       	cpse	r24, r1
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <state_handler+0x156>
				vals->gear_required = NEUTRAL ;
     b5a:	85 e0       	ldi	r24, 0x05	; 5
				reset_I();
     b5c:	8c 8f       	std	Y+28, r24	; 0x1c
     b5e:	80 e0       	ldi	r24, 0x00	; 0
				vals->u8_duty_cycle = 50 ;
     b60:	4b dc       	rcall	.-1898   	; 0x3f8 <drivers>
     b62:	1f 8e       	std	Y+31, r1	; 0x1f
     b64:	be da       	rcall	.-2692   	; 0xe2 <reset_I>
			}
			
		break;
		
		case ENGAGE: // /!\ TODO : with the two gears, all turning motion has to be inverted for the inner gear.
			vals->gear_required = GEAR1;
     b66:	82 e3       	ldi	r24, 0x32	; 50
     b68:	8f 8b       	std	Y+23, r24	; 0x17
			vals->u8_duty_cycle = compute_synch_duty(vals->u16_car_speed, vals->gear_required, vals->f32_batt_volt) ; //Setting duty
     b6a:	9b c0       	rjmp	.+310    	; 0xca2 <state_handler+0x29a>
     b6c:	01 e0       	ldi	r16, 0x01	; 1
     b6e:	0f 8f       	std	Y+31, r16	; 0x1f
     b70:	28 85       	ldd	r18, Y+8	; 0x08
     b72:	39 85       	ldd	r19, Y+9	; 0x09
     b74:	4a 85       	ldd	r20, Y+10	; 0x0a
     b76:	5b 85       	ldd	r21, Y+11	; 0x0b
			set_I(vals->u8_duty_cycle) ; //set integrator
     b78:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b7a:	89 89       	ldd	r24, Y+17	; 0x11
			save_ctrl_type = vals->ctrl_type ; // PWM type ctrl is needed only for the engagement process. The mode will be reverted to previous in ACCEL and BRAKE modes
     b7c:	9a 89       	ldd	r25, Y+18	; 0x12
			vals->ctrl_type = PWM ;
     b7e:	e8 de       	rcall	.-560    	; 0x950 <compute_synch_duty>
			controller(vals) ; //speed up motor to synch speed
     b80:	8f 8b       	std	Y+23, r24	; 0x17
     b82:	8f 89       	ldd	r24, Y+23	; 0x17
     b84:	b7 da       	rcall	.-2706   	; 0xf4 <set_I>
			drivers(1);
     b86:	89 a1       	ldd	r24, Y+33	; 0x21
     b88:	09 a3       	std	Y+33, r16	; 0x21
     b8a:	ce 01       	movw	r24, r28
			//transition 9, GEAR
			if (vals->u8_brake_cmd > 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     b8c:	ce da       	rcall	.-2660   	; 0x12a <controller>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	33 dc       	rcall	.-1946   	; 0x3f8 <drivers>
     b92:	8e 89       	ldd	r24, Y+22	; 0x16
     b94:	88 23       	and	r24, r24
     b96:	49 f0       	breq	.+18     	; 0xbaa <state_handler+0x1a2>
     b98:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b9c:	98 13       	cpse	r25, r24
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <state_handler+0x1a2>
			{
				vals->motor_status = BRAKE;
     ba0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ba2:	88 23       	and	r24, r24
			}
			//transition 10, GEAR
			if (vals->u8_accel_cmd > 0 && vals->gear_status == vals->gear_required && vals->gear_status != NEUTRAL)
     ba4:	11 f0       	breq	.+4      	; 0xbaa <state_handler+0x1a2>
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	8c 8f       	std	Y+28, r24	; 0x1c
     baa:	8d 89       	ldd	r24, Y+21	; 0x15
     bac:	88 23       	and	r24, r24
     bae:	49 f0       	breq	.+18     	; 0xbc2 <state_handler+0x1ba>
     bb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bb4:	98 13       	cpse	r25, r24
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <state_handler+0x1ba>
			{
				vals->motor_status = ACCEL;
     bb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bba:	88 23       	and	r24, r24
			}
			//transition 11, GEAR
			if (vals->u8_accel_cmd == 0 && vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <state_handler+0x1ba>
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	8c 8f       	std	Y+28, r24	; 0x1c
     bc2:	8d 89       	ldd	r24, Y+21	; 0x15
     bc4:	81 11       	cpse	r24, r1
     bc6:	6d c0       	rjmp	.+218    	; 0xca2 <state_handler+0x29a>
     bc8:	8e 89       	ldd	r24, Y+22	; 0x16
     bca:	81 11       	cpse	r24, r1
     bcc:	6a c0       	rjmp	.+212    	; 0xca2 <state_handler+0x29a>
     bce:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
			{
				vals->motor_status = IDLE;
     bd2:	89 2b       	or	r24, r25
			}
		break;
		
		case ACCEL:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 10)
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <state_handler+0x1d0>
     bd6:	65 c0       	rjmp	.+202    	; 0xca2 <state_handler+0x29a>
     bd8:	83 e0       	ldi	r24, 0x03	; 3
			{
				vals->u8_accel_cmd = 0;
     bda:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			
			//vals->ctrl_type = save_ctrl_type ;
			vals->ctrl_type = CURRENT;
     bdc:	62 c0       	rjmp	.+196    	; 0xca2 <state_handler+0x29a>
			controller(vals);
     bde:	88 8d       	ldd	r24, Y+24	; 0x18
     be0:	99 8d       	ldd	r25, Y+25	; 0x19
     be2:	89 97       	sbiw	r24, 0x29	; 41
			drivers(1);
     be4:	08 f4       	brcc	.+2      	; 0xbe8 <state_handler+0x1e0>
     be6:	1d 8a       	std	Y+21, r1	; 0x15
     be8:	19 a2       	std	Y+33, r1	; 0x21
			//transition 6
			if (vals->u8_accel_cmd == 0 && vals->u16_watchdog_throttle == 0)
     bea:	ce 01       	movw	r24, r28
     bec:	9e da       	rcall	.-2756   	; 0x12a <controller>
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	03 dc       	rcall	.-2042   	; 0x3f8 <drivers>
     bf2:	8d 89       	ldd	r24, Y+21	; 0x15
     bf4:	81 11       	cpse	r24, r1
     bf6:	06 c0       	rjmp	.+12     	; 0xc04 <state_handler+0x1fc>
			{
				vals->motor_status = IDLE;
     bf8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bfa:	9b 8d       	ldd	r25, Y+27	; 0x1b
			}
			//transition 12, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     bfc:	89 2b       	or	r24, r25
     bfe:	11 f4       	brne	.+4      	; 0xc04 <state_handler+0x1fc>
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	8c 8f       	std	Y+28, r24	; 0x1c
     c04:	8a a1       	ldd	r24, Y+34	; 0x22
     c06:	81 30       	cpi	r24, 0x01	; 1
			{
				vals->motor_status = ENGAGE;
     c08:	29 f4       	brne	.+10     	; 0xc14 <state_handler+0x20c>
     c0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
			}
			//transition 14, GEAR
			if (vals->pwtrain_type == GEAR && vals->u8_brake_cmd > 0 && vals->u8_accel_cmd == 0)
     c0c:	81 11       	cpse	r24, r1
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <state_handler+0x20c>
     c10:	85 e0       	ldi	r24, 0x05	; 5
     c12:	8c 8f       	std	Y+28, r24	; 0x1c
     c14:	8a a1       	ldd	r24, Y+34	; 0x22
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	09 f0       	breq	.+2      	; 0xc1c <state_handler+0x214>
     c1a:	43 c0       	rjmp	.+134    	; 0xca2 <state_handler+0x29a>
     c1c:	8e 89       	ldd	r24, Y+22	; 0x16
     c1e:	88 23       	and	r24, r24
			{
				vals->motor_status = BRAKE;
     c20:	09 f4       	brne	.+2      	; 0xc24 <state_handler+0x21c>
     c22:	3f c0       	rjmp	.+126    	; 0xca2 <state_handler+0x29a>
			}
		break;
		
		case BRAKE:
			//if deadman released before throttle
			if (vals->u16_watchdog_can <= WATCHDOG_CAN_RELOAD_VALUE - 10)
     c24:	8d 89       	ldd	r24, Y+21	; 0x15
     c26:	81 11       	cpse	r24, r1
     c28:	3c c0       	rjmp	.+120    	; 0xca2 <state_handler+0x29a>
     c2a:	82 e0       	ldi	r24, 0x02	; 2
			{
				vals->u8_brake_cmd = 0;
     c2c:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			//vals->ctrl_type = save_ctrl_type ;
			vals->ctrl_type = CURRENT ;
     c2e:	39 c0       	rjmp	.+114    	; 0xca2 <state_handler+0x29a>
			controller(vals); //negative throttle cmd
     c30:	88 8d       	ldd	r24, Y+24	; 0x18
     c32:	99 8d       	ldd	r25, Y+25	; 0x19
     c34:	89 97       	sbiw	r24, 0x29	; 41
			drivers(1);
     c36:	08 f4       	brcc	.+2      	; 0xc3a <state_handler+0x232>
     c38:	1e 8a       	std	Y+22, r1	; 0x16
     c3a:	19 a2       	std	Y+33, r1	; 0x21
			//transition 8
			if (vals->u8_brake_cmd == 0 && vals->u16_watchdog_throttle == 0)
     c3c:	ce 01       	movw	r24, r28
     c3e:	75 da       	rcall	.-2838   	; 0x12a <controller>
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	da db       	rcall	.-2124   	; 0x3f8 <drivers>
     c44:	8e 89       	ldd	r24, Y+22	; 0x16
     c46:	81 11       	cpse	r24, r1
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <state_handler+0x24e>
			{
				vals->motor_status = IDLE;
     c4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
			}
			//transition 13, GEAR
			if (vals->pwtrain_type == GEAR && vals->gear_status == NEUTRAL)
     c4e:	89 2b       	or	r24, r25
     c50:	11 f4       	brne	.+4      	; 0xc56 <state_handler+0x24e>
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	8c 8f       	std	Y+28, r24	; 0x1c
     c56:	8a a1       	ldd	r24, Y+34	; 0x22
     c58:	81 30       	cpi	r24, 0x01	; 1
			{
				vals->motor_status = ENGAGE;
     c5a:	29 f4       	brne	.+10     	; 0xc66 <state_handler+0x25e>
     c5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
			}
			//transition 15, GEAR
			if (vals->pwtrain_type == GEAR && vals->u8_brake_cmd == 0 && vals->u8_accel_cmd > 0)
     c5e:	81 11       	cpse	r24, r1
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <state_handler+0x25e>
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	8c 8f       	std	Y+28, r24	; 0x1c
     c66:	8a a1       	ldd	r24, Y+34	; 0x22
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	d9 f4       	brne	.+54     	; 0xca2 <state_handler+0x29a>
     c6c:	8e 89       	ldd	r24, Y+22	; 0x16
			{
				vals->motor_status = ACCEL;
     c6e:	81 11       	cpse	r24, r1
			}
		break;
		
		case ERR:
			//transition 4
			if (!b_major_fault && vals->u8_motor_temp < MAX_TEMP)
     c70:	18 c0       	rjmp	.+48     	; 0xca2 <state_handler+0x29a>
     c72:	8d 89       	ldd	r24, Y+21	; 0x15
     c74:	88 23       	and	r24, r24
     c76:	a9 f0       	breq	.+42     	; 0xca2 <state_handler+0x29a>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	8c 8f       	std	Y+28, r24	; 0x1c
			{
				vals->motor_status = IDLE;
     c7c:	12 c0       	rjmp	.+36     	; 0xca2 <state_handler+0x29a>
     c7e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <b_major_fault>
			}
			drivers(0);//drivers shutdown
     c82:	81 11       	cpse	r24, r1
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <state_handler+0x288>
			vals->b_driver_status = 0;
     c86:	88 89       	ldd	r24, Y+16	; 0x10
			vals->gear_required = NEUTRAL;
     c88:	84 36       	cpi	r24, 0x64	; 100
			reset_I(); //reset integrator
     c8a:	10 f4       	brcc	.+4      	; 0xc90 <state_handler+0x288>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
			vals->u8_brake_cmd = 0;
     c8e:	8c 8f       	std	Y+28, r24	; 0x1c
			vals->u8_accel_cmd = 0;
     c90:	80 e0       	ldi	r24, 0x00	; 0
			vals->u8_duty_cycle = 50;
     c92:	b2 db       	rcall	.-2204   	; 0x3f8 <drivers>
     c94:	18 a2       	std	Y+32, r1	; 0x20
		break;	
	}
	
	if ((vals->motor_status == IDLE || vals->motor_status == ACCEL || vals->motor_status == BRAKE || vals->motor_status == ENGAGE) && (vals->u16_watchdog_can == 0 || !b_board_powered))
     c96:	1f 8e       	std	Y+31, r1	; 0x1f
     c98:	24 da       	rcall	.-3000   	; 0xe2 <reset_I>
     c9a:	1e 8a       	std	Y+22, r1	; 0x16
     c9c:	1d 8a       	std	Y+21, r1	; 0x15
     c9e:	82 e3       	ldi	r24, 0x32	; 50
     ca0:	8f 8b       	std	Y+23, r24	; 0x17
     ca2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ca4:	83 30       	cpi	r24, 0x03	; 3
     ca6:	49 f0       	breq	.+18     	; 0xcba <state_handler+0x2b2>
     ca8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	31 f0       	breq	.+12     	; 0xcba <state_handler+0x2b2>
     cae:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	19 f0       	breq	.+6      	; 0xcba <state_handler+0x2b2>
     cb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cb6:	85 30       	cpi	r24, 0x05	; 5
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <state_handler+0x2c0>
	{
		// transition 2
		vals->motor_status = OFF;
     cba:	88 8d       	ldd	r24, Y+24	; 0x18
	}
	
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
     cbc:	99 8d       	ldd	r25, Y+25	; 0x19
     cbe:	89 2b       	or	r24, r25
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <state_handler+0x2be>
     cc2:	11 11       	cpse	r17, r1
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <state_handler+0x2c0>
     cc6:	1c 8e       	std	Y+28, r1	; 0x1c
     cc8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <b_major_fault>
	{
		//transition 3
		vals->motor_status = ERR;
     ccc:	81 11       	cpse	r24, r1
	}
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <state_handler+0x2ce>

void state_handler(volatile ModuleValues_t * vals)
{
	uint8_t b_board_powered = (vals->f32_batt_volt >= MIN_VOLT  && vals->f32_batt_volt < 100.0);
	
	if (b_board_powered && (vals->f32_motor_current >= MAX_AMP|| vals->f32_motor_current <= -MAX_AMP || vals->f32_batt_volt > MAX_VOLT))
     cd0:	88 89       	ldd	r24, Y+16	; 0x10
     cd2:	84 36       	cpi	r24, 0x64	; 100
     cd4:	d8 f1       	brcs	.+118    	; 0xd4c <state_handler+0x344>
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	8c 8f       	std	Y+28, r24	; 0x1c
     cda:	38 c0       	rjmp	.+112    	; 0xd4c <state_handler+0x344>
     cdc:	68 81       	ld	r22, Y
     cde:	79 81       	ldd	r23, Y+1	; 0x01
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e7       	ldi	r20, 0x70	; 112
     cea:	51 e4       	ldi	r21, 0x41	; 65
		fault_timeout -- ;
	}else if(b_major_fault && fault_clear_count < 3){
		b_major_fault = 0;
	}

	switch(vals->motor_status)
     cec:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__gesf2>
     cf0:	88 23       	and	r24, r24
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <state_handler+0x2ee>
     cf4:	c1 ce       	rjmp	.-638    	; 0xa78 <state_handler+0x70>
     cf6:	a8 ce       	rjmp	.-688    	; 0xa48 <state_handler+0x40>
     cf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	09 f4       	brne	.+2      	; 0xd00 <state_handler+0x2f8>
     cfe:	98 cf       	rjmp	.-208    	; 0xc30 <state_handler+0x228>
     d00:	38 f4       	brcc	.+14     	; 0xd10 <state_handler+0x308>
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <state_handler+0x300>
     d06:	fb ce       	rjmp	.-522    	; 0xafe <state_handler+0xf6>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <state_handler+0x306>
     d0c:	68 cf       	rjmp	.-304    	; 0xbde <state_handler+0x1d6>
     d0e:	c9 cf       	rjmp	.-110    	; 0xca2 <state_handler+0x29a>
     d10:	84 30       	cpi	r24, 0x04	; 4
     d12:	09 f4       	brne	.+2      	; 0xd16 <state_handler+0x30e>
     d14:	bd cf       	rjmp	.-134    	; 0xc90 <state_handler+0x288>
     d16:	08 f4       	brcc	.+2      	; 0xd1a <state_handler+0x312>
     d18:	04 cf       	rjmp	.-504    	; 0xb22 <state_handler+0x11a>
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	09 f4       	brne	.+2      	; 0xd20 <state_handler+0x318>
     d1e:	26 cf       	rjmp	.-436    	; 0xb6c <state_handler+0x164>
     d20:	c0 cf       	rjmp	.-128    	; 0xca2 <state_handler+0x29a>
     d22:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	09 f4       	brne	.+2      	; 0xd2a <state_handler+0x322>
     d28:	83 cf       	rjmp	.-250    	; 0xc30 <state_handler+0x228>
     d2a:	38 f4       	brcc	.+14     	; 0xd3a <state_handler+0x332>
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <state_handler+0x32a>
     d30:	e6 ce       	rjmp	.-564    	; 0xafe <state_handler+0xf6>
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	09 f4       	brne	.+2      	; 0xd38 <state_handler+0x330>
     d36:	53 cf       	rjmp	.-346    	; 0xbde <state_handler+0x1d6>
     d38:	b4 cf       	rjmp	.-152    	; 0xca2 <state_handler+0x29a>
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	09 f4       	brne	.+2      	; 0xd40 <state_handler+0x338>
     d3e:	a3 cf       	rjmp	.-186    	; 0xc86 <state_handler+0x27e>
	if (b_major_fault || vals->u8_motor_temp >= MAX_TEMP) //over current, over voltage, over temp
	{
		//transition 3
		vals->motor_status = ERR;
	}
     d40:	08 f4       	brcc	.+2      	; 0xd44 <state_handler+0x33c>
     d42:	ef ce       	rjmp	.-546    	; 0xb22 <state_handler+0x11a>
     d44:	85 30       	cpi	r24, 0x05	; 5
     d46:	09 f4       	brne	.+2      	; 0xd4a <state_handler+0x342>
     d48:	11 cf       	rjmp	.-478    	; 0xb6c <state_handler+0x164>
     d4a:	ab cf       	rjmp	.-170    	; 0xca2 <state_handler+0x29a>
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <pwm_init>:

#include "pwm.h"
#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4));
     d5a:	8e b1       	in	r24, 0x0e	; 14
     d5c:	87 7e       	andi	r24, 0xE7	; 231
     d5e:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4);
     d60:	8d b1       	in	r24, 0x0d	; 13
     d62:	88 61       	ori	r24, 0x18	; 24
     d64:	8d b9       	out	0x0d, r24	; 13
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
		
	}else{//UNIPOLAR
		
		//Timer 3 phase correct pwm, TOP at ICR (mode 10)
		TCCR3B |= (1<<WGM33);
     d66:	a1 e9       	ldi	r26, 0x91	; 145
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	8c 91       	ld	r24, X
     d6c:	80 61       	ori	r24, 0x10	; 16
     d6e:	8c 93       	st	X, r24
		TCCR3B &= ~(1<<WGM32);
     d70:	8c 91       	ld	r24, X
     d72:	87 7f       	andi	r24, 0xF7	; 247
     d74:	8c 93       	st	X, r24
		TCCR3A |= (1<<WGM31);
     d76:	e0 e9       	ldi	r30, 0x90	; 144
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM30);
     d80:	80 81       	ld	r24, Z
     d82:	8e 7f       	andi	r24, 0xFE	; 254
     d84:	80 83       	st	Z, r24
		
		// Set OC3A on Compare Match when up-counting. clear OC3A on Compare Match when downcounting.
		TCCR3A |= (1<<COM3A1);
     d86:	80 81       	ld	r24, Z
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3A0);
     d8c:	80 81       	ld	r24, Z
     d8e:	8f 7b       	andi	r24, 0xBF	; 191
     d90:	80 83       	st	Z, r24
		
		// Set OC3B on Compare Match when up-counting. Clear OC3B on Compare Match when downcounting.
		TCCR3A |= (1<<COM3B1);
     d92:	80 81       	ld	r24, Z
     d94:	80 62       	ori	r24, 0x20	; 32
     d96:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<COM3B0);
     d98:	80 81       	ld	r24, Z
     d9a:	8f 7e       	andi	r24, 0xEF	; 239
     d9c:	80 83       	st	Z, r24
		
		//Set prescale clk/1 for timer 3
		TCCR3B |= (1<<CS30);
     d9e:	8c 91       	ld	r24, X
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
		TCCR3B &= ~((1<<CS32)|(1<<CS31));
     da4:	8c 91       	ld	r24, X
     da6:	89 7f       	andi	r24, 0xF9	; 249
     da8:	8c 93       	st	X, r24
		
		//Set top value for timer 3
		ICR3 = 0x85; //30kHz  0x85, 20kHz : 0x100
     daa:	c6 e9       	ldi	r28, 0x96	; 150
     dac:	d0 e0       	ldi	r29, 0x00	; 0
     dae:	85 e8       	ldi	r24, 0x85	; 133
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	99 83       	std	Y+1, r25	; 0x01
     db4:	88 83       	st	Y, r24
		
		//initialising compare registers at Duty cycle 50%
		OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3
     db6:	68 81       	ld	r22, Y
     db8:	79 81       	ldd	r23, Y+1	; 0x01
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatunsisf>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
     dce:	d5 d7       	rcall	.+4010   	; 0x1d7a <__fixsfsi>
     dd0:	e8 e9       	ldi	r30, 0x98	; 152
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	71 83       	std	Z+1, r23	; 0x01
     dd6:	60 83       	st	Z, r22
		OCR3B = ICR3-OCR3A ; //PWM_PE4
     dd8:	88 81       	ld	r24, Y
     dda:	99 81       	ldd	r25, Y+1	; 0x01
     ddc:	20 81       	ld	r18, Z
     dde:	31 81       	ldd	r19, Z+1	; 0x01
     de0:	82 1b       	sub	r24, r18
     de2:	93 0b       	sbc	r25, r19
     de4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     de8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	}
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     df2:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <tx0_Head>
     df6:	9f 5f       	subi	r25, 0xFF	; 255
     df8:	9f 71       	andi	r25, 0x1F	; 31
     dfa:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <tx0_Tail>
     dfe:	92 17       	cp	r25, r18
     e00:	e1 f3       	breq	.-8      	; 0xdfa <uart0_putc+0x8>
     e02:	e9 2f       	mov	r30, r25
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	e8 58       	subi	r30, 0x88	; 136
     e08:	fc 4f       	sbci	r31, 0xFC	; 252
     e0a:	80 83       	st	Z, r24
     e0c:	2f b7       	in	r18, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <tx0_Head>
     e14:	e1 ec       	ldi	r30, 0xC1	; 193
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 62       	ori	r24, 0x20	; 32
     e1c:	80 83       	st	Z, r24
     e1e:	2f bf       	out	0x3f, r18	; 63
     e20:	08 95       	ret

00000e22 <uart1_putc>:
     e22:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <tx1_Head>
     e26:	9f 5f       	subi	r25, 0xFF	; 255
     e28:	9f 71       	andi	r25, 0x1F	; 31
     e2a:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <tx1_Tail>
     e2e:	92 17       	cp	r25, r18
     e30:	e1 f3       	breq	.-8      	; 0xe2a <uart1_putc+0x8>
     e32:	e9 2f       	mov	r30, r25
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	ed 5c       	subi	r30, 0xCD	; 205
     e38:	fc 4f       	sbci	r31, 0xFC	; 252
     e3a:	80 83       	st	Z, r24
     e3c:	2f b7       	in	r18, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <tx1_Head>
     e44:	e9 ec       	ldi	r30, 0xC9	; 201
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	80 83       	st	Z, r24
     e4e:	2f bf       	out	0x3f, r18	; 63
     e50:	08 95       	ret

00000e52 <uart_putchar>:
     e52:	cf 93       	push	r28
     e54:	c8 2f       	mov	r28, r24
     e56:	fb 01       	movw	r30, r22
     e58:	84 85       	ldd	r24, Z+12	; 0x0c
     e5a:	95 85       	ldd	r25, Z+13	; 0x0d
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	39 f0       	breq	.+14     	; 0xe6e <uart_putchar+0x1c>
     e60:	ca 30       	cpi	r28, 0x0A	; 10
     e62:	11 f4       	brne	.+4      	; 0xe68 <uart_putchar+0x16>
     e64:	8d e0       	ldi	r24, 0x0D	; 13
     e66:	c5 df       	rcall	.-118    	; 0xdf2 <uart0_putc>
     e68:	8c 2f       	mov	r24, r28
     e6a:	c3 df       	rcall	.-122    	; 0xdf2 <uart0_putc>
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <uart_putchar+0x28>
     e6e:	ca 30       	cpi	r28, 0x0A	; 10
     e70:	11 f4       	brne	.+4      	; 0xe76 <uart_putchar+0x24>
     e72:	8d e0       	ldi	r24, 0x0D	; 13
     e74:	d6 df       	rcall	.-84     	; 0xe22 <uart1_putc>
     e76:	8c 2f       	mov	r24, r28
     e78:	d4 df       	rcall	.-88     	; 0xe22 <uart1_putc>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <uart0_getData>:
     e82:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <rx0_Tail>
     e86:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <rx0_Head>
     e8a:	89 17       	cp	r24, r25
     e8c:	61 f0       	breq	.+24     	; 0xea6 <uart0_getData+0x24>
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	8f 71       	andi	r24, 0x1F	; 31
     e92:	e8 2f       	mov	r30, r24
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	e0 5f       	subi	r30, 0xF0	; 240
     e98:	fc 4f       	sbci	r31, 0xFC	; 252
     e9a:	90 81       	ld	r25, Z
     e9c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <rx0_Tail>
     ea0:	89 2f       	mov	r24, r25
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	08 95       	ret
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	08 95       	ret

00000eac <uart1_getData>:
     eac:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <rx1_Tail>
     eb0:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <rx1_Head>
     eb4:	89 17       	cp	r24, r25
     eb6:	61 f0       	breq	.+24     	; 0xed0 <uart1_getData+0x24>
     eb8:	8f 5f       	subi	r24, 0xFF	; 255
     eba:	8f 71       	andi	r24, 0x1F	; 31
     ebc:	e8 2f       	mov	r30, r24
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	ec 5a       	subi	r30, 0xAC	; 172
     ec2:	fc 4f       	sbci	r31, 0xFC	; 252
     ec4:	90 81       	ld	r25, Z
     ec6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <rx1_Tail>
     eca:	89 2f       	mov	r24, r25
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	08 95       	ret
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	08 95       	ret

00000ed6 <uart_getchar>:
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	fc 01       	movw	r30, r24
     edc:	84 85       	ldd	r24, Z+12	; 0x0c
     ede:	95 85       	ldd	r25, Z+13	; 0x0d
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	41 f0       	breq	.+16     	; 0xef4 <uart_getchar+0x1e>
     ee4:	ce df       	rcall	.-100    	; 0xe82 <uart0_getData>
     ee6:	ec 01       	movw	r28, r24
     ee8:	99 23       	and	r25, r25
     eea:	e4 f3       	brlt	.-8      	; 0xee4 <uart_getchar+0xe>
     eec:	82 df       	rcall	.-252    	; 0xdf2 <uart0_putc>
     eee:	ce 01       	movw	r24, r28
     ef0:	99 27       	eor	r25, r25
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <uart_getchar+0x2c>
     ef4:	db df       	rcall	.-74     	; 0xeac <uart1_getData>
     ef6:	ec 01       	movw	r28, r24
     ef8:	99 23       	and	r25, r25
     efa:	e4 f3       	brlt	.-8      	; 0xef4 <uart_getchar+0x1e>
     efc:	92 df       	rcall	.-220    	; 0xe22 <uart1_putc>
     efe:	ce 01       	movw	r24, r28
     f00:	99 27       	eor	r25, r25
     f02:	99 27       	eor	r25, r25
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f0a:	0f 93       	push	r16
     f0c:	0f b7       	in	r16, 0x3f	; 63
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <tx0_Tail>
     f16:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <tx0_Head>
     f1a:	e3 95       	inc	r30
     f1c:	ef 71       	andi	r30, 0x1F	; 31
     f1e:	ef 13       	cpse	r30, r31
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <USART0_TX_CONTINUE>
     f22:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f26:	ff 7d       	andi	r31, 0xDF	; 223
     f28:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000f2c <USART0_TX_CONTINUE>:
     f2c:	e0 93 31 03 	sts	0x0331, r30	; 0x800331 <tx0_Tail>
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	e8 58       	subi	r30, 0x88	; 136
     f34:	fc 4f       	sbci	r31, 0xFC	; 252
     f36:	e0 81       	ld	r30, Z
     f38:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000f3c <USART0_TX_EXIT>:
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	0f bf       	out	0x3f, r16	; 63
     f42:	0f 91       	pop	r16
     f44:	18 95       	reti

00000f46 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f46:	0f 93       	push	r16
     f48:	0f b7       	in	r16, 0x3f	; 63
     f4a:	9f 93       	push	r25
     f4c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <rx0_Head>
     f58:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <rx0_Tail>
     f5c:	e3 95       	inc	r30
     f5e:	ef 71       	andi	r30, 0x1F	; 31
     f60:	fe 17       	cp	r31, r30
     f62:	31 f0       	breq	.+12     	; 0xf70 <USART0_RX_EXIT>
     f64:	e0 93 74 03 	sts	0x0374, r30	; 0x800374 <rx0_Head>
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	e0 5f       	subi	r30, 0xF0	; 240
     f6c:	fc 4f       	sbci	r31, 0xFC	; 252
     f6e:	90 83       	st	Z, r25

00000f70 <USART0_RX_EXIT>:
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	9f 91       	pop	r25
     f76:	0f bf       	out	0x3f, r16	; 63
     f78:	0f 91       	pop	r16
     f7a:	18 95       	reti

00000f7c <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f7c:	0f 93       	push	r16
     f7e:	0f b7       	in	r16, 0x3f	; 63
     f80:	ef 93       	push	r30
     f82:	ff 93       	push	r31
     f84:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <tx1_Tail>
     f88:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <tx1_Head>
     f8c:	e3 95       	inc	r30
     f8e:	ef 71       	andi	r30, 0x1F	; 31
     f90:	ef 13       	cpse	r30, r31
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <USART1_TX_CONTINUE>
     f94:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     f98:	ff 7d       	andi	r31, 0xDF	; 223
     f9a:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000f9e <USART1_TX_CONTINUE>:
     f9e:	e0 93 75 03 	sts	0x0375, r30	; 0x800375 <tx1_Tail>
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	ed 5c       	subi	r30, 0xCD	; 205
     fa6:	fc 4f       	sbci	r31, 0xFC	; 252
     fa8:	e0 81       	ld	r30, Z
     faa:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000fae <USART1_TX_EXIT>:
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	0f bf       	out	0x3f, r16	; 63
     fb4:	0f 91       	pop	r16
     fb6:	18 95       	reti

00000fb8 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     fb8:	0f 93       	push	r16
     fba:	0f b7       	in	r16, 0x3f	; 63
     fbc:	9f 93       	push	r25
     fbe:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
     fc6:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <rx1_Head>
     fca:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <rx1_Tail>
     fce:	e3 95       	inc	r30
     fd0:	ef 71       	andi	r30, 0x1F	; 31
     fd2:	fe 17       	cp	r31, r30
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <USART1_RX_EXIT>
     fd6:	e0 93 76 03 	sts	0x0376, r30	; 0x800376 <rx1_Head>
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	ec 5a       	subi	r30, 0xAC	; 172
     fde:	fc 4f       	sbci	r31, 0xFC	; 252
     fe0:	90 83       	st	Z, r25

00000fe2 <USART1_RX_EXIT>:
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	9f 91       	pop	r25
     fe8:	0f bf       	out	0x3f, r16	; 63
     fea:	0f 91       	pop	r16
     fec:	18 95       	reti

00000fee <timer1_init_ts>:
//for speed
volatile uint16_t u16_speed_count = 0;


void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     fee:	e1 e8       	ldi	r30, 0x81	; 129
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	83 60       	ori	r24, 0x03	; 3
     ff6:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     ff8:	80 81       	ld	r24, Z
     ffa:	88 60       	ori	r24, 0x08	; 8
     ffc:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     ffe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1002:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
    1006:	ef e6       	ldi	r30, 0x6F	; 111
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	82 60       	ori	r24, 0x02	; 2
    100e:	80 83       	st	Z, r24
	OCR1A = 125; //compare value //every 1ms
    1010:	8d e7       	ldi	r24, 0x7D	; 125
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1018:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    101c:	08 95       	ret

0000101e <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
    101e:	84 b5       	in	r24, 0x24	; 36
    1020:	85 60       	ori	r24, 0x05	; 5
    1022:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
    1024:	84 b5       	in	r24, 0x24	; 36
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
    102a:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
    102c:	ee e6       	ldi	r30, 0x6E	; 110
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	82 60       	ori	r24, 0x02	; 2
    1034:	80 83       	st	Z, r24
	OCR0A = 39; //compare value // 78 for 10ms, 39 for 5ms, 19 for 2.56ms
    1036:	87 e2       	ldi	r24, 0x27	; 39
    1038:	87 bd       	out	0x27, r24	; 39
    103a:	08 95       	ret

0000103c <main>:
{
	cli();
	rgbled_init();
	//rgbled_turn_on(LED_BLUE);

	pwm_init();
    103c:	f8 94       	cli
    103e:	4c d5       	rcall	.+2712   	; 0x1ad8 <rgbled_init>
	can_init(0,0);
    1040:	8a de       	rcall	.-748    	; 0xd56 <pwm_init>
    1042:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
    1044:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
	speed_init();
    104a:	2c d4       	rcall	.+2136   	; 0x18a4 <can_init>
    104c:	d0 df       	rcall	.-96     	; 0xfee <timer1_init_ts>
	spi_init(DIV_4); // clk at clkio/4 = 2MHz init of SPI for external ADC device
    104e:	e7 df       	rcall	.-50     	; 0x101e <timer0_init_ts>
    1050:	4e dc       	rcall	.-1892   	; 0x8ee <speed_init>
    1052:	80 e0       	ldi	r24, 0x00	; 0
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
    1054:	50 d5       	rcall	.+2720   	; 0x1af6 <spi_init>
    1056:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
    105a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
    105e:	88 e9       	ldi	r24, 0x98	; 152
    1060:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
    1064:	e8 e9       	ldi	r30, 0x98	; 152
    1066:	f3 e0       	ldi	r31, 0x03	; 3
    1068:	84 e0       	ldi	r24, 0x04	; 4
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	93 83       	std	Z+3, r25	; 0x03
	drivers_init();
    106e:	82 83       	std	Z+2, r24	; 0x02
	drivers(0);
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
	sei();
    1074:	bf d9       	rcall	.-3202   	; 0x3f4 <drivers_init>
			{
				handle_motor_status_can_msg(ComValues); //send motor status on CAN
				b_select_can_msg = 0;
			}else{
				handle_clutch_cmd_can_msg(ComValues); // send clutch command on CAN
				b_select_can_msg = 1;
    1076:	80 e0       	ldi	r24, 0x00	; 0
	drivers(0);
	sei();
	
    while (1){
		
		handle_can(&ComValues, &rxFrame); //receive CAN
    1078:	bf d9       	rcall	.-3202   	; 0x3f8 <drivers>
    107a:	78 94       	sei
    107c:	c1 e0       	ldi	r28, 0x01	; 1
    107e:	64 ee       	ldi	r22, 0xE4	; 228
    1080:	72 e0       	ldi	r23, 0x02	; 2
    1082:	82 e1       	ldi	r24, 0x12	; 18
		//receive_uart(&ComValues);
		
		if (b_send_can)
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	52 da       	rcall	.-2908   	; 0x52c <handle_can>
    1088:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <b_send_can>
    108c:	88 23       	and	r24, r24
		{
			if (b_select_can_msg)// sending one or the other
    108e:	09 f4       	brne	.+2      	; 0x1092 <main+0x56>
    1090:	41 c0       	rjmp	.+130    	; 0x1114 <__stack+0x15>
    1092:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <b_select_can_msg>
			{
				handle_motor_status_can_msg(ComValues); //send motor status on CAN
    1096:	88 23       	and	r24, r24
    1098:	f1 f0       	breq	.+60     	; 0x10d6 <main+0x9a>
    109a:	8d b7       	in	r24, 0x3d	; 61
    109c:	9e b7       	in	r25, 0x3e	; 62
    109e:	83 97       	sbiw	r24, 0x23	; 35
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	9e bf       	out	0x3e, r25	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	8d bf       	out	0x3d, r24	; 61
    10aa:	ad b7       	in	r26, 0x3d	; 61
    10ac:	be b7       	in	r27, 0x3e	; 62
    10ae:	11 96       	adiw	r26, 0x01	; 1
    10b0:	83 e2       	ldi	r24, 0x23	; 35
    10b2:	e2 e1       	ldi	r30, 0x12	; 18
    10b4:	f1 e0       	ldi	r31, 0x01	; 1
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	8a 95       	dec	r24
				b_select_can_msg = 0;
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <main+0x7a>
    10be:	90 da       	rcall	.-2784   	; 0x5e0 <handle_motor_status_can_msg>
    10c0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <b_select_can_msg>
    10c4:	8d b7       	in	r24, 0x3d	; 61
    10c6:	9e b7       	in	r25, 0x3e	; 62
    10c8:	83 96       	adiw	r24, 0x23	; 35
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	9e bf       	out	0x3e, r25	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
			}else{
				handle_clutch_cmd_can_msg(ComValues); // send clutch command on CAN
    10d2:	8d bf       	out	0x3d, r24	; 61
    10d4:	1d c0       	rjmp	.+58     	; 0x1110 <__stack+0x11>
    10d6:	8d b7       	in	r24, 0x3d	; 61
    10d8:	9e b7       	in	r25, 0x3e	; 62
    10da:	83 97       	sbiw	r24, 0x23	; 35
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	9e bf       	out	0x3e, r25	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	8d bf       	out	0x3d, r24	; 61
    10e6:	ad b7       	in	r26, 0x3d	; 61
    10e8:	be b7       	in	r27, 0x3e	; 62
    10ea:	11 96       	adiw	r26, 0x01	; 1
    10ec:	83 e2       	ldi	r24, 0x23	; 35
    10ee:	e2 e1       	ldi	r30, 0x12	; 18
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	01 90       	ld	r0, Z+
    10f4:	0d 92       	st	X+, r0
    10f6:	8a 95       	dec	r24
				b_select_can_msg = 1;
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <main+0xb6>
    10fa:	e1 da       	rcall	.-2622   	; 0x6be <handle_clutch_cmd_can_msg>
    10fc:	c0 93 51 01 	sts	0x0151, r28	; 0x800151 <b_select_can_msg>
    1100:	8d b7       	in	r24, 0x3d	; 61
    1102:	9e b7       	in	r25, 0x3e	; 62
    1104:	83 96       	adiw	r24, 0x23	; 35
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	9e bf       	out	0x3e, r25	; 62
			}
			b_send_can = 0;
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	8d bf       	out	0x3d, r24	; 61
		}
		
		if (b_send_uart)
    1110:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <b_send_can>
    1114:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <b_send_uart>
    1118:	88 23       	and	r24, r24
		{
			send_uart(ComValues);
    111a:	09 f4       	brne	.+2      	; 0x111e <__stack+0x1f>
    111c:	b0 cf       	rjmp	.-160    	; 0x107e <main+0x42>
    111e:	8d b7       	in	r24, 0x3d	; 61
    1120:	9e b7       	in	r25, 0x3e	; 62
    1122:	83 97       	sbiw	r24, 0x23	; 35
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	9e bf       	out	0x3e, r25	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	8d bf       	out	0x3d, r24	; 61
    112e:	ad b7       	in	r26, 0x3d	; 61
    1130:	be b7       	in	r27, 0x3e	; 62
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	83 e2       	ldi	r24, 0x23	; 35
    1136:	e2 e1       	ldi	r30, 0x12	; 18
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	01 90       	ld	r0, Z+
    113c:	0d 92       	st	X+, r0
    113e:	8a 95       	dec	r24
			b_send_uart = 0;
    1140:	e1 f7       	brne	.-8      	; 0x113a <__stack+0x3b>
    1142:	d1 da       	rcall	.-2654   	; 0x6e6 <send_uart>
    1144:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <b_send_uart>
    1148:	8d b7       	in	r24, 0x3d	; 61
    114a:	9e b7       	in	r25, 0x3e	; 62
    114c:	83 96       	adiw	r24, 0x23	; 35
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	9e bf       	out	0x3e, r25	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	8d bf       	out	0x3d, r24	; 61
    1158:	92 cf       	rjmp	.-220    	; 0x107e <main+0x42>

0000115a <__vector_16>:
		}
	}
}


ISR(TIMER0_COMP_vect){ // every 5ms
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	ef 92       	push	r14
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	2f 93       	push	r18
    1170:	3f 93       	push	r19
    1172:	4f 93       	push	r20
    1174:	5f 93       	push	r21
    1176:	6f 93       	push	r22
    1178:	7f 93       	push	r23
    117a:	8f 93       	push	r24
    117c:	9f 93       	push	r25
    117e:	af 93       	push	r26
    1180:	bf 93       	push	r27
    1182:	ef 93       	push	r30
    1184:	ff 93       	push	r31
	state_handler(&ComValues);
    1186:	82 e1       	ldi	r24, 0x12	; 18
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	3e dc       	rcall	.-1924   	; 0xa08 <state_handler>
	if (systic_counter_fast == 7) // every 41ms
    118c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <systic_counter_fast>
    1190:	87 30       	cpi	r24, 0x07	; 7
    1192:	09 f0       	breq	.+2      	; 0x1196 <__vector_16+0x3c>
    1194:	44 c0       	rjmp	.+136    	; 0x121e <__vector_16+0xc4>
	{
		b_send_can = 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <b_send_can>
		b_send_uart = 1;
    119c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <b_send_uart>
		if (ComValues.u16_watchdog_can != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    11a0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ComValues+0x18>
    11a4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ComValues+0x19>
    11a8:	89 2b       	or	r24, r25
    11aa:	59 f0       	breq	.+22     	; 0x11c2 <__vector_16+0x68>
    11ac:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ComValues+0x1d>
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	39 f4       	brne	.+14     	; 0x11c2 <__vector_16+0x68>
		{
			ComValues.u16_watchdog_can -- ;
    11b4:	e2 e1       	ldi	r30, 0x12	; 18
    11b6:	f1 e0       	ldi	r31, 0x01	; 1
    11b8:	80 8d       	ldd	r24, Z+24	; 0x18
    11ba:	91 8d       	ldd	r25, Z+25	; 0x19
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	91 8f       	std	Z+25, r25	; 0x19
    11c0:	80 8f       	std	Z+24, r24	; 0x18
		}
		
		if (ComValues.u16_watchdog_throttle != 0 && ComValues.message_mode == CAN) //if in uart ctrl mode (see Digicom.h), the watchdog is not used
    11c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ComValues+0x1a>
    11c6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ComValues+0x1b>
    11ca:	89 2b       	or	r24, r25
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <__vector_16+0x8c>
    11ce:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ComValues+0x1d>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	41 f4       	brne	.+16     	; 0x11e6 <__vector_16+0x8c>
		{
			ComValues.u16_watchdog_throttle -- ;
    11d6:	e2 e1       	ldi	r30, 0x12	; 18
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	82 8d       	ldd	r24, Z+26	; 0x1a
    11dc:	93 8d       	ldd	r25, Z+27	; 0x1b
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	93 8f       	std	Z+27, r25	; 0x1b
    11e2:	82 8f       	std	Z+26, r24	; 0x1a
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <__vector_16+0x9c>
		}else if (ComValues.message_mode == UART)
    11e6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ComValues+0x1d>
    11ea:	81 11       	cpse	r24, r1
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <__vector_16+0x9c>
		{
			ComValues.u16_watchdog_throttle = 0;
    11ee:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ComValues+0x1b>
    11f2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ComValues+0x1a>
		}
		
		handle_joulemeter(&ComValues.f32_energy, ComValues.f32_batt_current, ComValues.f32_batt_volt, 41) ;		
    11f6:	e2 e1       	ldi	r30, 0x12	; 18
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	00 85       	ldd	r16, Z+8	; 0x08
    11fc:	11 85       	ldd	r17, Z+9	; 0x09
    11fe:	22 85       	ldd	r18, Z+10	; 0x0a
    1200:	33 85       	ldd	r19, Z+11	; 0x0b
    1202:	44 81       	ldd	r20, Z+4	; 0x04
    1204:	55 81       	ldd	r21, Z+5	; 0x05
    1206:	66 81       	ldd	r22, Z+6	; 0x06
    1208:	77 81       	ldd	r23, Z+7	; 0x07
    120a:	0f 2e       	mov	r0, r31
    120c:	f9 e2       	ldi	r31, 0x29	; 41
    120e:	ef 2e       	mov	r14, r31
    1210:	f0 2d       	mov	r31, r0
    1212:	8e e1       	ldi	r24, 0x1E	; 30
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	c2 d1       	rcall	.+900    	; 0x159c <handle_joulemeter>
		systic_counter_fast = 0;
    1218:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <systic_counter_fast>
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <__vector_16+0xca>
	} else {
		systic_counter_fast ++;
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <systic_counter_fast>
	}
	
	if (systic_counter_slow == 100) // every 0.5s 
    1224:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <systic_counter_slow>
    1228:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <systic_counter_slow+0x1>
    122c:	84 36       	cpi	r24, 0x64	; 100
    122e:	91 05       	cpc	r25, r1
    1230:	01 f5       	brne	.+64     	; 0x1272 <__vector_16+0x118>
	{
		manage_LEDs(ComValues); //UM LED according to motor state
    1232:	8d b7       	in	r24, 0x3d	; 61
    1234:	9e b7       	in	r25, 0x3e	; 62
    1236:	83 97       	sbiw	r24, 0x23	; 35
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	9e bf       	out	0x3e, r25	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	8d bf       	out	0x3d, r24	; 61
    1242:	ad b7       	in	r26, 0x3d	; 61
    1244:	be b7       	in	r27, 0x3e	; 62
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	83 e2       	ldi	r24, 0x23	; 35
    124a:	e2 e1       	ldi	r30, 0x12	; 18
    124c:	f1 e0       	ldi	r31, 0x01	; 1
    124e:	01 90       	ld	r0, Z+
    1250:	0d 92       	st	X+, r0
    1252:	8a 95       	dec	r24
    1254:	e1 f7       	brne	.-8      	; 0x124e <__vector_16+0xf4>
    1256:	f2 da       	rcall	.-2588   	; 0x83c <manage_LEDs>
		systic_counter_slow = 0;
    1258:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <systic_counter_slow+0x1>
    125c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <systic_counter_slow>
    1260:	8d b7       	in	r24, 0x3d	; 61
    1262:	9e b7       	in	r25, 0x3e	; 62
    1264:	83 96       	adiw	r24, 0x23	; 35
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	9e bf       	out	0x3e, r25	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	8d bf       	out	0x3d, r24	; 61
    1270:	05 c0       	rjmp	.+10     	; 0x127c <__vector_16+0x122>
		} else {
		systic_counter_slow ++;
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <systic_counter_slow+0x1>
    1278:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <systic_counter_slow>
	}
}
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ef 90       	pop	r14
    129a:	0f 90       	pop	r0
    129c:	0b be       	out	0x3b, r0	; 59
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0b b6       	in	r0, 0x3b	; 59
    12b4:	0f 92       	push	r0
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
	
	if (u16_speed_count < 2000 ) //after 3s with no magnet, speed = 0
    12ce:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16_speed_count>
    12d2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16_speed_count+0x1>
    12d6:	80 3d       	cpi	r24, 0xD0	; 208
    12d8:	97 40       	sbci	r25, 0x07	; 7
    12da:	50 f4       	brcc	.+20     	; 0x12f0 <__vector_12+0x48>
	{
		u16_speed_count ++ ;
    12dc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16_speed_count>
    12e0:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16_speed_count+0x1>
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <u16_speed_count+0x1>
    12ea:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u16_speed_count>
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <__vector_12+0x58>
	} else
	{
		ComValues.u16_car_speed = 0;
    12f0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ComValues+0x12>
    12f4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ComValues+0x11>
		u16_speed_count = 0;
    12f8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u16_speed_count+0x1>
    12fc:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u16_speed_count>
	}
	
	if (u8_SPI_count == 3)
    1300:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	31 f4       	brne	.+12     	; 0x1314 <__vector_12+0x6c>
	{
		//motor temp
		SPI_handler_4(&ComValues.u8_motor_temp);
    1308:	82 e2       	ldi	r24, 0x22	; 34
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	ef d8       	rcall	.-3618   	; 0x4ec <SPI_handler_4>
		u8_SPI_count = 0 ;
    130e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u8_SPI_count>
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <__vector_12+0x98>
	}
	
	if (u8_SPI_count == 2)
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	41 f4       	brne	.+16     	; 0x1328 <__vector_12+0x80>
	{
		//batt volt
		SPI_handler_2(&ComValues.f32_batt_volt);
    1318:	8a e1       	ldi	r24, 0x1A	; 26
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	b5 d8       	rcall	.-3734   	; 0x488 <SPI_handler_2>
		u8_SPI_count ++ ;
    131e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
    1328:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    132c:	81 30       	cpi	r24, 0x01	; 1
	{
		//batt current
		SPI_handler_1(&ComValues.f32_batt_current);
    132e:	41 f4       	brne	.+16     	; 0x1340 <__vector_12+0x98>
    1330:	86 e1       	ldi	r24, 0x16	; 22
    1332:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    1334:	88 d8       	rcall	.-3824   	; 0x446 <SPI_handler_1>
    1336:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8_SPI_count>
	}	
	
	if (u8_SPI_count == 0)
    1340:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
	{
		//motor current
		SPI_handler_0(&ComValues.f32_motor_current);
    1344:	81 11       	cpse	r24, r1
    1346:	08 c0       	rjmp	.+16     	; 0x1358 <__vector_12+0xb0>
    1348:	82 e1       	ldi	r24, 0x12	; 18
    134a:	91 e0       	ldi	r25, 0x01	; 1
		u8_SPI_count ++ ;
    134c:	5b d8       	rcall	.-3914   	; 0x404 <SPI_handler_0>
    134e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8_SPI_count>
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8_SPI_count>
	}
}
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	bf 91       	pop	r27
    135e:	af 91       	pop	r26
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	7f 91       	pop	r23
    1366:	6f 91       	pop	r22
    1368:	5f 91       	pop	r21
    136a:	4f 91       	pop	r20
    136c:	3f 91       	pop	r19
    136e:	2f 91       	pop	r18
    1370:	0f 90       	pop	r0
    1372:	0b be       	out	0x3b, r0	; 59
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_6>:


ISR(INT5_vect) //interrupt on rising front of the speed sensor (each time a magnet passes in front of the reed switch)
{
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	0b b6       	in	r0, 0x3b	; 59
    138a:	0f 92       	push	r0
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
	//rgbled_toggle(LED_GREEN);
	handle_speed_sensor(&ComValues.u16_car_speed, &u16_speed_count);
    13a4:	6d e4       	ldi	r22, 0x4D	; 77
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	83 e2       	ldi	r24, 0x23	; 35
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	ab da       	rcall	.-2730   	; 0x904 <handle_speed_sensor>
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0b be       	out	0x3b, r0	; 59
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <handle_current_sensor>:

#include "sensors.h"
#include <avr/io.h>

void handle_current_sensor(volatile float *f32_current, uint16_t u16_ADC_reg, uint8_t u8_sensor_num)
{
    13d4:	8f 92       	push	r8
    13d6:	9f 92       	push	r9
    13d8:	af 92       	push	r10
    13da:	bf 92       	push	r11
    13dc:	cf 92       	push	r12
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <handle_current_sensor+0x1a>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <handle_current_sensor+0x1c>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	8c 01       	movw	r16, r24
    13f6:	f4 2e       	mov	r15, r20
	volatile float f_new_current = ((((volatile float)u16_ADC_reg*5.0/4096.0) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY) ;// /3 because current passes 3x in transducer for more precision.
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	ef d4       	rcall	.+2526   	; 0x1ddc <__floatunsisf>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 ea       	ldi	r20, 0xA0	; 160
    1404:	50 e4       	ldi	r21, 0x40	; 64
    1406:	a0 d5       	rcall	.+2880   	; 0x1f48 <__mulsf3>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e8       	ldi	r20, 0x80	; 128
    140e:	59 e3       	ldi	r21, 0x39	; 57
    1410:	9b d5       	rcall	.+2870   	; 0x1f48 <__mulsf3>
    1412:	2e ea       	ldi	r18, 0xAE	; 174
    1414:	37 e4       	ldi	r19, 0x47	; 71
    1416:	41 e2       	ldi	r20, 0x21	; 33
    1418:	50 e4       	ldi	r21, 0x40	; 64
    141a:	de d3       	rcall	.+1980   	; 0x1bd8 <__subsf3>
    141c:	23 ec       	ldi	r18, 0xC3	; 195
    141e:	34 e6       	ldi	r19, 0x64	; 100
    1420:	4a e2       	ldi	r20, 0x2A	; 42
    1422:	5d e3       	ldi	r21, 0x3D	; 61
    1424:	42 d4       	rcall	.+2180   	; 0x1caa <__divsf3>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
	if (u8_sensor_num)
    142e:	ff 20       	and	r15, r15
    1430:	69 f0       	breq	.+26     	; 0x144c <handle_current_sensor+0x78>
	{//batt
		f_new_current = (f_new_current+CORRECTION_OFFSET_BAT);// correction of offset
    1432:	69 81       	ldd	r22, Y+1	; 0x01
    1434:	7a 81       	ldd	r23, Y+2	; 0x02
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	cc d3       	rcall	.+1944   	; 0x1bda <__addsf3>
    1442:	69 83       	std	Y+1, r22	; 0x01
    1444:	7a 83       	std	Y+2, r23	; 0x02
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	0d c0       	rjmp	.+26     	; 0x1466 <handle_current_sensor+0x92>
	}else{
		f_new_current = (f_new_current+CORRECTION_OFFSET_MOT);// correction of offset
    144c:	69 81       	ldd	r22, Y+1	; 0x01
    144e:	7a 81       	ldd	r23, Y+2	; 0x02
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	2d ec       	ldi	r18, 0xCD	; 205
    1456:	3c ec       	ldi	r19, 0xCC	; 204
    1458:	4c e4       	ldi	r20, 0x4C	; 76
    145a:	5e e3       	ldi	r21, 0x3E	; 62
    145c:	be d3       	rcall	.+1916   	; 0x1bda <__addsf3>
    145e:	69 83       	std	Y+1, r22	; 0x01
    1460:	7a 83       	std	Y+2, r23	; 0x02
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	*f32_current = (*f32_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
    1466:	f8 01       	movw	r30, r16
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	89 80       	ldd	r8, Y+1	; 0x01
    1472:	9a 80       	ldd	r9, Y+2	; 0x02
    1474:	ab 80       	ldd	r10, Y+3	; 0x03
    1476:	bc 80       	ldd	r11, Y+4	; 0x04
    1478:	26 e6       	ldi	r18, 0x66	; 102
    147a:	36 e6       	ldi	r19, 0x66	; 102
    147c:	46 e6       	ldi	r20, 0x66	; 102
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	63 d5       	rcall	.+2758   	; 0x1f48 <__mulsf3>
    1482:	6b 01       	movw	r12, r22
    1484:	7c 01       	movw	r14, r24
    1486:	2d ec       	ldi	r18, 0xCD	; 205
    1488:	3c ec       	ldi	r19, 0xCC	; 204
    148a:	4c ec       	ldi	r20, 0xCC	; 204
    148c:	5d e3       	ldi	r21, 0x3D	; 61
    148e:	c5 01       	movw	r24, r10
    1490:	b4 01       	movw	r22, r8
    1492:	5a d5       	rcall	.+2740   	; 0x1f48 <__mulsf3>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	c7 01       	movw	r24, r14
    149a:	b6 01       	movw	r22, r12
    149c:	9e d3       	rcall	.+1852   	; 0x1bda <__addsf3>
    149e:	f8 01       	movw	r30, r16
    14a0:	60 83       	st	Z, r22
    14a2:	71 83       	std	Z+1, r23	; 0x01
    14a4:	82 83       	std	Z+2, r24	; 0x02
    14a6:	93 83       	std	Z+3, r25	; 0x03
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	cf 90       	pop	r12
    14c0:	bf 90       	pop	r11
    14c2:	af 90       	pop	r10
    14c4:	9f 90       	pop	r9
    14c6:	8f 90       	pop	r8
    14c8:	08 95       	ret

000014ca <handle_temp_sensor>:

void handle_temp_sensor(volatile uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
	float f_sens_volt = ((float)u16_ADC_reg*5.0/4096.0);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	7f d4       	rcall	.+2302   	; 0x1ddc <__floatunsisf>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 ea       	ldi	r20, 0xA0	; 160
    14e4:	50 e4       	ldi	r21, 0x40	; 64
    14e6:	30 d5       	rcall	.+2656   	; 0x1f48 <__mulsf3>
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	59 e3       	ldi	r21, 0x39	; 57
    14f0:	2b d5       	rcall	.+2646   	; 0x1f48 <__mulsf3>
    14f2:	6b 01       	movw	r12, r22
    14f4:	7c 01       	movw	r14, r24
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit. 
	// Here we approximate the curve by three straight lines
	
	if (f_sens_volt <= 3.7)
    14f6:	2d ec       	ldi	r18, 0xCD	; 205
    14f8:	3c ec       	ldi	r19, 0xCC	; 204
    14fa:	4c e6       	ldi	r20, 0x6C	; 108
    14fc:	50 e4       	ldi	r21, 0x40	; 64
    14fe:	d1 d3       	rcall	.+1954   	; 0x1ca2 <__cmpsf2>
    1500:	18 16       	cp	r1, r24
    1502:	74 f0       	brlt	.+28     	; 0x1520 <handle_temp_sensor+0x56>
	{
		*u8_temp = (uint8_t)(20.0*f_sens_volt-22.0);
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 ea       	ldi	r20, 0xA0	; 160
    150a:	51 e4       	ldi	r21, 0x41	; 65
    150c:	c7 01       	movw	r24, r14
    150e:	b6 01       	movw	r22, r12
    1510:	1b d5       	rcall	.+2614   	; 0x1f48 <__mulsf3>
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 eb       	ldi	r20, 0xB0	; 176
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	5e d3       	rcall	.+1724   	; 0x1bd8 <__subsf3>
    151c:	33 d4       	rcall	.+2150   	; 0x1d84 <__fixunssfsi>
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
    151e:	68 83       	st	Y, r22
    1520:	26 e6       	ldi	r18, 0x66	; 102
    1522:	36 e6       	ldi	r19, 0x66	; 102
    1524:	46 e9       	ldi	r20, 0x96	; 150
    1526:	50 e4       	ldi	r21, 0x40	; 64
    1528:	c7 01       	movw	r24, r14
    152a:	b6 01       	movw	r22, r12
    152c:	ba d3       	rcall	.+1908   	; 0x1ca2 <__cmpsf2>
    152e:	18 16       	cp	r1, r24
    1530:	bc f0       	brlt	.+46     	; 0x1560 <handle_temp_sensor+0x96>
    1532:	2d ec       	ldi	r18, 0xCD	; 205
    1534:	3c ec       	ldi	r19, 0xCC	; 204
    1536:	4c e6       	ldi	r20, 0x6C	; 108
    1538:	50 e4       	ldi	r21, 0x40	; 64
    153a:	c7 01       	movw	r24, r14
    153c:	b6 01       	movw	r22, r12
    153e:	00 d5       	rcall	.+2560   	; 0x1f40 <__gesf2>
    1540:	18 16       	cp	r1, r24
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
    1542:	74 f4       	brge	.+28     	; 0x1560 <handle_temp_sensor+0x96>
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	4e e5       	ldi	r20, 0x5E	; 94
    154a:	52 e4       	ldi	r21, 0x42	; 66
    154c:	c7 01       	movw	r24, r14
    154e:	b6 01       	movw	r22, r12
    1550:	fb d4       	rcall	.+2550   	; 0x1f48 <__mulsf3>
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e8       	ldi	r19, 0x80	; 128
    1556:	4b e1       	ldi	r20, 0x1B	; 27
    1558:	53 e4       	ldi	r21, 0x43	; 67
    155a:	3e d3       	rcall	.+1660   	; 0x1bd8 <__subsf3>
    155c:	13 d4       	rcall	.+2086   	; 0x1d84 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
    155e:	68 83       	st	Y, r22
    1560:	26 e6       	ldi	r18, 0x66	; 102
    1562:	36 e6       	ldi	r19, 0x66	; 102
    1564:	46 e9       	ldi	r20, 0x96	; 150
    1566:	50 e4       	ldi	r21, 0x40	; 64
    1568:	c7 01       	movw	r24, r14
    156a:	b6 01       	movw	r22, r12
	{
		*u8_temp = (uint8_t)(200.0*f_sens_volt-840.0);
    156c:	e9 d4       	rcall	.+2514   	; 0x1f40 <__gesf2>
    156e:	18 16       	cp	r1, r24
    1570:	74 f4       	brge	.+28     	; 0x158e <handle_temp_sensor+0xc4>
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	48 e4       	ldi	r20, 0x48	; 72
    1578:	53 e4       	ldi	r21, 0x43	; 67
    157a:	c7 01       	movw	r24, r14
    157c:	b6 01       	movw	r22, r12
    157e:	e4 d4       	rcall	.+2504   	; 0x1f48 <__mulsf3>
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	42 e5       	ldi	r20, 0x52	; 82
    1586:	54 e4       	ldi	r21, 0x44	; 68
    1588:	27 d3       	rcall	.+1614   	; 0x1bd8 <__subsf3>
    158a:	fc d3       	rcall	.+2040   	; 0x1d84 <__fixunssfsi>
    158c:	68 83       	st	Y, r22
	}
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	08 95       	ret

0000159c <handle_joulemeter>:

void handle_joulemeter(volatile float *f32_energy, volatile float f32_bat_current, volatile float f32_bat_voltage, uint8_t u8_time_period) //units : A, V, ms
{
    159c:	4f 92       	push	r4
    159e:	5f 92       	push	r5
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	28 97       	sbiw	r28, 0x08	; 8
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	6c 01       	movw	r12, r24
    15cc:	49 83       	std	Y+1, r20	; 0x01
    15ce:	5a 83       	std	Y+2, r21	; 0x02
    15d0:	6b 83       	std	Y+3, r22	; 0x03
    15d2:	7c 83       	std	Y+4, r23	; 0x04
    15d4:	0d 83       	std	Y+5, r16	; 0x05
    15d6:	1e 83       	std	Y+6, r17	; 0x06
    15d8:	2f 83       	std	Y+7, r18	; 0x07
    15da:	38 87       	std	Y+8, r19	; 0x08
	*f32_energy += f32_bat_voltage*f32_bat_current*(float)u8_time_period/1000 ;
    15dc:	6d 81       	ldd	r22, Y+5	; 0x05
    15de:	7e 81       	ldd	r23, Y+6	; 0x06
    15e0:	8f 81       	ldd	r24, Y+7	; 0x07
    15e2:	98 85       	ldd	r25, Y+8	; 0x08
    15e4:	29 81       	ldd	r18, Y+1	; 0x01
    15e6:	3a 81       	ldd	r19, Y+2	; 0x02
    15e8:	4b 81       	ldd	r20, Y+3	; 0x03
    15ea:	5c 81       	ldd	r21, Y+4	; 0x04
    15ec:	f6 01       	movw	r30, r12
    15ee:	80 80       	ld	r8, Z
    15f0:	91 80       	ldd	r9, Z+1	; 0x01
    15f2:	a2 80       	ldd	r10, Z+2	; 0x02
    15f4:	b3 80       	ldd	r11, Z+3	; 0x03
    15f6:	a8 d4       	rcall	.+2384   	; 0x1f48 <__mulsf3>
    15f8:	2b 01       	movw	r4, r22
    15fa:	3c 01       	movw	r6, r24
    15fc:	6e 2d       	mov	r22, r14
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	eb d3       	rcall	.+2006   	; 0x1ddc <__floatunsisf>
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	c3 01       	movw	r24, r6
    160c:	b2 01       	movw	r22, r4
    160e:	9c d4       	rcall	.+2360   	; 0x1f48 <__mulsf3>
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a e7       	ldi	r20, 0x7A	; 122
    1616:	54 e4       	ldi	r21, 0x44	; 68
    1618:	48 d3       	rcall	.+1680   	; 0x1caa <__divsf3>
    161a:	a5 01       	movw	r20, r10
    161c:	94 01       	movw	r18, r8
    161e:	dd d2       	rcall	.+1466   	; 0x1bda <__addsf3>
    1620:	f6 01       	movw	r30, r12
    1622:	60 83       	st	Z, r22
    1624:	71 83       	std	Z+1, r23	; 0x01
    1626:	82 83       	std	Z+2, r24	; 0x02
    1628:	93 83       	std	Z+3, r25	; 0x03
    162a:	28 96       	adiw	r28, 0x08	; 8
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	08 95       	ret

00001656 <Set_ADC_Channel_ext>:
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
}

void Set_ADC_Channel_ext(uint8_t u8_CHn, uint8_t * u8_ADC_tx) //for MCP3208 external ADC
{
	switch(u8_CHn)
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	91 05       	cpc	r25, r1
    165c:	88 f5       	brcc	.+98     	; 0x16c0 <Set_ADC_Channel_ext+0x6a>
    165e:	fc 01       	movw	r30, r24
    1660:	e6 5b       	subi	r30, 0xB6	; 182
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	d4 c4       	rjmp	.+2472   	; 0x200e <__tablejump2__>
	{
		case 0 :
			u8_ADC_tx[0] = 0b00000110 ;
    1666:	86 e0       	ldi	r24, 0x06	; 6
    1668:	fb 01       	movw	r30, r22
    166a:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b00 ;
    166c:	11 82       	std	Z+1, r1	; 0x01
		break;
    166e:	08 95       	ret
		
		case 1 :
			u8_ADC_tx[0] = 0b00000110 ;
    1670:	86 e0       	ldi	r24, 0x06	; 6
    1672:	fb 01       	movw	r30, r22
    1674:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b01 << 6 ;
    1676:	80 e4       	ldi	r24, 0x40	; 64
    1678:	81 83       	std	Z+1, r24	; 0x01
		break;
    167a:	08 95       	ret
		
		case 2 :
			u8_ADC_tx[0] = 0b00000110 ;
    167c:	86 e0       	ldi	r24, 0x06	; 6
    167e:	fb 01       	movw	r30, r22
    1680:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b10 << 6 ;
    1682:	80 e8       	ldi	r24, 0x80	; 128
    1684:	81 83       	std	Z+1, r24	; 0x01
		break;
    1686:	08 95       	ret
		
		case 3 :
		u8_ADC_tx[0] = 0b00000110 ;
    1688:	86 e0       	ldi	r24, 0x06	; 6
    168a:	fb 01       	movw	r30, r22
    168c:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    168e:	80 ec       	ldi	r24, 0xC0	; 192
    1690:	81 83       	std	Z+1, r24	; 0x01
		break;
    1692:	08 95       	ret
		
		case 4 :
		u8_ADC_tx[0] = 0b00000111 ;
    1694:	87 e0       	ldi	r24, 0x07	; 7
    1696:	fb 01       	movw	r30, r22
    1698:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b00 << 6 ;
    169a:	11 82       	std	Z+1, r1	; 0x01
		break;
    169c:	08 95       	ret
		
		case 5 :
		u8_ADC_tx[0] = 0b00000111 ;
    169e:	87 e0       	ldi	r24, 0x07	; 7
    16a0:	fb 01       	movw	r30, r22
    16a2:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b01 << 6 ;
    16a4:	80 e4       	ldi	r24, 0x40	; 64
    16a6:	81 83       	std	Z+1, r24	; 0x01
		break;
    16a8:	08 95       	ret
		
		case 6 :
		u8_ADC_tx[0] = 0b00000111 ;
    16aa:	87 e0       	ldi	r24, 0x07	; 7
    16ac:	fb 01       	movw	r30, r22
    16ae:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b10 << 6 ;
    16b0:	80 e8       	ldi	r24, 0x80	; 128
    16b2:	81 83       	std	Z+1, r24	; 0x01
		break;
    16b4:	08 95       	ret
		
		case 7 :
		u8_ADC_tx[0] = 0b00000111 ;
    16b6:	87 e0       	ldi	r24, 0x07	; 7
    16b8:	fb 01       	movw	r30, r22
    16ba:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
    16bc:	80 ec       	ldi	r24, 0xC0	; 192
    16be:	81 83       	std	Z+1, r24	; 0x01
    16c0:	08 95       	ret

000016c2 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	0b b6       	in	r0, 0x3b	; 59
    16ce:	0f 92       	push	r0
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	6f 93       	push	r22
    16da:	8f 93       	push	r24
    16dc:	9f 93       	push	r25
    16de:	af 93       	push	r26
    16e0:	bf 93       	push	r27
    16e2:	ef 93       	push	r30
    16e4:	ff 93       	push	r31
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	1f 92       	push	r1
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
    16f0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
    16f4:	80 ff       	sbrs	r24, 0
    16f6:	47 c0       	rjmp	.+142    	; 0x1786 <__vector_18+0xc4>
    16f8:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    16fc:	90 ff       	sbrs	r25, 0
    16fe:	43 c0       	rjmp	.+134    	; 0x1786 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
    1700:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
    1704:	ee ee       	ldi	r30, 0xEE	; 238
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
    170c:	80 81       	ld	r24, Z
    170e:	8f 7b       	andi	r24, 0xBF	; 191
    1710:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
    1712:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <tx_off>
    1716:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <tx_on>
    171a:	98 17       	cp	r25, r24
    171c:	89 f1       	breq	.+98     	; 0x1780 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
    171e:	8f 70       	andi	r24, 0x0F	; 15
    1720:	2b e0       	ldi	r18, 0x0B	; 11
    1722:	82 9f       	mul	r24, r18
    1724:	c0 01       	movw	r24, r0
    1726:	11 24       	eor	r1, r1
    1728:	fc 01       	movw	r30, r24
    172a:	e4 5f       	subi	r30, 0xF4	; 244
    172c:	fd 4f       	sbci	r31, 0xFD	; 253
    172e:	20 81       	ld	r18, Z
    1730:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
    1734:	20 81       	ld	r18, Z
    1736:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
    173a:	21 81       	ldd	r18, Z+1	; 0x01
    173c:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
    1740:	23 81       	ldd	r18, Z+3	; 0x03
    1742:	aa ef       	ldi	r26, 0xFA	; 250
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
    1748:	24 81       	ldd	r18, Z+4	; 0x04
    174a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
    174c:	25 81       	ldd	r18, Z+5	; 0x05
    174e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
    1750:	26 81       	ldd	r18, Z+6	; 0x06
    1752:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
    1754:	27 81       	ldd	r18, Z+7	; 0x07
    1756:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
    1758:	20 85       	ldd	r18, Z+8	; 0x08
    175a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
    175c:	21 85       	ldd	r18, Z+9	; 0x09
    175e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
    1760:	22 85       	ldd	r18, Z+10	; 0x0a
    1762:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
    1764:	fc 01       	movw	r30, r24
    1766:	e2 5f       	subi	r30, 0xF2	; 242
    1768:	fd 4f       	sbci	r31, 0xFD	; 253
    176a:	80 81       	ld	r24, Z
    176c:	8f 70       	andi	r24, 0x0F	; 15
    176e:	80 64       	ori	r24, 0x40	; 64
    1770:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
    1774:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <tx_off>
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <tx_off>
    177e:	7d c0       	rjmp	.+250    	; 0x187a <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
    1780:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_busy>
    1784:	7a c0       	rjmp	.+244    	; 0x187a <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
    1786:	81 ff       	sbrs	r24, 1
    1788:	78 c0       	rjmp	.+240    	; 0x187a <__vector_18+0x1b8>
    178a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    178e:	81 ff       	sbrs	r24, 1
    1790:	74 c0       	rjmp	.+232    	; 0x187a <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
    1792:	80 e1       	ldi	r24, 0x10	; 16
    1794:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
    1798:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_on>
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <rx_off>
    17a4:	29 1b       	sub	r18, r25
    17a6:	31 09       	sbc	r19, r1
    17a8:	2f 77       	andi	r18, 0x7F	; 127
    17aa:	33 27       	eor	r19, r19
    17ac:	20 31       	cpi	r18, 0x10	; 16
    17ae:	31 05       	cpc	r19, r1
    17b0:	0c f0       	brlt	.+2      	; 0x17b4 <__vector_18+0xf2>
    17b2:	58 c0       	rjmp	.+176    	; 0x1864 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
    17b4:	e8 2f       	mov	r30, r24
    17b6:	ef 70       	andi	r30, 0x0F	; 15
    17b8:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    17bc:	2e 2f       	mov	r18, r30
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4b e0       	ldi	r20, 0x0B	; 11
    17c2:	e4 9f       	mul	r30, r20
    17c4:	f0 01       	movw	r30, r0
    17c6:	11 24       	eor	r1, r1
    17c8:	e4 5a       	subi	r30, 0xA4	; 164
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	9f 70       	andi	r25, 0x0F	; 15
    17ce:	42 81       	ldd	r20, Z+2	; 0x02
    17d0:	40 7f       	andi	r20, 0xF0	; 240
    17d2:	94 2b       	or	r25, r20
    17d4:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
    17d6:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17da:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    17de:	40 7e       	andi	r20, 0xE0	; 224
    17e0:	97 70       	andi	r25, 0x07	; 7
    17e2:	94 2b       	or	r25, r20
    17e4:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
    17e6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17ea:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
    17ec:	aa ef       	ldi	r26, 0xFA	; 250
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	9c 91       	ld	r25, X
    17f2:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
    17f4:	9c 91       	ld	r25, X
    17f6:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
    17f8:	9c 91       	ld	r25, X
    17fa:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
    17fc:	9c 91       	ld	r25, X
    17fe:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
    1800:	9c 91       	ld	r25, X
    1802:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
    1804:	9c 91       	ld	r25, X
    1806:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
    1808:	9c 91       	ld	r25, X
    180a:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
    180c:	9c 91       	ld	r25, X
    180e:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
    1816:	40 81       	ld	r20, Z
    1818:	42 95       	swap	r20
    181a:	46 95       	lsr	r20
    181c:	47 70       	andi	r20, 0x07	; 7
    181e:	51 81       	ldd	r21, Z+1	; 0x01
    1820:	65 2f       	mov	r22, r21
    1822:	66 0f       	add	r22, r22
    1824:	66 0f       	add	r22, r22
    1826:	66 0f       	add	r22, r22
    1828:	86 2f       	mov	r24, r22
    182a:	84 2b       	or	r24, r20
    182c:	95 2f       	mov	r25, r21
    182e:	92 95       	swap	r25
    1830:	96 95       	lsr	r25
    1832:	97 70       	andi	r25, 0x07	; 7
    1834:	89 2b       	or	r24, r25
    1836:	b1 f4       	brne	.+44     	; 0x1864 <__vector_18+0x1a2>
    1838:	8b e0       	ldi	r24, 0x0B	; 11
    183a:	82 9f       	mul	r24, r18
    183c:	f0 01       	movw	r30, r0
    183e:	83 9f       	mul	r24, r19
    1840:	f0 0d       	add	r31, r0
    1842:	11 24       	eor	r1, r1
    1844:	e4 5a       	subi	r30, 0xA4	; 164
    1846:	fe 4f       	sbci	r31, 0xFE	; 254
    1848:	83 81       	ldd	r24, Z+3	; 0x03
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	59 f4       	brne	.+22     	; 0x1864 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    184e:	98 e0       	ldi	r25, 0x08	; 8
    1850:	88 e1       	ldi	r24, 0x18	; 24
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	a8 95       	wdr
    1858:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1862:	ff cf       	rjmp	.-2      	; 0x1862 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
    1864:	ee ee       	ldi	r30, 0xEE	; 238
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
    186c:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
    186e:	80 81       	ld	r24, Z
    1870:	8f 7d       	andi	r24, 0xDF	; 223
    1872:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
    1874:	80 e8       	ldi	r24, 0x80	; 128
    1876:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	6f 91       	pop	r22
    188e:	5f 91       	pop	r21
    1890:	4f 91       	pop	r20
    1892:	3f 91       	pop	r19
    1894:	2f 91       	pop	r18
    1896:	0f 90       	pop	r0
    1898:	0b be       	out	0x3b, r0	; 59
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f 90       	pop	r0
    18a0:	1f 90       	pop	r1
    18a2:	18 95       	reti

000018a4 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
    18a8:	e8 ed       	ldi	r30, 0xD8	; 216
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
    18b0:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
    18b4:	2c e0       	ldi	r18, 0x0C	; 12
    18b6:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
    18ba:	27 e3       	ldi	r18, 0x37	; 55
    18bc:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
    18c0:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
    18c4:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
    18c8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18cc:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
    18d0:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
    18d4:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
    18d8:	cd ee       	ldi	r28, 0xED	; 237
    18da:	d0 e0       	ldi	r29, 0x00	; 0
    18dc:	18 82       	st	Y, r1
	CANSTMOB = 0;
    18de:	ae ee       	ldi	r26, 0xEE	; 238
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
    18e4:	20 e1       	ldi	r18, 0x10	; 16
    18e6:	28 83       	st	Y, r18
	CANSTMOB = 0;
    18e8:	1c 92       	st	X, r1
	CANIDM4 = 0;
    18ea:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    18ee:	28 2f       	mov	r18, r24
    18f0:	22 95       	swap	r18
    18f2:	22 0f       	add	r18, r18
    18f4:	20 7e       	andi	r18, 0xE0	; 224
    18f6:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    18fa:	96 95       	lsr	r25
    18fc:	87 95       	ror	r24
    18fe:	96 95       	lsr	r25
    1900:	87 95       	ror	r24
    1902:	96 95       	lsr	r25
    1904:	87 95       	ror	r24
    1906:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    190a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    190e:	86 2f       	mov	r24, r22
    1910:	82 95       	swap	r24
    1912:	88 0f       	add	r24, r24
    1914:	80 7e       	andi	r24, 0xE0	; 224
    1916:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    191a:	76 95       	lsr	r23
    191c:	67 95       	ror	r22
    191e:	76 95       	lsr	r23
    1920:	67 95       	ror	r22
    1922:	76 95       	lsr	r23
    1924:	67 95       	ror	r22
    1926:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    192a:	80 e8       	ldi	r24, 0x80	; 128
    192c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    1936:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    193a:	80 eb       	ldi	r24, 0xB0	; 176
    193c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	80 83       	st	Z, r24

	reset = 0;
    1944:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <reset>
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1954:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <rx_off>
    1958:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <rx_on>
    195c:	24 17       	cp	r18, r20
    195e:	89 f1       	breq	.+98     	; 0x19c2 <can_read_message_if_new+0x74>
    1960:	a4 2f       	mov	r26, r20
    1962:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    1964:	8b e0       	ldi	r24, 0x0B	; 11
    1966:	a8 9f       	mul	r26, r24
    1968:	b0 01       	movw	r22, r0
    196a:	11 24       	eor	r1, r1
    196c:	fb 01       	movw	r30, r22
    196e:	e4 5a       	subi	r30, 0xA4	; 164
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	20 81       	ld	r18, Z
    1974:	22 95       	swap	r18
    1976:	26 95       	lsr	r18
    1978:	27 70       	andi	r18, 0x07	; 7
    197a:	31 81       	ldd	r19, Z+1	; 0x01
    197c:	53 2f       	mov	r21, r19
    197e:	55 0f       	add	r21, r21
    1980:	55 0f       	add	r21, r21
    1982:	55 0f       	add	r21, r21
    1984:	25 2b       	or	r18, r21
    1986:	32 95       	swap	r19
    1988:	36 95       	lsr	r19
    198a:	37 70       	andi	r19, 0x07	; 7
    198c:	28 83       	st	Y, r18
    198e:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    1990:	fb 01       	movw	r30, r22
    1992:	e2 5a       	subi	r30, 0xA2	; 162
    1994:	fe 4f       	sbci	r31, 0xFE	; 254
    1996:	20 81       	ld	r18, Z
    1998:	2f 70       	andi	r18, 0x0F	; 15
    199a:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    199c:	22 23       	and	r18, r18
    199e:	99 f0       	breq	.+38     	; 0x19c6 <can_read_message_if_new+0x78>
    19a0:	db 01       	movw	r26, r22
    19a2:	a1 5a       	subi	r26, 0xA1	; 161
    19a4:	be 4f       	sbci	r27, 0xFE	; 254
    19a6:	fe 01       	movw	r30, r28
    19a8:	33 96       	adiw	r30, 0x03	; 3
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	2d 5f       	subi	r18, 0xFD	; 253
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	ce 01       	movw	r24, r28
    19b2:	82 0f       	add	r24, r18
    19b4:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    19b6:	2d 91       	ld	r18, X+
    19b8:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    19ba:	e8 17       	cp	r30, r24
    19bc:	f9 07       	cpc	r31, r25
    19be:	d9 f7       	brne	.-10     	; 0x19b6 <can_read_message_if_new+0x68>
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    19c6:	4f 5f       	subi	r20, 0xFF	; 255
    19c8:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <rx_off>
	}

	return true;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    19da:	ab ed       	ldi	r26, 0xDB	; 219
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	8c 91       	ld	r24, X
    19e0:	8f 77       	andi	r24, 0x7F	; 127
    19e2:	8c 93       	st	X, r24

	if (!tx_busy) {
    19e4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tx_busy>
    19e8:	81 11       	cpse	r24, r1
    19ea:	27 c0       	rjmp	.+78     	; 0x1a3a <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    19ec:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    19f0:	80 81       	ld	r24, Z
    19f2:	82 95       	swap	r24
    19f4:	88 0f       	add	r24, r24
    19f6:	80 7e       	andi	r24, 0xE0	; 224
    19f8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	96 95       	lsr	r25
    1a02:	87 95       	ror	r24
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	96 95       	lsr	r25
    1a0a:	87 95       	ror	r24
    1a0c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1a10:	df 01       	movw	r26, r30
    1a12:	13 96       	adiw	r26, 0x03	; 3
    1a14:	9f 01       	movw	r18, r30
    1a16:	25 5f       	subi	r18, 0xF5	; 245
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    1a1a:	ca ef       	ldi	r28, 0xFA	; 250
    1a1c:	d0 e0       	ldi	r29, 0x00	; 0
    1a1e:	9d 91       	ld	r25, X+
    1a20:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1a22:	a2 17       	cp	r26, r18
    1a24:	b3 07       	cpc	r27, r19
    1a26:	d9 f7       	brne	.-10     	; 0x1a1e <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	80 64       	ori	r24, 0x40	; 64
    1a32:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	43 c0       	rjmp	.+134    	; 0x1ac0 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    1a3a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <tx_on>
    1a3e:	82 2f       	mov	r24, r18
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <tx_off>
    1a46:	83 1b       	sub	r24, r19
    1a48:	91 09       	sbc	r25, r1
    1a4a:	8f 77       	andi	r24, 0x7F	; 127
    1a4c:	99 27       	eor	r25, r25
    1a4e:	40 97       	sbiw	r24, 0x10	; 16
    1a50:	b1 f1       	breq	.+108    	; 0x1abe <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1a52:	a2 2f       	mov	r26, r18
    1a54:	af 70       	andi	r26, 0x0F	; 15
    1a56:	8b e0       	ldi	r24, 0x0B	; 11
    1a58:	a8 9f       	mul	r26, r24
    1a5a:	d0 01       	movw	r26, r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	ed 01       	movw	r28, r26
    1a60:	c4 5f       	subi	r28, 0xF4	; 244
    1a62:	dd 4f       	sbci	r29, 0xFD	; 253
    1a64:	80 81       	ld	r24, Z
    1a66:	98 2f       	mov	r25, r24
    1a68:	92 95       	swap	r25
    1a6a:	99 0f       	add	r25, r25
    1a6c:	90 7e       	andi	r25, 0xE0	; 224
    1a6e:	88 81       	ld	r24, Y
    1a70:	8f 71       	andi	r24, 0x1F	; 31
    1a72:	89 2b       	or	r24, r25
    1a74:	88 83       	st	Y, r24
    1a76:	80 81       	ld	r24, Z
    1a78:	98 2f       	mov	r25, r24
    1a7a:	96 95       	lsr	r25
    1a7c:	96 95       	lsr	r25
    1a7e:	96 95       	lsr	r25
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	80 7e       	andi	r24, 0xE0	; 224
    1a84:	89 2b       	or	r24, r25
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	91 81       	ldd	r25, Z+1	; 0x01
    1a8a:	92 95       	swap	r25
    1a8c:	99 0f       	add	r25, r25
    1a8e:	90 7e       	andi	r25, 0xE0	; 224
    1a90:	8f 71       	andi	r24, 0x1F	; 31
    1a92:	89 2b       	or	r24, r25
    1a94:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	98 2f       	mov	r25, r24
    1a9a:	9f 70       	andi	r25, 0x0F	; 15
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	80 7f       	andi	r24, 0xF0	; 240
    1aa0:	89 2b       	or	r24, r25
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    1aa4:	a1 5f       	subi	r26, 0xF1	; 241
    1aa6:	bd 4f       	sbci	r27, 0xFD	; 253
    1aa8:	33 96       	adiw	r30, 0x03	; 3
    1aaa:	88 e0       	ldi	r24, 0x08	; 8
    1aac:	01 90       	ld	r0, Z+
    1aae:	0d 92       	st	X+, r0
    1ab0:	8a 95       	dec	r24
    1ab2:	e1 f7       	brne	.-8      	; 0x1aac <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    1ab4:	2f 5f       	subi	r18, 0xFF	; 255
    1ab6:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <tx_on>
		result = true;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    1abe:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    1ac0:	eb ed       	ldi	r30, 0xDB	; 219
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	90 81       	ld	r25, Z
    1ac6:	90 68       	ori	r25, 0x80	; 128
    1ac8:	90 83       	st	Z, r25

	return result;
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
    1ad0:	95 b1       	in	r25, 0x05	; 5
    1ad2:	89 2b       	or	r24, r25
    1ad4:	85 b9       	out	0x05, r24	; 5
    1ad6:	08 95       	ret

00001ad8 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
    1ad8:	84 b1       	in	r24, 0x04	; 4
    1ada:	80 6e       	ori	r24, 0xE0	; 224
    1adc:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
    1ade:	80 ee       	ldi	r24, 0xE0	; 224
    1ae0:	f7 cf       	rjmp	.-18     	; 0x1ad0 <rgbled_turn_off>
    1ae2:	08 95       	ret

00001ae4 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
    1ae4:	95 b1       	in	r25, 0x05	; 5
    1ae6:	80 95       	com	r24
    1ae8:	98 23       	and	r25, r24
    1aea:	95 b9       	out	0x05, r25	; 5
    1aec:	08 95       	ret

00001aee <rgbled_toggle>:
}

void rgbled_toggle(RgbLedColor_t color) {
	PORTB ^= color;
    1aee:	95 b1       	in	r25, 0x05	; 5
    1af0:	89 27       	eor	r24, r25
    1af2:	85 b9       	out	0x05, r24	; 5
    1af4:	08 95       	ret

00001af6 <spi_init>:
#define PIN_SCK PB1
#define PIN_SS PB0

void spi_init(spi_prescale_t clock_prescale) {
	// Set MOSI, SS, and SCK output, all others input
	DDR_SPI |= (1 << PIN_MOSI) | (1 << PIN_SCK) | (1 << PIN_SS);
    1af6:	94 b1       	in	r25, 0x04	; 4
    1af8:	97 60       	ori	r25, 0x07	; 7
    1afa:	94 b9       	out	0x04, r25	; 4
	
	uint8_t SPI2X_val = (uint8_t)((clock_prescale >> 2) & 0b001);
    1afc:	82 fb       	bst	r24, 2
    1afe:	99 27       	eor	r25, r25
    1b00:	90 f9       	bld	r25, 0
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0) | (1 << CPOL) | (1 << CPHA);
	SPSR = (SPI2X_val << SPI2X);
*/

	// Enable SPI, Master, selected prescaling, mode 0 (CPOL = CPHA = 0)
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0);
    1b02:	28 2f       	mov	r18, r24
    1b04:	22 70       	andi	r18, 0x02	; 2
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	80 65       	ori	r24, 0x50	; 80
    1b0a:	82 2b       	or	r24, r18
    1b0c:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA));
    1b0e:	8c b5       	in	r24, 0x2c	; 44
    1b10:	83 7f       	andi	r24, 0xF3	; 243
    1b12:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPI2X_val << SPI2X);
    1b14:	9d bd       	out	0x2d, r25	; 45
    1b16:	08 95       	ret

00001b18 <spi_trancieve>:

}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
	PORTB &= ~(1 << PIN_SS);
    1b1e:	28 98       	cbi	0x05, 0	; 5

	for (size_t i = 0; i < length; i++) {
    1b20:	41 15       	cp	r20, r1
    1b22:	51 05       	cpc	r21, r1
    1b24:	c1 f0       	breq	.+48     	; 0x1b56 <spi_trancieve+0x3e>
    1b26:	fb 01       	movw	r30, r22
    1b28:	dc 01       	movw	r26, r24
    1b2a:	46 0f       	add	r20, r22
    1b2c:	57 1f       	adc	r21, r23
		SPDR = (tx_buffer != NULL) ? tx_buffer[i] : 0xFF;
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	20 97       	sbiw	r28, 0x00	; 0
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <spi_trancieve+0x20>
    1b34:	9c 91       	ld	r25, X
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <spi_trancieve+0x22>
    1b38:	98 2f       	mov	r25, r24
    1b3a:	9e bd       	out	0x2e, r25	; 46

		while(!(SPSR & (1 << SPIF)));
    1b3c:	0d b4       	in	r0, 0x2d	; 45
    1b3e:	07 fe       	sbrs	r0, 7
    1b40:	fd cf       	rjmp	.-6      	; 0x1b3c <spi_trancieve+0x24>
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
    1b42:	61 15       	cp	r22, r1
    1b44:	71 05       	cpc	r23, r1
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <spi_trancieve+0x34>
    1b48:	9e b5       	in	r25, 0x2e	; 46
    1b4a:	90 83       	st	Z, r25
    1b4c:	31 96       	adiw	r30, 0x01	; 1
    1b4e:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
	PORTB &= ~(1 << PIN_SS);

	for (size_t i = 0; i < length; i++) {
    1b50:	e4 17       	cp	r30, r20
    1b52:	f5 07       	cpc	r31, r21
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <spi_trancieve+0x18>
		while(!(SPSR & (1 << SPIF)));
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
	}

	if (last_in_transmission) {
    1b56:	21 11       	cpse	r18, r1
		PORTB |= (1 << PIN_SS);
    1b58:	28 9a       	sbi	0x05, 0	; 5
	}
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
    1b60:	1f 92       	push	r1
    1b62:	0f 92       	push	r0
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	0f 92       	push	r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	0b b6       	in	r0, 0x3b	; 59
    1b6c:	0f 92       	push	r0
    1b6e:	2f 93       	push	r18
    1b70:	3f 93       	push	r19
    1b72:	4f 93       	push	r20
    1b74:	5f 93       	push	r21
    1b76:	6f 93       	push	r22
    1b78:	7f 93       	push	r23
    1b7a:	8f 93       	push	r24
    1b7c:	af 93       	push	r26
    1b7e:	bf 93       	push	r27
    1b80:	ef 93       	push	r30
    1b82:	ff 93       	push	r31
    1b84:	ac ed       	ldi	r26, 0xDC	; 220
    1b86:	b2 e0       	ldi	r27, 0x02	; 2
    1b88:	ec eb       	ldi	r30, 0xBC	; 188
    1b8a:	f2 e0       	ldi	r31, 0x02	; 2
    1b8c:	2c ed       	ldi	r18, 0xDC	; 220
    1b8e:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
    1b90:	8d 91       	ld	r24, X+
    1b92:	88 23       	and	r24, r24
    1b94:	59 f0       	breq	.+22     	; 0x1bac <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
    1b96:	40 81       	ld	r20, Z
    1b98:	51 81       	ldd	r21, Z+1	; 0x01
    1b9a:	62 81       	ldd	r22, Z+2	; 0x02
    1b9c:	73 81       	ldd	r23, Z+3	; 0x03
    1b9e:	50 5e       	subi	r21, 0xE0	; 224
    1ba0:	6f 4f       	sbci	r22, 0xFF	; 255
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	40 83       	st	Z, r20
    1ba6:	51 83       	std	Z+1, r21	; 0x01
    1ba8:	62 83       	std	Z+2, r22	; 0x02
    1baa:	73 83       	std	Z+3, r23	; 0x03
    1bac:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
    1bae:	e2 17       	cp	r30, r18
    1bb0:	f3 07       	cpc	r31, r19
    1bb2:	71 f7       	brne	.-36     	; 0x1b90 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	8f 91       	pop	r24
    1bbe:	7f 91       	pop	r23
    1bc0:	6f 91       	pop	r22
    1bc2:	5f 91       	pop	r21
    1bc4:	4f 91       	pop	r20
    1bc6:	3f 91       	pop	r19
    1bc8:	2f 91       	pop	r18
    1bca:	0f 90       	pop	r0
    1bcc:	0b be       	out	0x3b, r0	; 59
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <__subsf3>:
    1bd8:	50 58       	subi	r21, 0x80	; 128

00001bda <__addsf3>:
    1bda:	bb 27       	eor	r27, r27
    1bdc:	aa 27       	eor	r26, r26
    1bde:	0e d0       	rcall	.+28     	; 0x1bfc <__addsf3x>
    1be0:	75 c1       	rjmp	.+746    	; 0x1ecc <__fp_round>
    1be2:	66 d1       	rcall	.+716    	; 0x1eb0 <__fp_pscA>
    1be4:	30 f0       	brcs	.+12     	; 0x1bf2 <__addsf3+0x18>
    1be6:	6b d1       	rcall	.+726    	; 0x1ebe <__fp_pscB>
    1be8:	20 f0       	brcs	.+8      	; 0x1bf2 <__addsf3+0x18>
    1bea:	31 f4       	brne	.+12     	; 0x1bf8 <__addsf3+0x1e>
    1bec:	9f 3f       	cpi	r25, 0xFF	; 255
    1bee:	11 f4       	brne	.+4      	; 0x1bf4 <__addsf3+0x1a>
    1bf0:	1e f4       	brtc	.+6      	; 0x1bf8 <__addsf3+0x1e>
    1bf2:	5b c1       	rjmp	.+694    	; 0x1eaa <__fp_nan>
    1bf4:	0e f4       	brtc	.+2      	; 0x1bf8 <__addsf3+0x1e>
    1bf6:	e0 95       	com	r30
    1bf8:	e7 fb       	bst	r30, 7
    1bfa:	51 c1       	rjmp	.+674    	; 0x1e9e <__fp_inf>

00001bfc <__addsf3x>:
    1bfc:	e9 2f       	mov	r30, r25
    1bfe:	77 d1       	rcall	.+750    	; 0x1eee <__fp_split3>
    1c00:	80 f3       	brcs	.-32     	; 0x1be2 <__addsf3+0x8>
    1c02:	ba 17       	cp	r27, r26
    1c04:	62 07       	cpc	r22, r18
    1c06:	73 07       	cpc	r23, r19
    1c08:	84 07       	cpc	r24, r20
    1c0a:	95 07       	cpc	r25, r21
    1c0c:	18 f0       	brcs	.+6      	; 0x1c14 <__addsf3x+0x18>
    1c0e:	71 f4       	brne	.+28     	; 0x1c2c <__addsf3x+0x30>
    1c10:	9e f5       	brtc	.+102    	; 0x1c78 <__addsf3x+0x7c>
    1c12:	8f c1       	rjmp	.+798    	; 0x1f32 <__fp_zero>
    1c14:	0e f4       	brtc	.+2      	; 0x1c18 <__addsf3x+0x1c>
    1c16:	e0 95       	com	r30
    1c18:	0b 2e       	mov	r0, r27
    1c1a:	ba 2f       	mov	r27, r26
    1c1c:	a0 2d       	mov	r26, r0
    1c1e:	0b 01       	movw	r0, r22
    1c20:	b9 01       	movw	r22, r18
    1c22:	90 01       	movw	r18, r0
    1c24:	0c 01       	movw	r0, r24
    1c26:	ca 01       	movw	r24, r20
    1c28:	a0 01       	movw	r20, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	ff 27       	eor	r31, r31
    1c2e:	59 1b       	sub	r21, r25
    1c30:	99 f0       	breq	.+38     	; 0x1c58 <__addsf3x+0x5c>
    1c32:	59 3f       	cpi	r21, 0xF9	; 249
    1c34:	50 f4       	brcc	.+20     	; 0x1c4a <__addsf3x+0x4e>
    1c36:	50 3e       	cpi	r21, 0xE0	; 224
    1c38:	68 f1       	brcs	.+90     	; 0x1c94 <__addsf3x+0x98>
    1c3a:	1a 16       	cp	r1, r26
    1c3c:	f0 40       	sbci	r31, 0x00	; 0
    1c3e:	a2 2f       	mov	r26, r18
    1c40:	23 2f       	mov	r18, r19
    1c42:	34 2f       	mov	r19, r20
    1c44:	44 27       	eor	r20, r20
    1c46:	58 5f       	subi	r21, 0xF8	; 248
    1c48:	f3 cf       	rjmp	.-26     	; 0x1c30 <__addsf3x+0x34>
    1c4a:	46 95       	lsr	r20
    1c4c:	37 95       	ror	r19
    1c4e:	27 95       	ror	r18
    1c50:	a7 95       	ror	r26
    1c52:	f0 40       	sbci	r31, 0x00	; 0
    1c54:	53 95       	inc	r21
    1c56:	c9 f7       	brne	.-14     	; 0x1c4a <__addsf3x+0x4e>
    1c58:	7e f4       	brtc	.+30     	; 0x1c78 <__addsf3x+0x7c>
    1c5a:	1f 16       	cp	r1, r31
    1c5c:	ba 0b       	sbc	r27, r26
    1c5e:	62 0b       	sbc	r22, r18
    1c60:	73 0b       	sbc	r23, r19
    1c62:	84 0b       	sbc	r24, r20
    1c64:	ba f0       	brmi	.+46     	; 0x1c94 <__addsf3x+0x98>
    1c66:	91 50       	subi	r25, 0x01	; 1
    1c68:	a1 f0       	breq	.+40     	; 0x1c92 <__addsf3x+0x96>
    1c6a:	ff 0f       	add	r31, r31
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	66 1f       	adc	r22, r22
    1c70:	77 1f       	adc	r23, r23
    1c72:	88 1f       	adc	r24, r24
    1c74:	c2 f7       	brpl	.-16     	; 0x1c66 <__addsf3x+0x6a>
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <__addsf3x+0x98>
    1c78:	ba 0f       	add	r27, r26
    1c7a:	62 1f       	adc	r22, r18
    1c7c:	73 1f       	adc	r23, r19
    1c7e:	84 1f       	adc	r24, r20
    1c80:	48 f4       	brcc	.+18     	; 0x1c94 <__addsf3x+0x98>
    1c82:	87 95       	ror	r24
    1c84:	77 95       	ror	r23
    1c86:	67 95       	ror	r22
    1c88:	b7 95       	ror	r27
    1c8a:	f7 95       	ror	r31
    1c8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <__addsf3x+0x96>
    1c90:	b3 cf       	rjmp	.-154    	; 0x1bf8 <__addsf3+0x1e>
    1c92:	93 95       	inc	r25
    1c94:	88 0f       	add	r24, r24
    1c96:	08 f0       	brcs	.+2      	; 0x1c9a <__addsf3x+0x9e>
    1c98:	99 27       	eor	r25, r25
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	97 95       	ror	r25
    1c9e:	87 95       	ror	r24
    1ca0:	08 95       	ret

00001ca2 <__cmpsf2>:
    1ca2:	d9 d0       	rcall	.+434    	; 0x1e56 <__fp_cmp>
    1ca4:	08 f4       	brcc	.+2      	; 0x1ca8 <__cmpsf2+0x6>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	08 95       	ret

00001caa <__divsf3>:
    1caa:	0c d0       	rcall	.+24     	; 0x1cc4 <__divsf3x>
    1cac:	0f c1       	rjmp	.+542    	; 0x1ecc <__fp_round>
    1cae:	07 d1       	rcall	.+526    	; 0x1ebe <__fp_pscB>
    1cb0:	40 f0       	brcs	.+16     	; 0x1cc2 <__divsf3+0x18>
    1cb2:	fe d0       	rcall	.+508    	; 0x1eb0 <__fp_pscA>
    1cb4:	30 f0       	brcs	.+12     	; 0x1cc2 <__divsf3+0x18>
    1cb6:	21 f4       	brne	.+8      	; 0x1cc0 <__divsf3+0x16>
    1cb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <__divsf3+0x18>
    1cbc:	f0 c0       	rjmp	.+480    	; 0x1e9e <__fp_inf>
    1cbe:	51 11       	cpse	r21, r1
    1cc0:	39 c1       	rjmp	.+626    	; 0x1f34 <__fp_szero>
    1cc2:	f3 c0       	rjmp	.+486    	; 0x1eaa <__fp_nan>

00001cc4 <__divsf3x>:
    1cc4:	14 d1       	rcall	.+552    	; 0x1eee <__fp_split3>
    1cc6:	98 f3       	brcs	.-26     	; 0x1cae <__divsf3+0x4>

00001cc8 <__divsf3_pse>:
    1cc8:	99 23       	and	r25, r25
    1cca:	c9 f3       	breq	.-14     	; 0x1cbe <__divsf3+0x14>
    1ccc:	55 23       	and	r21, r21
    1cce:	b1 f3       	breq	.-20     	; 0x1cbc <__divsf3+0x12>
    1cd0:	95 1b       	sub	r25, r21
    1cd2:	55 0b       	sbc	r21, r21
    1cd4:	bb 27       	eor	r27, r27
    1cd6:	aa 27       	eor	r26, r26
    1cd8:	62 17       	cp	r22, r18
    1cda:	73 07       	cpc	r23, r19
    1cdc:	84 07       	cpc	r24, r20
    1cde:	38 f0       	brcs	.+14     	; 0x1cee <__divsf3_pse+0x26>
    1ce0:	9f 5f       	subi	r25, 0xFF	; 255
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	44 1f       	adc	r20, r20
    1cea:	aa 1f       	adc	r26, r26
    1cec:	a9 f3       	breq	.-22     	; 0x1cd8 <__divsf3_pse+0x10>
    1cee:	33 d0       	rcall	.+102    	; 0x1d56 <__divsf3_pse+0x8e>
    1cf0:	0e 2e       	mov	r0, r30
    1cf2:	3a f0       	brmi	.+14     	; 0x1d02 <__divsf3_pse+0x3a>
    1cf4:	e0 e8       	ldi	r30, 0x80	; 128
    1cf6:	30 d0       	rcall	.+96     	; 0x1d58 <__divsf3_pse+0x90>
    1cf8:	91 50       	subi	r25, 0x01	; 1
    1cfa:	50 40       	sbci	r21, 0x00	; 0
    1cfc:	e6 95       	lsr	r30
    1cfe:	00 1c       	adc	r0, r0
    1d00:	ca f7       	brpl	.-14     	; 0x1cf4 <__divsf3_pse+0x2c>
    1d02:	29 d0       	rcall	.+82     	; 0x1d56 <__divsf3_pse+0x8e>
    1d04:	fe 2f       	mov	r31, r30
    1d06:	27 d0       	rcall	.+78     	; 0x1d56 <__divsf3_pse+0x8e>
    1d08:	66 0f       	add	r22, r22
    1d0a:	77 1f       	adc	r23, r23
    1d0c:	88 1f       	adc	r24, r24
    1d0e:	bb 1f       	adc	r27, r27
    1d10:	26 17       	cp	r18, r22
    1d12:	37 07       	cpc	r19, r23
    1d14:	48 07       	cpc	r20, r24
    1d16:	ab 07       	cpc	r26, r27
    1d18:	b0 e8       	ldi	r27, 0x80	; 128
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <__divsf3_pse+0x56>
    1d1c:	bb 0b       	sbc	r27, r27
    1d1e:	80 2d       	mov	r24, r0
    1d20:	bf 01       	movw	r22, r30
    1d22:	ff 27       	eor	r31, r31
    1d24:	93 58       	subi	r25, 0x83	; 131
    1d26:	5f 4f       	sbci	r21, 0xFF	; 255
    1d28:	2a f0       	brmi	.+10     	; 0x1d34 <__divsf3_pse+0x6c>
    1d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2c:	51 05       	cpc	r21, r1
    1d2e:	68 f0       	brcs	.+26     	; 0x1d4a <__divsf3_pse+0x82>
    1d30:	b6 c0       	rjmp	.+364    	; 0x1e9e <__fp_inf>
    1d32:	00 c1       	rjmp	.+512    	; 0x1f34 <__fp_szero>
    1d34:	5f 3f       	cpi	r21, 0xFF	; 255
    1d36:	ec f3       	brlt	.-6      	; 0x1d32 <__divsf3_pse+0x6a>
    1d38:	98 3e       	cpi	r25, 0xE8	; 232
    1d3a:	dc f3       	brlt	.-10     	; 0x1d32 <__divsf3_pse+0x6a>
    1d3c:	86 95       	lsr	r24
    1d3e:	77 95       	ror	r23
    1d40:	67 95       	ror	r22
    1d42:	b7 95       	ror	r27
    1d44:	f7 95       	ror	r31
    1d46:	9f 5f       	subi	r25, 0xFF	; 255
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <__divsf3_pse+0x74>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	91 1d       	adc	r25, r1
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	97 f9       	bld	r25, 7
    1d54:	08 95       	ret
    1d56:	e1 e0       	ldi	r30, 0x01	; 1
    1d58:	66 0f       	add	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	62 17       	cp	r22, r18
    1d62:	73 07       	cpc	r23, r19
    1d64:	84 07       	cpc	r24, r20
    1d66:	ba 07       	cpc	r27, r26
    1d68:	20 f0       	brcs	.+8      	; 0x1d72 <__divsf3_pse+0xaa>
    1d6a:	62 1b       	sub	r22, r18
    1d6c:	73 0b       	sbc	r23, r19
    1d6e:	84 0b       	sbc	r24, r20
    1d70:	ba 0b       	sbc	r27, r26
    1d72:	ee 1f       	adc	r30, r30
    1d74:	88 f7       	brcc	.-30     	; 0x1d58 <__divsf3_pse+0x90>
    1d76:	e0 95       	com	r30
    1d78:	08 95       	ret

00001d7a <__fixsfsi>:
    1d7a:	04 d0       	rcall	.+8      	; 0x1d84 <__fixunssfsi>
    1d7c:	68 94       	set
    1d7e:	b1 11       	cpse	r27, r1
    1d80:	d9 c0       	rjmp	.+434    	; 0x1f34 <__fp_szero>
    1d82:	08 95       	ret

00001d84 <__fixunssfsi>:
    1d84:	bc d0       	rcall	.+376    	; 0x1efe <__fp_splitA>
    1d86:	88 f0       	brcs	.+34     	; 0x1daa <__fixunssfsi+0x26>
    1d88:	9f 57       	subi	r25, 0x7F	; 127
    1d8a:	90 f0       	brcs	.+36     	; 0x1db0 <__fixunssfsi+0x2c>
    1d8c:	b9 2f       	mov	r27, r25
    1d8e:	99 27       	eor	r25, r25
    1d90:	b7 51       	subi	r27, 0x17	; 23
    1d92:	a0 f0       	brcs	.+40     	; 0x1dbc <__fixunssfsi+0x38>
    1d94:	d1 f0       	breq	.+52     	; 0x1dca <__fixunssfsi+0x46>
    1d96:	66 0f       	add	r22, r22
    1d98:	77 1f       	adc	r23, r23
    1d9a:	88 1f       	adc	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	1a f0       	brmi	.+6      	; 0x1da6 <__fixunssfsi+0x22>
    1da0:	ba 95       	dec	r27
    1da2:	c9 f7       	brne	.-14     	; 0x1d96 <__fixunssfsi+0x12>
    1da4:	12 c0       	rjmp	.+36     	; 0x1dca <__fixunssfsi+0x46>
    1da6:	b1 30       	cpi	r27, 0x01	; 1
    1da8:	81 f0       	breq	.+32     	; 0x1dca <__fixunssfsi+0x46>
    1daa:	c3 d0       	rcall	.+390    	; 0x1f32 <__fp_zero>
    1dac:	b1 e0       	ldi	r27, 0x01	; 1
    1dae:	08 95       	ret
    1db0:	c0 c0       	rjmp	.+384    	; 0x1f32 <__fp_zero>
    1db2:	67 2f       	mov	r22, r23
    1db4:	78 2f       	mov	r23, r24
    1db6:	88 27       	eor	r24, r24
    1db8:	b8 5f       	subi	r27, 0xF8	; 248
    1dba:	39 f0       	breq	.+14     	; 0x1dca <__fixunssfsi+0x46>
    1dbc:	b9 3f       	cpi	r27, 0xF9	; 249
    1dbe:	cc f3       	brlt	.-14     	; 0x1db2 <__fixunssfsi+0x2e>
    1dc0:	86 95       	lsr	r24
    1dc2:	77 95       	ror	r23
    1dc4:	67 95       	ror	r22
    1dc6:	b3 95       	inc	r27
    1dc8:	d9 f7       	brne	.-10     	; 0x1dc0 <__fixunssfsi+0x3c>
    1dca:	3e f4       	brtc	.+14     	; 0x1dda <__fixunssfsi+0x56>
    1dcc:	90 95       	com	r25
    1dce:	80 95       	com	r24
    1dd0:	70 95       	com	r23
    1dd2:	61 95       	neg	r22
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	08 95       	ret

00001ddc <__floatunsisf>:
    1ddc:	e8 94       	clt
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <__floatsisf+0x12>

00001de0 <__floatsisf>:
    1de0:	97 fb       	bst	r25, 7
    1de2:	3e f4       	brtc	.+14     	; 0x1df2 <__floatsisf+0x12>
    1de4:	90 95       	com	r25
    1de6:	80 95       	com	r24
    1de8:	70 95       	com	r23
    1dea:	61 95       	neg	r22
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	8f 4f       	sbci	r24, 0xFF	; 255
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	99 23       	and	r25, r25
    1df4:	a9 f0       	breq	.+42     	; 0x1e20 <__floatsisf+0x40>
    1df6:	f9 2f       	mov	r31, r25
    1df8:	96 e9       	ldi	r25, 0x96	; 150
    1dfa:	bb 27       	eor	r27, r27
    1dfc:	93 95       	inc	r25
    1dfe:	f6 95       	lsr	r31
    1e00:	87 95       	ror	r24
    1e02:	77 95       	ror	r23
    1e04:	67 95       	ror	r22
    1e06:	b7 95       	ror	r27
    1e08:	f1 11       	cpse	r31, r1
    1e0a:	f8 cf       	rjmp	.-16     	; 0x1dfc <__floatsisf+0x1c>
    1e0c:	fa f4       	brpl	.+62     	; 0x1e4c <__floatsisf+0x6c>
    1e0e:	bb 0f       	add	r27, r27
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <__floatsisf+0x36>
    1e12:	60 ff       	sbrs	r22, 0
    1e14:	1b c0       	rjmp	.+54     	; 0x1e4c <__floatsisf+0x6c>
    1e16:	6f 5f       	subi	r22, 0xFF	; 255
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	16 c0       	rjmp	.+44     	; 0x1e4c <__floatsisf+0x6c>
    1e20:	88 23       	and	r24, r24
    1e22:	11 f0       	breq	.+4      	; 0x1e28 <__floatsisf+0x48>
    1e24:	96 e9       	ldi	r25, 0x96	; 150
    1e26:	11 c0       	rjmp	.+34     	; 0x1e4a <__floatsisf+0x6a>
    1e28:	77 23       	and	r23, r23
    1e2a:	21 f0       	breq	.+8      	; 0x1e34 <__floatsisf+0x54>
    1e2c:	9e e8       	ldi	r25, 0x8E	; 142
    1e2e:	87 2f       	mov	r24, r23
    1e30:	76 2f       	mov	r23, r22
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <__floatsisf+0x5e>
    1e34:	66 23       	and	r22, r22
    1e36:	71 f0       	breq	.+28     	; 0x1e54 <__floatsisf+0x74>
    1e38:	96 e8       	ldi	r25, 0x86	; 134
    1e3a:	86 2f       	mov	r24, r22
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	2a f0       	brmi	.+10     	; 0x1e4c <__floatsisf+0x6c>
    1e42:	9a 95       	dec	r25
    1e44:	66 0f       	add	r22, r22
    1e46:	77 1f       	adc	r23, r23
    1e48:	88 1f       	adc	r24, r24
    1e4a:	da f7       	brpl	.-10     	; 0x1e42 <__floatsisf+0x62>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	96 95       	lsr	r25
    1e50:	87 95       	ror	r24
    1e52:	97 f9       	bld	r25, 7
    1e54:	08 95       	ret

00001e56 <__fp_cmp>:
    1e56:	99 0f       	add	r25, r25
    1e58:	00 08       	sbc	r0, r0
    1e5a:	55 0f       	add	r21, r21
    1e5c:	aa 0b       	sbc	r26, r26
    1e5e:	e0 e8       	ldi	r30, 0x80	; 128
    1e60:	fe ef       	ldi	r31, 0xFE	; 254
    1e62:	16 16       	cp	r1, r22
    1e64:	17 06       	cpc	r1, r23
    1e66:	e8 07       	cpc	r30, r24
    1e68:	f9 07       	cpc	r31, r25
    1e6a:	c0 f0       	brcs	.+48     	; 0x1e9c <__fp_cmp+0x46>
    1e6c:	12 16       	cp	r1, r18
    1e6e:	13 06       	cpc	r1, r19
    1e70:	e4 07       	cpc	r30, r20
    1e72:	f5 07       	cpc	r31, r21
    1e74:	98 f0       	brcs	.+38     	; 0x1e9c <__fp_cmp+0x46>
    1e76:	62 1b       	sub	r22, r18
    1e78:	73 0b       	sbc	r23, r19
    1e7a:	84 0b       	sbc	r24, r20
    1e7c:	95 0b       	sbc	r25, r21
    1e7e:	39 f4       	brne	.+14     	; 0x1e8e <__fp_cmp+0x38>
    1e80:	0a 26       	eor	r0, r26
    1e82:	61 f0       	breq	.+24     	; 0x1e9c <__fp_cmp+0x46>
    1e84:	23 2b       	or	r18, r19
    1e86:	24 2b       	or	r18, r20
    1e88:	25 2b       	or	r18, r21
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <__fp_cmp+0x3e>
    1e8c:	08 95       	ret
    1e8e:	0a 26       	eor	r0, r26
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <__fp_cmp+0x3e>
    1e92:	a1 40       	sbci	r26, 0x01	; 1
    1e94:	a6 95       	lsr	r26
    1e96:	8f ef       	ldi	r24, 0xFF	; 255
    1e98:	81 1d       	adc	r24, r1
    1e9a:	81 1d       	adc	r24, r1
    1e9c:	08 95       	ret

00001e9e <__fp_inf>:
    1e9e:	97 f9       	bld	r25, 7
    1ea0:	9f 67       	ori	r25, 0x7F	; 127
    1ea2:	80 e8       	ldi	r24, 0x80	; 128
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	08 95       	ret

00001eaa <__fp_nan>:
    1eaa:	9f ef       	ldi	r25, 0xFF	; 255
    1eac:	80 ec       	ldi	r24, 0xC0	; 192
    1eae:	08 95       	ret

00001eb0 <__fp_pscA>:
    1eb0:	00 24       	eor	r0, r0
    1eb2:	0a 94       	dec	r0
    1eb4:	16 16       	cp	r1, r22
    1eb6:	17 06       	cpc	r1, r23
    1eb8:	18 06       	cpc	r1, r24
    1eba:	09 06       	cpc	r0, r25
    1ebc:	08 95       	ret

00001ebe <__fp_pscB>:
    1ebe:	00 24       	eor	r0, r0
    1ec0:	0a 94       	dec	r0
    1ec2:	12 16       	cp	r1, r18
    1ec4:	13 06       	cpc	r1, r19
    1ec6:	14 06       	cpc	r1, r20
    1ec8:	05 06       	cpc	r0, r21
    1eca:	08 95       	ret

00001ecc <__fp_round>:
    1ecc:	09 2e       	mov	r0, r25
    1ece:	03 94       	inc	r0
    1ed0:	00 0c       	add	r0, r0
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <__fp_round+0xc>
    1ed4:	88 23       	and	r24, r24
    1ed6:	52 f0       	brmi	.+20     	; 0x1eec <__fp_round+0x20>
    1ed8:	bb 0f       	add	r27, r27
    1eda:	40 f4       	brcc	.+16     	; 0x1eec <__fp_round+0x20>
    1edc:	bf 2b       	or	r27, r31
    1ede:	11 f4       	brne	.+4      	; 0x1ee4 <__fp_round+0x18>
    1ee0:	60 ff       	sbrs	r22, 0
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <__fp_round+0x20>
    1ee4:	6f 5f       	subi	r22, 0xFF	; 255
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	08 95       	ret

00001eee <__fp_split3>:
    1eee:	57 fd       	sbrc	r21, 7
    1ef0:	90 58       	subi	r25, 0x80	; 128
    1ef2:	44 0f       	add	r20, r20
    1ef4:	55 1f       	adc	r21, r21
    1ef6:	59 f0       	breq	.+22     	; 0x1f0e <__fp_splitA+0x10>
    1ef8:	5f 3f       	cpi	r21, 0xFF	; 255
    1efa:	71 f0       	breq	.+28     	; 0x1f18 <__fp_splitA+0x1a>
    1efc:	47 95       	ror	r20

00001efe <__fp_splitA>:
    1efe:	88 0f       	add	r24, r24
    1f00:	97 fb       	bst	r25, 7
    1f02:	99 1f       	adc	r25, r25
    1f04:	61 f0       	breq	.+24     	; 0x1f1e <__fp_splitA+0x20>
    1f06:	9f 3f       	cpi	r25, 0xFF	; 255
    1f08:	79 f0       	breq	.+30     	; 0x1f28 <__fp_splitA+0x2a>
    1f0a:	87 95       	ror	r24
    1f0c:	08 95       	ret
    1f0e:	12 16       	cp	r1, r18
    1f10:	13 06       	cpc	r1, r19
    1f12:	14 06       	cpc	r1, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	f2 cf       	rjmp	.-28     	; 0x1efc <__fp_split3+0xe>
    1f18:	46 95       	lsr	r20
    1f1a:	f1 df       	rcall	.-30     	; 0x1efe <__fp_splitA>
    1f1c:	08 c0       	rjmp	.+16     	; 0x1f2e <__fp_splitA+0x30>
    1f1e:	16 16       	cp	r1, r22
    1f20:	17 06       	cpc	r1, r23
    1f22:	18 06       	cpc	r1, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	f1 cf       	rjmp	.-30     	; 0x1f0a <__fp_splitA+0xc>
    1f28:	86 95       	lsr	r24
    1f2a:	71 05       	cpc	r23, r1
    1f2c:	61 05       	cpc	r22, r1
    1f2e:	08 94       	sec
    1f30:	08 95       	ret

00001f32 <__fp_zero>:
    1f32:	e8 94       	clt

00001f34 <__fp_szero>:
    1f34:	bb 27       	eor	r27, r27
    1f36:	66 27       	eor	r22, r22
    1f38:	77 27       	eor	r23, r23
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	97 f9       	bld	r25, 7
    1f3e:	08 95       	ret

00001f40 <__gesf2>:
    1f40:	8a df       	rcall	.-236    	; 0x1e56 <__fp_cmp>
    1f42:	08 f4       	brcc	.+2      	; 0x1f46 <__gesf2+0x6>
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	08 95       	ret

00001f48 <__mulsf3>:
    1f48:	0b d0       	rcall	.+22     	; 0x1f60 <__mulsf3x>
    1f4a:	c0 cf       	rjmp	.-128    	; 0x1ecc <__fp_round>
    1f4c:	b1 df       	rcall	.-158    	; 0x1eb0 <__fp_pscA>
    1f4e:	28 f0       	brcs	.+10     	; 0x1f5a <__mulsf3+0x12>
    1f50:	b6 df       	rcall	.-148    	; 0x1ebe <__fp_pscB>
    1f52:	18 f0       	brcs	.+6      	; 0x1f5a <__mulsf3+0x12>
    1f54:	95 23       	and	r25, r21
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <__mulsf3+0x12>
    1f58:	a2 cf       	rjmp	.-188    	; 0x1e9e <__fp_inf>
    1f5a:	a7 cf       	rjmp	.-178    	; 0x1eaa <__fp_nan>
    1f5c:	11 24       	eor	r1, r1
    1f5e:	ea cf       	rjmp	.-44     	; 0x1f34 <__fp_szero>

00001f60 <__mulsf3x>:
    1f60:	c6 df       	rcall	.-116    	; 0x1eee <__fp_split3>
    1f62:	a0 f3       	brcs	.-24     	; 0x1f4c <__mulsf3+0x4>

00001f64 <__mulsf3_pse>:
    1f64:	95 9f       	mul	r25, r21
    1f66:	d1 f3       	breq	.-12     	; 0x1f5c <__mulsf3+0x14>
    1f68:	95 0f       	add	r25, r21
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	55 1f       	adc	r21, r21
    1f6e:	62 9f       	mul	r22, r18
    1f70:	f0 01       	movw	r30, r0
    1f72:	72 9f       	mul	r23, r18
    1f74:	bb 27       	eor	r27, r27
    1f76:	f0 0d       	add	r31, r0
    1f78:	b1 1d       	adc	r27, r1
    1f7a:	63 9f       	mul	r22, r19
    1f7c:	aa 27       	eor	r26, r26
    1f7e:	f0 0d       	add	r31, r0
    1f80:	b1 1d       	adc	r27, r1
    1f82:	aa 1f       	adc	r26, r26
    1f84:	64 9f       	mul	r22, r20
    1f86:	66 27       	eor	r22, r22
    1f88:	b0 0d       	add	r27, r0
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	66 1f       	adc	r22, r22
    1f8e:	82 9f       	mul	r24, r18
    1f90:	22 27       	eor	r18, r18
    1f92:	b0 0d       	add	r27, r0
    1f94:	a1 1d       	adc	r26, r1
    1f96:	62 1f       	adc	r22, r18
    1f98:	73 9f       	mul	r23, r19
    1f9a:	b0 0d       	add	r27, r0
    1f9c:	a1 1d       	adc	r26, r1
    1f9e:	62 1f       	adc	r22, r18
    1fa0:	83 9f       	mul	r24, r19
    1fa2:	a0 0d       	add	r26, r0
    1fa4:	61 1d       	adc	r22, r1
    1fa6:	22 1f       	adc	r18, r18
    1fa8:	74 9f       	mul	r23, r20
    1faa:	33 27       	eor	r19, r19
    1fac:	a0 0d       	add	r26, r0
    1fae:	61 1d       	adc	r22, r1
    1fb0:	23 1f       	adc	r18, r19
    1fb2:	84 9f       	mul	r24, r20
    1fb4:	60 0d       	add	r22, r0
    1fb6:	21 1d       	adc	r18, r1
    1fb8:	82 2f       	mov	r24, r18
    1fba:	76 2f       	mov	r23, r22
    1fbc:	6a 2f       	mov	r22, r26
    1fbe:	11 24       	eor	r1, r1
    1fc0:	9f 57       	subi	r25, 0x7F	; 127
    1fc2:	50 40       	sbci	r21, 0x00	; 0
    1fc4:	8a f0       	brmi	.+34     	; 0x1fe8 <__mulsf3_pse+0x84>
    1fc6:	e1 f0       	breq	.+56     	; 0x2000 <__mulsf3_pse+0x9c>
    1fc8:	88 23       	and	r24, r24
    1fca:	4a f0       	brmi	.+18     	; 0x1fde <__mulsf3_pse+0x7a>
    1fcc:	ee 0f       	add	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	66 1f       	adc	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	91 50       	subi	r25, 0x01	; 1
    1fda:	50 40       	sbci	r21, 0x00	; 0
    1fdc:	a9 f7       	brne	.-22     	; 0x1fc8 <__mulsf3_pse+0x64>
    1fde:	9e 3f       	cpi	r25, 0xFE	; 254
    1fe0:	51 05       	cpc	r21, r1
    1fe2:	70 f0       	brcs	.+28     	; 0x2000 <__mulsf3_pse+0x9c>
    1fe4:	5c cf       	rjmp	.-328    	; 0x1e9e <__fp_inf>
    1fe6:	a6 cf       	rjmp	.-180    	; 0x1f34 <__fp_szero>
    1fe8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fea:	ec f3       	brlt	.-6      	; 0x1fe6 <__mulsf3_pse+0x82>
    1fec:	98 3e       	cpi	r25, 0xE8	; 232
    1fee:	dc f3       	brlt	.-10     	; 0x1fe6 <__mulsf3_pse+0x82>
    1ff0:	86 95       	lsr	r24
    1ff2:	77 95       	ror	r23
    1ff4:	67 95       	ror	r22
    1ff6:	b7 95       	ror	r27
    1ff8:	f7 95       	ror	r31
    1ffa:	e7 95       	ror	r30
    1ffc:	9f 5f       	subi	r25, 0xFF	; 255
    1ffe:	c1 f7       	brne	.-16     	; 0x1ff0 <__mulsf3_pse+0x8c>
    2000:	fe 2b       	or	r31, r30
    2002:	88 0f       	add	r24, r24
    2004:	91 1d       	adc	r25, r1
    2006:	96 95       	lsr	r25
    2008:	87 95       	ror	r24
    200a:	97 f9       	bld	r25, 7
    200c:	08 95       	ret

0000200e <__tablejump2__>:
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	00 24       	eor	r0, r0
    2014:	00 1c       	adc	r0, r0
    2016:	0b be       	out	0x3b, r0	; 59
    2018:	07 90       	elpm	r0, Z+
    201a:	f6 91       	elpm	r31, Z
    201c:	e0 2d       	mov	r30, r0
    201e:	09 94       	ijmp

00002020 <printf>:
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	ae 01       	movw	r20, r28
    202a:	4b 5f       	subi	r20, 0xFB	; 251
    202c:	5f 4f       	sbci	r21, 0xFF	; 255
    202e:	fa 01       	movw	r30, r20
    2030:	61 91       	ld	r22, Z+
    2032:	71 91       	ld	r23, Z+
    2034:	af 01       	movw	r20, r30
    2036:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__iob+0x2>
    203a:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__iob+0x3>
    203e:	38 d0       	rcall	.+112    	; 0x20b0 <vfprintf>
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	08 95       	ret

00002046 <putchar>:
    2046:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <__iob+0x2>
    204a:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <__iob+0x3>
    204e:	43 c2       	rjmp	.+1158   	; 0x24d6 <fputc>

00002050 <puts>:
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <__iob+0x2>
    205c:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <__iob+0x3>
    2060:	23 81       	ldd	r18, Z+3	; 0x03
    2062:	21 ff       	sbrs	r18, 1
    2064:	1b c0       	rjmp	.+54     	; 0x209c <puts+0x4c>
    2066:	8c 01       	movw	r16, r24
    2068:	d0 e0       	ldi	r29, 0x00	; 0
    206a:	c0 e0       	ldi	r28, 0x00	; 0
    206c:	f8 01       	movw	r30, r16
    206e:	81 91       	ld	r24, Z+
    2070:	8f 01       	movw	r16, r30
    2072:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <__iob+0x2>
    2076:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <__iob+0x3>
    207a:	db 01       	movw	r26, r22
    207c:	18 96       	adiw	r26, 0x08	; 8
    207e:	ed 91       	ld	r30, X+
    2080:	fc 91       	ld	r31, X
    2082:	19 97       	sbiw	r26, 0x09	; 9
    2084:	88 23       	and	r24, r24
    2086:	31 f0       	breq	.+12     	; 0x2094 <puts+0x44>
    2088:	09 95       	icall
    208a:	89 2b       	or	r24, r25
    208c:	79 f3       	breq	.-34     	; 0x206c <puts+0x1c>
    208e:	df ef       	ldi	r29, 0xFF	; 255
    2090:	cf ef       	ldi	r28, 0xFF	; 255
    2092:	ec cf       	rjmp	.-40     	; 0x206c <puts+0x1c>
    2094:	8a e0       	ldi	r24, 0x0A	; 10
    2096:	09 95       	icall
    2098:	89 2b       	or	r24, r25
    209a:	19 f0       	breq	.+6      	; 0x20a2 <puts+0x52>
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	9f ef       	ldi	r25, 0xFF	; 255
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <puts+0x56>
    20a2:	8d 2f       	mov	r24, r29
    20a4:	9c 2f       	mov	r25, r28
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	08 95       	ret

000020b0 <vfprintf>:
    20b0:	2f 92       	push	r2
    20b2:	3f 92       	push	r3
    20b4:	4f 92       	push	r4
    20b6:	5f 92       	push	r5
    20b8:	6f 92       	push	r6
    20ba:	7f 92       	push	r7
    20bc:	8f 92       	push	r8
    20be:	9f 92       	push	r9
    20c0:	af 92       	push	r10
    20c2:	bf 92       	push	r11
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	2b 97       	sbiw	r28, 0x0b	; 11
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	6c 01       	movw	r12, r24
    20e6:	7b 01       	movw	r14, r22
    20e8:	8a 01       	movw	r16, r20
    20ea:	fc 01       	movw	r30, r24
    20ec:	17 82       	std	Z+7, r1	; 0x07
    20ee:	16 82       	std	Z+6, r1	; 0x06
    20f0:	83 81       	ldd	r24, Z+3	; 0x03
    20f2:	81 ff       	sbrs	r24, 1
    20f4:	bf c1       	rjmp	.+894    	; 0x2474 <vfprintf+0x3c4>
    20f6:	ce 01       	movw	r24, r28
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	3c 01       	movw	r6, r24
    20fc:	f6 01       	movw	r30, r12
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	f7 01       	movw	r30, r14
    2102:	93 fd       	sbrc	r25, 3
    2104:	85 91       	lpm	r24, Z+
    2106:	93 ff       	sbrs	r25, 3
    2108:	81 91       	ld	r24, Z+
    210a:	7f 01       	movw	r14, r30
    210c:	88 23       	and	r24, r24
    210e:	09 f4       	brne	.+2      	; 0x2112 <vfprintf+0x62>
    2110:	ad c1       	rjmp	.+858    	; 0x246c <vfprintf+0x3bc>
    2112:	85 32       	cpi	r24, 0x25	; 37
    2114:	39 f4       	brne	.+14     	; 0x2124 <vfprintf+0x74>
    2116:	93 fd       	sbrc	r25, 3
    2118:	85 91       	lpm	r24, Z+
    211a:	93 ff       	sbrs	r25, 3
    211c:	81 91       	ld	r24, Z+
    211e:	7f 01       	movw	r14, r30
    2120:	85 32       	cpi	r24, 0x25	; 37
    2122:	21 f4       	brne	.+8      	; 0x212c <vfprintf+0x7c>
    2124:	b6 01       	movw	r22, r12
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	d6 d1       	rcall	.+940    	; 0x24d6 <fputc>
    212a:	e8 cf       	rjmp	.-48     	; 0x20fc <vfprintf+0x4c>
    212c:	91 2c       	mov	r9, r1
    212e:	21 2c       	mov	r2, r1
    2130:	31 2c       	mov	r3, r1
    2132:	ff e1       	ldi	r31, 0x1F	; 31
    2134:	f3 15       	cp	r31, r3
    2136:	d8 f0       	brcs	.+54     	; 0x216e <vfprintf+0xbe>
    2138:	8b 32       	cpi	r24, 0x2B	; 43
    213a:	79 f0       	breq	.+30     	; 0x215a <vfprintf+0xaa>
    213c:	38 f4       	brcc	.+14     	; 0x214c <vfprintf+0x9c>
    213e:	80 32       	cpi	r24, 0x20	; 32
    2140:	79 f0       	breq	.+30     	; 0x2160 <vfprintf+0xb0>
    2142:	83 32       	cpi	r24, 0x23	; 35
    2144:	a1 f4       	brne	.+40     	; 0x216e <vfprintf+0xbe>
    2146:	23 2d       	mov	r18, r3
    2148:	20 61       	ori	r18, 0x10	; 16
    214a:	1d c0       	rjmp	.+58     	; 0x2186 <vfprintf+0xd6>
    214c:	8d 32       	cpi	r24, 0x2D	; 45
    214e:	61 f0       	breq	.+24     	; 0x2168 <vfprintf+0xb8>
    2150:	80 33       	cpi	r24, 0x30	; 48
    2152:	69 f4       	brne	.+26     	; 0x216e <vfprintf+0xbe>
    2154:	23 2d       	mov	r18, r3
    2156:	21 60       	ori	r18, 0x01	; 1
    2158:	16 c0       	rjmp	.+44     	; 0x2186 <vfprintf+0xd6>
    215a:	83 2d       	mov	r24, r3
    215c:	82 60       	ori	r24, 0x02	; 2
    215e:	38 2e       	mov	r3, r24
    2160:	e3 2d       	mov	r30, r3
    2162:	e4 60       	ori	r30, 0x04	; 4
    2164:	3e 2e       	mov	r3, r30
    2166:	2a c0       	rjmp	.+84     	; 0x21bc <vfprintf+0x10c>
    2168:	f3 2d       	mov	r31, r3
    216a:	f8 60       	ori	r31, 0x08	; 8
    216c:	1d c0       	rjmp	.+58     	; 0x21a8 <vfprintf+0xf8>
    216e:	37 fc       	sbrc	r3, 7
    2170:	2d c0       	rjmp	.+90     	; 0x21cc <vfprintf+0x11c>
    2172:	20 ed       	ldi	r18, 0xD0	; 208
    2174:	28 0f       	add	r18, r24
    2176:	2a 30       	cpi	r18, 0x0A	; 10
    2178:	40 f0       	brcs	.+16     	; 0x218a <vfprintf+0xda>
    217a:	8e 32       	cpi	r24, 0x2E	; 46
    217c:	b9 f4       	brne	.+46     	; 0x21ac <vfprintf+0xfc>
    217e:	36 fc       	sbrc	r3, 6
    2180:	75 c1       	rjmp	.+746    	; 0x246c <vfprintf+0x3bc>
    2182:	23 2d       	mov	r18, r3
    2184:	20 64       	ori	r18, 0x40	; 64
    2186:	32 2e       	mov	r3, r18
    2188:	19 c0       	rjmp	.+50     	; 0x21bc <vfprintf+0x10c>
    218a:	36 fe       	sbrs	r3, 6
    218c:	06 c0       	rjmp	.+12     	; 0x219a <vfprintf+0xea>
    218e:	8a e0       	ldi	r24, 0x0A	; 10
    2190:	98 9e       	mul	r9, r24
    2192:	20 0d       	add	r18, r0
    2194:	11 24       	eor	r1, r1
    2196:	92 2e       	mov	r9, r18
    2198:	11 c0       	rjmp	.+34     	; 0x21bc <vfprintf+0x10c>
    219a:	ea e0       	ldi	r30, 0x0A	; 10
    219c:	2e 9e       	mul	r2, r30
    219e:	20 0d       	add	r18, r0
    21a0:	11 24       	eor	r1, r1
    21a2:	22 2e       	mov	r2, r18
    21a4:	f3 2d       	mov	r31, r3
    21a6:	f0 62       	ori	r31, 0x20	; 32
    21a8:	3f 2e       	mov	r3, r31
    21aa:	08 c0       	rjmp	.+16     	; 0x21bc <vfprintf+0x10c>
    21ac:	8c 36       	cpi	r24, 0x6C	; 108
    21ae:	21 f4       	brne	.+8      	; 0x21b8 <vfprintf+0x108>
    21b0:	83 2d       	mov	r24, r3
    21b2:	80 68       	ori	r24, 0x80	; 128
    21b4:	38 2e       	mov	r3, r24
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <vfprintf+0x10c>
    21b8:	88 36       	cpi	r24, 0x68	; 104
    21ba:	41 f4       	brne	.+16     	; 0x21cc <vfprintf+0x11c>
    21bc:	f7 01       	movw	r30, r14
    21be:	93 fd       	sbrc	r25, 3
    21c0:	85 91       	lpm	r24, Z+
    21c2:	93 ff       	sbrs	r25, 3
    21c4:	81 91       	ld	r24, Z+
    21c6:	7f 01       	movw	r14, r30
    21c8:	81 11       	cpse	r24, r1
    21ca:	b3 cf       	rjmp	.-154    	; 0x2132 <vfprintf+0x82>
    21cc:	98 2f       	mov	r25, r24
    21ce:	9f 7d       	andi	r25, 0xDF	; 223
    21d0:	95 54       	subi	r25, 0x45	; 69
    21d2:	93 30       	cpi	r25, 0x03	; 3
    21d4:	28 f4       	brcc	.+10     	; 0x21e0 <vfprintf+0x130>
    21d6:	0c 5f       	subi	r16, 0xFC	; 252
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	9f e3       	ldi	r25, 0x3F	; 63
    21dc:	99 83       	std	Y+1, r25	; 0x01
    21de:	0d c0       	rjmp	.+26     	; 0x21fa <vfprintf+0x14a>
    21e0:	83 36       	cpi	r24, 0x63	; 99
    21e2:	31 f0       	breq	.+12     	; 0x21f0 <vfprintf+0x140>
    21e4:	83 37       	cpi	r24, 0x73	; 115
    21e6:	71 f0       	breq	.+28     	; 0x2204 <vfprintf+0x154>
    21e8:	83 35       	cpi	r24, 0x53	; 83
    21ea:	09 f0       	breq	.+2      	; 0x21ee <vfprintf+0x13e>
    21ec:	55 c0       	rjmp	.+170    	; 0x2298 <vfprintf+0x1e8>
    21ee:	20 c0       	rjmp	.+64     	; 0x2230 <vfprintf+0x180>
    21f0:	f8 01       	movw	r30, r16
    21f2:	80 81       	ld	r24, Z
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	0e 5f       	subi	r16, 0xFE	; 254
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	88 24       	eor	r8, r8
    21fc:	83 94       	inc	r8
    21fe:	91 2c       	mov	r9, r1
    2200:	53 01       	movw	r10, r6
    2202:	12 c0       	rjmp	.+36     	; 0x2228 <vfprintf+0x178>
    2204:	28 01       	movw	r4, r16
    2206:	f2 e0       	ldi	r31, 0x02	; 2
    2208:	4f 0e       	add	r4, r31
    220a:	51 1c       	adc	r5, r1
    220c:	f8 01       	movw	r30, r16
    220e:	a0 80       	ld	r10, Z
    2210:	b1 80       	ldd	r11, Z+1	; 0x01
    2212:	36 fe       	sbrs	r3, 6
    2214:	03 c0       	rjmp	.+6      	; 0x221c <vfprintf+0x16c>
    2216:	69 2d       	mov	r22, r9
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <vfprintf+0x170>
    221c:	6f ef       	ldi	r22, 0xFF	; 255
    221e:	7f ef       	ldi	r23, 0xFF	; 255
    2220:	c5 01       	movw	r24, r10
    2222:	4e d1       	rcall	.+668    	; 0x24c0 <strnlen>
    2224:	4c 01       	movw	r8, r24
    2226:	82 01       	movw	r16, r4
    2228:	f3 2d       	mov	r31, r3
    222a:	ff 77       	andi	r31, 0x7F	; 127
    222c:	3f 2e       	mov	r3, r31
    222e:	15 c0       	rjmp	.+42     	; 0x225a <vfprintf+0x1aa>
    2230:	28 01       	movw	r4, r16
    2232:	22 e0       	ldi	r18, 0x02	; 2
    2234:	42 0e       	add	r4, r18
    2236:	51 1c       	adc	r5, r1
    2238:	f8 01       	movw	r30, r16
    223a:	a0 80       	ld	r10, Z
    223c:	b1 80       	ldd	r11, Z+1	; 0x01
    223e:	36 fe       	sbrs	r3, 6
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <vfprintf+0x198>
    2242:	69 2d       	mov	r22, r9
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	02 c0       	rjmp	.+4      	; 0x224c <vfprintf+0x19c>
    2248:	6f ef       	ldi	r22, 0xFF	; 255
    224a:	7f ef       	ldi	r23, 0xFF	; 255
    224c:	c5 01       	movw	r24, r10
    224e:	2d d1       	rcall	.+602    	; 0x24aa <strnlen_P>
    2250:	4c 01       	movw	r8, r24
    2252:	f3 2d       	mov	r31, r3
    2254:	f0 68       	ori	r31, 0x80	; 128
    2256:	3f 2e       	mov	r3, r31
    2258:	82 01       	movw	r16, r4
    225a:	33 fc       	sbrc	r3, 3
    225c:	19 c0       	rjmp	.+50     	; 0x2290 <vfprintf+0x1e0>
    225e:	82 2d       	mov	r24, r2
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	88 16       	cp	r8, r24
    2264:	99 06       	cpc	r9, r25
    2266:	a0 f4       	brcc	.+40     	; 0x2290 <vfprintf+0x1e0>
    2268:	b6 01       	movw	r22, r12
    226a:	80 e2       	ldi	r24, 0x20	; 32
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	33 d1       	rcall	.+614    	; 0x24d6 <fputc>
    2270:	2a 94       	dec	r2
    2272:	f5 cf       	rjmp	.-22     	; 0x225e <vfprintf+0x1ae>
    2274:	f5 01       	movw	r30, r10
    2276:	37 fc       	sbrc	r3, 7
    2278:	85 91       	lpm	r24, Z+
    227a:	37 fe       	sbrs	r3, 7
    227c:	81 91       	ld	r24, Z+
    227e:	5f 01       	movw	r10, r30
    2280:	b6 01       	movw	r22, r12
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	28 d1       	rcall	.+592    	; 0x24d6 <fputc>
    2286:	21 10       	cpse	r2, r1
    2288:	2a 94       	dec	r2
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	82 1a       	sub	r8, r18
    228e:	91 08       	sbc	r9, r1
    2290:	81 14       	cp	r8, r1
    2292:	91 04       	cpc	r9, r1
    2294:	79 f7       	brne	.-34     	; 0x2274 <vfprintf+0x1c4>
    2296:	e1 c0       	rjmp	.+450    	; 0x245a <vfprintf+0x3aa>
    2298:	84 36       	cpi	r24, 0x64	; 100
    229a:	11 f0       	breq	.+4      	; 0x22a0 <vfprintf+0x1f0>
    229c:	89 36       	cpi	r24, 0x69	; 105
    229e:	39 f5       	brne	.+78     	; 0x22ee <vfprintf+0x23e>
    22a0:	f8 01       	movw	r30, r16
    22a2:	37 fe       	sbrs	r3, 7
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <vfprintf+0x204>
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	0c 5f       	subi	r16, 0xFC	; 252
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	08 c0       	rjmp	.+16     	; 0x22c4 <vfprintf+0x214>
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	07 2e       	mov	r0, r23
    22ba:	00 0c       	add	r0, r0
    22bc:	88 0b       	sbc	r24, r24
    22be:	99 0b       	sbc	r25, r25
    22c0:	0e 5f       	subi	r16, 0xFE	; 254
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	f3 2d       	mov	r31, r3
    22c6:	ff 76       	andi	r31, 0x6F	; 111
    22c8:	3f 2e       	mov	r3, r31
    22ca:	97 ff       	sbrs	r25, 7
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <vfprintf+0x230>
    22ce:	90 95       	com	r25
    22d0:	80 95       	com	r24
    22d2:	70 95       	com	r23
    22d4:	61 95       	neg	r22
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	8f 4f       	sbci	r24, 0xFF	; 255
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	f0 68       	ori	r31, 0x80	; 128
    22de:	3f 2e       	mov	r3, r31
    22e0:	2a e0       	ldi	r18, 0x0A	; 10
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	a3 01       	movw	r20, r6
    22e6:	33 d1       	rcall	.+614    	; 0x254e <__ultoa_invert>
    22e8:	88 2e       	mov	r8, r24
    22ea:	86 18       	sub	r8, r6
    22ec:	44 c0       	rjmp	.+136    	; 0x2376 <vfprintf+0x2c6>
    22ee:	85 37       	cpi	r24, 0x75	; 117
    22f0:	31 f4       	brne	.+12     	; 0x22fe <vfprintf+0x24e>
    22f2:	23 2d       	mov	r18, r3
    22f4:	2f 7e       	andi	r18, 0xEF	; 239
    22f6:	b2 2e       	mov	r11, r18
    22f8:	2a e0       	ldi	r18, 0x0A	; 10
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	25 c0       	rjmp	.+74     	; 0x2348 <vfprintf+0x298>
    22fe:	93 2d       	mov	r25, r3
    2300:	99 7f       	andi	r25, 0xF9	; 249
    2302:	b9 2e       	mov	r11, r25
    2304:	8f 36       	cpi	r24, 0x6F	; 111
    2306:	c1 f0       	breq	.+48     	; 0x2338 <vfprintf+0x288>
    2308:	18 f4       	brcc	.+6      	; 0x2310 <vfprintf+0x260>
    230a:	88 35       	cpi	r24, 0x58	; 88
    230c:	79 f0       	breq	.+30     	; 0x232c <vfprintf+0x27c>
    230e:	ae c0       	rjmp	.+348    	; 0x246c <vfprintf+0x3bc>
    2310:	80 37       	cpi	r24, 0x70	; 112
    2312:	19 f0       	breq	.+6      	; 0x231a <vfprintf+0x26a>
    2314:	88 37       	cpi	r24, 0x78	; 120
    2316:	21 f0       	breq	.+8      	; 0x2320 <vfprintf+0x270>
    2318:	a9 c0       	rjmp	.+338    	; 0x246c <vfprintf+0x3bc>
    231a:	e9 2f       	mov	r30, r25
    231c:	e0 61       	ori	r30, 0x10	; 16
    231e:	be 2e       	mov	r11, r30
    2320:	b4 fe       	sbrs	r11, 4
    2322:	0d c0       	rjmp	.+26     	; 0x233e <vfprintf+0x28e>
    2324:	fb 2d       	mov	r31, r11
    2326:	f4 60       	ori	r31, 0x04	; 4
    2328:	bf 2e       	mov	r11, r31
    232a:	09 c0       	rjmp	.+18     	; 0x233e <vfprintf+0x28e>
    232c:	34 fe       	sbrs	r3, 4
    232e:	0a c0       	rjmp	.+20     	; 0x2344 <vfprintf+0x294>
    2330:	29 2f       	mov	r18, r25
    2332:	26 60       	ori	r18, 0x06	; 6
    2334:	b2 2e       	mov	r11, r18
    2336:	06 c0       	rjmp	.+12     	; 0x2344 <vfprintf+0x294>
    2338:	28 e0       	ldi	r18, 0x08	; 8
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	05 c0       	rjmp	.+10     	; 0x2348 <vfprintf+0x298>
    233e:	20 e1       	ldi	r18, 0x10	; 16
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <vfprintf+0x298>
    2344:	20 e1       	ldi	r18, 0x10	; 16
    2346:	32 e0       	ldi	r19, 0x02	; 2
    2348:	f8 01       	movw	r30, r16
    234a:	b7 fe       	sbrs	r11, 7
    234c:	07 c0       	rjmp	.+14     	; 0x235c <vfprintf+0x2ac>
    234e:	60 81       	ld	r22, Z
    2350:	71 81       	ldd	r23, Z+1	; 0x01
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	93 81       	ldd	r25, Z+3	; 0x03
    2356:	0c 5f       	subi	r16, 0xFC	; 252
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	06 c0       	rjmp	.+12     	; 0x2368 <vfprintf+0x2b8>
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 5f       	subi	r16, 0xFE	; 254
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	a3 01       	movw	r20, r6
    236a:	f1 d0       	rcall	.+482    	; 0x254e <__ultoa_invert>
    236c:	88 2e       	mov	r8, r24
    236e:	86 18       	sub	r8, r6
    2370:	fb 2d       	mov	r31, r11
    2372:	ff 77       	andi	r31, 0x7F	; 127
    2374:	3f 2e       	mov	r3, r31
    2376:	36 fe       	sbrs	r3, 6
    2378:	0d c0       	rjmp	.+26     	; 0x2394 <vfprintf+0x2e4>
    237a:	23 2d       	mov	r18, r3
    237c:	2e 7f       	andi	r18, 0xFE	; 254
    237e:	a2 2e       	mov	r10, r18
    2380:	89 14       	cp	r8, r9
    2382:	58 f4       	brcc	.+22     	; 0x239a <vfprintf+0x2ea>
    2384:	34 fe       	sbrs	r3, 4
    2386:	0b c0       	rjmp	.+22     	; 0x239e <vfprintf+0x2ee>
    2388:	32 fc       	sbrc	r3, 2
    238a:	09 c0       	rjmp	.+18     	; 0x239e <vfprintf+0x2ee>
    238c:	83 2d       	mov	r24, r3
    238e:	8e 7e       	andi	r24, 0xEE	; 238
    2390:	a8 2e       	mov	r10, r24
    2392:	05 c0       	rjmp	.+10     	; 0x239e <vfprintf+0x2ee>
    2394:	b8 2c       	mov	r11, r8
    2396:	a3 2c       	mov	r10, r3
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <vfprintf+0x2f0>
    239a:	b8 2c       	mov	r11, r8
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <vfprintf+0x2f0>
    239e:	b9 2c       	mov	r11, r9
    23a0:	a4 fe       	sbrs	r10, 4
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <vfprintf+0x312>
    23a4:	fe 01       	movw	r30, r28
    23a6:	e8 0d       	add	r30, r8
    23a8:	f1 1d       	adc	r31, r1
    23aa:	80 81       	ld	r24, Z
    23ac:	80 33       	cpi	r24, 0x30	; 48
    23ae:	21 f4       	brne	.+8      	; 0x23b8 <vfprintf+0x308>
    23b0:	9a 2d       	mov	r25, r10
    23b2:	99 7e       	andi	r25, 0xE9	; 233
    23b4:	a9 2e       	mov	r10, r25
    23b6:	09 c0       	rjmp	.+18     	; 0x23ca <vfprintf+0x31a>
    23b8:	a2 fe       	sbrs	r10, 2
    23ba:	06 c0       	rjmp	.+12     	; 0x23c8 <vfprintf+0x318>
    23bc:	b3 94       	inc	r11
    23be:	b3 94       	inc	r11
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <vfprintf+0x31a>
    23c2:	8a 2d       	mov	r24, r10
    23c4:	86 78       	andi	r24, 0x86	; 134
    23c6:	09 f0       	breq	.+2      	; 0x23ca <vfprintf+0x31a>
    23c8:	b3 94       	inc	r11
    23ca:	a3 fc       	sbrc	r10, 3
    23cc:	10 c0       	rjmp	.+32     	; 0x23ee <vfprintf+0x33e>
    23ce:	a0 fe       	sbrs	r10, 0
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <vfprintf+0x32e>
    23d2:	b2 14       	cp	r11, r2
    23d4:	80 f4       	brcc	.+32     	; 0x23f6 <vfprintf+0x346>
    23d6:	28 0c       	add	r2, r8
    23d8:	92 2c       	mov	r9, r2
    23da:	9b 18       	sub	r9, r11
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <vfprintf+0x348>
    23de:	b2 14       	cp	r11, r2
    23e0:	58 f4       	brcc	.+22     	; 0x23f8 <vfprintf+0x348>
    23e2:	b6 01       	movw	r22, r12
    23e4:	80 e2       	ldi	r24, 0x20	; 32
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	76 d0       	rcall	.+236    	; 0x24d6 <fputc>
    23ea:	b3 94       	inc	r11
    23ec:	f8 cf       	rjmp	.-16     	; 0x23de <vfprintf+0x32e>
    23ee:	b2 14       	cp	r11, r2
    23f0:	18 f4       	brcc	.+6      	; 0x23f8 <vfprintf+0x348>
    23f2:	2b 18       	sub	r2, r11
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <vfprintf+0x34a>
    23f6:	98 2c       	mov	r9, r8
    23f8:	21 2c       	mov	r2, r1
    23fa:	a4 fe       	sbrs	r10, 4
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <vfprintf+0x36c>
    23fe:	b6 01       	movw	r22, r12
    2400:	80 e3       	ldi	r24, 0x30	; 48
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	68 d0       	rcall	.+208    	; 0x24d6 <fputc>
    2406:	a2 fe       	sbrs	r10, 2
    2408:	16 c0       	rjmp	.+44     	; 0x2436 <vfprintf+0x386>
    240a:	a1 fc       	sbrc	r10, 1
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <vfprintf+0x364>
    240e:	88 e7       	ldi	r24, 0x78	; 120
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <vfprintf+0x368>
    2414:	88 e5       	ldi	r24, 0x58	; 88
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	b6 01       	movw	r22, r12
    241a:	0c c0       	rjmp	.+24     	; 0x2434 <vfprintf+0x384>
    241c:	8a 2d       	mov	r24, r10
    241e:	86 78       	andi	r24, 0x86	; 134
    2420:	51 f0       	breq	.+20     	; 0x2436 <vfprintf+0x386>
    2422:	a1 fe       	sbrs	r10, 1
    2424:	02 c0       	rjmp	.+4      	; 0x242a <vfprintf+0x37a>
    2426:	8b e2       	ldi	r24, 0x2B	; 43
    2428:	01 c0       	rjmp	.+2      	; 0x242c <vfprintf+0x37c>
    242a:	80 e2       	ldi	r24, 0x20	; 32
    242c:	a7 fc       	sbrc	r10, 7
    242e:	8d e2       	ldi	r24, 0x2D	; 45
    2430:	b6 01       	movw	r22, r12
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	50 d0       	rcall	.+160    	; 0x24d6 <fputc>
    2436:	89 14       	cp	r8, r9
    2438:	30 f4       	brcc	.+12     	; 0x2446 <vfprintf+0x396>
    243a:	b6 01       	movw	r22, r12
    243c:	80 e3       	ldi	r24, 0x30	; 48
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	4a d0       	rcall	.+148    	; 0x24d6 <fputc>
    2442:	9a 94       	dec	r9
    2444:	f8 cf       	rjmp	.-16     	; 0x2436 <vfprintf+0x386>
    2446:	8a 94       	dec	r8
    2448:	f3 01       	movw	r30, r6
    244a:	e8 0d       	add	r30, r8
    244c:	f1 1d       	adc	r31, r1
    244e:	80 81       	ld	r24, Z
    2450:	b6 01       	movw	r22, r12
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	40 d0       	rcall	.+128    	; 0x24d6 <fputc>
    2456:	81 10       	cpse	r8, r1
    2458:	f6 cf       	rjmp	.-20     	; 0x2446 <vfprintf+0x396>
    245a:	22 20       	and	r2, r2
    245c:	09 f4       	brne	.+2      	; 0x2460 <vfprintf+0x3b0>
    245e:	4e ce       	rjmp	.-868    	; 0x20fc <vfprintf+0x4c>
    2460:	b6 01       	movw	r22, r12
    2462:	80 e2       	ldi	r24, 0x20	; 32
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	37 d0       	rcall	.+110    	; 0x24d6 <fputc>
    2468:	2a 94       	dec	r2
    246a:	f7 cf       	rjmp	.-18     	; 0x245a <vfprintf+0x3aa>
    246c:	f6 01       	movw	r30, r12
    246e:	86 81       	ldd	r24, Z+6	; 0x06
    2470:	97 81       	ldd	r25, Z+7	; 0x07
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <vfprintf+0x3c8>
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	9f ef       	ldi	r25, 0xFF	; 255
    2478:	2b 96       	adiw	r28, 0x0b	; 11
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	df 90       	pop	r13
    2492:	cf 90       	pop	r12
    2494:	bf 90       	pop	r11
    2496:	af 90       	pop	r10
    2498:	9f 90       	pop	r9
    249a:	8f 90       	pop	r8
    249c:	7f 90       	pop	r7
    249e:	6f 90       	pop	r6
    24a0:	5f 90       	pop	r5
    24a2:	4f 90       	pop	r4
    24a4:	3f 90       	pop	r3
    24a6:	2f 90       	pop	r2
    24a8:	08 95       	ret

000024aa <strnlen_P>:
    24aa:	fc 01       	movw	r30, r24
    24ac:	05 90       	lpm	r0, Z+
    24ae:	61 50       	subi	r22, 0x01	; 1
    24b0:	70 40       	sbci	r23, 0x00	; 0
    24b2:	01 10       	cpse	r0, r1
    24b4:	d8 f7       	brcc	.-10     	; 0x24ac <strnlen_P+0x2>
    24b6:	80 95       	com	r24
    24b8:	90 95       	com	r25
    24ba:	8e 0f       	add	r24, r30
    24bc:	9f 1f       	adc	r25, r31
    24be:	08 95       	ret

000024c0 <strnlen>:
    24c0:	fc 01       	movw	r30, r24
    24c2:	61 50       	subi	r22, 0x01	; 1
    24c4:	70 40       	sbci	r23, 0x00	; 0
    24c6:	01 90       	ld	r0, Z+
    24c8:	01 10       	cpse	r0, r1
    24ca:	d8 f7       	brcc	.-10     	; 0x24c2 <strnlen+0x2>
    24cc:	80 95       	com	r24
    24ce:	90 95       	com	r25
    24d0:	8e 0f       	add	r24, r30
    24d2:	9f 1f       	adc	r25, r31
    24d4:	08 95       	ret

000024d6 <fputc>:
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	fb 01       	movw	r30, r22
    24e0:	23 81       	ldd	r18, Z+3	; 0x03
    24e2:	21 fd       	sbrc	r18, 1
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <fputc+0x16>
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	9f ef       	ldi	r25, 0xFF	; 255
    24ea:	2c c0       	rjmp	.+88     	; 0x2544 <fputc+0x6e>
    24ec:	22 ff       	sbrs	r18, 2
    24ee:	16 c0       	rjmp	.+44     	; 0x251c <fputc+0x46>
    24f0:	46 81       	ldd	r20, Z+6	; 0x06
    24f2:	57 81       	ldd	r21, Z+7	; 0x07
    24f4:	24 81       	ldd	r18, Z+4	; 0x04
    24f6:	35 81       	ldd	r19, Z+5	; 0x05
    24f8:	42 17       	cp	r20, r18
    24fa:	53 07       	cpc	r21, r19
    24fc:	44 f4       	brge	.+16     	; 0x250e <fputc+0x38>
    24fe:	a0 81       	ld	r26, Z
    2500:	b1 81       	ldd	r27, Z+1	; 0x01
    2502:	9d 01       	movw	r18, r26
    2504:	2f 5f       	subi	r18, 0xFF	; 255
    2506:	3f 4f       	sbci	r19, 0xFF	; 255
    2508:	31 83       	std	Z+1, r19	; 0x01
    250a:	20 83       	st	Z, r18
    250c:	8c 93       	st	X, r24
    250e:	26 81       	ldd	r18, Z+6	; 0x06
    2510:	37 81       	ldd	r19, Z+7	; 0x07
    2512:	2f 5f       	subi	r18, 0xFF	; 255
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	37 83       	std	Z+7, r19	; 0x07
    2518:	26 83       	std	Z+6, r18	; 0x06
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <fputc+0x6e>
    251c:	8b 01       	movw	r16, r22
    251e:	ec 01       	movw	r28, r24
    2520:	fb 01       	movw	r30, r22
    2522:	00 84       	ldd	r0, Z+8	; 0x08
    2524:	f1 85       	ldd	r31, Z+9	; 0x09
    2526:	e0 2d       	mov	r30, r0
    2528:	09 95       	icall
    252a:	89 2b       	or	r24, r25
    252c:	e1 f6       	brne	.-72     	; 0x24e6 <fputc+0x10>
    252e:	d8 01       	movw	r26, r16
    2530:	16 96       	adiw	r26, 0x06	; 6
    2532:	8d 91       	ld	r24, X+
    2534:	9c 91       	ld	r25, X
    2536:	17 97       	sbiw	r26, 0x07	; 7
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	17 96       	adiw	r26, 0x07	; 7
    253c:	9c 93       	st	X, r25
    253e:	8e 93       	st	-X, r24
    2540:	16 97       	sbiw	r26, 0x06	; 6
    2542:	ce 01       	movw	r24, r28
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	08 95       	ret

0000254e <__ultoa_invert>:
    254e:	fa 01       	movw	r30, r20
    2550:	aa 27       	eor	r26, r26
    2552:	28 30       	cpi	r18, 0x08	; 8
    2554:	51 f1       	breq	.+84     	; 0x25aa <__ultoa_invert+0x5c>
    2556:	20 31       	cpi	r18, 0x10	; 16
    2558:	81 f1       	breq	.+96     	; 0x25ba <__ultoa_invert+0x6c>
    255a:	e8 94       	clt
    255c:	6f 93       	push	r22
    255e:	6e 7f       	andi	r22, 0xFE	; 254
    2560:	6e 5f       	subi	r22, 0xFE	; 254
    2562:	7f 4f       	sbci	r23, 0xFF	; 255
    2564:	8f 4f       	sbci	r24, 0xFF	; 255
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	af 4f       	sbci	r26, 0xFF	; 255
    256a:	b1 e0       	ldi	r27, 0x01	; 1
    256c:	3e d0       	rcall	.+124    	; 0x25ea <__ultoa_invert+0x9c>
    256e:	b4 e0       	ldi	r27, 0x04	; 4
    2570:	3c d0       	rcall	.+120    	; 0x25ea <__ultoa_invert+0x9c>
    2572:	67 0f       	add	r22, r23
    2574:	78 1f       	adc	r23, r24
    2576:	89 1f       	adc	r24, r25
    2578:	9a 1f       	adc	r25, r26
    257a:	a1 1d       	adc	r26, r1
    257c:	68 0f       	add	r22, r24
    257e:	79 1f       	adc	r23, r25
    2580:	8a 1f       	adc	r24, r26
    2582:	91 1d       	adc	r25, r1
    2584:	a1 1d       	adc	r26, r1
    2586:	6a 0f       	add	r22, r26
    2588:	71 1d       	adc	r23, r1
    258a:	81 1d       	adc	r24, r1
    258c:	91 1d       	adc	r25, r1
    258e:	a1 1d       	adc	r26, r1
    2590:	20 d0       	rcall	.+64     	; 0x25d2 <__ultoa_invert+0x84>
    2592:	09 f4       	brne	.+2      	; 0x2596 <__ultoa_invert+0x48>
    2594:	68 94       	set
    2596:	3f 91       	pop	r19
    2598:	2a e0       	ldi	r18, 0x0A	; 10
    259a:	26 9f       	mul	r18, r22
    259c:	11 24       	eor	r1, r1
    259e:	30 19       	sub	r19, r0
    25a0:	30 5d       	subi	r19, 0xD0	; 208
    25a2:	31 93       	st	Z+, r19
    25a4:	de f6       	brtc	.-74     	; 0x255c <__ultoa_invert+0xe>
    25a6:	cf 01       	movw	r24, r30
    25a8:	08 95       	ret
    25aa:	46 2f       	mov	r20, r22
    25ac:	47 70       	andi	r20, 0x07	; 7
    25ae:	40 5d       	subi	r20, 0xD0	; 208
    25b0:	41 93       	st	Z+, r20
    25b2:	b3 e0       	ldi	r27, 0x03	; 3
    25b4:	0f d0       	rcall	.+30     	; 0x25d4 <__ultoa_invert+0x86>
    25b6:	c9 f7       	brne	.-14     	; 0x25aa <__ultoa_invert+0x5c>
    25b8:	f6 cf       	rjmp	.-20     	; 0x25a6 <__ultoa_invert+0x58>
    25ba:	46 2f       	mov	r20, r22
    25bc:	4f 70       	andi	r20, 0x0F	; 15
    25be:	40 5d       	subi	r20, 0xD0	; 208
    25c0:	4a 33       	cpi	r20, 0x3A	; 58
    25c2:	18 f0       	brcs	.+6      	; 0x25ca <__ultoa_invert+0x7c>
    25c4:	49 5d       	subi	r20, 0xD9	; 217
    25c6:	31 fd       	sbrc	r19, 1
    25c8:	40 52       	subi	r20, 0x20	; 32
    25ca:	41 93       	st	Z+, r20
    25cc:	02 d0       	rcall	.+4      	; 0x25d2 <__ultoa_invert+0x84>
    25ce:	a9 f7       	brne	.-22     	; 0x25ba <__ultoa_invert+0x6c>
    25d0:	ea cf       	rjmp	.-44     	; 0x25a6 <__ultoa_invert+0x58>
    25d2:	b4 e0       	ldi	r27, 0x04	; 4
    25d4:	a6 95       	lsr	r26
    25d6:	97 95       	ror	r25
    25d8:	87 95       	ror	r24
    25da:	77 95       	ror	r23
    25dc:	67 95       	ror	r22
    25de:	ba 95       	dec	r27
    25e0:	c9 f7       	brne	.-14     	; 0x25d4 <__ultoa_invert+0x86>
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	61 05       	cpc	r22, r1
    25e6:	71 05       	cpc	r23, r1
    25e8:	08 95       	ret
    25ea:	9b 01       	movw	r18, r22
    25ec:	ac 01       	movw	r20, r24
    25ee:	0a 2e       	mov	r0, r26
    25f0:	06 94       	lsr	r0
    25f2:	57 95       	ror	r21
    25f4:	47 95       	ror	r20
    25f6:	37 95       	ror	r19
    25f8:	27 95       	ror	r18
    25fa:	ba 95       	dec	r27
    25fc:	c9 f7       	brne	.-14     	; 0x25f0 <__ultoa_invert+0xa2>
    25fe:	62 0f       	add	r22, r18
    2600:	73 1f       	adc	r23, r19
    2602:	84 1f       	adc	r24, r20
    2604:	95 1f       	adc	r25, r21
    2606:	a0 1d       	adc	r26, r0
    2608:	08 95       	ret

0000260a <_exit>:
    260a:	f8 94       	cli

0000260c <__stop_program>:
    260c:	ff cf       	rjmp	.-2      	; 0x260c <__stop_program>
